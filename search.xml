<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学线移动例会：git</title>
      <link href="/2021/12/09/%E5%AD%A6%E7%BA%BF%E7%A7%BB%E5%8A%A8%E4%BE%8B%E4%BC%9A%EF%BC%9Agit/"/>
      <url>/2021/12/09/%E5%AD%A6%E7%BA%BF%E7%A7%BB%E5%8A%A8%E4%BE%8B%E4%BC%9A%EF%BC%9Agit/</url>
      
        <content type="html"><![CDATA[<p><img src="head.png" alt=""></p><h1>前言：为什么要有git与GitHub&amp;Gitee</h1><h2 id="1-起源">1.起源</h2><p>很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。</p><p>Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？</p><p>事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！</p><p>你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。</p><p>不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统<code>BitKeeper</code>，<code>BitKeeper</code>的东家<code>BitMover</code>公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。</p><p>安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解<code>BitKeeper</code>的协议（这么干的其实也不只他一个），被<code>BitMover</code>公司发现了（监控工作做得不错！），于是<code>BitMover</code>公司怒了，要收回Linux社区的免费使用权。</p><p>Linus可以向<code>BitMover</code>公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：</p><p>Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。</p><p>Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。</p><p>历史就是这么偶然，如果不是当年<code>BitMover</code>公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。</p><h2 id="2-集中式与分布式">2.集中式与分布式</h2><p>Linus一直痛恨的CVS及SVN都是<strong>集中式</strong>的版本控制系统，而Git是<strong>分布式</strong>版本控制系统，集中式和分布式版本控制系统有什么区别呢？</p><p>先说集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。</p><p><img src="https://www.liaoxuefeng.com/files/attachments/918921540355872/l" alt="central-repo"></p><p>集中式版本控制系统最大的毛病就是必须联网才能工作，如果在局域网内还好，带宽够大，速度够快，可如果在互联网上，遇到网速慢的话，可能提交一个10M的文件就需要5分钟，这还不得把人给憋死啊。</p><p>那分布式版本控制系统与集中式版本控制系统有何不同呢？首先，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><p>和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。</p><p>在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</p><p><img src="https://www.liaoxuefeng.com/files/attachments/918921562236160/l" alt="distributed-repo"></p><p>当然，Git的优势不单是不必联网这么简单，后面我们还会看到Git极其强大的分支管理，把SVN等远远抛在了后面。</p><p>CVS作为最早的开源而且免费的集中式版本控制系统，直到现在还有不少人在用。由于CVS自身设计的问题，会造成提交文件不完整，版本库莫名其妙损坏的情况。同样是开源而且免费的SVN修正了CVS的一些稳定性问题，是目前用得最多的集中式版本库控制系统。</p><p>除了免费的外，还有收费的集中式版本控制系统，比如IBM的ClearCase（以前是Rational公司的，被IBM收购了），特点是安装比Windows还大，运行比蜗牛还慢，能用ClearCase的一般是世界500强，他们有个共同的特点是财大气粗，或者人傻钱多。</p><p>微软自己也有一个集中式版本控制系统叫VSS，集成在Visual Studio中。由于其反人类的设计，连微软自己都不好意思用了。</p><p>分布式版本控制系统除了Git以及促使Git诞生的<code>BitKeeper</code>外，还有类似Git的Mercurial和Bazaar等。这些分布式版本控制系统各有特点，但最快、最简单也最流行的依然是Git！</p><h1>安装</h1><p>首先，<a href="https://git-scm.com/downloads">下载安装程序</a>或者使用<a href="https://npm.taobao.org/mirrors/git-for-windows/">国内Windows镜像站</a></p><p>不出意外除了更改安装路径都是next，<a href="https://blog.csdn.net/mukes/article/details/115693833">细节参考此博客</a></p><p><strong>温馨提示：路径中尽量不要有英文名</strong></p><h1>基本概念</h1><h2 id="1-分支">1.分支</h2><p><img src="0.png" alt="分支示例"></p><p><img src="1.png" alt="实际示例-以i山大为例"></p><h3 id="分支是什么">分支是什么</h3><p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。</p><p>如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919021987875136/0" alt="learn-branches"></p><p>分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p><p>现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。（<strong>但其实通常并不这么做</strong>）</p><h3 id="常见分支">常见分支</h3><h4 id="一、主分支master">一、主分支master</h4><p><strong>代码库应该有且只有一个主分支</strong>。所有提供给用户使用的正式版本，都在这个主分支上发布。</p><p><strong>Git主分支的名字，默认叫做Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。</strong></p><h4 id="二、-开发分支Develop">二、 开发分支Develop</h4><p>主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop（或者Dev）。</p><p>这个分支可以用来生成代码的最新隔夜版本（nightly）。如果想正式对外发布，就在Master分支上，对Develop分支进行&quot;合并&quot;（merge）。</p><h4 id="三、临时性分支">三、临时性分支</h4><p>临时性分支主要有三种：</p><ul><li><p>功能分支 （feature）</p></li><li><p>预发布分支 (release)</p></li><li><p>修补bug分支 (fixbug)</p></li></ul><p>这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。</p><p>少用，就不再展开讲</p><h2 id="2-工作区、暂存区、版本库">2.工作区、暂存区、版本库</h2><h3 id="工作区（Working-Directory）">工作区（Working Directory）</h3><p>就是你在电脑里能看到的目录。</p><h3 id="版本库（Repository）">版本库（Repository）</h3><p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。</p><p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919020037470528/0" alt="git-repo"></p><p>head就不细说了，参考：<a href="https://www.liaoxuefeng.com/wiki/896043488029600/900003767775424">https://www.liaoxuefeng.com/wiki/896043488029600/900003767775424</a></p><p>我们把文件往Git版本库里添加的时候，是分两步执行的：</p><ul><li><p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p></li><li><p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p></li></ul><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p><p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p><h1>上手操作</h1><h2 id="1-创建版本库">1.创建版本库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><img src="2.png" style="zoom: 50%;" /><img src="3.png" style="zoom:50%;" /><h2 id="2-进行创建与提交">2.进行创建与提交</h2><p>在此目录下新建learn.txt，输入任意字符，比如”我想学git“，执行：（添加）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add learn.txt</span><br></pre></td></tr></table></figure><p>就可以添加到仓库，Unix的哲学是“没有消息就是好消息”</p><p>我们新建类、接口等文件时，就往往执行add</p><p>不信？执行：（显示状态）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>会显示：</p><img src="4.png" style="zoom:50%;" /><p>现在数据存储在暂存区</p><p>如何存入版本库？执行：（提交）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m</span><br></pre></td></tr></table></figure><img src="5.png" style="zoom:50%;" /><p>简单解释一下<code>git commit</code>命令，<strong><code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</strong></p><p>嫌麻烦不想输入<code>-m &quot;xxx&quot;</code>行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。</p><p><code>git commit</code>命令执行成功后会告诉你，<code>1 file changed</code>：1个文件被改动（我们新添加的learn.txt文件）；<code>1 insertions</code>：插入了一行内容（learn.txt有一行内容）。</p><p>此时，再查看状态：</p><img src="6.png" style="zoom:50%;" /><p>可见，没什么可以提交的了。</p><p><strong>注意：</strong></p><p>Q：输入<code>git add readme.txt</code>，得到错误：<code>fatal: not a git repository (or any of the parent directories)</code>。</p><p>A：<strong>Git命令必须在Git仓库目录内执行</strong>（<code>git init</code>除外），在仓库目录外执行是没有意义的。</p><h2 id="3-回退">3.回退</h2><p>修改文件，再次提交。但是要先add，再commit。演示如下：</p><img src="7.png" style="zoom:50%;" /><p>查看提交记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p>如图：</p><img src="8.png" style="zoom:50%;" /><p>像这样，你不断对文件进行修改，然后不断提交修改到版本库里，就好比打原神游戏时，每通关一部分就会与复苏之门建立联系，如果某一关没过去，你还可以选择读取前一关的状态再重新开始。Git也是一样，每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为<code>commit</code>。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个<code>commit</code>恢复，然后继续工作，而不是把几个月的工作成果全部丢失。</p><p>如何回退？执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure><p>会显示回退到了上一版</p><p>不过回退的可选参数实在太多，不展开讲，可以参考<a href="https://www.runoob.com/git/git-reset.html">菜鸟教程</a></p><blockquote><p>以上都是一些基础性内容，并且实际操作中用的也不多，但是了解一下可以让大家对git的原理有更清楚的认识，接下来的部分是应用最频繁的</p></blockquote><h1>远程仓库</h1><h2 id="1-0-引言">1.0 引言</h2><p>一般来说，git的工作流程如下：</p><p><img src="10.jpg" alt="（图源菜鸟）"></p><p>我们也知道Git 并不像 SVN 那样有个中心服务器。</p><p>目前我们使用到的 Git 命令都是在本地执行，如果你想通过 Git 分享你的代码或者与其他开发人员合作。 你就需要将数据放到一台其他开发人员能够连接的服务器上。</p><p>（注：首先确保学线gitlab账号已注册）</p><h2 id="1-1-克隆">1.1 克隆</h2><p>克隆一个远程项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone url</span><br></pre></td></tr></table></figure><p>比如：<code>git clone http://git.swsdu.online/lzw-sdu/first-git-job.git</code>（可能要输账号密码）</p><img src="11.png" style="zoom:50%;" /><p>你会发现文件夹里多了first-git-job这个文件夹，就是远程仓库中的项目内容</p><h2 id="1-2-push-pull-merge">1.2 push&amp;pull&amp;merge</h2><h3 id="1-2-1-push">1.2.1 push</h3><h4 id="1-2-1-1基础知识">1.2.1.1基础知识</h4><p><code>git push</code>命令用于将本地分支的更新，推送到远程主机。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure><p>注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以<code>git pull</code>是&lt;远程分支&gt;:&lt;本地分支&gt;，而<code>git push</code>是&lt;本地分支&gt;:&lt;远程分支&gt;。(pull下面会说)</p><blockquote><p>至于远程主机，可以用<code>git remote</code>查看，具体不展开讲，学线一般只有origin</p></blockquote><p>如果省略远程分支名，则表示将本地分支推送与之存在&quot;追踪关系&quot;的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>上面命令表示，将本地的<code>master</code>分支推送到<code>origin</code>主机的<code>master</code>分支。如果后者不存在，则会被新建。</p><p>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin :master</span><br><span class="line"># 等同于</span><br><span class="line">git push origin --<span class="keyword">delete</span> master</span><br></pre></td></tr></table></figure><p>上面命令表示删除<code>origin</code>主机的<code>master</code>分支。</p><p>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin</span><br></pre></td></tr></table></figure><p>上面命令表示，将当前分支推送到<code>origin</code>主机的对应分支。</p><p>如果当前分支只有一个追踪分支，那么主机名都可以省略。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>如果当前分支与多个主机存在追踪关系，则可以使用<code>-u</code>选项指定一个默认主机，这样后面就可以不加任何参数使用<code>git push</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>上面命令将本地的<code>master</code>分支推送到<code>origin</code>主机，同时指定<code>origin</code>为默认主机，后面就可以不加任何参数使用<code>git push</code>了。</p><p>不带任何参数的<code>git push</code>，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用<code>git config</code>命令。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="built_in">global</span> push.default matching</span><br><span class="line"># 或者</span><br><span class="line">git config --<span class="built_in">global</span> push.default simple</span><br></pre></td></tr></table></figure><p>还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用<code>--all</code>选项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --all origin</span><br></pre></td></tr></table></figure><p>上面命令表示，将所有本地分支都推送到<code>origin</code>主机。</p><p>如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做<code>git pull</code>合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用<code>--force</code>选项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --force origin </span><br></pre></td></tr></table></figure><p>上面命令使用<code>--force</code>选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用<code>--force</code>选项。</p><h4 id="1-2-1-2-操作">1.2.1.2 操作</h4><p>在前面克隆到本地的库中，我们看到里面已经有<code>.git</code>文件，我们在这个文件夹下进行操作。</p><p>添加自定义内容，然后push到远程仓库，注意要先add并提交到本地版本库。然后直接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>因为本地跟远程都只有master分支，而且只有origin一个远程主机</p><h3 id="1-2-2-pull">1.2.2 pull</h3><p><code>git pull</code>命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure><p>比如，取回<code>origin</code>主机的<code>next</code>分支，与本地的<code>master</code>分支合并，需要写成下面这样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin next:master</span><br></pre></td></tr></table></figure><p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin next</span><br></pre></td></tr></table></figure><p>上面命令表示，取回<code>origin/next</code>分支，再与当前分支合并。实质上，这等同于先做<code>git fetch</code>，再做<code>git merge</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git merge origin/next</span><br></pre></td></tr></table></figure><p>在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在<code>git clone</code>的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的<code>master</code>分支自动&quot;追踪&quot;<code>origin/master</code>分支。</p><p>Git也允许手动建立追踪关系。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream master origin/next</span><br></pre></td></tr></table></figure><p>上面命令指定<code>master</code>分支追踪<code>origin/next</code>分支。</p><p>如果当前分支与远程分支存在追踪关系，<code>git pull</code>就可以省略远程分支名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin</span><br></pre></td></tr></table></figure><p>上面命令表示，本地的当前分支自动与对应的<code>origin</code>主机&quot;追踪分支&quot;（remote-tracking branch）进行合并。</p><p>如果当前分支只有一个追踪分支，连远程主机名都可以省略。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p>上面命令表示，当前分支自动与唯一一个追踪分支进行合并。</p><p>如果合并需要采用rebase模式，可以使用<code>--rebase</code>选项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure><p>如果远程主机删除了某个分支，默认情况下，<code>git pull</code> 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致<code>git pull</code>不知不觉删除了本地分支。</p><p>但是，你可以改变这个行为，加上参数 <code>-p</code> 就会在本地删除远程已经删除的分支。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git pull -p</span><br><span class="line"># 等同于下面的命令</span><br><span class="line">git fetch --prune origin </span><br><span class="line">git fetch -p</span><br></pre></td></tr></table></figure><h3 id="1-2-3-merge">1.2.3  merge</h3><p>有时一个项目有多个开发者，如果你修改的文件在远程仓库中已经被其他开发者修改，当你想把自己的修改push到远程仓库或者从远程仓库更新代码时就会被提醒需要merge。当然merge的功能也不限于此，你还可以通过merge进行分支管理，当然这是后话。</p><p>一般来说我们的merge都是在IDE中进行的，此处以jetbrains家的IDE为例。</p><img src="12.png" style="zoom:50%;" /><ul><li><p>左边的Local Changes代表”当前“分支上的修改；</p></li><li><p>右边的Changes from Server代表“合并进来”的分支上的修改；</p></li><li><p>中间的Result代表经过处理后的最终内容；</p></li></ul><p>这部分还是建议各部门结合自己IDE实际情况再说几句，这里不展开讲。</p><h3 id="PS-SSH-key">PS. SSH key</h3><p>在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure><p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</p><p>如果一切顺利的话，可以在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p><p>第2步：在“SSH Keys”页面，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容即可。</p><p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p><p>当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。</p><h1>参考：</h1><p>git的简介与概念、远程仓库等：<a href="https://www.liaoxuefeng.com/">廖雪峰的官方网站</a></p><p>git的常见分支：<a href="https://blog.csdn.net/zyw0713/article/details/80083431">https://blog.csdn.net/zyw0713/article/details/80083431</a></p><p>git基本操作：廖雪峰官网（同上）与<a href="https://www.runoob.com/git/git-basic-operations.html">菜鸟教程</a></p><p>git push、pull的知识点：阮一峰的<a href="https://www.ruanyifeng.com/blog/2014/06/git_remote.html">博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 学线培训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学线培训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验八：图</title>
      <link href="/2021/12/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E5%85%AB%EF%BC%9A%E5%9B%BE/"/>
      <url>/2021/12/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E5%85%AB%EF%BC%9A%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>1、 创建图类，存储结构使用邻接矩阵。</p><p>2、 输入图的节点数n（小于10个）、边数m，节点分别用1-n代表。</p><p>3、 采用“起始节点，终止节点，权值”输入图的m条边，创建图。</p><p>4、 输出从节点1开始的BFS遍历，在遍历过程中，如有多个可以选择的节点，则优先选择编号较小的节点。</p><p>5、 输出从节点1开始的DFS遍历，在遍历过程中，如有多个可以选择的节点，则优先选择编号较小的节点。</p><p>6、 输出从第1节点到第n节点最短路径的长度，如果没有路经，输出0。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; resultQueue;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> **nodes = <span class="keyword">new</span> <span class="keyword">int</span>*[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> nodeNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> **weight = <span class="keyword">new</span> <span class="keyword">int</span>*[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> *status = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">Graph</span>()&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">            <span class="built_in">initStatus</span>();</span><br><span class="line">            nodes[i]= <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">            weight[i] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; ++j) &#123;</span><br><span class="line">                nodes[i][j] = <span class="number">0</span>;</span><br><span class="line">                weight[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initStatus</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">            status[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">initStatus</span>();</span><br><span class="line">        queue&lt;<span class="keyword">int</span>&gt; nodeQueue;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nodeNum; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nodes[<span class="number">1</span>][i] == <span class="number">1</span>)&#123;</span><br><span class="line">                nodeQueue.<span class="built_in">push</span>(i);</span><br><span class="line">                status[i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        status[<span class="number">1</span>] = <span class="number">1</span>;<span class="comment">//1这个节点已经用过了</span></span><br><span class="line">        resultQueue.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!nodeQueue.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">int</span> nodeNow = nodeQueue.<span class="built_in">front</span>();</span><br><span class="line">            nodeQueue.<span class="built_in">pop</span>();<span class="comment">//记下第一个元素并将其弹栈</span></span><br><span class="line">            resultQueue.<span class="built_in">push</span>(nodeNow);<span class="comment">//放到结果栈里</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= nodeNum; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nodes[nodeNow][i] == <span class="number">1</span> &amp;&amp; status[i] == <span class="number">0</span>)&#123;<span class="comment">//有边而且还没到达过</span></span><br><span class="line">                    nodeQueue.<span class="built_in">push</span>(i);</span><br><span class="line">                    status[i] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!resultQueue.<span class="built_in">empty</span>()&amp;&amp;resultQueue.<span class="built_in">size</span>() != <span class="number">1</span>)&#123;</span><br><span class="line">            cout&lt;&lt;resultQueue.<span class="built_in">front</span>()&lt;&lt;<span class="string">&quot;,&quot;</span>;</span><br><span class="line">            resultQueue.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;resultQueue.<span class="built_in">front</span>()&lt;&lt;endl;</span><br><span class="line">        resultQueue.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        resultQueue.<span class="built_in">push</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= nodeNum; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nodes[i][j] == <span class="number">1</span> &amp;&amp; status[j] == <span class="number">0</span>)&#123;<span class="comment">//有边而且还没到达过</span></span><br><span class="line">                status[j] = <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">DFS</span>(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findWay</span><span class="params">(<span class="keyword">int</span> targetLocation)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="built_in">initStatus</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= targetLocation; ++i) &#123;</span><br><span class="line">            status[i] = <span class="number">100000</span>;<span class="comment">//足够大了,用它来表示到初始节点最近的距离</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        queue&lt;<span class="keyword">int</span>&gt; nodeQueue;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nodeNum; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nodes[<span class="number">1</span>][i] == <span class="number">1</span>)&#123;</span><br><span class="line">                nodeQueue.<span class="built_in">push</span>(i);</span><br><span class="line">                <span class="keyword">int</span> wt = status[<span class="number">1</span>] + weight[<span class="number">1</span>][i];</span><br><span class="line">                <span class="keyword">if</span> (wt&lt;status[i])&#123;</span><br><span class="line">                    status[i] = wt;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!nodeQueue.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">int</span> nodeNow = nodeQueue.<span class="built_in">front</span>();</span><br><span class="line">            nodeQueue.<span class="built_in">pop</span>();<span class="comment">//记下第一个元素并将其弹栈</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= nodeNum; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nodes[nodeNow][i] == <span class="number">1</span>)&#123;<span class="comment">//有边而且还没到达过</span></span><br><span class="line">                    nodeQueue.<span class="built_in">push</span>(i);</span><br><span class="line">                    <span class="keyword">int</span> wt = status[nodeNow] + weight[nodeNow][i];</span><br><span class="line">                    <span class="keyword">if</span> (wt&lt;status[i])&#123;</span><br><span class="line">                        status[i] = wt;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;status[targetLocation]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Input&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d,%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    Graph graph = *<span class="keyword">new</span> <span class="built_in">Graph</span>();</span><br><span class="line">    graph.nodeNum = n;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>, weight = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d,%d,%d&quot;</span>,&amp;start,&amp;end,&amp;weight);</span><br><span class="line">        <span class="keyword">if</span> (start&lt;end)&#123;</span><br><span class="line">            graph.nodes[start][end] = <span class="number">1</span>;</span><br><span class="line">            graph.weight[start][end] = weight;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            graph.nodes[end][start] = <span class="number">1</span>;</span><br><span class="line">            graph.weight[end][start] = weight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Output&quot;</span> &lt;&lt; endl;</span><br><span class="line">    graph.<span class="built_in">BFS</span>();</span><br><span class="line">    graph.<span class="built_in">initStatus</span>();</span><br><span class="line">    graph.<span class="built_in">DFS</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (!resultQueue.<span class="built_in">empty</span>()&amp;&amp;resultQueue.<span class="built_in">size</span>() != <span class="number">1</span>)&#123;</span><br><span class="line">        cout&lt;&lt;resultQueue.<span class="built_in">front</span>()&lt;&lt;<span class="string">&quot;,&quot;</span>;</span><br><span class="line">        resultQueue.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;resultQueue.<span class="built_in">front</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">if</span> (resultQueue.<span class="built_in">front</span>() != graph.nodeNum)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;0&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        graph.<span class="built_in">findWay</span>(graph.nodeNum);</span><br><span class="line">    &#125;</span><br><span class="line">    resultQueue.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;End&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构试验七：搜索树与堆</title>
      <link href="/2021/11/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%95%E9%AA%8C%E4%B8%83%EF%BC%9A%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%A0%86/"/>
      <url>/2021/11/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%95%E9%AA%8C%E4%B8%83%EF%BC%9A%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%A0%86/</url>
      
        <content type="html"><![CDATA[<p>写的好乱。有空再整理吧</p><blockquote><p>1、 输入一系列不为零的正整数（最多不超过20个），遇到0代表输入结束（不包含0）。</p><p>2、 根据上面输入的数据序列，用初始化方法创建最大堆（不要用节点依次插入的办法创建最大堆），然后输出最大堆的层次序列。</p><p>3、 输出用堆排序后的排序结果。</p><p>4、 根据上面输入的数据，创建二叉搜索树（关键字不允许重复，如遇重复，则不重复插入该关键字），输出二叉搜索树的前序序列、中序序列（分行输出）。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> allCount, counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BStreeNode</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    BStreeNode *leftChild, *rightChild;</span><br><span class="line">    <span class="built_in">BStreeNode</span>() &#123;</span><br><span class="line">        leftChild = rightChild = <span class="literal">nullptr</span>;</span><br><span class="line">        data = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaxHeap</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> elements[<span class="number">21</span>]&#123;&#125;;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MaxHeap::init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size / <span class="number">2</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">int</span> currentElementLocate = i;</span><br><span class="line">            <span class="keyword">int</span> childLocate = <span class="number">2</span> * i;</span><br><span class="line">            <span class="keyword">int</span> data ;</span><br><span class="line">            <span class="keyword">while</span> (childLocate &lt;= size) &#123;</span><br><span class="line">                <span class="keyword">if</span> (childLocate &lt; size &amp;&amp; elements[childLocate] &lt; elements[childLocate + <span class="number">1</span>]) &#123;</span><br><span class="line">                    childLocate++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (elements[currentElementLocate] &lt; elements[childLocate]) &#123;</span><br><span class="line">                    data = elements[currentElementLocate];</span><br><span class="line">                    elements[currentElementLocate] = elements[childLocate];<span class="comment">//把子节点的值往上移</span></span><br><span class="line">                    elements[childLocate] = data;</span><br><span class="line">                &#125;</span><br><span class="line">                currentElementLocate = childLocate;</span><br><span class="line">                childLocate = <span class="number">2</span> * currentElementLocate;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(BStreeNode *node)</span> </span>&#123;<span class="comment">//前序遍历输出</span></span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (counter != allCount - <span class="number">1</span>) cout &lt;&lt; node-&gt;data &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; node-&gt;data &lt;&lt; endl;</span><br><span class="line">        counter++;</span><br><span class="line">        <span class="built_in">preOrder</span>(node-&gt;leftChild);</span><br><span class="line">        <span class="built_in">preOrder</span>(node-&gt;rightChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(BStreeNode *node)</span> </span>&#123;<span class="comment">//中序遍历输出</span></span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">inOrder</span>(node-&gt;leftChild);</span><br><span class="line">        <span class="keyword">if</span> (counter != allCount - <span class="number">1</span>) cout &lt;&lt; node-&gt;data &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; node-&gt;data &lt;&lt; endl;</span><br><span class="line">        counter++;</span><br><span class="line">        <span class="built_in">inOrder</span>(node-&gt;rightChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(BStreeNode *node)</span> </span>&#123;<span class="comment">//后序遍历输出</span></span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">postOrder</span>(node-&gt;leftChild);</span><br><span class="line">        <span class="built_in">postOrder</span>(node-&gt;rightChild);</span><br><span class="line">        <span class="keyword">if</span> (counter != allCount - <span class="number">1</span>) cout &lt;&lt; node-&gt;data &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; node-&gt;data &lt;&lt; endl;</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是一个构造可能的平衡二叉树的方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addToBSTree</span><span class="params">(BStreeNode *pNode, <span class="keyword">int</span> *list, <span class="keyword">int</span> leftFrom, <span class="keyword">int</span> leftTo, <span class="keyword">int</span> rightFrom, <span class="keyword">int</span> rightTo)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (leftTo &gt;= leftFrom || rightTo &gt;= rightFrom) &#123;</span><br><span class="line">        <span class="keyword">if</span> (leftTo &gt;= leftFrom) &#123;</span><br><span class="line">            BStreeNode *leftNode = <span class="keyword">new</span> <span class="built_in">BStreeNode</span>();</span><br><span class="line">            <span class="keyword">int</span> leftMiddle = (leftFrom + leftTo) / <span class="number">2</span>;</span><br><span class="line">            leftNode-&gt;data = list[leftMiddle];</span><br><span class="line">            <span class="keyword">if</span> (pNode-&gt;data != leftNode-&gt;data) &#123;</span><br><span class="line">                pNode-&gt;leftChild = leftNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">addToBSTree</span>(leftNode, list, leftFrom, leftMiddle - <span class="number">1</span>, leftMiddle + <span class="number">1</span>, leftTo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rightTo &gt;= rightFrom) &#123;</span><br><span class="line">            BStreeNode *rightNode = <span class="keyword">new</span> <span class="built_in">BStreeNode</span>();</span><br><span class="line">            <span class="keyword">int</span> rightMiddle = (rightFrom + rightTo) / <span class="number">2</span>;</span><br><span class="line">            rightNode-&gt;data = list[rightMiddle];</span><br><span class="line">            <span class="keyword">if</span> (pNode-&gt;data != rightNode-&gt;data) &#123;</span><br><span class="line">                pNode-&gt;rightChild = rightNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">addToBSTree</span>(rightNode, list, rightFrom, rightMiddle - <span class="number">1</span>, rightMiddle + <span class="number">1</span>, rightTo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到二叉树中新插入的node的节点的位置并插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(BStreeNode *root, BStreeNode *node)</span> </span>&#123;</span><br><span class="line">    BStreeNode *current = root;</span><br><span class="line">    <span class="keyword">if</span> (node-&gt;data &gt; current-&gt;data) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;rightChild != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            current = current-&gt;rightChild;</span><br><span class="line">            <span class="built_in">find</span>(current, node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current-&gt;rightChild = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node-&gt;data &lt; current-&gt;data) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;leftChild != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            current = current-&gt;leftChild;</span><br><span class="line">            <span class="built_in">find</span>(current, node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current-&gt;leftChild = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Input&quot;</span> &lt;&lt; endl;</span><br><span class="line">    MaxHeap *heap = <span class="keyword">new</span> <span class="built_in">MaxHeap</span>();</span><br><span class="line">    <span class="keyword">int</span> inputData[<span class="number">21</span>];<span class="comment">//后面要用，记录输入的数据</span></span><br><span class="line">    <span class="keyword">bool</span> has;<span class="comment">//数据是否存在</span></span><br><span class="line">    <span class="keyword">int</span> locate = <span class="number">0</span>;<span class="comment">//data放在堆中的位置</span></span><br><span class="line">    <span class="keyword">int</span> data = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; data;</span><br><span class="line"></span><br><span class="line">    inputData[allCount] = data;</span><br><span class="line">    allCount++;<span class="comment">//先++，避免for循环出问题</span></span><br><span class="line">    <span class="keyword">while</span> (data != <span class="number">0</span>) &#123;</span><br><span class="line">        locate++;</span><br><span class="line">        heap-&gt;elements[locate] = data;</span><br><span class="line">        cin &gt;&gt; data;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//收集输入的数据，后面要用</span></span><br><span class="line">        has = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; allCount; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data == inputData[i]) &#123; has = <span class="literal">true</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!has &amp;&amp; data != <span class="number">0</span>) &#123;</span><br><span class="line">            inputData[allCount] = data;</span><br><span class="line">            allCount++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    heap-&gt;size = locate;</span><br><span class="line"></span><br><span class="line">    heap-&gt;<span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Output&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出层次序列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; heap-&gt;size; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; heap-&gt;elements[i] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; heap-&gt;elements[heap-&gt;size] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//堆排序,有瑕疵但是能用</span></span><br><span class="line">    <span class="keyword">int</span> counts = heap-&gt;size;</span><br><span class="line">    <span class="keyword">int</span> result[counts];</span><br><span class="line">    locate = counts - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= counts; ++i) &#123;</span><br><span class="line">        <span class="comment">//从后往前收集从堆中删除的数据，就是堆排序的结果</span></span><br><span class="line">        result[locate] = heap-&gt;elements[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; heap-&gt;size; ++j) &#123;</span><br><span class="line">            <span class="comment">//理论上后一个应该是0，会把原本的末尾覆盖掉，其实不覆盖也无妨</span></span><br><span class="line">            heap-&gt;elements[j] = heap-&gt;elements[j + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//所以--放在这</span></span><br><span class="line">        heap-&gt;size--;</span><br><span class="line">        locate--;</span><br><span class="line">        heap-&gt;<span class="built_in">init</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出堆排序结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; counts - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; result[i] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; result[counts - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    //创建二叉搜索树</span></span><br><span class="line">    BStreeNode *root = <span class="keyword">new</span> <span class="built_in">BStreeNode</span>();</span><br><span class="line">    root-&gt;data = inputData[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; allCount; ++i) &#123;</span><br><span class="line">        BStreeNode *node = <span class="keyword">new</span> <span class="built_in">BStreeNode</span>();</span><br><span class="line">        node-&gt;data = inputData[i];</span><br><span class="line">        <span class="built_in">find</span>(root, node);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">preOrder</span>(root);</span><br><span class="line">    counter = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">inOrder</span>(root);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;End&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验六：二叉树源码</title>
      <link href="/2021/11/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E5%85%AD%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E6%BA%90%E7%A0%81/"/>
      <url>/2021/11/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E5%85%AD%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>1、 输入一个完全二叉树的层次遍历字符串，创建这个二叉树，输出这个二叉树的前序遍历字符串、中序遍历字符串、后序遍历字符串、结点数目、二叉树高度(上述每一个结果独立一行显示)。</p><p>2、 输入二叉树前序序列和中序序列(各元素各不相同)，创建这个二叉树，输出该二叉树的后序序列、层次遍历。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> allCount,counter=<span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BtreeNode</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line"></span><br><span class="line">    BtreeNode *leftChild,*rightChild;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="built_in">BtreeNode</span>()&#123;leftChild=rightChild=<span class="literal">nullptr</span>;size=<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="built_in">BtreeNode</span>(<span class="keyword">char</span>&amp; theData,BtreeNode* left=<span class="literal">nullptr</span>,BtreeNode*right=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        data=theData;</span><br><span class="line">        leftChild=left;</span><br><span class="line">        rightChild=right;</span><br><span class="line">        size=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(BtreeNode *node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> hl=<span class="built_in">height</span>(node-&gt;leftChild);</span><br><span class="line">    <span class="keyword">int</span> hr=<span class="built_in">height</span>(node-&gt;rightChild);</span><br><span class="line">    <span class="keyword">if</span>(hl&gt;hr) &#123;</span><br><span class="line">        <span class="keyword">return</span>++hl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ++hr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(BtreeNode* node)</span></span>&#123;<span class="comment">//前序遍历输出</span></span><br><span class="line">    <span class="keyword">if</span>(node != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(counter != allCount - <span class="number">1</span>) cout &lt;&lt; node-&gt;data &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; node-&gt;data &lt;&lt; endl;</span><br><span class="line">        counter++;</span><br><span class="line">        <span class="built_in">preOrder</span>(node-&gt;leftChild);</span><br><span class="line">        <span class="built_in">preOrder</span>(node-&gt;rightChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(BtreeNode* node)</span></span>&#123;<span class="comment">//中序遍历输出</span></span><br><span class="line">    <span class="keyword">if</span>(node != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="built_in">inOrder</span>(node-&gt;leftChild);</span><br><span class="line">        <span class="keyword">if</span>(counter != allCount - <span class="number">1</span>) cout &lt;&lt; node-&gt;data &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; node-&gt;data &lt;&lt; endl;</span><br><span class="line">        counter++;</span><br><span class="line">        <span class="built_in">inOrder</span>(node-&gt;rightChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(BtreeNode* node)</span></span>&#123;<span class="comment">//后序遍历输出</span></span><br><span class="line">    <span class="keyword">if</span>(node != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="built_in">postOrder</span>(node-&gt;leftChild);</span><br><span class="line">        <span class="built_in">postOrder</span>(node-&gt;rightChild);</span><br><span class="line">        <span class="keyword">if</span>(counter != allCount - <span class="number">1</span>) cout &lt;&lt; node-&gt;data &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; node-&gt;data &lt;&lt; endl;</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">(BtreeNode* node)</span></span>&#123;<span class="comment">//层序遍历输出</span></span><br><span class="line">    queue&lt;BtreeNode*&gt; queue;</span><br><span class="line">    <span class="keyword">while</span>(node != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(counter != allCount - <span class="number">1</span>) cout &lt;&lt; node-&gt;data &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; node-&gt;data &lt;&lt; endl;</span><br><span class="line">        counter++;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;leftChild != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            queue.<span class="built_in">push</span>(node-&gt;leftChild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;rightChild != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            queue.<span class="built_in">push</span>(node-&gt;rightChild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(queue.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node=queue.<span class="built_in">front</span>();</span><br><span class="line">        queue.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按层次遍历顺序创建二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(BtreeNode *current, <span class="keyword">int</span> i, string s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((<span class="number">2</span>*i+<span class="number">1</span>)&lt;=s.<span class="built_in">length</span>())&#123;<span class="comment">//如果当前节点既有左子节点，又有右子节点</span></span><br><span class="line">        current-&gt;leftChild=<span class="keyword">new</span> <span class="built_in">BtreeNode</span>(s[<span class="number">2</span> * i - <span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">set</span>(current-&gt;leftChild, <span class="number">2</span> * i, s);</span><br><span class="line">        current-&gt;rightChild=<span class="keyword">new</span> <span class="built_in">BtreeNode</span>(s[<span class="number">2</span> * i]);</span><br><span class="line">        <span class="built_in">set</span>(current-&gt;rightChild, <span class="number">2</span> * i + <span class="number">1</span>, s);</span><br><span class="line">        current-&gt;size+=(current-&gt;leftChild-&gt;size + current-&gt;rightChild-&gt;size);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">2</span>*i==s.<span class="built_in">length</span>())&#123;<span class="comment">//如果当前节点只有左子节点</span></span><br><span class="line">        current-&gt;leftChild=<span class="keyword">new</span> <span class="built_in">BtreeNode</span>(s[<span class="number">2</span> * i - <span class="number">1</span>]);</span><br><span class="line">        current-&gt;size+=current-&gt;leftChild-&gt;size;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">2</span>*i&gt;s.<span class="built_in">length</span>()) <span class="keyword">return</span>;<span class="comment">//如果当前节点没有子节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BtreeNode* <span class="title">rebuild</span><span class="params">(<span class="keyword">char</span> preOrder[],<span class="keyword">char</span> inOrder[],<span class="keyword">int</span> pStart,<span class="keyword">int</span> pEnd,<span class="keyword">int</span> iStart,<span class="keyword">int</span> iEnd)</span></span>&#123;</span><br><span class="line">    BtreeNode* tree=<span class="keyword">new</span> <span class="built_in">BtreeNode</span>(preOrder[pStart]);</span><br><span class="line">    <span class="keyword">if</span>(pStart==pEnd&amp;&amp;iStart==iEnd)&#123;</span><br><span class="line">        <span class="keyword">return</span> tree;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> root=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//找中序遍历中的根节点</span></span><br><span class="line">    <span class="keyword">for</span>(root=iStart;root&lt;=iEnd;root++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(preOrder[pStart]==inOrder[root]) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//&lt;=根节点在末尾 没有右子树的情况</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//划分左右子树</span></span><br><span class="line">    <span class="keyword">int</span> leftLength=root-iStart;<span class="comment">//左子树</span></span><br><span class="line">    <span class="keyword">int</span> rightLength=iEnd-root;<span class="comment">//右子树</span></span><br><span class="line">    <span class="comment">//遍历左子树</span></span><br><span class="line">    <span class="keyword">if</span>(leftLength&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        tree-&gt;leftChild=<span class="built_in">rebuild</span>(preOrder,inOrder,pStart+<span class="number">1</span>,pStart+leftLength,iStart,root<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历右子树</span></span><br><span class="line">    <span class="keyword">if</span>(rightLength&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        tree-&gt;rightChild=<span class="built_in">rebuild</span>(preOrder,inOrder,pStart+leftLength+<span class="number">1</span>,pEnd,root+<span class="number">1</span>,iEnd);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Input1&quot;</span>&lt;&lt;endl;</span><br><span class="line">    string s1,s2,s3,ss;</span><br><span class="line">    cin&gt;&gt;s1;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Output1&quot;</span>&lt;&lt;endl;</span><br><span class="line">    BtreeNode *r1=<span class="keyword">new</span> <span class="built_in">BtreeNode</span>(s1[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">set</span>(r1,<span class="number">1</span>,s1);</span><br><span class="line">    allCount=s1.<span class="built_in">length</span>();</span><br><span class="line">    <span class="comment">//为实现输出最后一个节点元素时换行，利用全局变量count，每输出一个元素+1，输出结束后清零，以便下一次输出</span></span><br><span class="line">    <span class="built_in">preOrder</span>(r1);counter=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">inOrder</span>(r1);counter=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">postOrder</span>(r1);counter=<span class="number">0</span>;</span><br><span class="line">    cout&lt;&lt;r1-&gt;size&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">height</span>(r1)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Input2&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;s2&gt;&gt;s3;</span><br><span class="line">    <span class="comment">//用字符串读入二叉树前序序列和中序序列，并转化成字符数组对二叉树进行重建</span></span><br><span class="line">    <span class="keyword">char</span> char1[s2.<span class="built_in">length</span>()]; s2.<span class="built_in">copy</span>(char1, s2.<span class="built_in">length</span>(), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">char</span> char2[s3.<span class="built_in">length</span>()]; s3.<span class="built_in">copy</span>(char2, s3.<span class="built_in">length</span>(), <span class="number">0</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Output2&quot;</span>&lt;&lt;endl;</span><br><span class="line">    BtreeNode *r2=<span class="built_in">rebuild</span>(char1, char2, <span class="number">0</span>, s2.<span class="built_in">length</span>() - <span class="number">1</span>, <span class="number">0</span>, s3.<span class="built_in">length</span>() - <span class="number">1</span>);</span><br><span class="line">    allCount=s2.<span class="built_in">length</span>();</span><br><span class="line">    <span class="built_in">postOrder</span>(r2);counter=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">levelOrder</span>(r2);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;End&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学线移动第一次例会</title>
      <link href="/2021/11/17/%E5%AD%A6%E7%BA%BF%E7%A7%BB%E5%8A%A8%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BE%8B%E4%BC%9A/"/>
      <url>/2021/11/17/%E5%AD%A6%E7%BA%BF%E7%A7%BB%E5%8A%A8%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BE%8B%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<h1>学线移动第一次培训</h1><h2 id="1-作业点评">1.作业点评</h2><p>略</p><h2 id="2-细说MVC架构与项目分包">2.细说MVC架构与项目分包</h2><p>参考：</p><p><a href="https://zh.wikipedia.org/wiki/MVC">https://zh.wikipedia.org/wiki/MVC</a></p><p><a href="https://draveness.me/mvx/">https://draveness.me/mvx/</a></p><p><a href="https://blog.csdn.net/qq_39218605/article/details/80779349?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.no_search_link&amp;spm=1001.2101.3001.4242.1">https://blog.csdn.net/qq_39218605/article/details/80779349?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.no_search_link&amp;spm=1001.2101.3001.4242.1</a></p><p>参考文献http://www.dgp.toronto.edu/~dwigdor/teaching/csc2524/2012_F/papers/mvc.pdf</p><h3 id="基本概念">基本概念</h3><p>我们将应用程序划分为三种组件，模型 - 视图 - 控制器（MVC）设计定义它们之间的相互作用。</p><p><img src="0.jpg" alt=""></p><p>在上面那篇论文中是这样描述这三部分的：</p><blockquote><p>In the MVC paradigm the user input, the modeling of the external world, and the visual feedback to the user are explicitly separated and handled by three types of object, each specialized for its task.</p><p>The <strong>view</strong> manages the graphical and/or textual output to the portion of the bitmapped display that is allocated to its application.</p><p>The <strong>controller</strong> interprets the mouse and keyboard inputs from the user, commanding the model and/or the view to change as appropriate.</p><p>Finally, the <strong>model</strong> manages the behavior and data of the application domain, responds to requests for information about its state (usually from the view), and responds to instructions to change state (usually from the controller).</p></blockquote><ul><li><strong>模型 (Model)</strong> <strong>用于封装与应用程序的业务逻辑相关的数据以及对数据的逻辑。“ Model ”有对数据直接访问的权力，例如对数据库的访问。“Model”不依赖“View”和“Controller”，也就是说， <strong>Model 不关心它会被如何显示或是如何被操作</strong>。但是 Model 中数据的变化一般会通过一种刷新机制被公布。为了实现这种机制，那些用于监视此 Model 的 View 必须事先在此 Model 上注册，从而，View 可以了解在数据 Model 上发生的改变。（比如：<a href="https://zh.wikipedia.org/wiki/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F">观察者模式</a>）(比如实体类)</strong></li><li>**视图 (View)**能够实现数据有目的的显示（理论上，这不是必需的）。在 View 中一般没有程序上的逻辑。为了实现 View 上的刷新功能，<strong>View 需要访问它监视的数据模型（Model），因此应该事先在被它监视的数据那里注册。（<code>findViewbyId</code>方法）</strong></li><li>**控制器 (Controller)**起到不同层面间的组织作用，<strong>用于控制应用程序的流程。它处理事件并作出响应</strong>。“事件”包括用户的行为和数据 Model 上的改变。</li></ul><h3 id="依赖关系">依赖关系</h3><p>虽然我们对 MVC 中的各个模块的交互不是特别了解，但是三者之间的依赖关系却是非常明确的；<strong>在 MVC 中，模型层可以单独工作，而视图层和控制器层都依赖与模型层中的数据。</strong></p><p><img src="1.jpg" alt=""></p><blockquote><p>虽然如上图所示，视图和控制器之间没有相互依赖，不过因为视图和控制器之间的依赖并不常用，所以图中将视图和控制器之间的依赖省略了。</p></blockquote><h3 id="优点">优点</h3><p>首先，多个 View 能共享一个 Model 。如今，同一个Web应用程序会提供多种用户界面，例如用户希望既能够通过浏览器来收发<a href="https://zh.wikipedia.org/wiki/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6">电子邮件</a>，还希望通过手机来访问<a href="https://zh.wikipedia.org/wiki/%E7%94%B5%E5%AD%90%E9%82%AE%E7%AE%B1">电子邮箱</a>，这就要求Web网站同时能提供<a href="https://zh.wikipedia.org/wiki/Internet">Internet</a>界面和<a href="https://zh.wikipedia.org/wiki/WAP">WAP</a>界面。在MVC设计模式中， <strong>Model 响应用户请求并返回响应数据，View 负责格式化数据并把它们呈现给用户，业务逻辑和表示层分离，同一个 Model 可以被不同的 View 重用，所以大大提高了代码的可重用性。</strong></p><p>其次，<strong>Controller 是自包含（self-contained,指高独立内聚）的对象，与 Model 和 View 保持相对独立，所以可以方便的改变应用程序的数据层和业务规则</strong>。例如，把数据库从<a href="https://zh.wikipedia.org/wiki/MySQL">MySQL</a>移植到<a href="https://zh.wikipedia.org/wiki/Oracle">Oracle</a>，或者把<a href="https://zh.wikipedia.org/wiki/RDBMS">RDBMS</a>数据源改变成<a href="https://zh.wikipedia.org/wiki/LDAP">LDAP</a>数据源，只需改变 Controller 即可。一旦正确地实现了控制器，不管数据来自数据库还是<a href="https://zh.wikipedia.org/wiki/LDAP">LDAP</a>服务器，View 都会正确地显示它们。由于MVC模式的三个模块相互独立，改变其中一个不会影响其他两个，所以依据这种设计思想能构造良好的少互扰性的构件。</p><p>此外，Controller 提高了应用程序的灵活性和可配置性。<strong>Controller 可以用来连接不同的 Model 和 View 去完成用户的需求</strong>，也可以构造应用程序提供强有力的手段。给定一些可重用的 Model 、 View 和Controller 可以根据用户的需求选择适当的 Model 进行处理，然后选择适当的的 View 将处理结果显示给用户。</p><h3 id="评价、误解及适用范围">评价、误解及适用范围</h3><p>MVC模式在概念上强调 Model, View, Controller 的分离，各个模块也遵循着由 Controller 来处理消息，Model 掌管数据源，View 负责资料显示的职责分离原则，因此在实现上，MVC 模式的 Framework 通常会将 MVC 三个部分分离实现：</p><ul><li><strong>Model 负责资料访问</strong>，较现代的 Framework 都会建议使用独立的资料对象 (DTO, POCO, POJO 等) 来替代弱类型的集合对象。资料访问的代码会使用 Data Access 的代码或是 ORM-based Framework，也可以进一步使用 Repository Pattern 与 Unit of Works Pattern 来切割数据源的相依性。</li><li><strong>Controller 负责处理消息</strong>，较高端的 Framework 会有一个默认的实现来作为 Controller 的基础，例如 Spring 的 DispatcherServlet 或是 <a href="http://ASP.NET">ASP.NET</a> MVC 的 Controller 等，在职责分离原则的基础上，每个 Controller 负责的部分不同，因此会将各个 Controller 切割成不同的文件以利维护。</li><li><strong>View 负责显示资料</strong>，这个部分多为前端应用，而 Controller 会有一个机制将处理的结果 (可能是 Model, 集合或是状态等) 交给 View，然后由 View 来决定怎么显示。例如 Spring Framework 使用 JSP 或相应技术，<a href="http://ASP.NET">ASP.NET</a> MVC 则使用 Razor 处理资料的显示。</li></ul><p>也因为 MVC 模式强调职责分离，所以在发展 MVC 应用时会产生很多文件，在 IDE (集成开发环境) 不够成熟时它会是个问题，但在现代主流 IDE 都能使用类别对象的信息来组织代码编辑的情况下，多文件早已不是问题，而且 <strong>MVC 模式会要求开发者进一步思考应用程序的架构 (Application Architecture)，而非用大杂烩的方式开发应用程序，对于应用程序的生命周期以及后续的可扩展与可维护性而言有相当正面的帮助</strong>。另外，MVC 职责分离也带来了一个现代软件工程要求的重要特性：可测试性 (Testability)，<strong>MVC-based 的应用程序在良好的职责分离的设计下，各个部分可独立行使<a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95">单元测试</a>，有利于与企业内的自动化测试、<a href="https://zh.wikipedia.org/wiki/%E6%8C%81%E7%BA%8C%E6%95%B4%E5%90%88">持续集成</a> (Continuous Integration) 与<a href="https://zh.wikipedia.org/wiki/%E6%8C%81%E7%BA%8C%E4%BA%A4%E4%BB%98">持续交付</a> (Continuous Delivery) 流程集成，减少应用程序改版部署所需的时间。</strong></p><p>MVC 模式的应用程序的目的就是希望打破以往应用程序使用的大杂烩程序撰写方式，并间接诱使开发人员以更高的架构导向思维来思考应用程序的设计，因此对于一个刚入门的初学者来说，架构导向的思考会有一定的门槛，需要较多的实现与练习才能具备相应的能力，大多数的初学者还是较习惯于大杂烩式的程序撰写，所以可能会对 MVC 模式抱持着排斥或厌恶的心态，然而 MVC（或是其他的<a href="https://zh.wikipedia.org/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_(%E8%AE%A1%E7%AE%97%E6%9C%BA)">设计模式</a>）都是有助于应用程序长远的发展，虽然大杂烩式的程序也可以用来发展长生命周期的应用程序，但是相较于 MVC，大杂烩式的程序在可扩展性和可维护性 (尤其是可测试性) 上会远比 MVC 复杂很多，相反的，<strong>MVC 模式的应用程序是在初始开发时期必须先思考并使用软件架构，使得开发时期会需要花较多心力，但是一旦应用程序完成后，可扩展性、可维护性和可测试性反而会因为 MVC 的特性而变得容易。</strong></p><p>因此，MVC 模式在已有众多优秀 Framework 的现代，早就已经没有不适合小型应用的问题，小型的应用还是可以由 MVC Framework 的应用来获取 MVC 的优点，同时它也能作为未来小型应用扩展到大型应用时的基础与入门砖。若一开始就想要做大型应用，那么 MVC 模式的职责分离以及要求开发的架构思考会更适合大型应用的开发。</p><h3 id="MVC的不足">MVC的不足</h3><p>（1）<strong>增加了系统结构和实现的复杂性</strong>。对于简单的界面，严格遵循MVC，使模型、视图与控制器分离，会增加结构的复杂性，并可能产生过多的更新操作，降低运行效率。</p><p>（2） 目前，一般高级的界面工具或构造器不支持MVC架构。改造这些工具以适应MVC需要和建立分离的部件的代价是很高的，从而造成使用MVC的困难。</p><p>(3)    降低了系统的性能。如果不采用分层式结构，很多业务可以直接造访数据库，以此获取相应的数据，如今却必须通过中间层来完成。</p><p>(4)    增加了代码量，增加了工作量。</p><h3 id="实际情况">实际情况</h3><p>在实际情况下，单独的 iOS、Android 和 Web 应用往往不能单独工作，这些客户端应用需要与服务端一起工作；当前端/客户端与后端一同工作时，其实分别『部署』了两个不同的应用，这两个应用都遵循 MVC 架构模式：</p><p><img src="2.jpg" alt=""></p><p>客户端和服务器通过网络进行连接，并组成了一个更大的 MVC 架构；从这个角度来看，服务端的模型层才存储了真正的数据，而客户端的模型层只不过是一个存储在客户端设备中的本地缓存和临时数据的集合；同理，服务端的视图层也不是整个应用的视图层，用于为用户展示数据的视图层位于客户端，也就是整个架构的最顶部；中间的五个部分，也就是从低端的模型层到最上面的视图共同组成了整个应用的控制器，将模型中的数据以合理的方式传递给最上层的视图层用于展示。</p><h2 id="3-代码规范">3.代码规范</h2><p>转载（有改动）：<a href="https://zhuanlan.zhihu.com/p/104253155">https://zhuanlan.zhihu.com/p/104253155</a>   在此致敬原作者</p><p>开始正文前，咱们还需要明确编码规范的两个原则：</p><ol><li><strong>封装和多态</strong>：Java是面向对象的编程语言，语言特征是：封装、继承和多态。但笔者认为继承有时候会破坏封装性，请谨慎使用，面向对象封装和多态是核心；</li><li><strong>可维护性优先于性能</strong>：编码规范围绕中心是代码的可维护性，在需要对代码可维护性和性能做出权衡时，优先考虑代码可维护性，笔者认为，好的代码结构可以保证好的性能，性能在设计时就应该纳入思考；</li></ol><p><strong>PS.个人认为第二点更重要</strong></p><h3 id="命名">命名</h3><p>业界有一句话也许大部分程序员都认同：“代码就是最好的注释”，而好的命名有利于增强代码的可读性。为了增强代码的可读性，笔者认为命名应遵从三个原则：</p><ol><li><strong>共识</strong>：共识是指不同人的横向比较，共识按范围分包含组内共识（业务相关的专有名词）、企业内部公司和业界共识；</li><li><strong>统一</strong>：统一是指单个人的垂直比较，<strong>单个人在不同时间点编写的变量、方法、类的命名要统一</strong>，不能出现同一个概念一会儿这样命名，一会儿又那样命名；命名不同意也会加大代码阅读难度；</li><li><strong>得体</strong>：<strong>得体是指用词合理，做到词能达意</strong>，命名能够很好地表达用意（类命名一般是名词短语，方法命名一般是动词短语）；</li></ol><p>《开发手册》提出了一系列强制和推荐的编程规约，其目的也是达成共识，做到见名知意。如有以下命名规约：</p><blockquote><p>代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。</p><p>代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。</p><p>类名使用 <code>UpperCamelCase</code> 风格，必须遵从驼峰形式，但以下情形例外：DO / BO /DTO / VO / AO</p><p>方法名、参数名、成员变量、局部变量都统一使用 <code>lowerCamelCase</code> 风格，必须遵从驼峰形式。</p><p>常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长（尽量短）。</p><p>中括号是数组类型的一部分，数组定义如下：<code>String[] args</code>;</p><p>POJO 类中布尔类型的变量，都不要加 is，否则部分框架解析会引起序列化错误。（没遇见过）</p><p>包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。</p><p>杜绝完全不规范的缩写，避免望文不知义。</p></blockquote><p>注：《开发手册》目的是在企业内部达成共识，所以才会加上阿里巴巴关键词限定，业界可用来作为参考，但各个企业还是需要根据实际情况制定自己的规范，比如上面的第3点，笔者认为为了统一，后面的特殊情况也不应该出现，还是应该<code>Do/Bo/Dto/Vo</code>这样命名，做到统一。此外一些推荐的规则，比如</p><blockquote><p>如果模块、接口、类、方法使用了设计模式，在命名时体现出具体模式。</p></blockquote><p>其实笔者认为应该作为强制规则发布，这样命名可以很好的告知设计模式，读者可以很快在脑海中绘制设计模式对应的代码结构并立刻知道代码功能（常见设计模式在程序员界已形成共识，如果对应设计模式还不了解，说明功底不够还需要修炼）。</p><p>统一讲的是个人在编码过程中做到命名前后一致，如果做不到统一，会给他人阅读就带来了难度。《开发手册》这类文献可以起到一定作用，但很大一部分还是个人的自我约束。举两个反例：</p><ul><li>同义词命名不统一：比如“指标“”这个词，一会儿用<code>Index</code>，一会儿用<code>indicator</code>；</li><li>拼写和英文命名不统一：比如“代理商”这个词，一会儿用<code>Agent</code>，一会儿用<code>DaiLiShang</code>；</li></ul><h4 id="变量命名">变量命名</h4><p><strong>变量名应该简短且有意义，并能够顾名思义</strong>。简单并不意味着越短越好，比如一个字符的变量名是不允许的，很影响代码的可读性。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;  <span class="comment">// 不允许 </span></span><br><span class="line"><span class="keyword">char</span> c;  <span class="comment">//  不允许</span></span><br></pre></td></tr></table></figure><p>对于局部变量，为了保证代码简洁，<strong>局部变量命名只要能够在代码中区分，应避免名称过长</strong>，影响阅读。</p><p>拿Spring MVC中<code>DispatcherServlet</code>类中的代码片段来举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class); </span><br><span class="line"><span class="comment">// 而非HandlerMapping handleMapping = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class)</span></span><br><span class="line">HandlerAdapter ha = context.getBean(HANDLER_ADAPTER_BEAN_NAME, HandlerAdapter.class);  </span><br><span class="line"><span class="comment">// 而非HandlerAdapter handlerAdapter = context.getBean(HANDLER_ADAPTER_BEAN_NAME, HandlerAdapter.class); 变量命名可改成HandlerAdapter adapter = XXX;</span></span><br><span class="line">HandlerExceptionResolver her = context.getBean(HANDLER_EXCEPTION_RESOLVER_BEAN_NAME, HandlerExceptionResolver.class);</span><br><span class="line">ViewResolver vr = context.getBean(VIEW_RESOLVER_BEAN_NAME, ViewResolver.class);</span><br><span class="line">WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request); </span><br><span class="line"><span class="comment">// 而非WebAsyncManager webAsyncManager = WebAsyncUtils.getAsyncManager(request);</span></span><br><span class="line">MultipartHttpServletRequest req = WebUtils.getNativeRequest(servletRequest, MultipartHttpServletRequest.class);</span><br><span class="line">HandlerExecutionChain handler = hm.getHandler(request);</span><br></pre></td></tr></table></figure><p>对于类中的私有域（field）名称，则不应该缩写，域名称需要很好的反映到底是哪个类的实例以免影响阅读。</p><p>反例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private WordStudyStatisticManager statisticManager; // 改成全名 private WordStudyStatisticManager wordStudyStatisticManager;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public CommonResult&lt;WordStudyStatistic&gt; addWordStudyStatistic(WordStudyStatistic wordStudyStatistic) &#123;</span><br><span class="line">   CommonResult&lt;WordStudyStatistic&gt; result = new CommonResult&lt;WordStudyStatistic&gt;();</span><br><span class="line">   try &#123;</span><br><span class="line">        Date current = new Date();</span><br><span class="line">        wordStudyStatistic.setCreated(current);</span><br><span class="line">        wordStudyStatistic.setModified(current);</span><br><span class="line">        result.addDefaultModel(studyStatisticManager.addWordStudyStatistic(wordStudyStatistic));</span><br><span class="line">        // 通过缩写减少字母个数没必要反而会影响阅读</span><br><span class="line">        result.setSuccess(true);</span><br><span class="line">   &#125; catch (Exception e) &#123;</span><br><span class="line">        logger.error(&quot;添加单词学习统计失败&quot;, e);</span><br><span class="line">        result.setSuccess(false);</span><br><span class="line">   &#125;</span><br><span class="line">   return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常量命名">常量命名</h4><p>常量使用<strong>大写字母</strong> + 数字进行命名 。</p><p>正例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static final int DEFAULT_CAPACITY = 10;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">private static final int DefaultCapacity = 10;   </span><br><span class="line">private static final int Default_Capacity = 10;</span><br></pre></td></tr></table></figure><h4 id="方法命名">方法命名</h4><p>方法名称应该是一个动词短语（为了共识），不论public方法还是private方法，<strong>方法名称需要很好地反映方法功能本身。</strong></p><p>正例：</p><p>还是<code>DispatcherServlet</code>，私有方法较多，但通过名称可以很清楚地反映方法功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">initStragies(ApplicationContext); // Stragies说明该方法作用是初始化一系列策略</span><br><span class="line">initMultipartResolver(ApplicationContext);</span><br><span class="line">initLocaleResolver(ApplicationContext);</span><br><span class="line">initThemeResolver(ApplicationContext);</span><br><span class="line">initHandlerMappings(ApplicationContext);</span><br><span class="line">initHandlerAdapters(ApplicatonContext);</span><br><span class="line">initHandlerExceptionResolers(ApplicationContext);  </span><br><span class="line">initRequestToViewNameTranslator(ApplicatonContext); </span><br><span class="line">// 只要名称能合理的反映功能，不要担心方法过长</span><br><span class="line">...</span><br><span class="line">getDefaultStrategy(ApplicationContext, Class&lt;T&gt;);</span><br><span class="line">getDefaultStrategies(ApplicationContext, Class&lt;T&gt;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这样的方法命名让读者就很舒服。</p><p>反例：方法职责不清晰造成方法名过长</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 接口定义</span><br><span class="line">public Map&lt;String, Obeject&gt; getUserInfoLoginInfoPasswordMap(Context context) &#123;</span><br><span class="line">  Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();  </span><br><span class="line">  ...</span><br><span class="line">  UserInfo user = xxx;</span><br><span class="line">  map.put(&quot;user&quot;, user);</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">  LoginInfo login = xxx;</span><br><span class="line">  map.put(&quot;login&quot;, login);</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">  String password = xxx;</span><br><span class="line">  map.put(&quot;password&quot;, password);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 客户端代码</span><br><span class="line">Map&lt;String, Obeject&gt; map = getUserInfoLoginInfoPasswordMap(context);</span><br><span class="line">map.get(&quot;user&quot;);</span><br><span class="line">map.get(&quot;login&quot;);</span><br><span class="line">map.get(&quot;login&quot;);</span><br></pre></td></tr></table></figure><p>只要命名合理，不要担心方法名称太长，但方法名称过长常常又意味着该方法干的事太多了，则需要思考是否可以拆分方法，上面这个例子不够典型，但也反映了一个设计原则，保证方法的职责单一，可以拆分成3个方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public UserInfo getUserInfo(Context context); </span><br><span class="line">public LoginInfo getLoginInfo(Context context); </span><br><span class="line">public String getPassword(Context context);</span><br></pre></td></tr></table></figure><p>如果方法实现会产生副作用（side effect），该副作用需要体现在方法名称。</p><p>反例：副作用未体现在方法名中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private void checkPermission(User user) throws NoPermissionException&#123;</span><br><span class="line">   List&lt;Integer&gt; orgIds = orgService.getOrgIdsByUserId(user.getId());</span><br><span class="line">   if(CollectionUtils.isEmpty(orgIds) &#123;</span><br><span class="line">      throw new NoPermissionException(&quot;无权访问！&quot;);</span><br><span class="line">   &#125;;</span><br><span class="line">   </span><br><span class="line">   if(orgIds.contains(1)) &#123;</span><br><span class="line">      user.setOrgIds(orgIds);  // 包含副作用setOrgIds</span><br><span class="line">      return;</span><br><span class="line">   &#125;</span><br><span class="line">   throw new NoPermissionException(&quot;无权访问！&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了体现方法名称可改成 fillOrgIdsAndCheckPermission。</p><p>反例：超长的方法名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Integer&gt; getByYearQuargerAndXXXXXXXXIdAndXXXXXConditionAndCityLevelList(YearQuarter yearQuarter, Integer XXXXXXXXId, XXXXXCondition condition, List&lt;Integer&gt; cityLevelList);</span><br></pre></td></tr></table></figure><p>方法名反映了入参却忽略了返回值。如果不存在方法重载，那么方法名无需通过入参进行区分但必须反映返回值，这样做的目的是：通过方法名称区分一个类的所有方法，因此，这个反例方法名可改成getXXXList（此外若入参超过4个，最好定义一个类对入参进行包装）。</p><h4 id="类命名">类命名</h4><p><strong>类名应该是名词，尽量保证类名简单且具有描述性，避免缩略语</strong>，如果使用到设计模式需要在类名中体现，目的是形成共识，帮助读者理解代码。</p><p>正例：List的实现类命名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ArrayList  // 数组形式的List实现类</span><br><span class="line">LinkedList  // 链表形式的List实现类</span><br><span class="line">Stack  // 栈实现类，见名知意，说明是先进后出，后进先出的数据结构</span><br><span class="line">CopyOnWriteArrayList  // 说明是采用COW写时复制防并发策略的ArrayList</span><br><span class="line">FixedSizeList  // 固定了大小的的List</span><br><span class="line">SynchronizedList  // 使用Synchronized关键字控制的List,线程安全</span><br></pre></td></tr></table></figure><p>注：以上例子来自jdk、apache开源代码。</p><p>正例：使用了设计模式的类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.factory.BeanFactory // 简单工厂模式 </span><br><span class="line">org.eclipse.jetty.websocket.common.UpgradeRequestAdapter // 使用了适配器模式 </span><br><span class="line">org.apache.catalina.core.ThreadLocalLeakPreventionListener // 观察者模式 </span><br><span class="line">org.apache.naming.factory.webservices.ServiceProxy // 代理模式</span><br></pre></td></tr></table></figure><p>注：以上类来自Spring、jetty、tomcat。</p><h3 id="注释">注释</h3><p>注释有利于帮助理解代码，如果使用不当，反而会影响代码的简洁性，不利于理解代码。注释在使用上笔者认为需要坚持三个原则：</p><ol><li><strong>保持代码干净，消除不必要的注释</strong>：好的代码本身就是最好的注释，只在必要时通过注释协助理解代码，目的是保持代码的简洁性，增强代码的可读性；</li><li><strong>区分注释和<code>JavaDoc</code></strong>：类、域、方法使用<code>JavaDoc</code>，方法内部使用注释；</li><li>注释及时更新：注释也是代码的一部分，如果代码发生变更，注释也要跟着改；</li></ol><p>注释正例可通过《开发手册》作为参考，笔者更愿意通过一些反例告知读者哪些是错误的注释！</p><p>反例：加入过多的注释影响代码阅读</p><p>在系统开发中，笔者发现，代码有大片大片的注释，格式乱七八糟，笔者想强调一点：请把代码当成产品来看待，注意提交的代码一定要干净！可能有同学会反驳，注释掉的是代码，将来可能还需要还原，如果确实是这种情况，那么完全可以通过版本控制工具（git or svn）还原。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public String recommendGift(double budget) &#123;</span><br><span class="line">       // get gifts from helper</span><br><span class="line">       String[] gifts = giftHelper.getGifts();</span><br><span class="line">       String gift = null;</span><br><span class="line"></span><br><span class="line">       for (int i = 0; i &lt; gifts.length; i++) &#123;</span><br><span class="line">           gift = gifts[i];</span><br><span class="line"></span><br><span class="line">           // find out if gift already given</span><br><span class="line">           boolean isAlreadyGiven = false;</span><br><span class="line">           for (String given : giftsGiven) &#123;</span><br><span class="line">               if (gift.equals(given)) &#123;</span><br><span class="line">                   isAlreadyGiven = true;</span><br><span class="line">                   break;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           // calculate rating and budget</span><br><span class="line">           int x = rating * 200;</span><br><span class="line">           boolean ok = budget &lt; x;</span><br><span class="line"></span><br><span class="line">           // if both conditions satisfy, give it.</span><br><span class="line">           if (!isAlreadyGiven) &#123;</span><br><span class="line">               giftsGiven.add(gift);</span><br><span class="line">               // increment maintenance cost of the girlfriend</span><br><span class="line">               maintenanceCost += budget;</span><br><span class="line">               return gift;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       return gift;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>如果代码需要通过注释才能理解，这时可能就需要反思，是否是代码本身编写的问题，比如方法过长，试着重构（比如抽取方法、方法重命名等）。</p><p>修改后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public String recommendGift(double budget) &#123;</span><br><span class="line">    String recommendedGift = null;</span><br><span class="line">    for (String gift : giftHelper.getGifts()) &#123;</span><br><span class="line">        recommendedGift = gift;</span><br><span class="line">        if (isGiftNotAlreadyGiven(recommendedGift) &amp;&amp; isUnderBudget(budget)) &#123;</span><br><span class="line">            updateMaintenanceCostAndGiftsGiven(budget, recommendedGift);</span><br><span class="line">            return recommendedGift;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return recommendedGift;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void updateMaintenanceCostAndGiftsGiven(double budget, String gift) &#123;</span><br><span class="line">    giftsGiven.add(gift);</span><br><span class="line">    maintenanceCost += budget;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private boolean isUnderBudget(double budget) &#123;</span><br><span class="line">    int x = rating * 200;</span><br><span class="line">    boolean ok = budget &lt; x;</span><br><span class="line">    return ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private boolean isGiftNotAlreadyGiven(String gift) &#123;</span><br><span class="line">    boolean isAlreadyGiven = true;</span><br><span class="line">    for (String given : giftsGiven) &#123;</span><br><span class="line">        if (gift.equals(given)) &#123;</span><br><span class="line">            isAlreadyGiven = false;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return isAlreadyGiven;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反例：<code>JavaDoc</code>和注释不分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// User:xxxxx</span><br><span class="line">public class User &#123;</span><br><span class="line">// 名字</span><br><span class="line">  private String name = &quot;George&quot;;</span><br><span class="line"></span><br><span class="line">  // 获取全名</span><br><span class="line">  public String getFullName() &#123;</span><br><span class="line">     /** 家庭名字 **/</span><br><span class="line">     String familyName = &quot;Bush&quot;;</span><br><span class="line">     ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是<code>JavaDoc</code>，可参考《开发手册》注释章节部分强制规约：</p><blockquote><p>类、类属性、类方法的注释必须使用 Javadoc 规范，使用/*<em>内容</em>/格式，不得使用// xxx 方式；<br>所有的抽象方法（包括接口中的方法）必须要用 Javadoc 注释、除了返回值、参数；<br>所有的类都必须添加创建者和创建日期；</p></blockquote><p>如果是注释，需要区分注释和解释：注释用于帮助理解业务流程，解释是说明这里为什么要这么做；注释用在方法内部单行注释，在被注释语句上方另起一行，解释紧跟代码之后，举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private User getLeader(Query query) &#123;</span><br><span class="line">   // 参数校验</span><br><span class="line">  checkParam(query);</span><br><span class="line">  </span><br><span class="line">   // 查询</span><br><span class="line">   List&lt;User&gt; users = xxManager.getUser(query);</span><br><span class="line">   if(CollectionUtils.isEmpty(users)) &#123;</span><br><span class="line">      return null;</span><br><span class="line">   &#125;</span><br><span class="line">   return users.get(0); // 第一个就是Leader </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释用在比较特殊的业务上，替代方案是在领域内部单独提供一个方法，这样就不用解释了。</p><p>反例：代码发生变更，但注释没变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 返回小于10的正整数</span><br><span class="line"> */</span><br><span class="line">public List&lt;Integer&gt; gePositiveIntegerGraterOrEqualsTen() &#123;</span><br><span class="line">   return Arrays.asList(1,2,3,4,5,6,7,8,9,10);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法第一版是返回小于10的正整数，后由于需求变更改成小于等于10的正整数，可是注释还是小于10，注释和方法实现不同步这让人感到很困惑。</p><h4 id="代码自解释">代码自解释</h4><p>注释是为了帮助理解代码，如果代码是自解释的（本身就具有很好的可读性），那么就无需添加注释了，这是最高境界，一般有三种做法：</p><ol><li><strong>合适的命名</strong>：包含变量、方法命名（前文已提）；</li><li>代码合理分段；</li><li><strong>代码是同一层面的抽象</strong>：一个方法的内部代码除了合理分段外，每一段都是同一业务层面的抽象，有助于读者理解代码；<strong>(MVC)</strong></li></ol><p>正例：将代码按照单一执行任务合理分段有利于增强可读性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if(result.getStatus() != Status.OK)</span><br><span class="line">&#123; </span><br><span class="line">    throw new BusinessException();</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">Context ctx = result.getContext(); </span><br><span class="line">ctx.beginTransaction();</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>以上是代码示例，<code>SpringMVC</code>包的<code>DispatcherServlet</code>中<code>doDispatch</code>方法可以很好地说明一个复杂处理逻辑分段的重要性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">HttpServletRequest processedRequest = request;</span><br><span class="line">HandlerExecutionChain mappedHandler = null;</span><br><span class="line">boolean multipartRequestParsed = false;</span><br><span class="line"></span><br><span class="line">WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">ModelAndView mv = null;</span><br><span class="line">Exception dispatchException = null;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">processedRequest = checkMultipart(request);</span><br><span class="line">multipartRequestParsed = processedRequest != request;</span><br><span class="line"></span><br><span class="line">// Determine handler for the current request.</span><br><span class="line">mappedHandler = getHandler(processedRequest, false);</span><br><span class="line">if (mappedHandler == null || mappedHandler.getHandler() == null) &#123;</span><br><span class="line">noHandlerFound(processedRequest, response);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Determine handler adapter for the current request.</span><br><span class="line">HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">// Process last-modified header, if supported by the handler.</span><br><span class="line">String method = request.getMethod();</span><br><span class="line">boolean isGet = &quot;GET&quot;.equals(method);</span><br><span class="line">if (isGet || &quot;HEAD&quot;.equals(method)) &#123;</span><br><span class="line">long lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">if (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(&quot;Last-Modified value for [&quot; + getRequestUri(request) + &quot;] is: &quot; + lastModified);</span><br><span class="line">&#125;</span><br><span class="line">if (new ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">// Actually invoke the handler.</span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">&#125;</span><br><span class="line">finally &#123;</span><br><span class="line">if (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">applyDefaultViewName(request, mv);</span><br><span class="line">mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">&#125;</span><br><span class="line">catch (Exception ex) &#123;</span><br><span class="line">dispatchException = ex;</span><br><span class="line">&#125;</span><br><span class="line">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">&#125;</span><br><span class="line">catch (Exception ex) &#123;</span><br><span class="line">triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">&#125;</span><br><span class="line">catch (Error err) &#123;</span><br><span class="line">triggerAfterCompletionWithError(processedRequest, response, mappedHandler, err);</span><br><span class="line">&#125;</span><br><span class="line">finally &#123;</span><br><span class="line">if (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">// Instead of postHandle and afterCompletion</span><br><span class="line">mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">// Clean up any resources used by a multipart request.</span><br><span class="line">if (multipartRequestParsed) &#123;</span><br><span class="line">cleanupMultipart(processedRequest);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：代码是同一层面的抽象</p><p>以<code>SpringMVC</code>包的<code>DispatcherServlet</code>中<code>initStrategies</code>方法举例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">      /**</span><br><span class="line"> * Initialize the strategy objects that this servlet uses.</span><br><span class="line"> * &lt;p&gt;May be overridden in subclasses in order to initialize further strategy objects.</span><br><span class="line"> */</span><br><span class="line">protected void initStrategies(ApplicationContext context) &#123;</span><br><span class="line">initMultipartResolver(context);</span><br><span class="line">initLocaleResolver(context);</span><br><span class="line">initThemeResolver(context);</span><br><span class="line">initHandlerMappings(context);</span><br><span class="line">initHandlerAdapters(context);</span><br><span class="line">initHandlerExceptionResolvers(context);</span><br><span class="line">initRequestToViewNameTranslator(context);</span><br><span class="line">initViewResolvers(context);</span><br><span class="line">initFlashMapManager(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>initStrategies方法是DispatcherServlet这个类初始化策略的主流程，内部调用的是同一抽象层面的方法，且各个方法做到见名知意，这种清晰的代码结构我想就无需再注释了吧。</p><h4 id="无用注释">无用注释</h4><p>在日常代码中有一些滑稽的没有意义的注释。</p><p>反例：没有必要的注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 最大大小</span><br><span class="line"> */</span><br><span class="line">private static final int MAX_SIZE = 10;</span><br><span class="line"></span><br><span class="line">if(a == 5) &#123;  // 如果a等于5</span><br><span class="line">   counter = 0;  // 把counter设置成0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请不要侮辱阅读者的智商，这种注释请问到底有什么用！</p><p>反例：没有礼貌的注释</p><p>还记得前两年某视频网站在js代码注释中注释了“屌丝VIP”字样在网上被喷的事件，尊重别人才能赢得别人的尊重，应避免没有礼貌的侮辱性的注释。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 屌丝VIP</span><br><span class="line">if( user.getVipType() = xxx)</span><br><span class="line">...</span><br><span class="line">  </span><br><span class="line">// 要注意一些愚蠢的用户会输入一个负数</span><br><span class="line">...</span><br><span class="line">  </span><br><span class="line">// 修正由菜鸟工程师写的愚蠢得可怜的代码而导致的副作用</span><br><span class="line">...  </span><br></pre></td></tr></table></figure><p>这样的注释对于代码的写注释的人来说并没有任何好处，同时你永远都不会知道将来这些注释会被谁来阅读，你的老板、一个客户或者是刚才被你数落的愚蠢得可怜的工程师。</p><p>反例：过期的代码注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Program</span><br><span class="line">&#123;</span><br><span class="line">   public static void main(String[] args) </span><br><span class="line">  &#123;</span><br><span class="line">     /* This block of code is no longer needed</span><br><span class="line">      * because we found out that Y2K was a hoax</span><br><span class="line">      * and our systems did not roll over to 1/1/1900 </span><br><span class="line">      */</span><br><span class="line">      //DateTime today = DateTime.Today;</span><br><span class="line">      //if (today == new DateTime(1900, 1, 1))</span><br><span class="line">      //&#123;</span><br><span class="line">      // today = today.AddYears(100);</span><br><span class="line">      // String message = &quot;The date has been fixed for Y2K.&quot;;</span><br><span class="line">      // System.out.println(message);</span><br><span class="line">      //&#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>“万一我们下次还要用到它呢“，每听到这样的解释我真心无语。无效代码注释本章节开头已说明，请删除无效的代码注释！需还原请通过版本控制工具还原！</strong></p><p>反例：故事性（代码不相关）注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 张三叫我这么做，如果有不懂的，你可以去问他。</span><br></pre></td></tr></table></figure><p>如果是一个局外人或一个新人，这种注释没有任何用，除了他俩知道外（业务过了一段时间他俩也忘了为什么这么做），对其他人提供不了任何有价值的信息。如果你不得不在你的代码注释中提及需求，那也不应该提及人名。在上面的示例中，好像程序想要告诉其它程序员，这根本没有必要在注释中提到一些和代码不相干的事。可能有人会狡辩，我还是必须这样写注释，原因有二：</p><ol><li>有时候，那些所谓的“高手”逼着我这么干，所以，我要把他的名字放在这里让所有人看看他有多SB。</li><li>有时候，我对需求并不了解，我们应该放一个联系人在在这里，以便你可以去询问之。</li></ol><p>对于第一点，正确的做法沟通解决问题，说明清楚为什么不能这么去做；如果非得这么干，那么好请发邮件告知或在文档中备注。不要在代码中写这样的注释；对于第二点，应该将联系人写在需求文档中。</p><p>反例：没有意义的注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// Sorry,这段代码写得不好，请多见谅</span><br></pre></td></tr></table></figure><p>很明显，程序员已经意识到代码的问题，这样的注释除了为自己的懒惰开脱外，不知道还有什么用！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 勿动这块代码！！！ 如果需要改动，请不要影响到张三和李四的代码</span><br></pre></td></tr></table></figure><p>这种也是很无语的注释，当需要这样注释时，代码到底有多不可维护呀！</p><p>此外还有多年的TODO注释也是需要消灭的。</p><p>注释章节就写到这，希望对你有帮助。</p><h3 id="常量">常量</h3><p>常量是用final修饰符修饰的不可变数值基础类型（或数值类型），本节可讨论话题不多，笔者想强调4点：</p><ol><li><strong>在工程中不要使用一个常量类维护所有常量。</strong></li><li><strong>常量类请加修饰符final以表示他是不可继承的。</strong></li><li><strong>合理地放置常量类，即区分是类内部常量，还是包内常量，还是是整个工程常量。</strong></li><li><strong>几个具有相关性的常量（比如type，state）请使用枚举。</strong></li></ol><p>下面针对第一点，第三点说明：</p><p>反例：在工程中使用一个常量类维护所有常量</p><p>笔者曾见过很多老工程使用一个<code>SystemConsts</code>包含系统内定义的所有常量，在不断迭代后，多数类似<code>SystemConsts</code>这种类定义的常量常常是100+（注释至少都是300行+），面对几百行的常量，维护会特别麻烦：即使是老手，有时你还是不清楚到底有没有定义过该常量，如果定义过，那么很可能你需要花点时间去找是哪个常量，如果关键字搜索不对，那么很可能这个时间成本还不低；如果不凑巧关键字没找到，那么你得重新定义一个，但很可能出现常量重复定义，当需求发生变更时，<code>diamante</code>改动特别容易出现遗漏，引发bug。</p><p>正确的做法是：</p><ul><li>按功能分类，比如：缓存相关常量放在<code>CacheConsts</code>下，系统配置类常量放在<code>ConfigConsts</code>下；</li><li>按业务划分，如果是在指定范围取值的常量，需要替换成枚举；</li></ul><p>反例：不合适地放置常量类</p><p>易懂变量也要统一定义成应用内共享常量，两位程序员在两个类中分别定义了表示 “是”的变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类 A</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String YES = <span class="string">&quot;yes&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类 B</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String YES = <span class="string">&quot;y&quot;</span>;</span><br><span class="line"></span><br><span class="line">A.YES.equals(B.YES)，</span><br></pre></td></tr></table></figure><p>预期是 true，但实际返回为 false，导致线上问题。</p><p>合理地放置常量类，正确的做法是：</p><ul><li>跨应用共享常量，放在准备提供给外部jar包所在module的<code>consts</code>目录；</li><li>工程内共享常量，放在工程common module下<code>consts</code>目录；</li><li>子模块内部共享，在相应子模块<code>consts</code>目录；</li><li>类内共享，放在类内部，注意加private进行限定；</li></ul><p>常量章节就写到这。</p><h3 id="异常处理"><strong>异常处理</strong></h3><p>在介绍异常处理规范之前，实在有必要了解Java的异常体系，什么时候使用受检异常，什么时候使用非受检异常。</p><ul><li><strong>Java异常体系：</strong><br>在 Java 中，所有的异常都有一个共同的祖先 Throwable（可抛出）。**Throwable 指定代码中可用异常传播机制通过 Java 应用程序传输的任何问题的共性。**Throwable 有两个重要的子类：Exception（异常）和 Error（错误），二者都是 Java 异常处理的重要子类，各自都包含大量子类。<strong>Exception（异常）是应用程序中可能的可预测、可恢复问题。一般大多数异常表示中度到轻度的问题。<strong>异常一般是在特定环境下产生的，通常出现在代码的特定方法和操作中。在<code> EchoInput</code> 类中，当试图调用 <code>readLine </code>方法时，可能出现 <code>IOException </code>异常。<br><strong>Error（错误）表示运行应用程序中较严重问题</strong>。<strong>大多数错误与代码编写者执行的操作无直接关系，而表示代码运行时 JVM（Java 虚拟机）出现的问题</strong>。例如，当 JVM 不再有继续执行操作所需的内存资源时，将出现 <code>OutOfMemoryError</code>。<br>Exception 类有一个重要的子类 <code>RuntimeException</code>。</strong><code>RuntimeException </code>类及其子类表示“JVM 常用操作”引发的错误</strong>。例如，若试图使用空值对象引用、除数为零或数组越界，则分别引发运行时异常（<code>NullPointerException</code>、<code>ArithmeticException</code>）和 <code>ArrayIndexOutOfBoundException</code>。</li><li><strong>受检异常：</strong><br>**可检测异常经编译器验证，对于声明抛出异常的任何方法，编译器将强制执行处理(解决这个异常)或声明规则，**例如：<code>sqlExecption</code> 这个异常就是一个检测异常。你连接 JDBC 时，不捕捉这个异常，编译器就通不过，不允许编译。<strong>受检异常可预知可能出问题，必须处理</strong>。</li><li><strong>非检测异常：</strong><br><strong>非检测异常不遵循处理或声明规则。在产生此类异常时，不一定非要采取任何适当操作</strong>，编译器不会检查是否已解决了这样一个异常。例如：一个数组为 3 个长度，=E5__你使用下标为３时，就会产生数组下标越界异常。这个异常 JVM 不会进行检测，要靠程序员来判断。有两个主要类定义非检测异常：<code>RuntimeException </code>和 Error。<br>Error 子类属于非检测异常，因为无法预知它们的产生时间。若 Java 应用程序内存不足，则随时可能出现 <code>OutOfMemoryError</code>；起因一般不是应用程序的特殊调用，而是 JVM 自身的问题。另外，Error 一般表示应用程序无法解决的严重问题。Error子类是非受检异常另一个原因是应用程序根本无法处理。<br><code>RuntimeException</code> 类也属于非检测异常，因为普通 JVM 操作引发的运行时异常随时可能发生，此类异常一般是由特定操作引发。但这些操作在 Java 应用程序中会频繁出现。因此，它们不受编译器检查与处理或声明规则的限制。</li><li><strong>封装一个API的时候什么情况下抛出异常</strong><br>如果调用方可以从异常中采取措施进行恢复的，就使用checked exception，如果客户什么也做不了，就用unchecked exception。这里的措施指的是，不仅仅是记录异常，还要采取措施来恢复。</li></ul><p>Java异常机制是为了在异常情况设计的，在日常开发中不合理使用异常、乱用异常的情况还是很常见，我们有必要重新梳理异常的使用，做到正确使用。</p><p><strong>异常处理不能作为正常控制流(能不用异常就不要用）</strong></p><p>反例：将异常处理应用于普通控制流</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line"> int i = 0;</span><br><span class="line"> while(true)&#123;</span><br><span class="line">    range[i++].climb(); </span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br><span class="line">catch(ArrayIndexOutOfBoundsException e)&#123;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上面程序通过异常捕获结束循环进而完成数据的遍历，殊不知异常模式比标准模式要慢很多（很可能2倍以上），且正常的逻辑通过这种异常方式让人费解，代码的可读性较差。</strong></p><p>以上代码完全可以采用正常的控制逻辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(Mountain m : range) &#123;</span><br><span class="line"> m.climb();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又比如：状态测试相关的的类应该提前进行状态测试，不应该通过异常机制作为控制流</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Foo&gt; it = collection.iterator();</span><br><span class="line">while(it.hasNext())&#123;</span><br><span class="line"> Foo foo = it.next();</span><br><span class="line">      ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而非：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line"> Iterator&lt;Foo&gt; it = collection.iterator();</span><br><span class="line"> while(true)&#123;</span><br><span class="line"> Foo foo = it.next();</span><br><span class="line">      ...</span><br><span class="line">   &#125;</span><br><span class="line">&#125; </span><br><span class="line">catch(NoSuchElementException e)&#123;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总之，异常应该只用于异常的情况下，他们永远不应该用于正常的控制流，良好的API也不应该强迫他们的客户端为了正常的控制流而使用异常。对于可以规避的RuntimeException类异常，应该提前做检查。</p><p><strong>优先使用标准异常</strong></p><p>技术专家和普通程序员的区别在于：技术专家追求并且也能够实现高度的代码重用。对于异常也不例外，jdk提供了一组未受检异常（RuntimeException）,他们已经能够满足绝大部分API的异常抛出需要，完全没必要自己再写一个异常实现。</p><p>常见可重用异常如下：</p><ul><li>NullPointException空指针，在禁止使用null的情况下使- null</li><li>IllegalArgumentException 参数非法，非null的参数值不正确</li><li>IllegalStateException 状态非法，对象状态不合适</li><li>IndexOfBoundException 下标参数值越界</li><li>ConcurrentModificationException 在禁止并发修改情况下，检测到对象的并发修改</li><li>UnsupportedOperationException对象不支持该方法调用</li></ul><p>重用现有异常有如下好处：</p><ol><li>它能使你的API更易于学习和使用，因为大家都知道这些异常意味着啥；</li><li>客户端处理异常的代码可读性也能变强；</li></ol><p><strong>非受检异常和受检异常</strong>(这个比较重要)</p><p>非受检异常：即<code>RuntimeException</code>，应用于未按照API约定错误调用导致的异常，或程序实现自身错误导致的异常，如<code>IndexOutOfBoundExcetion</code>、<code>IllegalArgumentException</code>等；<strong>非受检异常本质上希望终止线程</strong>。</p><p>受检异常：应用于程序正确，但由于操作系统原因、网络原因导致的异常，如<code>IOException</code>、<code>ConnectExption</code>、<code>FileNotFountException</code>等，这类异常是可恢复的，必须在编译时明确告知客户端必须处理该类异常，大大增强了系统的可靠性。</p>]]></content>
      
      
      <categories>
          
          <category> 学线培训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学线培训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web踩坑汇总</title>
      <link href="/2021/11/06/web%E8%B8%A9%E5%9D%91%E6%B1%87%E6%80%BB/"/>
      <url>/2021/11/06/web%E8%B8%A9%E5%9D%91%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1>前言：</h1><p>web课设遇到了一些阻力，以前常常听人说“大前端”，我常常嗤之以鼻，从前我觉得现在的技术栈，前端也好，后端也罢，乃至移动开发、嵌入式、人工智能等等等等，没有一个领域不配称之为“大”，然而现在才觉得，前端确实很大。从html到css、js等等等等，乃至后来的一些elementUI再到Vue，这仅仅是我接触到的冰山一角。有很多规范与等着我去了解、学习、使用，有很多库可以被调用但我对他们一无所知，有很多标签、属性等着我去了解、熟悉，凡此种种，令人头疼。</p><p>另一方面，从前的开发经验带给了我束缚。对于移动开发者来说，标签的嵌套规则已经熟悉的不能再熟悉，所需要熟悉的不过是标签名与属性。但一方面，传统的MVC架构思路带给了我太大的束缚，让我一时很难接受MVVM这种从未见过的架构模式。</p><p>MVC与MVVM：</p><p><img src="0.png" alt=""></p><p><img src="1.png" alt=""></p><p>但还是逐渐熟悉了MVVM，感谢这篇博客给我的启发：<a href="https://draveness.me/mvx/">浅谈 MVC、MVP 和 MVVM 架构模式</a></p><p>不过，另一方面，移动开发与web一个特别大的差异就在于，web没有任何的布局规范，而移动开发几乎全部的UI绘制都遵循特定的规范。这就导致很长一段时间以来我的``</template>`标签内一直混乱不堪。web给了开发这对于UI的更高自由度，这是受产品需求影响的，移动开发对界面几乎没有任何缩放需求，而一个web界面就要适应人们对窗口的缩放与界面上更多、更复杂的元素的位置的控制。</p><h1>1.computed和methods的区别</h1><p><code>&lt;script&gt;</code>中，compute与method都代表着方法的集合。不过，区别还是不小：</p><h2 id="computed">computed</h2><blockquote><p>computed属性是Vue的计算属性，是数据层到视图层的数据转化反映;</p><p>计算属性是基于他们的依赖进行缓存的，只有在相关依赖发生改变时，他们才会重新求值，也就是说，只要他的依赖没有发生变化，那么每次访问的时候计算属性都会立即返回之前的计算结果，不再执行函数；</p></blockquote><h2 id="区别">区别</h2><blockquote><p>1.computed是响应式的，methods并非响应式。</p><p>2.<strong>computed是带缓存的，只有依赖数据发生改变，才会重新进行计算</strong>，而methods里的函数在每次调用时都要执行。</p><p>3.<strong>computed中的成员可以只定义一个函数作为只读属性，也可以定义get/set变成可读属性</strong>，这点是methods的成员做不到的。</p><p>4.<strong>computed不支持异步</strong>，当computed内有异步操作时无效，无法监听数据的变化</p><p>5.computed是<strong>属性访问</strong>，而methods是<strong>函数调用</strong></p><p>6.在<code>HTML</code>的插值里</p><ol><li><strong>computed定义的方法我们是以属性的形式访问的</strong>，和<code>data</code>里的属性访问形式一样，<code>&#123;&#123;computedTest&#125;&#125;</code></li><li>但是methods定义的方法，我们必须要加上<code>()</code>来调用，如<code>&#123;&#123;methodTest()&#125;&#125;</code></li></ol></blockquote><h2 id="注意">注意</h2><blockquote><p>如果声明的计算属性计算量非常大的时候，而且访问量次数非常多，改变的时机却很小，那就需要用到computed；缓存会让我们减少很多计算量。</p></blockquote><p>作者：hualayou，有删改<br>链接：<a href="https://www.jianshu.com/p/d69a875b769e">https://www.jianshu.com/p/d69a875b769e</a></p><h1>2.跨域</h1><h2 id="一、什么是跨域HTTP请求">一、什么是跨域HTTP请求</h2><p>现代浏览器出于安全的考虑，使用 XMLHttpRequest对象发起 HTTP请求时必须遵守同源策略，否则就是跨域的HTTP请求，默认情况下是被禁止的。<strong>跨域HTTP请求是指A域上资源请求了B域上的资源</strong>，举例而言，部署在A机器上Nginx上的js代码通过ajax请求了部署在B机器Tomcat上的RESTful接口。</p><p>IP（域名）不同、或者端口不同，都会造成跨域问题。为了解决跨域的问题，曾经出现过jsonp、代理文件等方案，应用场景受限，维护成本高，直到HTML5带来了CORS协议。</p><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing），允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。它通过服务器增加一个特殊Header[Access-Control-Allow-Origin]来告诉客户端跨域的限制，如果浏览器支持CORS、并且判断Origin通过的话，就会允许XMLHttpRequest发起跨域请求。</p><h2 id="二、CROS常见header">二、CROS常见header</h2><p>Access-Control-Allow-Origin: <code>http://****.com</code>表示允许<code>http://****.com</code>发起跨域请求。<br>Access-Control-Max-Age:86400 表示在86400秒内不需要再发送预校验请求。<br>Access-Control-Allow-Methods: GET,POST,PUT,DELETE 表示允许跨域请求的方法。<br>Access-Control-Allow-Headers: content-type 表示允许跨域请求包含content-type</p><h2 id="三、CORS实现跨域访问">三、CORS实现跨域访问</h2><p>授权方式<br>方式1：返回新的<code>CorsFilter</code><br>方式2：重写<code>WebMvcConfigurer</code><br>方式3：使用注解（<code>@CrossOrigin</code>）<br>方式4：手工设置响应头（<code>HttpServletResponse</code> ）</p><blockquote><p>注：方式1和方式2属于全局CORS配置，方式3和方式4属于局部CORS配置。如果使用了局部跨域是会覆盖全局跨域的规则，所以可以通过<code>@CrossOrigin</code>注解来进行细粒度更高的跨域资源控制。</p></blockquote><h3 id="1-返回新的CorsFilter-全局跨域">1.返回新的<code>CorsFilter</code>(全局跨域)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalCorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.添加CORS配置信息</span></span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">          <span class="comment">//放行哪些原始域</span></span><br><span class="line">          config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">          <span class="comment">//是否发送Cookie信息</span></span><br><span class="line">          config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">          <span class="comment">//放行哪些原始域(请求方式)</span></span><br><span class="line">          config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">          <span class="comment">//放行哪些原始域(头部信息)</span></span><br><span class="line">          config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">          <span class="comment">//暴露哪些头部信息（因为跨域访问默认不能获取全部头部信息）</span></span><br><span class="line">          config.addExposedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加映射路径</span></span><br><span class="line">        UrlBasedCorsConfigurationSource configSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.返回新的CorsFilter.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(configSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-创建一个-filter-解决跨域">2.创建一个 filter 解决跨域</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">@WebFilter(urlPatterns = &#123; &quot;/*&quot; &#125;, filterName = &quot;headerFilter&quot;)</span><br><span class="line">public class HeaderFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest request, ServletResponse resp, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) resp;</span><br><span class="line">        //解决跨域访问报错</span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;POST, PUT, GET, OPTIONS, DELETE&quot;);</span><br><span class="line">        //设置过期时间</span><br><span class="line">        response.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;3600&quot;);</span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Origin, X-Requested-With, Content-Type, Accept, client_id, uuid, Authorization&quot;);</span><br><span class="line">        // 支持HTTP 1.1.</span><br><span class="line">        response.setHeader(&quot;Cache-Control&quot;, &quot;no-cache, no-store, must-revalidate&quot;);</span><br><span class="line">        // 支持HTTP 1.0. response.setHeader(&quot;Expires&quot;, &quot;0&quot;);</span><br><span class="line">        response.setHeader(&quot;Pragma&quot;, &quot;no-cache&quot;);</span><br><span class="line">        // 编码</span><br><span class="line">        response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">        chain.doFilter(request, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) &#123;</span><br><span class="line">        log.info(&quot;跨域过滤器启动&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        log.info(&quot;跨域过滤器销毁&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-重写WebMvcConfigurer（全局跨域）">3. 重写<code>WebMvcConfigurer</code>（全局跨域）</h3><p>任意配置类，返回一个新的<code>WebMvcConfigurer Bean</code>，并重写其提供的跨域请求处理的接口，目的是添加映射路径和具体的CORS配置信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalCorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">corsConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">//重写父类提供的跨域请求处理的接口</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//添加映射路径</span></span><br><span class="line">                registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                        <span class="comment">//放行哪些原始域</span></span><br><span class="line">                        .allowedOrigins(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                        <span class="comment">//是否发送Cookie信息</span></span><br><span class="line">                        .allowCredentials(<span class="keyword">true</span>)</span><br><span class="line">                        <span class="comment">//放行哪些原始域(请求方式)</span></span><br><span class="line">                        .allowedMethods(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>)</span><br><span class="line">                        <span class="comment">//放行哪些原始域(头部信息)</span></span><br><span class="line">                        .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                        <span class="comment">//暴露哪些头部信息（因为跨域访问默认不能获取全部头部信息）</span></span><br><span class="line">                        .exposedHeaders(<span class="string">&quot;Header1&quot;</span>, <span class="string">&quot;Header2&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-使用注解（局部跨域）">4. 使用注解（局部跨域）</h3><p>在方法上（<code>@RequestMapping</code>）使用注解 <code>@CrossOrigin</code> ：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">&quot;/hello&quot;</span>)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@CrossOrigin(<span class="meta-string">&quot;http://localhost:8080&quot;</span>)</span> </span><br><span class="line"><span class="keyword">public</span> String index( )&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者在控制器（@Controller）上使用注解 <code>@CrossOrigin</code> ：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@CrossOrigin(origins = <span class="meta-string">&quot;http://xx-domain.com&quot;</span>, maxAge = 3600)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">&quot;/hello&quot;</span>)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String index( )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-手工设置响应头（局部跨域-）">5.手工设置响应头（局部跨域 ）</h3><p>使用<code>HttpServletResponse</code>对象添加响应头（Access-Control-Allow-Origin）来授权原始域，这里Origin的值也可以设置为&quot;*&quot; ，表示全部放行。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">&quot;/hello&quot;</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">index</span>(<span class="params">HttpServletResponse response</span>)</span>&#123;</span><br><span class="line">    response.addHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;http://localhost:8080&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>3.判断合法</h1><h2 id="数字">数字</h2><p>小问题，普适的方法：正则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/^[0-9]+.?[0-9]*/</span>;</span><br><span class="line">            <span class="keyword">if</span> (!re.test(<span class="built_in">this</span>.form_add.credit)) &#123;</span><br><span class="line">                alert(<span class="string">&quot;学分请输入数字&quot;</span>);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h2 id="邮箱">邮箱</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pat = <span class="string">&#x27;[a-zA-Z0-9]+@[a-zA-Z0-9]+\.[a-zA-Z0-9]+&#x27;</span></span><br></pre></td></tr></table></figure><h1>4.我为什么不用外键</h1><p>在关系型数据库中，外键也被称为关系键，它是关系型数据库中提供关系表之间连接的多个列，这一组数据列是当前关系表中的外键，也必须是另一个关系表中的候选键（Candidate Key），我们可以通过候选键在当前表中找到唯一的元素。在通常情况下，我们都会使用关系表中的主键作为其他表中的外键，这样才可以满足关系型数据库对外键的约束。</p><p><img src="2.jpg" alt=""></p><p>外键不仅仅是数据库表中的一个整数，<strong>它还提供了额外的一致性保证</strong>。因为数据库往往是整个系统的真理之源（Source of Truth），所以保证数据的<strong>一致性和正确性</strong>非常重要，关系型数据库虽然提供了外键、触发器等特性保证一致性，而且虽然此次实验里面也提到了外键，但是在今天的生产环境中却很少被使用，并且我也不准备使用。</p><p>引用完整性（Referential Integrity）是数据的属性，如果数据拥有该属性，那么数据中所有的引用都是合法的，在关系型数据库的上下文中，这就意味着<strong>关系型数据库中引用另一个表中的值必须存在</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> posts</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="keyword">FOREIGN</span> KEY (author_id)</span><br><span class="line"><span class="keyword">REFERENCES</span> authors(id);</span><br></pre></td></tr></table></figure><p>上述 SQL 语句可以向关系表中增加外键约束，该 SQL 语句的执行前提是 <code>posts</code> 表中存在 <code>author_id</code> 字段。从 SQL 语句中的 <code>CONSTRAINT</code> 关键字我们也能推测出外键不是一种数据类型，<strong>它是不同关系表之间的约束</strong>。</p><p><strong>不使用外键的原因其实很简单，MySQL、PostgreSQL 等关系型数据库很难水平扩容，但是无状态的服务往往都可以很容易地扩容。由于外键等特性需要数据库执行额外的工作，而这些操作会占用数据库的计算资源，所以我们可以将大部分的需求都迁移到无状态的服务中完成以降低数据库的工作负载。</strong></p><p>根据更新和删除时的行为不同，我们可以将外键分成 <code>RESTRICT</code>、<code>CASCADE</code> 和 <code>SET NULL</code> 等几种，当我们为关系表中的字段增加外键约束时，需要指定外键的类型，最常见的也就是 <code>RESTRICT</code> 和 <code>CASCADE</code> 两种，其中 <code>RESTRICT</code> 为外键的默认类型，<strong>不同类型的外键会带来不同的额外开销，而这些额外开销就是我们不使用外键的理由：</strong></p><ul><li>使用 <code>RESTRICT</code> 会在更新或者删除记录时对外键对应的记录是否存在进行一致性检查；</li><li>使用 <code>CASCADE</code> 会在更新或者删除记录时触发级联更新或者删除操作；</li></ul><blockquote><p>注意：MySQL 中的 <code>NO ACTION</code> 和 <code>RESTRICT</code> 具有相同的语义</p></blockquote><p>而在<a href="https://dba.stackexchange.com/questions/77906/what-is-the-cost-of-adding-a-foreign-key-in-mysql">这个回答</a>中，作者对是否使用外键给了一些理由：</p><blockquote><p>In MySQL, a foreign key requires an index. If an index already exists, the foreign key will use that index (even using the prefix of an existing multi-column index). If no index exists, defining the foreign key will build the index.</p><p>So the size increase and time to create a foreign key is about the same as to create an index on the same column(s).</p><p>The performance of a SELECT is not impacted significantly by the presence of a foreign key. Only a slight additional work for the optimizer, to consider the new indexes.</p><p>The performance of updating is more, because for each foreign key, an INSERT/UPDATE/DELETE has to check to see if the constraint is satisfied. That means a primary key lookup to the referenced tables. This impact is measurable, and it is greater if the referenced tables are not in the buffer pool.</p><p>Another impact is the locking. If I update a row in a child row that has a foreign key, InnoDB places a shared-lock on the referenced rows in the parent tables. That means no one can update those parent rows until I commit. If you have lots of threads updating child rows, then the parent rows may be locked most of the time, and this can make it hard to do concurrent work in the parent tables. Not so much a performance problem, but a concurrency problem.</p><p>As with all “how does that perform” questions, the answer really depends on your workload. If you don’t have concurrent updates, for example, that issue may not effect you for all practical purposes. Testing it yourself with load testing is the only way to be sure. It’s not something anyone on StackOverflow can answer precisely for you.</p></blockquote><p>总结一下，一方面就是select受性能外键影响不大，但是INSERT/UPDATE/DELETE的性能会受到较大影响，因为检查参数是否满足条件需要额外的性能支出，如果数据表不在缓冲池会导致更高的性能亏损。另一方面就是外键的加锁策略导致在并发量较高的情况下程序等待锁被释放而引发的性能亏损，与单表索引不同的是，它会引用一张或多张父表，这样当对子表进行写入操作(UPDATE/INSERT)的时候，父表就会被加上“共享锁”，这样在对子表高并发进行写入操作的情况下，对父表的写入操作就会由于“共享锁”的存在，而会长时间不能得到更新。</p><p>（个人觉得不能及时更新会对事务一致性产生一定影响）（这句话不一定对）</p><p>其次，外键并不是不可替代的，只要后端逻辑处理得当完全可以避免外键的使用，而且在逻辑上也是很简单的，所以我更倾向于使用这种方法。</p><p>部分参考：<a href="https://draveness.me/whys-the-design-database-foreign-key/%EF%BC%8Cta%E8%AE%B2%E7%9A%84%E7%9C%9F%E5%A5%BD">https://draveness.me/whys-the-design-database-foreign-key/，ta讲的真好</a></p><h1>5.#与$：SQL的细微知识</h1><h2 id="问题发现：">问题发现：</h2><p>在调用SQL语句进行update的时候一直出现实体类与数据库字段不匹配问题，<code>java.sql.SQLSyntaxErrorException: Unknown column 'xxx' in 'field list'</code>,但这其实是一个非常常见的错误，最诡异的是报错是这样的：</p><p><img src="3.png" alt=""></p><p>SQL语句：</p><p><img src="4.png" alt=""></p><p>按道理讲，SQL语句应该是毫无问题的，我的select等等其他方法也是用类似的格式写的，但这个update偏偏不行，而且最诡异的是一个数据被识别为了数据表的列名，这就让人十分迷惑。</p><p>最后，我将引用数据的方法${}改成了#{}，解决了这个问题。</p><h2 id="分析：">分析：</h2><h3 id="二者区别：">二者区别：</h3><p>首先，在MyBatis 的映射配置文件中，动态传递参数有两种方式：</p><ul><li><p>#{} 占位符</p></li><li><p>${} 拼接符</p></li></ul><p>其次：</p><ul><li><p>#{} 为参数占位符 ?，即sql 预编译，${} 为字符串替换，即 sql 拼接</p></li><li><p>#{}：动态解析 -&gt; 预编译 -&gt; 执行，${}：动态解析 -&gt; 编译 -&gt; 执行</p></li><li><p>#{} 的变量替换是在DBMS 中，${} 的变量替换是在 DBMS 外</p></li></ul><blockquote><p>DBMS: Database Management System，数据库管理系统</p></blockquote><ul><li><p>变量替换后，#{} 对应的变量自动加上单引号 ‘’，变量替换后，${} 对应的变量不会加上单引号 ‘’</p></li><li><p>#{} 能防止sql 注入，${} 不能防止sql 注入</p></li></ul><h3 id="样例：">样例：</h3><p>#{} 和 ${} 的实例：假设传入参数为 1</p><ul><li>开始</li></ul><p>1）<code>#&#123;&#125;：select * from t_user where uid=#&#123;uid&#125;</code></p><p>2）<code>$&#123;&#125;：select * from t_user where uid= '$&#123;uid&#125;'</code></p><ul><li>然后</li></ul><p>1）<code>#&#123;&#125;：select * from t_user where uid= ?</code></p><p>2）<code>$&#123;&#125;：select * from t_user where uid= 1</code></p><ul><li>最后</li></ul><p>1）<code>#&#123;&#125;：select * from t_user where uid= '1'</code></p><p>2）<code>$&#123;&#125;：select * from t_user where uid= 1</code></p><h3 id="注意事项：">注意事项：</h3><ul><li>能用<code>#&#123;&#125;</code>的地方就用<code> #&#123;&#125;</code>，不用或少用 <code>$&#123;&#125;</code>。因为使用<code>$&#123; &#125;</code>会导致sql注入，不利于系统的安全性！</li></ul><blockquote><p>SQL注入：就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。常见的有匿名登录（在登录框输入恶意的字符串）、借助异常获取数据库信息等</p></blockquote><ul><li>表名作参数时，必须用 <code>$&#123;&#125;。如：select * from $&#123;tableName&#125;</code></li><li>order by 时，必须用 <code>$&#123;&#125;。如：select * from t_user order by $&#123;columnName&#125;</code></li><li>使用 <code>$&#123;&#125; </code>时，要注意何时加或不加单引号，即<code> $&#123;&#125;</code> 和 <code>'$&#123;&#125;'</code></li></ul><h2 id="11-24又踩了一坑：">11.24又踩了一坑：</h2><p><img src="7.png" alt=""></p><p>完整的第一行如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nested exception is org.apache.ibatis.type.TypeException: Could not set parameters <span class="keyword">for</span> mapping: ParameterMapping&#123;property=<span class="string">&#x27;sid&#x27;</span>, mode=IN, javaType=<span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span>, <span class="title">jdbcType</span></span>=<span class="keyword">null</span>, numericScale=<span class="keyword">null</span>, resultMapId=<span class="string">&#x27;null&#x27;</span>, jdbcTypeName=<span class="string">&#x27;null&#x27;</span>, expression=<span class="string">&#x27;null&#x27;</span>&#125;. Cause: org.apache.ibatis.type.TypeException: Error setting non <span class="keyword">null</span> <span class="keyword">for</span> parameter #<span class="number">2</span> with JdbcType <span class="keyword">null</span> . Try setting a different JdbcType <span class="keyword">for</span> <span class="keyword">this</span> parameter or a different configuration property. Cause: org.apache.ibatis.type.TypeException: Error setting non <span class="keyword">null</span> <span class="keyword">for</span> parameter #<span class="number">2</span> with JdbcType <span class="keyword">null</span> . Try setting a different JdbcType <span class="keyword">for</span> <span class="keyword">this</span> parameter or a different configuration property. Cause: java.sql.SQLException: <span class="function">Parameter index out of <span class="title">range</span> <span class="params">(<span class="number">2</span> &gt; number of parameters, which is <span class="number">1</span>)</span></span></span><br></pre></td></tr></table></figure><p>发现在字段映射过程中多了一些奇奇怪怪的字段，换成<code>$&#123;&#125;</code>就恢复正常了。现在猜测<code>$&#123;&#125;</code>与<code>#&#123;&#125;</code>之间的区别可能没那么简单。但是看报错类型是<code>MyBatisSystemException</code>，也可能是<code>MyBatis</code>在封装过程中产生的问题。</p><p>但是，其实<code>#&#123;&#125;</code>外面不需要加’'。删掉就好了</p><h1>6.PBE加密：</h1><h2 id="1-概述">1.概述</h2><p>PBE(Password Based Encryption，基于口令加密)是一种基于口令的加密算法，其特点是使用口令代替了密钥，而口令由用户自己掌管，采用随机数(这里称之为 盐)杂凑多重加密等方法保证数据的安全性。</p><p>PBE 算法并没有 真正构建新的加密/解密算法，而是对已知的对称加密算法(eg:DES算法)做了包装；使用PBE算法对数据做加密/解密操作时，其实是使用了 DES 或者 AES 等其他对称加密算法做了相应的操作。</p><p>既然，PBE算法是使用了较为常用的对称加密算法，那就无法回避密钥的问题；**口令并不能替代密钥，密钥是经过加密算法计算得出的，但口令本身不可能很长，单纯的口令很容易通过穷举攻击方式破译，这就引入了 “盐”。盐能够阻止字典攻击或预先计算的攻击，本身是一个随机的信息，相同的随机信息极不可能使用2次。**将盐附加在 口令上，通过消息摘要算法经过迭代计算获取得到 构建密钥/初始化向量的基本材料，使得破译加密信息的难度加大。</p><h2 id="2-模型图（UML）">2.模型图（UML）</h2><p><img src="5.png" alt=""></p><h2 id="3-实现">3.实现</h2><p><code>import org.bouncycastle.jce.provider.BouncyCastleProvider;</code>在idea中可以Maven搜索找到，<code>pom.xml</code>可以通过如下引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--口令加密--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bouncycastle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bcprov-jdk16<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以下代码参考<a href="https://blog.csdn.net/Leon_Jinhai_Sun/article/details/89919308">Leon_Jinhai_Sun的代码</a>，有删改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"><span class="keyword">import</span> java.security.Security;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKeyFactory;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.PBEKeySpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.PBEParameterSpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.jce.provider.BouncyCastleProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PBECipher</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首先我们要Castle的jar包引入到项目中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ALGORITHM = <span class="string">&quot;PBEWITHMD5andDES&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String CIPHER_NAME = <span class="string">&quot;PBEwithSHA1and128bitAES-CBC-BC&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ITERATION_COUNT = <span class="number">1000</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encrypt(String password, <span class="keyword">byte</span>[] salt, <span class="keyword">byte</span>[] input) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 我们在加密的时候需要创建一个PBEKeySpec</span></span><br><span class="line"><span class="comment">         * 还有传入的用户输入的password</span></span><br><span class="line"><span class="comment">         * 得到一个PBEKeySpec对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        PBEKeySpec keySpec = <span class="keyword">new</span> PBEKeySpec(password.toCharArray());</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 然后我们通过SecretKeyFactory</span></span><br><span class="line"><span class="comment">         * 通过getInstance方法</span></span><br><span class="line"><span class="comment">         * 得到一个SecretKeyFactory对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SecretKeyFactory sKeyFactory = SecretKeyFactory</span><br><span class="line">                .getInstance(CIPHER_NAME);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 然后通过generateSecret传入keySpec</span></span><br><span class="line"><span class="comment">         * 就可以得到一个SecretKey</span></span><br><span class="line"><span class="comment">         * 这个SecretKey就是我们将来要加密的密钥</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SecretKey skey = sKeyFactory.generateSecret(keySpec);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 紧接着我们要通过salt生成一个PBEParameterSpec</span></span><br><span class="line"><span class="comment">         * 我们传入1000</span></span><br><span class="line"><span class="comment">         * 表示用户的口令和salt会走1000次的循环</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        PBEParameterSpec pbeps = <span class="keyword">new</span> PBEParameterSpec(salt, ITERATION_COUNT);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 然后我们通过Cipher.getInstance得到一个Cipher对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Cipher cipher = Cipher.getInstance(CIPHER_NAME);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * init方法会传入ENCRYPT_MODE,SecretKey,</span></span><br><span class="line"><span class="comment">         * 以及PBEParameterSpec这三个对象然后就可以加密</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, skey, pbeps);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 得到密文</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(input);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 在解密的时候我们需要传入用户需要的password,salt,以及密文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decrypt(String password, <span class="keyword">byte</span>[] salt, <span class="keyword">byte</span>[] input) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        PBEKeySpec keySpec = <span class="keyword">new</span> PBEKeySpec(password.toCharArray());</span><br><span class="line">        SecretKeyFactory sKeyFactory = SecretKeyFactory</span><br><span class="line">                .getInstance(CIPHER_NAME);</span><br><span class="line">        SecretKey skey = sKeyFactory.generateSecret(keySpec);</span><br><span class="line">        PBEParameterSpec pbeps = <span class="keyword">new</span> PBEParameterSpec(salt, ITERATION_COUNT);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(CIPHER_NAME);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 然后我们把模式设置为DECRYPT_MODE</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, skey, pbeps);</span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(input);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 我们运行这个代码</span></span><br><span class="line"><span class="comment">     * 由于我们每次运行的salt是不同的</span></span><br><span class="line"><span class="comment">     * 所以每次我们得到密文也是不同的</span></span><br><span class="line"><span class="comment">     * 通过用户口令和随机数</span></span><br><span class="line"><span class="comment">     * 我们就保证了加密的强度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 把BouncyCastle作为Provider添加到java.security：</span></span><br><span class="line">        Security.addProvider(<span class="keyword">new</span> BouncyCastleProvider());</span><br><span class="line">        <span class="comment">// 原文：</span></span><br><span class="line">        String message = <span class="string">&quot;Hello, world! encrypted using PBE!&quot;</span>;</span><br><span class="line">        <span class="comment">// 加密口令</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 我们设置一个加密口令password hello123456</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String password = <span class="string">&quot;hello12345&quot;</span>;</span><br><span class="line">        <span class="comment">// 16 bytes随机Salt：</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 我们通过SecureRandom.getInstanceStrong().generateSeed生成一个随机salt</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">byte</span>[] salt = SecureRandom.getInstanceStrong().generateSeed(<span class="number">16</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 我们打印这个salt</span></span><br><span class="line"><span class="comment">         * salt: d4356ec3e5621a8f1f6a7be953b0c31e</span></span><br><span class="line"><span class="comment">         * 我们生成的随机的salt</span></span><br><span class="line"><span class="comment">         * 1个16字节的数组</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;salt: %032x\n&quot;</span>, <span class="keyword">new</span> BigInteger(<span class="number">1</span>, salt));</span><br><span class="line">        <span class="comment">// 加密：</span></span><br><span class="line">        <span class="keyword">byte</span>[] data = message.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 然后调用encrypt方法进行加密</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">byte</span>[] encrypted = encrypt(password, salt, data);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 加密以后的密文是用Base64表示的</span></span><br><span class="line"><span class="comment">         * encrypted: 2MnA9wd1IL4n0W3d3nS5dqZ6dj1fcxZI2GJtKKIDYchw1EkodmJeOLIQpUBendR+</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;encrypted: &quot;</span> + Base64.getEncoder().encodeToString(encrypted));</span><br><span class="line">        <span class="comment">// 解密：</span></span><br><span class="line">        <span class="keyword">byte</span>[] decrypted = decrypt(password, salt, encrypted);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 解密以后得到与原文相同的信息</span></span><br><span class="line"><span class="comment">         * Hello, world! encrypted using PBE!</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(decrypted, StandardCharsets.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-踩坑：">4.踩坑：</h2><p>任何对<code>byte[]</code>的类型转换都会导致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javax.crypto.BadPaddingException: pad block corrupted</span><br></pre></td></tr></table></figure><p>但是直接将byte[]存进数据库是不可能的，所以暂时没有解决方案。</p><p><img src="6.png" alt=""></p><h1>7.BCrypt加密</h1><h2 id="一、概述">一、概述</h2><p>我们常常通过一些不可逆的算法来保存用户的密码。比如：MD5, SHA1, SHA256, SHA512, SHA-3,等Hash算法。这些算法都是不可逆的。系统在验证用户的口令时，需要把Hash加密过后的口令与后面存放口令的数据库中的口令做比较，如果一致才算验证通过。但你觉得这些算法好吗？我说的是：MD5, SHA1, SHA256, SHA512, SHA-3。如果你使用的是MD5算法来加密你的口令，如果你的口令长度只有小写字母再加上数字，假设口令的长度是6位，那么在目前一台比较新一点的PC机上，穷举所有的口令只需要40秒钟。而据我们了解，几乎有90%以上的用户只用小写字母和数字来组织其口令。对于6位长度的密码只需要最多40秒就可以破解了，这可能会吓到你。如果你愿意花2000美金和一周的时间来构建一个CUDA，那么，你可以在你组建的这个集群中使用进行密码穷举运算，其速度是，1秒钟可以计算7亿个口令。对于目前实际当中使用的比较复杂的口令，其破解率也可以高达每秒一个。当然，这里说的算法是MD5，SHA之类的算法。</p><p>​    那么，对于这样的一种情况来说，我们怎么办？我们还是有办法的。我们知道MD5，SHA的算法速度太快了。所以，我们需要一个“慢一点”的加密算法。<code>BCrypt</code>是这样的一个算法，因为它很慢，对于计算机来说，其慢得有点BT了，但却慢得刚刚好！对于验证用户口令来说是不慢的，对于穷举用户口令来说，其会让那些计算机变得如同蜗牛一样。因为<code>BCrypt</code>采用了一系列各种不同的Blowfish加密算法，并引入了一个work factor，这个工作因子可以让你决定这个算法的代价有多大。因为这些，这个算法不会因为计算机CPU处理速度变快了，而导致算法的时间会缩短了。因为，你可以增加work factor来把其性能降下来。那么，<code>BCrypt</code>到底有多慢？如果和MD5一起来比较的话，如果使用值为12的work factor的话，如果加密“cool”的话，<code>BCrypt</code>需要0.3秒，而MD5只需要一微秒（百万分之一秒）。也就是说，前面我们说的那个只需要40秒就可以穷举完所有的可能的MD5编码的口令的算法，在使用<code>BCrypt</code>下，需要12年。这就是<code>BCrypt</code>给你带来的选择，你可以一个安全的口令和一个快速的加密算法，或是一个不怎么安全的口令和一个性能不好的加密算法。</p><p>​    总而言之，<code>BCrypt</code>是一个哈希算法，一个明文映射多个密文，但是相同密文不同密文校验值<code>BCrypt.checkpw</code>一致；相比于MD5，更安全，速度慢。</p><h2 id="二、JAVA实现">二、JAVA实现</h2><p>转自： <a href="https://yq.aliyun.com/articles/48942">https://yq.aliyun.com/articles/48942</a></p><p>1.官网下载源码：<a href="http://www.mindrot.org/projects/jBCrypt/">http://www.mindrot.org/projects/jBCrypt/</a></p><p>2.将BCrypt.java拷贝到项目下，使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> EncryptAndDecrypt;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* BCrypt Java实现</span></span><br><span class="line"><span class="comment">* BCrypt也是一种哈希算法，相比MD5更安全，速度慢</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UseBCrypt</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Scanner scanner=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">        String password=scanner.nextLine();<span class="comment">//明文</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入待验证密码：&quot;</span>);</span><br><span class="line">        String candidate=scanner.nextLine();</span><br><span class="line">        <span class="comment">// 第一次哈希一个password</span></span><br><span class="line">        String hashed = BCrypt.hashpw(password, BCrypt.gensalt());<span class="comment">//密文</span></span><br><span class="line">        <span class="comment">// gensalt&#x27;s log_rounds parameter determines the complexity</span></span><br><span class="line">        <span class="comment">// the work factor is 2**log_rounds, and the default is 10</span></span><br><span class="line">        String hashed2 = BCrypt.hashpw(password, BCrypt.gensalt(<span class="number">12</span>));</span><br><span class="line">        System.out.println(hashed);</span><br><span class="line">        System.out.println(hashed2);</span><br><span class="line">        <span class="comment">//密码密文匹配检测</span></span><br><span class="line">        <span class="keyword">if</span> (BCrypt.checkpw(candidate, hashed))</span><br><span class="line">            System.out.println(<span class="string">&quot;It matches&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;It does not match&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">请输入密码：</span><br><span class="line"><span class="number">123456</span></span><br><span class="line">请输入待验证密码：</span><br><span class="line"><span class="number">234563</span></span><br><span class="line">$2a$<span class="number">10</span>$RbX30iBRU0/rZtY9itIYF.F7PlqZAkHuYQFDDSE9ESOU9z.i.1gZu</span><br><span class="line">$2a$<span class="number">12</span>$waisaCtTw8EvT/ddNEz1kOFPdIAHHIfPQk0QhOLGSAcgDPjCv5s0K</span><br><span class="line">It does not match</span><br></pre></td></tr></table></figure><h1>8.密码重置的策略：</h1><p>首先要确定学号与邮箱是否正确，确认正确后向邮箱发送确认邮件。</p><p>一般来说，确认邮件中包含一个连接，用户点击链接进行确认，这就意味着，该链接只能是单次有效的，并且不同用户应该会获取到不同链接。使用的策略如下：</p><p>首先，请求方式使用get请求，因为设计的URL中不会包含任何敏感信息。其次URL的参数中必然包含学号用以确定身份，然后要解决URL的<strong>唯一性与单次有效性</strong>问题，我采取的策略是使用一个&quot;token&quot;。</p><p>其次，数据库中用于存放加密后的密码的<code>column</code>叫<code>passwordData</code>，我如果想要生成一个随机的、单次有效的token，只靠随机数肯定不行，（众所周知java的随机数是伪随机），受到上面PBE与现实中真正随机数的产生策略的启发，我的解决方案如下：</p><ul><li><strong>首先获取当前时间与用户学号拼接形成一个字符串</strong>（加学号是防止并发量过大的情况下同一时间生成字符串相同，其实也大可不必担心因为下文会使用随机盐值进行加密，生成相同序列的几率微乎其微）</li><li><strong>获取一个随机的16位salt（byte[])，使用PBE调用SHA1进行加密</strong>，由于SHA1是取哈希的非对称加密，且速度非常快，可以认为对并发量不会有太大影响。（但也正因如此现实中应该加一个冷却期才对）。<strong>生成的Base64序列转为字符串即是我要的&quot;token&quot;。</strong></li><li><strong>将生成的的&quot;token&quot;更新到表的<code>passwordData</code>下</strong>，这意味着这期间用户将不能登陆。并将重置密码的URL发送到用户邮箱，<strong>点击URL后比对URL中的token与该学号下的<code>passwordData</code>的内容，若一致，将<code>passwordData</code>的内容替换为123456的加密序列即可</strong>。若不一致，可能token错误或者重新进行了重置密码的申请。</li><li>以上解决了唯一性与单次有效性，因为token在验证完成后就会被抹去，就算用户再次点击重置的链接也只会显示&quot;token已过期&quot;。</li></ul><h1>9.发送邮件的问题：</h1><p>上面提到了发送邮件，方法如下：</p><p>pom.xml引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring:  </span><br><span class="line">  mail:</span><br><span class="line">    host: smtp地址</span><br><span class="line">    username: 邮箱地址即可</span><br><span class="line">    password: 密码或授权码</span><br><span class="line">    properties:</span><br><span class="line">      from: 邮箱地址</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSenderImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailSender</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">public</span> JavaMailSenderImpl mailSender;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">sendMimeMail</span><span class="params">(String mail)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MimeMessageHelper messageHelper = <span class="keyword">new</span> MimeMessageHelper(mailSender.createMimeMessage(), <span class="keyword">true</span>);</span><br><span class="line"> messageHelper.setFrom(mailSender.getJavaMailProperties().getProperty(<span class="string">&quot;from&quot;</span>));</span><br><span class="line">                messageHelper.setTo(mail);</span><br><span class="line">                messageHelper.setText(<span class="string">&quot;text&quot;</span>);</span><br><span class="line">                mailSender.send(messageHelper.getMimeMessage());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用该方法的时候：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">MailSender mailSender;</span><br></pre></td></tr></table></figure><p>然后调用方法即可。</p><p><a href="https://cloud.tencent.com/developer/article/1598632">该文章</a>有参考，但有坑。</p><h1>10.动态SQL强大之处</h1><h2 id="前言">前言</h2><p>这次后端开发中并没有像往常一样使用实体类与数据库表进行映射，一方面，这次数据库表耦合度比较高，我选择了将所有信息耦合在一起的方法减少多表联查并且直接取代了外键，虽然在实际应用中这是非常不可取的（频繁地对同一张表进行读写不仅导致服务器压力大而且在并发量较大时难以保证事务一致性）而且还会存在大量的数据冗余导致空间利用率其实是偏低的，但是好处也十分明显，在处理后端时可以大大减少开发的工作量，但也仅限于这个小项目而已。</p><p>另一方面，我需要能从一张数据表中组装出多个实体对象，这就意味着我不可能使用上述的映射关系。其实这种抉择也是当下形式的一个缩影，近年来很多人吹捧“低代码”这一概念，声称用几行代码就可以构建一个服务，但其实这种便捷性也会使得调用者付出巨大的代价，就是不可避免的“可定制性”或者说“自由度&quot;的降低，与代码的封装其实是一个道理，如何取舍其实还是要看开发需求。</p><h2 id="个人感受">个人感受</h2><p>不是特别想讲动态SQL，这方面个人感觉官网讲的已经非常明白了（<a href="https://mybatis.org/mybatis-3/zh/dynamic-sql.html">传送门</a>），这里说一些个人使用体验。</p><p>以下纯属个见解。</p><h3 id="1-条件性select">1.条件性select</h3><p>首先，动态SQL是<code>myBatis</code>整个架构中特别重要的一环，它的出现即继承了SpringBoot自动装配简化工作量的优势，也解决了SQL查询的一些拓展性或者说灵活性的问题。MySQL的关键字固然有很多，但是其实很大一部分在初级甚至中级开发中很少用得到。但与之对应的我们在查询时往往有多个条件一起用于查询或者只是想从多个条件中选择一个使用，传统的SQL对此束手无策（好像），以至于这个问题一直臭名昭著，但是利用动态SQL的<code>if</code>,<code>when</code>等就可以很好地解决这一问题，大大减少查询的工作量与复杂度。</p><h4 id="一个问题">一个问题</h4><p>但其实这也会带来一个问题，官网也有提到，并给出了一个解决方案：</p><blockquote><p>对于下面的SQL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;findActiveBlogLike&quot;</span><br><span class="line">     resultType=&quot;Blog&quot;&gt;</span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE</span><br><span class="line">  &lt;if test=&quot;state != null&quot;&gt;</span><br><span class="line">    state = #&#123;state&#125;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">  &lt;if test=&quot;title != null&quot;&gt;</span><br><span class="line">    AND title like #&#123;title&#125;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">  &lt;if test=&quot;author != null and author.name != null&quot;&gt;</span><br><span class="line">    AND author_name like #&#123;author.name&#125;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>如果没有匹配的条件会怎么样？最终这条 SQL 会变成这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM BLOG</span><br><span class="line">WHERE</span><br></pre></td></tr></table></figure><p>这会导致查询失败。如果匹配的只是第二个条件又会怎样？这条 SQL 会是这样:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM BLOG</span><br><span class="line">WHERE</span><br><span class="line">AND title like ‘someTitle’</span><br></pre></td></tr></table></figure><p>这个查询也会失败。这个问题不能简单地用条件元素来解决。这个问题是如此的难以解决，以至于解决过的人不会再想碰到这种问题。</p><p>MyBatis 有一个简单且适合大多数场景的解决办法。而在其他场景中，可以对其进行自定义以符合需求。而这，只需要一处简单的改动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;findActiveBlogLike&quot;</span><br><span class="line">     resultType=&quot;Blog&quot;&gt;</span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  &lt;where&gt;</span><br><span class="line">    &lt;if test=&quot;state != null&quot;&gt;</span><br><span class="line">         state = #&#123;state&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;title != null&quot;&gt;</span><br><span class="line">        AND title like #&#123;title&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;author != null and author.name != null&quot;&gt;</span><br><span class="line">        AND author_name like #&#123;author.name&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">  &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除。</p><p><strong>如果 <em>where</em> 元素与你期望的不太一样，你也可以通过自定义 trim 元素来定制 <em>where</em> 元素的功能</strong>。比如，和 <em>where</em> 元素等价的自定义 trim 元素为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;trim prefix=&quot;WHERE&quot; prefixOverrides=&quot;AND |OR &quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/trim&gt;</span><br></pre></td></tr></table></figure><p><em>prefixOverrides</em> 属性会忽略通过管道符分隔的文本序列（注意此例中的空格是必要的）。上述例子会移除所有 <em>prefixOverrides</em> 属性中指定的内容，并且插入 <em>prefix</em> 属性中指定的内容。</p><p>用于动态更新语句的类似解决方案叫做 <em>set</em>。<em>set</em> 元素可以用于动态包含需要更新的列，忽略其它不更新的列。比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=&quot;updateAuthorIfNecessary&quot;&gt;</span><br><span class="line">  update Author</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">      &lt;if test=&quot;username != null&quot;&gt;username=#&#123;username&#125;,&lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;password != null&quot;&gt;password=#&#123;password&#125;,&lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;email != null&quot;&gt;email=#&#123;email&#125;,&lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;bio != null&quot;&gt;bio=#&#123;bio&#125;&lt;/if&gt;</span><br><span class="line">    &lt;/set&gt;</span><br><span class="line">  where id=#&#123;id&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure><p>这个例子中，<em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）。</p></blockquote><blockquote><p>来看看与 <em>set</em> 元素等价的自定义 <em>trim</em> 元素吧：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;trim prefix=&quot;SET&quot; suffixOverrides=&quot;,&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/trim&gt;</span><br></pre></td></tr></table></figure><p>注意，我们覆盖了后缀值设置，并且自定义了前缀值。</p></blockquote><h3 id="2-foreach遍历">2.foreach遍历</h3><p><code>foreach</code>对于java来说非常常见的但对于SQL来说却并不，按照官网的说法：</p><blockquote><p><em>foreach</em> 元素的功能非常强大，它允许你指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量。它也允许你指定开头与结尾的字符串以及集合项迭代之间的分隔符。这个元素也不会错误地添加多余的分隔符</p></blockquote><p>而尤其在IN语句中是非常实用的，不过这次并没怎么用到就不说太多了。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络的异步</title>
      <link href="/2021/10/27/%E7%BD%91%E7%BB%9C%E7%9A%84%E5%BC%82%E6%AD%A5/"/>
      <url>/2021/10/27/%E7%BD%91%E7%BB%9C%E7%9A%84%E5%BC%82%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<p>对于网络请求，按照平常我们的逻辑去写的时候，往往会出现这样的问题</p><p><img src="0.png" alt=""></p><p>为啥会是null呢？有很多同学来问过，我也跟他们解释过，无论是哪种程序，网络请求的执行，一定是特别耗时的操作（相较于我们执行其他平常的程序语句）毕竟打游戏都还有延迟呢，所以很容易出现这种情况，而如果你的程序下一步恰好开始直接对获取的JSONObject进行解析等操作，那么你的APP一般会直接崩溃。</p><p>所以怎么解决呢？其实也很简单，一方面，我们满可以让程序在进行网络请求的时候停下等网络请求执行完获取到返回的数据，也就是同步请求，但是谁要是敢这么干，立即打死。另一方面，可以等数据返回后再重新刷新界面，相当于在网络线程中进行请求，也就是我们okhttp用的<code>.enqueue(callback)</code>方法。</p><h2 id="PS">PS</h2><p>但是首先我觉得有必要说明白<code>OkHttp</code>的异步机制，我讲过，<code>OkHttp</code>会自动帮我们开新线程，指的就是我们在异步执行一个请求的时候开启的新线程。<strong>所以请求传入的<code>callback</code>回调中的代码其实都是在这个新线程里执行的</strong>。而这个线程会最终拿到网络请求的返回数据，所以我们要做的就是在拿到返回数据的<code>callback</code>里更新UI。</p><h1>机制解析</h1><p>我上次告诉大家了可以使用runOnUiThread，AsyncTask、Handler，这次给大家汇总解释一下。</p><h2 id="Handler">Handler</h2><p>众所周知，Android程序运行会开启一个UI线程，也就是主线程，用于处理UI事件。只有在UI线程中才能进行对UI的各种操作，如果在非UI线程中直接对界面元素进行操作，会报错。这是对与获取网络请求并更新UI页面这样的需求来说只能将代码写到UI线程中，这样才能更新UI线程。但是对于这种网络请求或者是耗时的工作，由于执行时间的不可确定性，可能会在执行代码时阻塞。要是将这样的代码写到UI主线程中，就会造成ANR（application not responding，如果UI线程阻塞超过几秒（现在一般是5秒），用户就会看到应用无响应的Dialog）异常，也就是程序无响应，影响客户体验。所以自Android 4.0之后，Android就不允许在主线程中访问网络，否则会报<code>NetworkOnMainThreadException</code>异常。这时另一个方法是新开一个子线程，用于网络访问，并将获取的数据发送给主线程。而子线程和UI线程之间进行通信的机制就是Handler。</p><p>说起Handler，就不得不提<code>Message</code>、<code>MessageQueue</code>以及<code>Looper</code>。<br><img src="1.png" alt=""></p><p><code>Handler</code>:异步回调机制。作用就是在子线程中发送数据，通过<code>sendMessage（）</code>发送数据；在UI线程中接收数据，通过重写<code>handlerMessage</code>方法。如果希望Handler正常工作,在当前线程中要有一个Looper对象<br><code>Looper</code>:每个线程只能够有一个Looper,管理<code>MessageQueue</code>,不断地从中取出Message分发给对应的Handler处理！<br><code>MessageQueue</code>:消息队列,先进先出管理Message,在初始化Looper对象时会创建一个与之关联的<code>MessageQueue</code>;<br><code>Message</code>:<code>Handler</code>接收与处理的消息对象</p><p>通俗一点讲：<strong>当我们的子线程想修改Activity中的UI组件时,我们可以新建一个<code>Handler</code>对象,通过这个对象向主线程发送信息;而我们发送的信息会先到主线程的<code>MessageQueue</code>进行等待,由<code>Looper</code>按先入先出顺序取出,再根据message对象的what属性分发给对应的方法或者函数进行处理！</strong></p><p>更多关于这四者直接关系，如何调用的可以看<a href="https://blog.csdn.net/luoyingxing/article/details/86500542?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-1.no_search_link">这篇博客</a></p><p>反正想要进行网络连接，必须在主线程中使用Handler机制，获取到子线程发来的数据。我们在Android定义一个按钮点击事件，当点击时，向服务器发送请求，并用handler更新UI。代码如下：</p><pre><code>  //主类主线程代码，这个Handler要作为类变量，他获取了主线程的Looper  Handler mHandler = new Handler(Looper.getMainLooper()) &#123;        @Override        public void handleMessage(Message msg) &#123;            super.handleMessage(msg);            switch (msg.what) &#123;                case 1:                    result = JSON.parseObject(msg.getData().getString(&quot;responseData&quot;));                    //继续处理UI，比如：                    getPassword.setText(result.toString());                    break;                default:                    break;            &#125;        &#125;    &#125;;        //callback中的代码：        //获取一个message对象        message = Message.obtain();        //创建传递信息用的bundle        Bundle messageBundle = new Bundle();        //存入信息        messageBundle.putString(&quot;responseData&quot;,responseData);        //确定message的编号        message.what = 1;        //将bundle注入message        message.setData(messageBundle);        //发送信息        mHandler.sendMessage(message);                //完整代码会放在最后</code></pre><p>其中重写了<code>handleMessage（Message msg）</code>方法，其中的msg就是写完子线程后在子线程中handler的<code>sendMessage（Message msg）</code>所传过来的msg信息，<code>handleMessage</code>方法中就可以对UI线程进行操作了。</p><p>创建 Handler 有两种方法：</p><ul><li><p>1、在构造函数中指定 Looper：<br><code>Handler handler = new Handler(Looper looper);</code></p><p>现在 handler指向了我们提供的Looper（实际上是 Looper 的消息队列）</p></li><li><p>2、使用空的构造函数：<br><code>Handler handler = new Handler();</code></p><p>当我们使用空构造函数的时候，Handler 会自动指向和当前线程绑定的 Looper。真方便！</p><p>Handler 提供了很方便的方法用于创建消息并自动将它们添加到 Looper 消息队列。</p></li></ul><h2 id="runOnUiThread">runOnUiThread</h2><p>这是最简单的一种方法了，可以无脑使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">result = JSON.parseObject(responseData);</span><br><span class="line">GetInfo.<span class="keyword">this</span>.runOnUiThread(()-&gt;&#123;</span><br><span class="line">    <span class="comment">//在这里更新UI，比如：</span></span><br><span class="line">     getPassword.setText(result.toString());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="破解魔法">破解魔法</h3><p>我们一起来看看 Activity 源码中的相关部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Handler mHandler = <span class="keyword">new</span> Handler();</span><br><span class="line"><span class="keyword">private</span> Thread mUiThread;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runOnUiThread</span><span class="params">(Runnable action)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Thread.currentThread() != mUiThread) &#123;</span><br><span class="line">        mHandler.post(action);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         action.run();</span><br><span class="line">     &#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来非常简单，首先我们检查当前运行的线程是否是主线线程。</p><p>如果是主线程–很棒！只需要调用 Runnable 的 <code>run（）</code> 方法。</p><p>但是如果不是主线程呢？</p><p>在这种情况下，我们会调用 <code>mHandler.post()</code> 并将我们的 Runnable 传递过去。然后在主线程中执行。</p><h3 id="一切都从-Looper-开始">一切都从 Looper 开始</h3><p>当我们创建一个新的 Java 线程时，我们重写它的 <code>run()</code> 方法。一个简单的线程实现看起来应该是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Do stuff...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好好的看一下 <code>run()</code> 方法，当线程执行完该方法中所有的语句后，线程就完成了。结束了。没用了。</p><p>如我我们想重复使用一个线程（一个很好的理由就是避免新线程创建以及减少内存消耗）我们必须让它保持存活状态并且等待接收新的指令。一个常用的方式就是在线程的 <code>run()</code> 方法里创建一个循环：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> running;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (running) &#123;</span><br><span class="line">            <span class="comment">// Do stuff...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要 while 循环还在执行（即 <code>run()</code> 方法还没有执行完毕）–这个线程就保持存活状态。</p><p><strong>这就是 Looper 所做的事情：</strong></p><p><strong>Looper。就是 LOOPING，并保持它的线程处于存活状态</strong></p><p>关于 Looper 以下几点值得注意：</p><ul><li><strong>非主线程默认没有 Looper</strong></li><li>你可创建一个 Looper 并将它绑定到一个线程</li><li><strong>每一个线程只能绑定一个 Looper</strong></li></ul><p>所以，我们将线程中的 while 循环用 Looper 实现来替换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Looper.prepare(); </span><br><span class="line">        Looper.loop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真的很简单：</p><p>调用 <code>Lopper.prepare()</code> 是检查当前线程是否还没有绑定 Lopper（记住，每一个线程只能绑定一个 Looper），如果没有就创建一个 Looper 并和当前线程绑定。</p><p>调用 <code>Looper.loop()</code> 触发我们的 Looper 开始循环。</p><p>所以，现在 Looper 开始循环并保持线程处于存活状态，但是如果不能传递指令、任务或者其他事情让线程执行实际的任务，那么保持线程存活没有任何意义。</p><p>幸好，Looper 不仅仅是循环。<strong>当我们创建 Looper 的时候，会一并创建一个工作队列</strong>（讲Handler的时候提到过）。这个队列称为消息队列因为它持有消息（<strong>Message</strong>）对象。Looper配合<code>viewRootImpl</code>视图树的handler将所有的消息追加到主线程消息队列后面，一一执行。</p><p>例如，<code>post()</code> 方法就创建一条消息并将它添加到 Looper 队列的尾部。</p><p>如果我们希望消息持有一个任务（一个 Runnable），我们简单的将 Runnable 对象传递给 <code>post()</code> 方法就可以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">handler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// Do stuff...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>所以如果上面的handler用post方法其实本质上跟runOnUiThread是差不多的。</p><h3 id="再来看看-Activity-的源码">再来看看 Activity 的源码</h3><p>现在我们再仔细的看一看<code>runOnUiThread():</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Handler mHandler = <span class="keyword">new</span> Handler();</span><br><span class="line"><span class="keyword">private</span> Thread mUiThread;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runOnUiThread</span><span class="params">(Runnable  action)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Thread.currentThread() != mUiThread) &#123;</span><br><span class="line">        mHandler.post(action);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         action.run();</span><br><span class="line">     &#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**记住：**这段代码是在主线程中执行，这意味着 <code>mHandler</code> 指向主线程的 Looper。</p><p>是的，<strong>应用主线程是唯一一个默认绑定了 Looper 线程</strong>。</p><p>所以。。。当这一行代码执行的时候：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mHandler.post(action);</span><br></pre></td></tr></table></figure><p>Handler 会创建一条持有我们传入的 Runnable 的消息，这条消息随后被添加到主线程的消息队列，然后等待 Handler 在它的Looper线程（<strong>主线程</strong>）中执行。</p><h2 id="AsyncTask">AsyncTask</h2><p><strong>不太想写了，以下AsyncTask转载自[<a href="https://blog.csdn.net/lidew521/article/details/118072359">credreamer的转载</a></strong></p><p>通过AsyncTask可以实现</p><ol><li>实现多线程<br>在工作线程中执行任务，如 耗时任务</li><li>异步通信、消息传递<br><strong>实现工作线程 &amp; 主线程（<code>UI</code>线程）之间的通信</strong>，即：将工作线程的执行结果传递给主线程，从而在主线程中执行相关的<code>UI</code>操作,从而保证线程安全</li><li>可以看看这个AsyncTask类</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AsyncTask</span>&lt;<span class="title">Params</span>, <span class="title">Progress</span>, <span class="title">Result</span>&gt; &#123; </span><br><span class="line"> ... </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类中参数为3种泛型类型</span></span><br><span class="line"><span class="comment">// 整体作用：控制AsyncTask子类执行线程任务时各个阶段的返回类型</span></span><br><span class="line"><span class="comment">// 具体说明：</span></span><br><span class="line"><span class="comment">// a. Params：开始异步任务执行时传入的参数类型，对应excute（）中传递的参数</span></span><br><span class="line"><span class="comment">// b. Progress：异步任务执行过程中，返回下载进度值的类型</span></span><br><span class="line"><span class="comment">// c. Result：异步任务执行完成后，返回的结果类型，与doInBackground()的返回值类型保持一致</span></span><br><span class="line"><span class="comment">// 注：</span></span><br><span class="line"><span class="comment">// a. 使用时并不是所有类型都被使用</span></span><br><span class="line"><span class="comment">// b. 若无被使用，可用java.lang.Void类型代替</span></span><br><span class="line"><span class="comment">// c. 若有不同业务，需额外再写1个AsyncTask的子类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.他有以下的方法</p><p><img src="2.png" alt=""></p><p>5.然后调用顺序是这样的:</p><p><img src="3.png" alt=""></p><p>然后我们去写一个例子看看</p><p>1.创建 <code>AsyncTask</code> 子类 &amp; 根据需求实现核心方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 步骤1：创建AsyncTask子类</span></span><br><span class="line"><span class="comment">  * 注： </span></span><br><span class="line"><span class="comment">  *   a. 继承AsyncTask类</span></span><br><span class="line"><span class="comment">  *   b. 为3个泛型参数指定类型；若不使用，可用java.lang.Void类型代替</span></span><br><span class="line"><span class="comment">  *   c. 根据需求，在AsyncTask子类内实现核心方法</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Params</span>, <span class="title">Progress</span>, <span class="title">Result</span>&gt; </span>&#123;</span><br><span class="line">        ....</span><br><span class="line">      <span class="comment">// 方法1：onPreExecute（）</span></span><br><span class="line">      <span class="comment">// 作用：执行 线程任务前的操作</span></span><br><span class="line">      <span class="comment">// 注：根据需求复写</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">onPreExecute</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">           ...</span><br><span class="line">        &#125;</span><br><span class="line">           </span><br><span class="line">      <span class="comment">// 方法2：doInBackground（）</span></span><br><span class="line">      <span class="comment">// 作用：接收输入参数、执行任务中的耗时操作、返回 线程任务执行的结果</span></span><br><span class="line">      <span class="comment">// 注：必须复写，从而自定义线程任务</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">protected</span> <span class="built_in">String</span> <span class="function"><span class="title">doInBackground</span>(<span class="params"><span class="built_in">String</span>... params</span>)</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="comment">// 自定义的线程任务</span></span><br><span class="line">            <span class="comment">// 可调用publishProgress（）显示进度, 之后将执行onProgressUpdate（）</span></span><br><span class="line">             publishProgress(count);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 方法3：onProgressUpdate（）</span></span><br><span class="line">      <span class="comment">// 作用：在主线程 显示线程任务执行的进度</span></span><br><span class="line">      <span class="comment">// 注：根据需求复写</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">onProgressUpdate</span>(<span class="params">Integer... progresses</span>)</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 方法4：onPostExecute（）</span></span><br><span class="line">      <span class="comment">// 作用：接收线程任务执行结果、将执行结果显示到UI组件</span></span><br><span class="line">      <span class="comment">// 注：必须复写，从而自定义UI操作</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">onPostExecute</span>(<span class="params"><span class="built_in">String</span> result</span>)</span> &#123;</span><br><span class="line">         ...</span><br><span class="line">         <span class="comment">// UI操作</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 方法5：onCancelled()</span></span><br><span class="line">      <span class="comment">// 作用：将异步任务设置为：取消状态</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">onCancelled</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 步骤2：创建AsyncTask子类的实例对象（即 任务实例）</span></span><br><span class="line"><span class="comment">  * 注：AsyncTask子类的实例必须在UI线程中创建</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">          </span><br><span class="line">  MyTask mTask = <span class="keyword">new</span> MyTask();</span><br><span class="line">          </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 步骤3：手动调用execute(Params... params) 从而执行异步线程任务</span></span><br><span class="line"><span class="comment">  * 注：</span></span><br><span class="line"><span class="comment">  *    a. 必须在UI线程中调用</span></span><br><span class="line"><span class="comment">  *    b. 同一个AsyncTask实例对象只能执行1次，若执行第2次将会抛出异常</span></span><br><span class="line"><span class="comment">  *    c. 执行任务中，系统会自动调用AsyncTask的一系列方法：onPreExecute() 、doInBackground()、onProgressUpdate() 、onPostExecute() </span></span><br><span class="line"><span class="comment">  *    d. 不能手动调用上述方法</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  mTask.execute()；</span><br></pre></td></tr></table></figure><ol><li>创建 <code>AsyncTask</code>子类的实例对象（即 任务实例）</li><li>手动调用<code>execute(（）</code>从而执行异步线程任务</li></ol><p>3.上面是介绍,然后我们再去写个例子去看看:</p><h3 id="6-实例讲解">6. 实例讲解</h3><p>下面，我将用1个实例讲解 具体如何使用 <code>AsyncTask</code></p><h4 id="6-1-实例说明">6.1 实例说明</h4><ol><li>点击按钮 则 开启线程执行线程任务</li><li>显示后台加载进度</li><li>加载完毕后更新UI组件</li><li>期间若点击取消按钮，则取消加载</li></ol><p>如下图</p><p><img src="4.gif" alt="img"></p><h4 id="6-2-具体实现">6.2 具体实现</h4><blockquote><p>建议先下载源码再看：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FCarson-Ho%2FMultiThread_learning">Carson_Ho的Github地址：AsyncTask</a></p></blockquote><ul><li>主布局文件：<em>activity_main.xml</em></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;com.example.carson_ho.handler_learning.MainActivity&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;点我加载&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;还没开始加载!&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">ProgressBar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">&quot;@+id/text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/progress_bar&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;fill_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:progress</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:max</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;?android:attr/progressBarStyleHorizontal&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">&quot;@+id/progress_bar&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/cancel&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;cancel&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>主逻辑代码文件：<em>MainActivity.java</em></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 线程变量</span></span><br><span class="line">    MyTask mTask;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 主布局中的UI组件</span></span><br><span class="line">    Button button,cancel; <span class="comment">// 加载、取消按钮</span></span><br><span class="line">    TextView text; <span class="comment">// 更新的UI组件</span></span><br><span class="line">    ProgressBar progressBar; <span class="comment">// 进度条</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 步骤1：创建AsyncTask子类</span></span><br><span class="line"><span class="comment">     * 注：</span></span><br><span class="line"><span class="comment">     *   a. 继承AsyncTask类</span></span><br><span class="line"><span class="comment">     *   b. 为3个泛型参数指定类型；若不使用，可用java.lang.Void类型代替</span></span><br><span class="line"><span class="comment">     *      此处指定为：输入参数 = String类型、执行进度 = Integer类型、执行结果 = String类型</span></span><br><span class="line"><span class="comment">     *   c. 根据需求，在AsyncTask子类内实现核心方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 方法1：onPreExecute（）</span></span><br><span class="line">        <span class="comment">// 作用：执行 线程任务前的操作</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">onPreExecute</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            text.setText(<span class="string">&quot;加载中&quot;</span>);</span><br><span class="line">            <span class="comment">// 执行前显示提示</span></span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 方法2：doInBackground（）</span></span><br><span class="line">        <span class="comment">// 作用：接收输入参数、执行任务中的耗时操作、返回 线程任务执行的结果</span></span><br><span class="line">        <span class="comment">// 此处通过计算从而模拟“加载进度”的情况</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">String</span> <span class="function"><span class="title">doInBackground</span>(<span class="params"><span class="built_in">String</span>... params</span>)</span> &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                int count = <span class="number">0</span>;</span><br><span class="line">                int length = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (count&lt;<span class="number">99</span>) &#123;</span><br><span class="line"> </span><br><span class="line">                    count += length;</span><br><span class="line">                    <span class="comment">// 可调用publishProgress（）显示进度, 之后将执行onProgressUpdate（）</span></span><br><span class="line">                    publishProgress(count);</span><br><span class="line">                    <span class="comment">// 模拟耗时任务</span></span><br><span class="line">                    Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 方法3：onProgressUpdate（）</span></span><br><span class="line">        <span class="comment">// 作用：在主线程 显示线程任务执行的进度</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">onProgressUpdate</span>(<span class="params">Integer... progresses</span>)</span> &#123;</span><br><span class="line"> </span><br><span class="line">            progressBar.setProgress(progresses[<span class="number">0</span>]);</span><br><span class="line">            text.setText(<span class="string">&quot;loading...&quot;</span> + progresses[<span class="number">0</span>] + <span class="string">&quot;%&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 方法4：onPostExecute（）</span></span><br><span class="line">        <span class="comment">// 作用：接收线程任务执行结果、将执行结果显示到UI组件</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">onPostExecute</span>(<span class="params"><span class="built_in">String</span> result</span>)</span> &#123;</span><br><span class="line">            <span class="comment">// 执行完毕后，则更新UI</span></span><br><span class="line">            text.setText(<span class="string">&quot;加载完毕&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 方法5：onCancelled()</span></span><br><span class="line">        <span class="comment">// 作用：将异步任务设置为：取消状态</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">onCancelled</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"> </span><br><span class="line">            text.setText(<span class="string">&quot;已取消&quot;</span>);</span><br><span class="line">            progressBar.setProgress(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">onCreate</span>(<span class="params">Bundle savedInstanceState</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 绑定UI组件</span></span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"> </span><br><span class="line">        button = (Button) findViewById(R.id.button);</span><br><span class="line">        cancel = (Button) findViewById(R.id.cancel);</span><br><span class="line">        text = (TextView) findViewById(R.id.text);</span><br><span class="line">        progressBar = (ProgressBar) findViewById(R.id.progress_bar);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 步骤2：创建AsyncTask子类的实例对象（即 任务实例）</span></span><br><span class="line"><span class="comment">         * 注：AsyncTask子类的实例必须在UI线程中创建</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        mTask = <span class="keyword">new</span> MyTask();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 加载按钮按按下时，则启动AsyncTask</span></span><br><span class="line">        <span class="comment">// 任务完成后更新TextView的文本</span></span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">onClick</span>(<span class="params">View v</span>)</span> &#123;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 步骤3：手动调用execute(Params... params) 从而执行异步线程任务</span></span><br><span class="line"><span class="comment">                 * 注：</span></span><br><span class="line"><span class="comment">                 *    a. 必须在UI线程中调用</span></span><br><span class="line"><span class="comment">                 *    b. 同一个AsyncTask实例对象只能执行1次，若执行第2次将会抛出异常</span></span><br><span class="line"><span class="comment">                 *    c. 执行任务中，系统会自动调用AsyncTask的一系列方法：onPreExecute() 、doInBackground()、onProgressUpdate() 、onPostExecute()</span></span><br><span class="line"><span class="comment">                 *    d. 不能手动调用上述方法</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                mTask.execute();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">        cancel = (Button) findViewById(R.id.cancel);</span><br><span class="line">        cancel.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">onClick</span>(<span class="params">View v</span>)</span> &#123;</span><br><span class="line">                <span class="comment">// 取消一个正在执行的任务,onCancelled方法将会被调用</span></span><br><span class="line">                mTask.cancel(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>代码</h1><h2 id="我的httpUtil">我的<code>httpUtil</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> JSONObject object;</span><br><span class="line">    Callback callback = <span class="keyword">new</span> Callback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="comment">//获取返回数据并以String格式保存</span></span><br><span class="line">            String responseData = response.body().string();</span><br><span class="line">            <span class="comment">//将String格式转换为json格式</span></span><br><span class="line">            object = JSON.parseObject(responseData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//打印异常栈</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendGet</span><span class="params">(String address, okhttp3.Callback callback)</span> </span>&#123;</span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(address)</span><br><span class="line">                .get()</span><br><span class="line">                .build();</span><br><span class="line">        client.newCall(request).enqueue(callback);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendPost</span><span class="params">(String address, okhttp3.Callback callback,RequestBody body)</span> </span>&#123;</span><br><span class="line">                OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(address)</span><br><span class="line">                .post(body)</span><br><span class="line">                .build();</span><br><span class="line">        client.newCall(request).enqueue(callback);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">OKHttpWithCallBack</span><span class="params">(<span class="keyword">boolean</span> isGet,String address,Callback callback,RequestBody body)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isGet)&#123;</span><br><span class="line">            sendGet(address,callback);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            sendPost(address,callback,body);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  JSONObject <span class="title">OKHttpWithoutCallBack</span><span class="params">(<span class="keyword">boolean</span> isGet,String address, RequestBody body)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isGet)&#123;</span><br><span class="line">            sendGet(address,callback);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            sendPost(address,callback,body);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Handler代码：">Handler代码：</h2><p>java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetInfo</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span>  </span>&#123;</span><br><span class="line">    HttpUtil httpUtil = <span class="keyword">new</span> HttpUtil();</span><br><span class="line">    TextView getAccount;</span><br><span class="line">    TextView getPassword;</span><br><span class="line">    EditText textUsername;</span><br><span class="line">    Button buttonGetInfo;</span><br><span class="line">    Button buttonIntent;</span><br><span class="line">    JSONObject result;</span><br><span class="line">    Message message;</span><br><span class="line"></span><br><span class="line">    Handler mHandler = <span class="keyword">new</span> Handler(Looper.getMainLooper()) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="comment">//更新 TextView UI</span></span><br><span class="line">                    result = JSON.parseObject(msg.getData().getString(<span class="string">&quot;responseData&quot;</span>));</span><br><span class="line">                    <span class="comment">//继续处理UI</span></span><br><span class="line">                    System.out.println();</span><br><span class="line">                    getPassword.setText(result.toString());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_get_info);</span><br><span class="line">        getAccount = findViewById(R.id.account_text);</span><br><span class="line">        getPassword = findViewById(R.id.password_text);</span><br><span class="line">        textUsername = findViewById(R.id.text_username);</span><br><span class="line">        buttonGetInfo = findViewById(R.id.button_get_info);</span><br><span class="line">        buttonIntent = findViewById(R.id.button_intent2);</span><br><span class="line"></span><br><span class="line">        buttonGetInfo.setOnClickListener(view -&gt; &#123;</span><br><span class="line">            getInfo();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">     httpUtil.OKHttpWithCallBack(</span><br><span class="line">             <span class="keyword">true</span>,</span><br><span class="line">             <span class="string">&quot;http://82.156.169.66:8181/user/login?account=1234&amp;password=1234&quot;</span>,</span><br><span class="line">             callback,</span><br><span class="line">             <span class="keyword">null</span></span><br><span class="line">             );</span><br><span class="line">    &#125;</span><br><span class="line">    Callback callback = <span class="keyword">new</span> Callback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="comment">//获取返回数据并以String格式保存</span></span><br><span class="line">            String responseData = response.body().string();</span><br><span class="line">            <span class="comment">//将String格式转换为json格式</span></span><br><span class="line">            <span class="keyword">if</span> (responseData != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">              message = Message.obtain();</span><br><span class="line">              Bundle messageBundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">              messageBundle.putString(<span class="string">&quot;responseData&quot;</span>,responseData);</span><br><span class="line">              message.what = <span class="number">1</span>;</span><br><span class="line">              message.setData(messageBundle);</span><br><span class="line">              mHandler.sendMessage(message);</span><br><span class="line"></span><br><span class="line">             Log.i(<span class="string">&quot;success&quot;</span>, responseData.toString());</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                Log.e(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;onResponse: &quot;</span> );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//打印异常栈</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.GetInfo&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/get_account_text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;@string/get_info_title&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;90dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;54dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;24sp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/text_username&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;256dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;90dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;12dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/edittext_selector&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">&quot;用户名&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;8dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;16sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/account_text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;16dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;90dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;44dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/password_text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;90dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;14dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/button_get_info&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;获取&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:padding</span>=<span class="string">&quot;8dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;90dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;64dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@color/blue&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/button_intent2&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;跳转&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:padding</span>=<span class="string">&quot;8dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;64dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@color/blue&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="runOnUiThread代码：">runOnUiThread代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetInfo</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span>  </span>&#123;</span><br><span class="line">    HttpUtil httpUtil = <span class="keyword">new</span> HttpUtil();</span><br><span class="line">    TextView getAccount;</span><br><span class="line">    TextView getPassword;</span><br><span class="line">    EditText textUsername;</span><br><span class="line">    Button buttonGetInfo;</span><br><span class="line">    Button buttonIntent;</span><br><span class="line">    JSONObject result;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_get_info);</span><br><span class="line">        getAccount = findViewById(R.id.account_text);</span><br><span class="line">        getPassword = findViewById(R.id.password_text);</span><br><span class="line">        textUsername = findViewById(R.id.text_username);</span><br><span class="line">        buttonGetInfo = findViewById(R.id.button_get_info);</span><br><span class="line">        buttonIntent = findViewById(R.id.button_intent2);</span><br><span class="line"></span><br><span class="line">        buttonGetInfo.setOnClickListener(view -&gt; &#123;</span><br><span class="line">            getInfo();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">     httpUtil.OKHttpWithCallBack(</span><br><span class="line">             <span class="keyword">true</span>,</span><br><span class="line">             <span class="string">&quot;http://82.156.169.66:8181/user/login?account=1234&amp;password=1234&quot;</span>,</span><br><span class="line">             callback,</span><br><span class="line">             <span class="keyword">null</span></span><br><span class="line">             );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Callback callback = <span class="keyword">new</span> Callback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="comment">//获取返回数据并以String格式保存</span></span><br><span class="line">            String responseData = response.body().string();</span><br><span class="line">            <span class="comment">//将String格式转换为json格式</span></span><br><span class="line">            <span class="keyword">if</span> (responseData != <span class="keyword">null</span>)&#123;</span><br><span class="line">                </span><br><span class="line">                result = JSON.parseObject(responseData);</span><br><span class="line">                GetInfo.<span class="keyword">this</span>.runOnUiThread(()-&gt;&#123;</span><br><span class="line">                    getPassword.setText(result.toString());</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">             Log.i(<span class="string">&quot;success&quot;</span>, responseData.toString());</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                Log.e(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;onResponse: &quot;</span> );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//打印异常栈</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安卓原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学线培训 </tag>
            
            <tag> 安卓原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的2021华为开发者大会</title>
      <link href="/2021/10/24/%E6%88%91%E7%9A%842021%E5%8D%8E%E4%B8%BA%E5%BC%80%E5%8F%91%E8%80%85%E5%A4%A7%E4%BC%9A/"/>
      <url>/2021/10/24/%E6%88%91%E7%9A%842021%E5%8D%8E%E4%B8%BA%E5%BC%80%E5%8F%91%E8%80%85%E5%A4%A7%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>有一说一真的没有想到今年能有机会参加这次盛会，真的是惊喜。</p><p><img src="0.jpg" alt=""></p><p>作为一名开发者，一名安卓开发者，一名资深（大概）花粉的安卓开发者，能够来到华为在东莞的小镇真的是万分荣幸。</p><p>来之前也想过好多，对未来的规划也好，对知识的期许也罢，其实都是满满的期待罢了。</p><h1>历程</h1><h2 id="The-first-day">The first day</h2><p>飞机加入住手续，虽然有些繁琐，但是疫情之下还是要保护好自己。</p><img src="1.jpg" style="zoom:50%;" /><p>在酒店里体验了一把智能家居，真的感受到了万物互联的一些魅力与便捷。</p><h2 id="The-second-day">The second day</h2><p>一大早起床来到三丫坡签到，虽然有些迷糊但还是很激动。</p><img src="2.jpg" style="zoom:15%;" /><p>进入活动会场（好大）</p><img src="5.jpg" style="zoom:50%;" /><img src="4.jpeg" style="zoom:33%;" /><p>然后就跟大佬们一起去做codelabs，上手体验华为各种开放能力的开发。其实感觉codelab还是蛮简单的，不过第一天不太熟悉，像个没头苍蝇一样乱撞，体验到了一些自己感兴趣的能力，尤其是一些我比较熟悉的HMS相关服务，不过也挑战了特别多几乎没有接触过的知识，比如3D建模能力，sense渲染能力，HIAI开放能力，甚至现学华为推出的eTS（extended TypeScript）语言然后现卖（指修bug），了解了一些前端的最新的开发规范，甚至受现场的一位老师邀请当了一波特邀观众，听了他对鸿蒙开发的演进过程的分析以及现阶段鸿蒙的优势，其中的思想真的值得我思考。</p><p>eTS确实用更少的代码，更低的门槛，解决了传统安卓命令式代码的许多问题，而且耦合度也没有太大区别。安卓原生开发的命令式代码与视图跟逻辑分离的思想固然是好，但同时造成了大量代码冗余和更复杂的代码结构，而eTS的声明式编程则在很大程度上解决了这一问题。</p><img src="3.jpg" style="zoom:33%;" /><p>codelab：</p><img src="9.jpeg" style="zoom:40%;" /><p>做的是HMS的账号服务，我一说这个我做过结果引来了三位老师来指导讲解（雾）</p><p><img src="10.jpeg" alt=""></p><p>然后还领到了证书，哎嘿嘿，感觉这张照片照的挺好的，就放上吧。</p><p>中午跟大家一起吃了饭，下午大家听了公司HR等大佬的一些讲座，还很荣幸地在现场领到了布道师证书和奖杯，并且接受了采访，2333。</p><p><img src="7.jpg" alt=""></p><p>星光不负赶路人，愿携手前行。</p><p><img src="8.jpg" alt=""></p><p><img src="6.jpg" alt=""></p><p>晚上大家一起聚餐，聊得特别开心，（小助手疯狂输出），不过没有留照片，就不放了，2333。</p><h2 id="The-Third-day">The Third day</h2><p>第三天大家一起拍了很多照片（当然第二天也拍了很多）我就一起放几张吧</p><p><img src="11.jpeg" alt=""></p><p><img src="12.jpeg" alt=""></p><p><img src="13.jpeg" alt=""></p><p>拍了照去做了一会儿codelab，顺利了很多，体验了很多想体验的服务，虽然只做了一个小时就去听鸿蒙公开课了，不过在做codelab的时候也跟大佬们聊了很多技术问题，收获了 许多知识和思想。</p><p>鸿蒙公开课让我收获颇丰，我在这里发现了更加优质的资源，但令我感触最深的还是讲到的学习鸿蒙的正确姿势，一种技术，如果我们按照从语言到实操的路程去学习，真的很容易从入门到放弃，但如果先从demo入手，边看边学，就能实时地获取到自己的学习反馈，学习历程也会更轻松更自信。</p><p>两天下来发现两个背包都装满了（雾）。</p><p><img src="16.jpg" alt=""></p><h1>写在最后</h1><p>我总觉得，在某些方面，学校所能提供的还是太少了，这并不是学校不认真负责，而是说本就囿于象牙塔的束缚，学校能尽力为我们提供的是知识，但却很难让我们看清行业实时动向与现状，尤其是在疫情当下，与外界交流减少，更加加剧了这一局面。我们真的需要走出去，去看一看，学一学，了解一些对我们未来发展有指导性的思想与知识，了解一些行业的痛点与现状，了解一些尖端的技术与能力，其重要性并不亚于对课程知识的学习。</p><p>这一年，我从安卓走向了跨平台（cross-platform），又从跨平台开始了解跨终端，历史的发展总是这样，我们希望我们身边的设备，不是一个个孤立的设备，更不应该是每个设备都有自己一套体系而且互相难以兼容的孤立设备，我们所追求的，是让我们使用身边的每一个设备的时候都能像使用自己的双手一样自如。</p><p>诚然，平台与平台之间的隔膜还很难被打破，但设备与设备间的互联却很容易完成，但我们亦不能止步于“联”，更应考虑“智”，如何让设备之间看上去像是一个整体，如何能让用户在设备之间无缝切换，如何能让设备去学习推测主人的意志从而自动地完成服务，如何能让用户去更快地习惯并接受这种生态，各种技术要处于怎样的地位、发挥怎样的能力，究竟哪些技术会被逐渐抛弃、哪些技术会渐渐兴起，这都是我们要考虑的问题，也是行业要考虑的问题。</p><p>此外，从万物互联到万物自联、智联，华为的努力和成果有目共睹，但我们并不会止步于此。星辰之光虽然微弱，但亿万星辰亦可汇成银河，未来，我们在路上。</p><p><img src="15.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 值得纪念的事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 华为 </tag>
            
            <tag> HSD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为HMS集成：1.准备与账号服务</title>
      <link href="/2021/10/19/%E5%8D%8E%E4%B8%BAHMS%E9%9B%86%E6%88%90%EF%BC%9A1-%E5%87%86%E5%A4%87%E4%B8%8E%E8%B4%A6%E5%8F%B7%E6%9C%8D%E5%8A%A1/"/>
      <url>/2021/10/19/%E5%8D%8E%E4%B8%BAHMS%E9%9B%86%E6%88%90%EF%BC%9A1-%E5%87%86%E5%A4%87%E4%B8%8E%E8%B4%A6%E5%8F%B7%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1>引言：为什么要有HMS</h1><h2 id="首先，什么是HMS">首先，什么是HMS?</h2><p>HMS是华为面向移动应用生态提供的一组应用程序和服务，包含HMS Core核心服务、AppGallery应用市场等自有程序以及周边一系列的开发工具。集成HMS的能力和服务，将会帮助您的应用实现更高的开发效率、获得更多的用户、更高的活跃度、以及更可观的收入（来自官方网站）</p><p><strong>华为移动服务</strong>（英语：Huawei Mobile Services，HMS）是<a href="https://zh.wikipedia.org/wiki/%E5%8D%8E%E4%B8%BA">华为</a>的一项服务，让用户利用移动电话或其他移动设备使用华为搜索、华为河图、华为洛书、华为视频等华为产品。用以替代在<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E7%BE%8E%E8%B4%B8%E6%98%93%E6%88%98">中美贸易战</a>开始后对华为移动设备不可用的<a href="https://zh.wikipedia.org/wiki/Google%E7%A7%BB%E5%8A%A8%E6%9C%8D%E5%8A%A1">Google移动服务</a>。</p><p>通过HMS，用户可以使用<a href="https://zh.wikipedia.org/wiki/%E6%B5%81%E5%8B%95%E9%9B%BB%E8%A9%B1">移动电话</a>或其他<a href="https://zh.wikipedia.org/wiki/%E6%B5%81%E5%8B%95%E8%A3%9D%E7%BD%AE">移动设备</a>使用<a href="https://zh.wikipedia.org/wiki/%E5%8D%8E%E4%B8%BA%E5%BA%94%E7%94%A8%E5%B8%82%E5%9C%BA">华为应用市场</a>、<a href="https://zh.wikipedia.org/w/index.php?title=%E5%8D%8E%E4%B8%BA%E5%9C%B0%E5%9B%BE%E6%9C%8D%E5%8A%A1&amp;action=edit&amp;redlink=1">华为地图服务</a>、华为账号服务、数字版权服务、华为云存储、华为<a href="https://zh.wikipedia.org/wiki/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0">机器学习</a>服务、全景技术服务、<a href="https://zh.wikipedia.org/w/index.php?title=%E5%BA%94%E7%94%A8%E5%86%85%E6%94%AF%E4%BB%98&amp;action=edit&amp;redlink=1">应用内支付</a>、广告服务、推送服务、分析服务等。（来自维基百科）</p><h2 id="那么，为什么要有HMS">那么，为什么要有HMS?</h2><p>要知道，Android虽然开源，但谷歌却可以凭借GMS获得持续稳定的利润，主要来源于广告业务与APP分成（谷歌拿走30%），而自中美贸易战与谷歌封杀华为接入GMS后，华为一方面要接入自家服务，另一方面也要凭借自家服务开拓海外市场，这便有了HMS。</p><p><strong>可以说，HMS是华为的一步棋，它下的要比鸿蒙更早，但其重要性不亚于鸿蒙。</strong></p><h1>准备：APP如何集成HMS</h1><p><a href="https://developer.huawei.com/consumer/cn/codelab/HMSPreparation/index.html#0">放官网</a></p><p>下面只说几个坑：</p><ul><li><p>cmd可以Ctrl+c/v，</p></li><li><p>要看清是哪个build.gradle文件</p></li><li><p>注意apply plugin是要放在android闭包前面，不能放在plugins闭包前面</p></li><li><p>Gradle 7.0版本后，&quot;allprojects &gt; repositories&quot;配置已迁移到项目级&quot;settings.gradle&quot;文件中。</p></li><li><p><code> buildTypes</code>闭包要放在<code>signingConfigs</code>之后，否则报错。<code>signingConfigs</code>不要忘记改参数。</p></li></ul><h2 id="快速配置：">快速配置：</h2><h3 id="1">1</h3><p><code>Build-&gt;Generare Signed Bundle/APK...</code></p><h3 id="2">2</h3><p>jks文件放在app目录下，打开命令窗口，并进入已安装<strong>JDK</strong>的<strong>bin</strong>目录下，在<strong>bin</strong>目录下运行，输入<strong>keytool</strong>查看签名文件指令，并运行。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -list -v -keystore D:\Android\WorkSpcae\HmsDemo\app\HmsDemo.jks</span><br></pre></td></tr></table></figure><p>将SHA256复制到<strong>AppGallery Connect</strong>上。</p><h3 id="3">3</h3><p>从<strong>AppGallery Connect</strong>项目的应用中下载<strong>agconnect-services.json</strong>文件。放到APP目录下</p><h3 id="4">4</h3><p>manifest，开权限：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--check network permissions--&gt;</span><br><span class="line"> &lt;uses-permission android:name=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span><br><span class="line"> &lt;!--check wifi state--&gt;</span><br><span class="line"> &lt;uses-permission android:name=<span class="string">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h3 id="5">5</h3><p>app下的build.gradle:</p><ul><li>android闭包前：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line"><span class="comment">// Add the following line</span></span><br><span class="line">apply plugin: <span class="string">&#x27;com.huawei.agconnect&#x27;</span>  </span><br></pre></td></tr></table></figure><ul><li>android闭包中：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    signingConfigs &#123;   <span class="comment">//jks文件信息</span></span><br><span class="line">        release &#123;</span><br><span class="line">            <span class="function">storeFile <span class="title">file</span><span class="params">(<span class="string">&#x27;myhmsaccountservicedemo.jks&#x27;</span>)</span></span></span><br><span class="line"><span class="function">            keyAlias &#x27;key0&#x27;</span></span><br><span class="line"><span class="function">            keyPassword &#x27;Zhaoweining750&#x27;</span></span><br><span class="line"><span class="function">            storePassword &#x27;Zhaoweining750&#x27;</span></span><br><span class="line"><span class="function">            v1SigningEnabled <span class="keyword">true</span></span></span><br><span class="line"><span class="function">            v2SigningEnabled <span class="keyword">true</span></span></span><br><span class="line"><span class="function">        &#125;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//直接替换掉</span></span></span><br><span class="line"><span class="function">   buildTypes </span>&#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            signingConfig signingConfigs.<span class="function">release</span></span><br><span class="line"><span class="function">            minifyEnabled <span class="keyword">false</span></span></span><br><span class="line"><span class="function">            proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">&#x27;proguard-android-optimize.txt&#x27;</span>)</span>, &#x27;proguard-rules.pro&#x27;</span></span><br><span class="line"><span class="function">        &#125;</span></span><br><span class="line"><span class="function">        debug </span>&#123;</span><br><span class="line">            signingConfig signingConfigs.release</span><br><span class="line">            debuggable <span class="keyword">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>dependencies中:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.huawei.hms:hwid:6.1.0.302&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="6">6</h3><p>proguard-rules.pro配置混淆</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-ignorewarnings</span><br><span class="line">-keepattributes *Annotation*</span><br><span class="line">-keepattributes Exceptions</span><br><span class="line">-keepattributes InnerClasses</span><br><span class="line">-keepattributes Signature</span><br><span class="line">-keepattributes SourceFile,LineNumberTable</span><br><span class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">huawei</span>.<span class="title">hianalytics</span>.**</span>&#123;*;&#125;</span><br><span class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">huawei</span>.<span class="title">updatesdk</span>.**</span>&#123;*;&#125;</span><br><span class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">huawei</span>.<span class="title">hms</span>.**</span>&#123;*;&#125;</span><br></pre></td></tr></table></figure><h3 id="7">7</h3><p>项目中的build.gradle：</p><ul><li><code>buildscript</code>中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maven &#123; url <span class="string">&#x27;https://developer.huawei.com/repo/&#x27;</span> &#125; <span class="comment">// HUAWEI Maven repository</span></span><br></pre></td></tr></table></figure><ul><li><code>dependencies</code>中：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classpath <span class="string">&#x27;com.huawei.agconnect:agcp:1.4.1.300&#x27;</span>  <span class="comment">// HUAWEI agcp plugin</span></span><br></pre></td></tr></table></figure><h1>HMS账号服务：</h1><p>MainActivity:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zwn.myhmsaccountservicedemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.huawei.hmf.tasks.Task;</span><br><span class="line"><span class="keyword">import</span> com.huawei.hms.common.ApiException;</span><br><span class="line"><span class="keyword">import</span> com.huawei.hms.support.account.AccountAuthManager;</span><br><span class="line"><span class="keyword">import</span> com.huawei.hms.support.account.request.AccountAuthParams;</span><br><span class="line"><span class="keyword">import</span> com.huawei.hms.support.account.request.AccountAuthParamsHelper;</span><br><span class="line"><span class="keyword">import</span> com.huawei.hms.support.account.result.AuthAccount;</span><br><span class="line"><span class="keyword">import</span> com.huawei.hms.support.account.service.AccountAuthService;</span><br><span class="line"><span class="keyword">import</span> com.zwn.myhmsaccountservicedemo.util.HttpUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> okhttp3.Call;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Callback;</span><br><span class="line"><span class="keyword">import</span> okhttp3.MultipartBody;</span><br><span class="line"><span class="keyword">import</span> okhttp3.RequestBody;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String TAG = <span class="string">&quot;MainActivity:&quot;</span>;</span><br><span class="line">    HttpUtil httpUtil = <span class="keyword">new</span> HttpUtil();</span><br><span class="line">    JSONObject authorizationObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">    JSONObject IDObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">    StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">    AccountAuthService service;</span><br><span class="line"></span><br><span class="line">    Button authorizationButton;</span><br><span class="line">    Button IDSignInButton;</span><br><span class="line">    Button silentSignInButton;</span><br><span class="line">    Button signOut;</span><br><span class="line">    Button cancelAuthorizationCodeButton;</span><br><span class="line">    TextView textView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        authorizationButton  = findViewById(R.id.AuthorizationCodeSignIn);</span><br><span class="line">        IDSignInButton = findViewById(R.id.IDSignIn);</span><br><span class="line">        silentSignInButton = findViewById(R.id.silentSignIn);</span><br><span class="line">        signOut = findViewById(R.id.signOut);</span><br><span class="line">        cancelAuthorizationCodeButton = findViewById(R.id.cancelAuthorizationCode);</span><br><span class="line">        textView = findViewById(R.id.text_main);</span><br><span class="line"></span><br><span class="line">        authorizationButton.setOnClickListener(view -&gt; authorizationSignIn());</span><br><span class="line">        IDSignInButton.setOnClickListener(view -&gt;IDSignIn());</span><br><span class="line">        silentSignInButton.setOnClickListener(view -&gt; silentSignIn());</span><br><span class="line">        signOut.setOnClickListener(view -&gt; signOut());</span><br><span class="line">        cancelAuthorizationCodeButton.setOnClickListener(view -&gt;cancelAuthorization());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//authorizationSignIn</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">authorizationSignIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        AccountAuthParams authParams = <span class="keyword">new</span> AccountAuthParamsHelper(</span><br><span class="line">                AccountAuthParams.DEFAULT_AUTH_REQUEST_PARAM).setAuthorizationCode().createParams();</span><br><span class="line">         service = AccountAuthManager.getService(MainActivity.<span class="keyword">this</span>, authParams);</span><br><span class="line">        startActivityForResult(service.getSignInIntent(), <span class="number">8888</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    int InfoByAuthorizationCode(boolean isRefresh, String authorizationCode,String refreshToken)&#123;</span></span><br><span class="line"><span class="comment">//        if ((!isRefresh&amp;&amp;authorizationCode.isEmpty())||(isRefresh&amp;&amp;refreshToken.isEmpty()))&#123;</span></span><br><span class="line"><span class="comment">//            return 1;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        MultipartBody.Builder getInfoBuilder = new MultipartBody.Builder()</span></span><br><span class="line"><span class="comment">//                .setType(MultipartBody.FORM)</span></span><br><span class="line"><span class="comment">//                .addFormDataPart(&quot;grant_type&quot;, &quot;authorization_code&quot;)</span></span><br><span class="line"><span class="comment">//                .addFormDataPart(&quot;client_id&quot;, &quot;104851299&quot;)</span></span><br><span class="line"><span class="comment">//                .addFormDataPart(&quot;client_secret&quot;, &quot;a89367fe561f1f779d63cb3b5866cd3e9fcf1350e6a7c95d7a1ebac1b29802de&quot;)</span></span><br><span class="line"><span class="comment">//                .addFormDataPart(&quot;code&quot;, authorizationCode);</span></span><br><span class="line"><span class="comment">//        MultipartBody.Builder refreshBuilder = new MultipartBody.Builder()</span></span><br><span class="line"><span class="comment">//                .setType(MultipartBody.FORM)</span></span><br><span class="line"><span class="comment">//                .addFormDataPart(&quot;grant_type&quot;, &quot;refresh_token&quot;)</span></span><br><span class="line"><span class="comment">//                .addFormDataPart(&quot;client_id&quot;, &quot;104851299&quot;)</span></span><br><span class="line"><span class="comment">//                .addFormDataPart(&quot;client_secret&quot;, &quot;a89367fe561f1f779d63cb3b5866cd3e9fcf1350e6a7c95d7a1ebac1b29802de&quot;)</span></span><br><span class="line"><span class="comment">//                .addFormDataPart(&quot;refresh_token&quot;, refreshToken);</span></span><br><span class="line"><span class="comment">//        RequestBody requestBody = isRefresh?refreshBuilder.build():getInfoBuilder.build();</span></span><br><span class="line"><span class="comment">//        httpUtil.OKHttpWithCallBack(false,</span></span><br><span class="line"><span class="comment">//                &quot;https://oauth-login.cloud.huawei.com/oauth2/v3/token&quot;,InfoByAuthorizationCallback,requestBody);</span></span><br><span class="line"><span class="comment">//        return 0;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    Callback InfoByAuthorizationCallback = new Callback() &#123;</span></span><br><span class="line"><span class="comment">//        @Override</span></span><br><span class="line"><span class="comment">//        public void onResponse(Call call, Response response) throws IOException &#123;</span></span><br><span class="line"><span class="comment">//            //获取返回数据并以String格式保存</span></span><br><span class="line"><span class="comment">//            String responseData = response.body().string();</span></span><br><span class="line"><span class="comment">//            //将String格式转换为json格式</span></span><br><span class="line"><span class="comment">//            authorizationObject = JSON.parseObject(responseData);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        @Override</span></span><br><span class="line"><span class="comment">//        public void onFailure(Call call, IOException e) &#123;</span></span><br><span class="line"><span class="comment">//            //打印异常栈</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//IDSignIn</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">IDSignIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        AccountAuthParams authParams = <span class="keyword">new</span> AccountAuthParamsHelper(</span><br><span class="line">                AccountAuthParams.DEFAULT_AUTH_REQUEST_PARAM).setIdToken().createParams();</span><br><span class="line">         service = AccountAuthManager.getService(MainActivity.<span class="keyword">this</span>, authParams);</span><br><span class="line">        startActivityForResult(service.getSignInIntent(), <span class="number">8889</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    //验证IDToken有效性，仅用于调试</span></span><br><span class="line"><span class="comment">//    void identifyIDToken(String IDToken)&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        MultipartBody.Builder builder = new MultipartBody.Builder()</span></span><br><span class="line"><span class="comment">//                .setType(MultipartBody.FORM)</span></span><br><span class="line"><span class="comment">//                .addFormDataPart(&quot;id_token&quot;, IDToken);</span></span><br><span class="line"><span class="comment">//        RequestBody requestBody = builder.build();</span></span><br><span class="line"><span class="comment">//        httpUtil.OKHttpWithCallBack(false,</span></span><br><span class="line"><span class="comment">//                &quot;https://oauth-login.cloud.huawei.com/oauth2/v3/tokeninfo&quot;,IDCallback,requestBody);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    Callback IDCallback = new Callback() &#123;</span></span><br><span class="line"><span class="comment">//        @Override</span></span><br><span class="line"><span class="comment">//        public void onResponse(Call call, Response response) throws IOException &#123;</span></span><br><span class="line"><span class="comment">//            //获取返回数据并以String格式保存</span></span><br><span class="line"><span class="comment">//            String responseData = response.body().string();</span></span><br><span class="line"><span class="comment">//            //将String格式转换为json格式</span></span><br><span class="line"><span class="comment">//            IDObject = JSON.parseObject(responseData);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        @Override</span></span><br><span class="line"><span class="comment">//        public void onFailure(Call call, IOException e) &#123;</span></span><br><span class="line"><span class="comment">//            //打印异常栈</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//silentSignIn</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">silentSignIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        AccountAuthParams authParams = <span class="keyword">new</span> AccountAuthParamsHelper(</span><br><span class="line">                AccountAuthParams.DEFAULT_AUTH_REQUEST_PARAM).createParams();</span><br><span class="line">        AccountAuthService service = AccountAuthManager.getService(MainActivity.<span class="keyword">this</span>, authParams);</span><br><span class="line">        Task&lt;AuthAccount&gt; task = service.silentSignIn();<span class="comment">//静默登录</span></span><br><span class="line"></span><br><span class="line">        task.addOnSuccessListener(authAccount -&gt; &#123;</span><br><span class="line">            <span class="comment">//获取帐号信息</span></span><br><span class="line">            Log.i(TAG, <span class="string">&quot;displayName:&quot;</span> + authAccount.getDisplayName());</span><br><span class="line">            <span class="comment">//获取帐号类型，0表示华为帐号、1表示AppTouch帐号</span></span><br><span class="line">            Log.i(TAG, <span class="string">&quot;accountFlag:&quot;</span> + authAccount.getAccountFlag());</span><br><span class="line">            builder.append(<span class="string">&quot;displayName&quot;</span>)</span><br><span class="line">                    .append(authAccount.getDisplayName())</span><br><span class="line">                    .append(System.getProperty(<span class="string">&quot;line.separator&quot;</span>))</span><br><span class="line">                    .append(System.getProperty(<span class="string">&quot;line.separator&quot;</span>));</span><br><span class="line">            MainActivity.<span class="keyword">this</span>.runOnUiThread(()-&gt;&#123;</span><br><span class="line">                textView.setText(builder.toString());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        task.addOnFailureListener(e -&gt; &#123;</span><br><span class="line">            <span class="comment">//登录失败，您可以尝试使用getSignInIntent()方法显式登录</span></span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ApiException) &#123;</span><br><span class="line">                ApiException apiException = (ApiException) e;</span><br><span class="line">                Log.i(TAG, <span class="string">&quot;sign failed status:&quot;</span> + apiException.getStatusCode());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SignOut</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">signOut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (service == <span class="keyword">null</span>)&#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;signOut:尚未登录&quot;</span> );</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            Task&lt;Void&gt; signOutTask = service.signOut();</span><br><span class="line">            signOutTask.addOnCompleteListener(task -&gt; &#123;</span><br><span class="line">                <span class="comment">//完成退出后的处理</span></span><br><span class="line">                Log.i(TAG, <span class="string">&quot;signOut complete&quot;</span>);</span><br><span class="line">                builder.append(<span class="string">&quot;signOut complete&quot;</span>)</span><br><span class="line">                        .append(System.getProperty(<span class="string">&quot;line.separator&quot;</span>))</span><br><span class="line">                        .append(System.getProperty(<span class="string">&quot;line.separator&quot;</span>));</span><br><span class="line">                MainActivity.<span class="keyword">this</span>.runOnUiThread(()-&gt;&#123;</span><br><span class="line">                    textView.setText(builder.toString());</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cancelAuthorization</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancelAuthorization</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//service为登录授权时使用getService方法生成的AccountAuthService实例</span></span><br><span class="line">        service.cancelAuthorization().addOnCompleteListener(task -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (task.isSuccessful()) &#123;</span><br><span class="line">                <span class="comment">//取消授权成功后的处理</span></span><br><span class="line">                Log.i(TAG, <span class="string">&quot;onSuccess: &quot;</span>);</span><br><span class="line">                builder.append(<span class="string">&quot;取消授权：退出成功&quot;</span>)</span><br><span class="line">                        .append(System.getProperty(<span class="string">&quot;line.separator&quot;</span>))</span><br><span class="line">                        .append(System.getProperty(<span class="string">&quot;line.separator&quot;</span>));</span><br><span class="line">                MainActivity.<span class="keyword">this</span>.runOnUiThread(()-&gt;&#123;</span><br><span class="line">                    textView.setText(builder.toString());</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//异常处理</span></span><br><span class="line">                Exception exception = task.getException();</span><br><span class="line">                <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ApiException)&#123;</span><br><span class="line">                    <span class="keyword">int</span> statusCode = ((ApiException) exception).getStatusCode();</span><br><span class="line">                    Log.i(TAG, <span class="string">&quot;onFailure: &quot;</span> + statusCode);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, <span class="meta">@Nullable</span> Intent data)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//授权登录结果处理，从AuthAccount中获取Authorization Code</span></span><br><span class="line">        <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">        <span class="keyword">if</span> (requestCode == <span class="number">8888</span>) &#123;</span><br><span class="line">            Task&lt;AuthAccount&gt; authAccountTask = AccountAuthManager.parseAuthResultFromIntent(data);</span><br><span class="line">            <span class="keyword">if</span> (authAccountTask.isSuccessful()) &#123;</span><br><span class="line">                <span class="comment">//登录成功，获取用户的帐号信息和Authorization Code</span></span><br><span class="line">                AuthAccount authAccount = authAccountTask.getResult();</span><br><span class="line">                Log.i(TAG, <span class="string">&quot;serverAuthCode:&quot;</span> + authAccount.getAuthorizationCode());</span><br><span class="line">                builder.append(<span class="string">&quot;AuthorizationCode:&quot;</span>)</span><br><span class="line">                        .append(authAccount.getAuthorizationCode())</span><br><span class="line">                        .append(System.getProperty(<span class="string">&quot;line.separator&quot;</span>))</span><br><span class="line">                        .append(System.getProperty(<span class="string">&quot;line.separator&quot;</span>));</span><br><span class="line"><span class="comment">//                int n = InfoByAuthorizationCode(false,authAccount.getAuthorizationCode(),&quot;&quot;);</span></span><br><span class="line"><span class="comment">//                if (n == 0) &#123;</span></span><br><span class="line"><span class="comment">//                    if (authorizationObject != null)&#123;</span></span><br><span class="line"><span class="comment">//                        builder.append(&quot;\n access_token&quot;).append(authorizationObject.getString(&quot;access_token&quot;));</span></span><br><span class="line"><span class="comment">//                    &#125;else &#123;</span></span><br><span class="line"><span class="comment">//                        Log.e(TAG, &quot;onActivityResult: object is null&quot;);</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//                &#125;else &#123;</span></span><br><span class="line"><span class="comment">//                    Log.e(TAG, &quot;onActivityResult: inputError&quot; );</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                MainActivity.<span class="keyword">this</span>.runOnUiThread(()-&gt;&#123;</span><br><span class="line">                    textView.setText( builder.toString());</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//登录失败</span></span><br><span class="line">                Log.e(TAG, <span class="string">&quot;sign in failed:&quot;</span> + ((ApiException) authAccountTask.getException()).getStatusCode());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (requestCode == <span class="number">8889</span>) &#123;</span><br><span class="line">            Task&lt;AuthAccount&gt; authAccountTask = AccountAuthManager.parseAuthResultFromIntent(data);</span><br><span class="line">            <span class="keyword">if</span> (authAccountTask.isSuccessful()) &#123;</span><br><span class="line">                <span class="comment">//登录成功，获取用户的帐号信息和ID Token</span></span><br><span class="line">                AuthAccount authAccount = authAccountTask.getResult();</span><br><span class="line">                Log.i(TAG, <span class="string">&quot;idToken:&quot;</span> + authAccount.getIdToken());</span><br><span class="line">                <span class="comment">//获取帐号类型，0表示华为帐号、1表示AppTouch帐号</span></span><br><span class="line">                Log.i(TAG, <span class="string">&quot;accountFlag:&quot;</span> + authAccount.getAccountFlag());</span><br><span class="line">                builder.append(<span class="string">&quot;IDToken:&quot;</span>)</span><br><span class="line">                        .append(authAccount.getIdToken())</span><br><span class="line">                        .append(System.getProperty(<span class="string">&quot;line.separator&quot;</span>))</span><br><span class="line">                        .append(System.getProperty(<span class="string">&quot;line.separator&quot;</span>));</span><br><span class="line">                MainActivity.<span class="keyword">this</span>.runOnUiThread(()-&gt;&#123;</span><br><span class="line">                        textView.setText(builder.toString());</span><br><span class="line">                    &#125;);</span><br><span class="line"><span class="comment">//                identifyIDToken(authAccount.getIdToken());</span></span><br><span class="line"><span class="comment">//                if (IDObject != null)&#123;</span></span><br><span class="line"><span class="comment">//                    builder.append(&quot;IDToken验证结果：&quot;).append(IDObject.toString());</span></span><br><span class="line"><span class="comment">//                    MainActivity.this.runOnUiThread(()-&gt;&#123;</span></span><br><span class="line"><span class="comment">//                        textView.setText(builder.toString());</span></span><br><span class="line"><span class="comment">//                    &#125;);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//登录失败，不需要做处理，打点日志方便定位</span></span><br><span class="line">                Log.e(TAG, <span class="string">&quot;sign in failed : &quot;</span> +((ApiException) authAccountTask.getException()).getStatusCode());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>activity_main.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;@string/title_main&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;24sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/IDSignIn&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginRight</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;ID-Token Mode SignIn&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/AuthorizationCodeSignIn&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginRight</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;AuthorizationCode Mode SignIn&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/silentSignIn&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginRight</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Silent SignIn&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/signOut&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginRight</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;SignOut&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/cancelAuthorizationCode&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginRight</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Cancel AuthorizationCode&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ScrollView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/text_main&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginRight</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>themes.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;Theme.MyHmsAccountServiceDemo&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;Theme.MaterialComponents.DayNight.NoActionBar&quot;</span>&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- Primary brand color. --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;colorPrimary&quot;</span>&gt;</span>@color/purple_500<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;colorPrimaryVariant&quot;</span>&gt;</span>@color/purple_700<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;colorOnPrimary&quot;</span>&gt;</span>@color/white<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- Secondary brand color. --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;colorSecondary&quot;</span>&gt;</span>@color/teal_200<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;colorSecondaryVariant&quot;</span>&gt;</span>@color/teal_700<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;colorOnSecondary&quot;</span>&gt;</span>@color/black<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- Status bar color. --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:statusBarColor&quot;</span> <span class="attr">tools:targetApi</span>=<span class="string">&quot;l&quot;</span>&gt;</span>?attr/colorPrimaryVariant<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>button的color是<code>#436c95</code></p><p>string.xml里：<code>&lt;string name=&quot;title_main&quot;&gt;Account Usage Process&lt;/string&gt;</code></p>]]></content>
      
      
      <categories>
          
          <category> 华为技术学习之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 华为 </tag>
            
            <tag> HMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器配置mysql与java踩坑</title>
      <link href="/2021/10/17/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEmysql%E8%B8%A9%E5%9D%91/"/>
      <url>/2021/10/17/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEmysql%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1>安装MySQL与远程登录</h1><h3 id="首先">首先</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></table></figure><h3 id="初始化配置信息">初始化配置信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure><ul><li>VALIDATE PASSWORD COMPONENT…（使用密码强度校验组件） 输入： n</li><li>New Password:（设置新密码,并重复一遍)</li><li>Remove anonymous users (删除匿名用户) n</li><li>Disallow root login remotely(拒绝远程root账号登录） n</li><li>Remove test database and access to it(移除test数据库） n</li><li>Reload privilege tables now (现在就重新载入权限表） y</li></ul><h3 id="登录">登录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -urppt -p</span><br></pre></td></tr></table></figure><h3 id="修改认证方式">修改认证方式</h3><p>将身份验证方法从<code>auth_socket</code>更改为<code>mysql_native_password</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;你的密码&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="允许远程访问">允许远程访问</h3><p><strong>先打开3306端口</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user set Host=&#x27;%&#x27; where User=&#x27;root&#x27;;</span><br></pre></td></tr></table></figure><h4 id="踩坑：">踩坑：</h4><ol><li>在8.0以前，我们习惯使用以下命令授权远程连接操作：</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges <span class="keyword">on</span> *.* to <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><ol><li>但在8.0以后，使用以上命令会报错：</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR <span class="number">1410</span> (<span class="number">42000</span>): You are not allowed to create a user <span class="keyword">with</span> GRANT</span><br></pre></td></tr></table></figure><h5 id="分析原因：">分析原因：</h5><p>因为在8.0以后，这个特性已被移除，官方文档如下：</p><blockquote><p>原文：Using GRANT to modify account properties other than privilege assignments. This includes<br>authentication, SSL, and resource-limit properties. Instead, establish such properties at account-creation<br>time with CREATE USER or modify them afterward with ALTER USER.<br>译文：使用grant修改账户权限分配以外的账户属性。包括认证，SSL，和资源限制配置等。取而代之的是创建用户create user或者创建后修改alter user的方式。</p></blockquote><h3 id="刷新cache中配置">刷新cache中配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="修改配置">修改配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><p>找到bind-address属性，后面的ip地址改成0.0.0.0保存并退出，然后重启mysql服务(也可以注释掉bind-address)</p><p><img src="0.png" alt=""></p><h3 id="重启mysql">重启mysql</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysql</span><br></pre></td></tr></table></figure><h3 id="MySQL8-卸载">MySQL8 卸载</h3><ol><li>查看MySQL依赖 ： <code>dpkg --list|grep mysql</code></li><li>卸载： <code>sudo apt-get remove mysql-common</code></li><li>卸载： <code>sudo apt-get autoremove --purge mysql-server-8.0</code>(这里版本对应即可)</li><li>清除残留数据: <code>dpkg -l|grep ^rc|awk '&#123;print$2&#125;'|sudo xargs dpkg -P</code></li><li>再次查看MySQL的剩余依赖项: <code>dpkg --list|grep mysql</code>(这里一般就没有输出了，如果有执行下一步)</li><li>继续删除剩余依赖项，如：<code>sudo apt-get autoremove --purge mysql-apt-config</code></li></ol><h1>安装jdk</h1><h3 id="解压jdk">解压jdk</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u121-linux-x64.tar.gz(文件名)</span><br></pre></td></tr></table></figure><h3 id="编辑环境变量">编辑环境变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure><p>末尾添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#JDK</span><br><span class="line">export JAVA_HOME=/usr/local/bin/jdk1<span class="number">.8</span><span class="number">.0_271</span>(真实路径)</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>离散：3.欧拉图与哈密顿图</title>
      <link href="/2021/10/17/%E7%A6%BB%E6%95%A3%EF%BC%9A3-%E6%AC%A7%E6%8B%89%E5%9B%BE%E4%B8%8E%E5%93%88%E5%AF%86%E9%A1%BF%E5%9B%BE/"/>
      <url>/2021/10/17/%E7%A6%BB%E6%95%A3%EF%BC%9A3-%E6%AC%A7%E6%8B%89%E5%9B%BE%E4%B8%8E%E5%93%88%E5%AF%86%E9%A1%BF%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="定义1">定义1</h3><p>设G是一个图，G中包含所有边的通路/迹(即<strong>每条边恰好出现一次的路径</strong>)称为Euler通路/迹，闭的Euler迹称为Euler闭迹或Euler回路；</p><p>具有<strong>Euler回路的图称为Euler图</strong>，开的Euler迹称为Euler开迹，具有Euler开迹的图称为半Euler图。</p><h3 id="Terminologies">Terminologies:</h3><ul><li><p>Euler Circuit(欧拉回路)：An Euler circuit in a graph G is a simple circuit containing every edge of G.</p><ul><li>欧拉回路，是<strong>包含着G的每一条边的简单回路</strong></li><li>（回路，即闭迹）</li><li>设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub><msub><mi>e</mi><mn>1</mn></msub><msub><mi>v</mi><mn>1</mn></msub><msub><mi>e</mi><mn>2</mn></msub><msub><mi>v</mi><mn>2</mn></msub><mo>…</mo><msub><mi>e</mi><mi>k</mi></msub><msub><mi>v</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">v_0e_1v_1e_2v_2…e_kv_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为图<em>G</em>中的一条路径，若<strong>边</strong>$ e_1，e_2，…，e_k$ 互不相同，则称该路径为<strong>迹</strong>；若<strong>点</strong>序列<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub><mtext>，</mtext><msub><mi>v</mi><mn>1</mn></msub><mtext>，</mtext><mo>…</mo><mtext>，</mtext><msub><mi>v</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">v_0，v_1，…，v_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>互不相同，则称该路径为<strong>路</strong>。</li></ul></li><li><p>Euler Path(欧拉通路)：An Euler path in G is a simple path containing every edge of G.</p><ul><li>欧拉通路，是<strong>包含着G的每一条边的简单通路</strong></li></ul></li><li><p>Euler Graph(欧拉图)：A graph contains an Euler circuit.</p><ul><li>包含欧拉回路的图称为欧拉图。</li></ul></li><li><p>Simple Path/Circuit（简单路径/回路）：A path or circuit is called simple if it does not contain the same edge more than once.</p><ul><li>不包含重复边的路径或回路称为简单路径/回路</li></ul></li></ul><h3 id="欧拉回路和欧拉通路的充要条件"><strong>欧拉回路和欧拉通路的充要条件</strong></h3><ul><li><p>连通多重图具有<strong>欧拉回路</strong>当且仅当<strong>它的每个顶点都有偶数度</strong></p></li><li><p>连通多重图<strong>具有欧拉通路而无欧拉回路</strong>，当且仅当<strong>它恰有两个奇数度顶点</strong></p></li></ul><h3 id="有向图中的欧拉回路与欧拉通路"><strong>有向图中的欧拉回路与欧拉通路</strong></h3><p>A directed multigraph having no isolated vertices has an Euler circuit if and only if</p><h4 id="一个没有孤立顶点的有向多重图含有欧拉回路的充要条件是：">一个没有孤立顶点的有向多重图含有欧拉回路的充要条件是：</h4><ul><li><p>the graph is weakly connected   弱连通的</p></li><li><p>the in-degree and out-degree of each vertex are equal 每个顶点的出度和入度相等</p></li></ul><p>A directed multigraph having no isolated vertices has an Euler path but not an Euler circuit if and only if</p><h4 id="一个没有孤立顶点的有向多重图含有欧拉通路但不含欧拉回路的充要条件是：">一个没有孤立顶点的有向多重图含有欧拉通路但不含欧拉回路的充要条件是：</h4><ul><li><p>the graph is weakly connected</p><ul><li>弱连通的</li></ul></li><li><p>the in-degree and out-degree of each vertex are equal for all but two vertices, one that has in-degree 1 larger than its out-degree and the other that has out-degree 1 larger than its in-degree.</p><ul><li>除去两个顶点外每个顶点的出度和入度相等，其中一个顶点的出度比入度大1，另一个顶点的入度比出度大1.</li></ul></li></ul><h3 id="哈密顿通路和回路"><strong>哈密顿通路和回路</strong></h3><ul><li><p>A Hamilton path in a graph G is a path which visits ever vertex in G exactly once.</p><ul><li><strong>哈密顿通路是一个访问图G中每个顶点次数有且仅有一次的通路</strong></li></ul></li><li><p>AHamilton circuit (or Hamilton cycle) is a cycle which visits every vertex exactly once, except for the first vertex, which is also visited at the end of the cycle.</p><ul><li><strong>哈密顿回路，仅访问每个顶点一次，但除去始点，这个始点同样也是终点。</strong></li></ul></li><li><p>If a connected graph G has a Hamilton circuit, then G is called aHamilton graph.</p><ul><li><strong>如果一个连通图G含有哈密顿回路，那么G是哈密顿图</strong></li></ul><p><strong>Note: 定义适用与所有类型的有向图和无向图.</strong></p></li></ul><h3 id="哈密顿图的必要条件">哈密顿图的必要条件</h3><p>定理1</p><p><strong>设G是Hamilton图，则对于顶点集V的任一非空真子集S，均有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi><mo stretchy="false">(</mo><mi>G</mi><mtext>－</mtext><mi>S</mi><mo stretchy="false">)</mo><mo>≤</mo><mi mathvariant="normal">∣</mi><mi>S</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">ω(G－S)≤|S|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mord cjk_fallback">－</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord">∣</span></span></span></span>。</strong></p><p>这里G-S表示从图G中删去S中的所有顶点以及所关联的边</p><p>证明： 设C是G中任意哈密顿回路，</p><p>当S中的顶点在C中不相邻时，$ ω(G－S)=|S|$，这时子图中产生的分支数最多。</p><p>否则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi><mo stretchy="false">(</mo><mi>G</mi><mtext>－</mtext><mi>S</mi><mo stretchy="false">)</mo><mo>&lt;</mo><mi mathvariant="normal">∣</mi><mi>S</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">ω(G－S)&lt;|S|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mord cjk_fallback">－</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord">∣</span></span></span></span>。</p><p>所以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi><mo stretchy="false">(</mo><mi>G</mi><mtext>－</mtext><mi>S</mi><mo stretchy="false">)</mo><mo>≤</mo><mi mathvariant="normal">∣</mi><mi>S</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">ω(G－S)≤|S|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mord cjk_fallback">－</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord">∣</span></span></span></span>。</p><p><img src="0.png" alt=""></p><p>因为图G是哈密顿图，所以必存在哈密顿回路C。</p><p>我们来考察两种情况</p><p>（i）S中的顶点在C中均彼此相邻，则从C中删除S所有顶点击关联边不增加连通分支，即w(C-S)=1&lt;=|S|</p><p>（ii）S中的顶点在C中不相邻，不妨设有r个顶点不相邻，r&gt;=2,r&lt;=|S|。则w(C-S)=r&lt;=|S|</p><p>一般情况下，S中的顶点在C中既有相邻的也有不相邻的。所以w(C-S）&lt;=|S|。</p><p>而G-S中边包含C-S的边，因此w(G-S) &lt;=w(C-S)&lt;=|S|.</p><p><img src="1.png" alt=""></p><p><img src="2.png" alt=""></p><h4 id="图G的闭包">图<em>G</em>的闭包</h4><p>设<em>G</em>是一个图，反复连接满足<em>d</em>(<em>u</em>)＋<em>d</em>(<em>v</em>)≥n的不相邻顶点<em>u</em>，<em>v</em>，直到没有这样的顶点对为止，这样得到的图称作图<em>G</em>的闭包，记为<em>C</em>(<em>G</em>)。</p><h4 id="定理３">定理３</h4><ul><li>简单图<em>G</em>是Hamilton图当且仅当<em>C</em>(<em>G</em>)是Hamilton图。</li></ul><h4 id="推论1">推论1</h4><ul><li>若<em>C</em>(<em>G</em>)是完全图，则<em>G</em>是Hamilton图。</li></ul><h4 id="推论２">推论２</h4><ul><li>若<em>G</em>中任意不相邻顶点<em>u</em>，<em>v</em>均满足<em>d</em>(<em>u</em>)＋<em>d</em>(<em>v</em>)≥<em>n</em>，则G是Hamilton图。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散：0.图的概念和术语</title>
      <link href="/2021/10/12/%E7%A6%BB%E6%95%A3%EF%BC%9A0-%E5%9B%BE%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E6%9C%AF%E8%AF%AD/"/>
      <url>/2021/10/12/%E7%A6%BB%E6%95%A3%EF%BC%9A0-%E5%9B%BE%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E6%9C%AF%E8%AF%AD/</url>
      
        <content type="html"><![CDATA[<h1>图的概念：</h1><h3 id="1、图的定义：">1、图的定义：</h3><p>一个图G=(V,E)由顶点的非空集V和边的集合E构成，每条边有一个或两个顶点与它相连，这样的顶点称为边的端点。边连接它的端点。</p><h3 id="2、图的分类">2、图的分类</h3><ul><li>无向图<ul><li>简单图<ul><li>简单图G=(V,E)是由非空顶点集V（有穷集）和边集E所组成的，V的不同元素的无序对称为边。简单图不存在环，且两个顶点间最多只有一条边</li></ul></li><li>多重图<ul><li>在简单图的基础上，多重图允许顶点对之间有多重边</li></ul></li><li>伪图<ul><li>伪图也是多重图，它可以存在环</li></ul></li></ul></li></ul><p><img src="0.png" alt=""></p><ul><li><p>有向图</p><ul><li>有向图(V,E)是由非空顶点集V、边集E所组成的，边V中元素的有序对。允许有环(即相同元素的有序对)，但不允许在两个顶点之间有同向的多重边。</li></ul></li><li><p>有向图</p><ul><li>简单有向图</li><li>有向多重图<ul><li>有向多重图G=(V,E)是由非空顶点集V、边集E组成的,其中可以存在多重边</li></ul></li><li>混合图</li></ul></li></ul><p><img src="1.png" alt=""></p><h1>图的术语：</h1><h3 id="degree-of-a-vertex-（顶点的度）">degree of a vertex （顶点的度）</h3><p>在<strong>无向图里顶点的度是与该顶点关联的边的数目</strong>，例外的情形是，顶点上的环为顶点的度做出双倍贡献</p><ul><li><p>顶点v的度记做deg(v)</p></li><li><p>If deg(v) = 0,v is called isolated 孤立的</p></li><li><p>If deg(v) = 1, v is called pendant 悬挂的</p></li></ul><h4 id="定理一：握手理论">定理一：握手理论</h4><p><img src="2.png" alt=""></p><h4 id="定理二">定理二</h4><p><strong>An undirected graph has an even number of</strong> <strong>vertices of odd degree.</strong> 无向图有偶数个奇数度顶点</p><h3 id="有向图中的度">有向图中的度</h3><p>The in degree 入度 of a vertex v, denoted $deg^-(v) $is the number of edges which terminate at v</p><p>顶点v的入度是以v作为终点的边数。</p><p>Similarly, the out degree 出度 of v, denoted <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>e</mi><msup><mi>g</mi><mo>+</mo></msup><mo stretchy="false">(</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">deg^+(v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.021331em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>, is the number of edges which initiate at v</p><p>顶点v的出度是以v作为起点的边数</p><p>定理三</p><p><strong>Let</strong> <strong>G = (V, E)</strong> <strong>be a graph with direct edges.</strong> <strong>Then</strong></p><p><img src="3.png" alt=""></p><p><strong>在带有向边的图里，所有顶点的入度之和等于出度之和。这两个和都等于图的边数</strong>。</p><h3 id="一些特殊的简单图">一些特殊的简单图</h3><ul><li><p><strong>完全图</strong></p><ul><li>*n个顶点的完全图是在每对不同顶点之间都恰有一条边的简单图。**通常用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">K_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示</li></ul></li><li><p>圈图<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">C_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> (n&gt;2)</p><ul><li>指n个顶点围成一圈的图</li></ul></li><li><p>轮图<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>W</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">W_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>(n&gt;2)</p><ul><li>当给圈图添加另一个顶点，而且把这个顶点与圈图里n个顶点逐个连接时，就得出轮图。</li></ul></li><li><p><strong>偶图（二分图）</strong></p><ul><li>若把简单图G的顶点集分成两个不相交的非空集合<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">V_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">V_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，使得图里的每一条边都连接着<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">V_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>里的一个顶点与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">V_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>里的一个顶点，则G称为偶图。</li></ul></li></ul><h3 id="子图：">子图：</h3><p><img src="4.png" alt=""></p><p>设G是一个图，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub><mo>⊆</mo><mi>E</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">E_1\subseteq E(G)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mclose">)</span></span></span></span>，以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">E_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为边集，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">E_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>中边的端点全体为顶点集构成的子图，称为由<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">E_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>导出的<em>G</em>的子图(边导出子图)，记为G(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">E_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)。</p><p>又设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>1</mn></msub><mo>⊆</mo><mi>V</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">V_1\subseteq V(G)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mclose">)</span></span></span></span>，以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">V_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为顶点集，端点均在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">V_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>中的边的全体为边集，构成的子图，称为由<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">V_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>导出的G的子图(点导出子图)，记为G(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">V_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三次培训：网络部分</title>
      <link href="/2021/10/11/%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%9F%B9%E8%AE%AD%EF%BC%9A%E7%BD%91%E7%BB%9C%E9%83%A8%E5%88%86/"/>
      <url>/2021/10/11/%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%9F%B9%E8%AE%AD%EF%BC%9A%E7%BD%91%E7%BB%9C%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1>补充：项目分包的问题</h1><p>项目分包，其实跟电脑分文件夹归类是一个道理。如果大家类比较少，不分包也就算了，但如果像这样：</p><p><img src="3.png" alt=""></p><p>不分包你半天都找不到你想找的那个类。</p><p>所以还是有必要介绍一下项目分包（架构）的问题，对大家大一下课设也有很大帮助。</p><h2 id="MVC：">MVC：</h2><p>就给大家介绍一下最简单的MVC：</p><p><strong>MVC模式</strong>（Model–view–controller）是<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B">软件工程</a>中的一种<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84">软件架构</a>模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。</p><p>MVC模式最早由<a href="https://zh.wikipedia.org/w/index.php?title=Trygve_Reenskaug&amp;action=edit&amp;redlink=1">Trygve Reenskaug</a>在1978年提出，是<a href="https://zh.wikipedia.org/wiki/%E5%B8%95%E7%BE%85%E5%A5%A7%E5%A4%9A%E7%A0%94%E7%A9%B6%E4%B8%AD%E5%BF%83">施乐帕罗奥多研究中心</a>（Xerox PARC）在20世纪80年代为程序语言<a href="https://zh.wikipedia.org/wiki/Smalltalk">Smalltalk</a>发明的一种软件架构。<strong>MVC模式</strong>的<strong>目的是实现一种动态的程序设计</strong>，<strong>使后续对程序的修改和扩展简化，并且使程序某一部分的重复利用成为可能</strong>。除此之外，此模式透过对复杂度的简化，使程序结构更加直观。软件系统透过对自身基本部分分离的同时也赋予了各个基本部分应有的功能。专业人员可以依据自身的专长分组：</p><ul><li>模型（Model） - 程序员编写程序应有的功能（实现算法等等）、数据库专家进行数据管理和数据库设计(可以实现具体的功能)。</li><li>视图（View） - 界面设计人员进行图形界面设计。</li><li>控制器（Controller）- 负责转发请求，对请求进行处理。</li></ul><p>以上引自维基百科。</p><p>所以对应到我们的安卓项目中要怎么分包呢？就现在而言，其实很简单：</p><ul><li><strong>Model</strong>（entity）：对应到bean</li><li><strong>View</strong>：其实就是我们写的xml文件，如果有同学用java定义组件就单独分离出来</li><li><strong>Controller</strong>：其实就是我们的activity的类文件</li><li><strong>Dao</strong>：对应到封装的对数据库的操作</li><li><strong>Util</strong>：工具类（比如recyclerview的adapter）</li></ul><p>如上等等，你可能觉得好像项目并没有什么变化，那是因为，一方面，安卓原生对界面和逻辑的解耦比较彻底，另一方面，现在项目还太小，甚至不足以称之为项目。但这个思想必须要有，越早越好。（<s>踩坑经历</s>）</p><h1>javaBean:类与对象</h1><p>我们常常讲<strong>抽象类</strong>与<strong>实例化对象</strong>，其实也正是这种思想.</p><ul><li><p>类是对一类事物的描述，是<strong>抽象的</strong></p></li><li><p>对象是一类事物的实例，是<strong>具体的</strong></p></li><li><p><strong>类是对象的模板，对象是类的实体</strong></p><hr></li></ul><h2 id="java中的类：">java中的类：</h2><ul><li><p>现实中，描述一类事物：</p><ul><li><strong>属性：就是该事物的状态信息。</strong></li><li><strong>行为：就是该事物能够做什么。</strong></li></ul></li><li><p>举例：猫。<br>属性：名字、年龄、颜色。<br>行为：走、跑、吃</p></li><li><p>用代码来讲：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;walk&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="java中的对象：">java中的对象：</h2><p>如果将类看做模板，那么类可以看做模板加工出的实体。这个实体要有模板的所有属性，也能执行模板的所有行为。</p><p>以上面的猫为例，进行对象的实例化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cat whc = <span class="keyword">new</span> Cat();</span><br></pre></td></tr></table></figure><p>可能会问，都说了实体要有模板的所有属性，也没看见你写你这猫的属性啊？</p><p>那是因为每个类都有约定对象该如何进行实例化的<strong>构造方法</strong>，如果类里面没写，默认会添加一个没有参数的构造方法。我们也可以自己定义，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;walk&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name, <span class="keyword">int</span> age, String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这时候你再像上面那样定义<code>whc</code>这个<code>cat</code>，就会报错。这是因为，我们的构造方法约定了在构造猫这个对象时要传入猫的所有属性，而且我们自定义了构造方法，java便不再添加默认的构造方法。<strong>但是，一个类可以有多个构造方法。</strong></p><p>正解如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cat eric = <span class="keyword">new</span> Cat(<span class="string">&quot;whc&quot;</span>,<span class="number">6</span>,<span class="string">&quot;yellow&quot;</span>);</span><br></pre></td></tr></table></figure><p>并且，我们还能让<code>whc</code>执行命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">whc.eat();</span><br><span class="line">whc.run();</span><br><span class="line">whc.walk();</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;walk&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name, <span class="keyword">int</span> age, String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cat whc = <span class="keyword">new</span> Cat(<span class="string">&quot;whc&quot;</span>,<span class="number">6</span>,<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">        whc.eat();</span><br><span class="line">        whc.run();</span><br><span class="line">        whc.walk();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PS">PS.</h2><p>getter与setter可以自行查阅，比较好理解</p><h1>json:网络通信的轻量级的数据交换格式</h1><h2 id="引入：">引入：</h2><p>我们应当注意，在网络传输过程中很少传递对象。一方面，网络传输采用的是流的方式，本身就涉及一定的编码问题，这就导致一个对象传递过来还需要一定的操作才能进行还原，另一方面，传递对象的成本比较高，而且对象的方法是无法编码传递的。（并不是完全无法传输，只是不推荐）</p><p>那么一个对象是如何通过网络传输呢？这就用到json了。</p><p><img src="0.png" alt=""></p><p>对象在网络中的传递涉及序列化与反序列化，<strong>序列化是将对象状态转换为可保持或传输的格式的过程。与序列化相对的是反序列化，它将流转换为对象</strong>。这两个过程结合起来，可以轻松地存储和传输数据。</p><p>比如，javaBean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> String[] friends;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个名叫<code>whc</code>的<code>cat</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cat whc = <span class="keyword">new</span> Cat(<span class="string">&quot;whc&quot;</span>,<span class="number">6</span>,<span class="string">&quot;yellow&quot;</span>, <span class="keyword">new</span> String[]&#123;<span class="string">&quot;lzw&quot;</span>, <span class="string">&quot;kmh&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p>对应的json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;whc&quot;</span></span><br><span class="line">    <span class="string">&quot;age&quot;</span>:<span class="number">6</span>,</span><br><span class="line">    <span class="attr">&quot;color&quot;</span>:<span class="string">&quot;yellow&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;friends&quot;</span>:[<span class="string">&quot;lzw&quot;</span>,<span class="string">&quot;kmh&quot;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用的方法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(JSON.toJSONString(whc));</span><br></pre></td></tr></table></figure><h2 id="JSON-语法规则">JSON 语法规则</h2><ul><li>数据为 键/值 对。</li><li>数据由逗号分隔。</li><li>大括号保存对象</li><li>方括号保存数组</li></ul><h2 id="JSONObject：">JSONObject：</h2><ul><li><p>使用大括号环绕</p></li><li><p>内容为<strong>键值对</strong>，键值使用半角冒号分开</p></li><li><p>键的类型为字符串</p></li><li><p>值的类型可以为数字、字符串、布尔值、<code>JsonObject</code>、<code>JsonArray</code></p></li><li><p>获取值时通过键来获取</p></li><li><p>与Java的Map对应</p></li></ul><p>比如，我可以将序列化的满足json格式的String反序列化为JSONObject：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cat whc = <span class="keyword">new</span> Cat(<span class="string">&quot;whc&quot;</span>,<span class="number">6</span>,<span class="string">&quot;yellow&quot;</span>, <span class="keyword">new</span> String[]&#123;<span class="string">&quot;lzw&quot;</span>, <span class="string">&quot;kmh&quot;</span>&#125;);</span><br><span class="line">String whcString = JSON.toJSONString(whc);</span><br><span class="line">-----------------</span><br><span class="line">JSONObject whcObject = JSON.parseObject(whcString);</span><br></pre></td></tr></table></figure><p>但能不能将JSONObject转换成Cat呢？答案当然是可以的，但并不能直接进行强制类型转换，大家可以自己封装一个方法。</p><h2 id="JSONArray：">JSONArray：</h2><ul><li><p>使用方括号环绕</p></li><li><p>内容可以是数字、字符串、布尔值、<code>JsonObject</code>、<code>JsonArray</code></p></li><li><p>根据数组下标获取每一项</p></li><li><p>与Java的List对应</p></li></ul><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Cat whc = <span class="keyword">new</span> Cat(<span class="string">&quot;whc&quot;</span>,<span class="number">6</span>,<span class="string">&quot;yellow&quot;</span>, <span class="keyword">new</span> String[]&#123;<span class="string">&quot;lzw&quot;</span>, <span class="string">&quot;kmh&quot;</span>&#125;);</span><br><span class="line">String whcString = JSON.toJSONString(whc);</span><br><span class="line">-----------------</span><br><span class="line">JSONObject whcObject = JSON.parseObject(whcString);</span><br><span class="line">JSONArray whcArray = whcObject.getJSONArray(<span class="string">&quot;friends&quot;</span>);</span><br><span class="line">System.out.println(whcArray);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出：[&quot;lzw&quot;,&quot;kmh&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="库：">库：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.alibaba:fastjson:1.2.62&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;com.google.code.gson:gson:2.8.6&#x27;</span></span><br></pre></td></tr></table></figure><h1>HTTP请求:</h1><p><a href="https://www.runoob.com/http/http-tutorial.html">菜鸟教程HTTP详解</a></p><table><thead><tr><th>请求类型</th><th>描述</th></tr></thead><tbody><tr><td>get</td><td><strong>请求</strong>指定的页面信息，并返回实体主体。  (提交数据放在URL之后)</td></tr><tr><td>post</td><td>向指定资源<strong>提交数据</strong>，进行处理请求（例如提交表单或者上传文件）。<strong>数据被包含在请求体中</strong>。POST 请求可能会导致新的资源的建立和/或已有资源的修改。(请求数据放在body中)</td></tr></tbody></table><h2 id="java中使用HTTP——HttpURLConnection"><strong>java中使用HTTP——HttpURLConnection</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//样例,仅供参考  </span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//开启线程，发送请求</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                HttpURLConnection connection = <span class="keyword">null</span>;</span><br><span class="line">                BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://wthrcdn.etouch.cn/weather_mini?city=北京&quot;</span>);</span><br><span class="line">                    connection = (HttpURLConnection) url.openConnection();</span><br><span class="line">                    <span class="comment">//设置请求方法</span></span><br><span class="line">                    connection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">                    <span class="comment">//设置连接超时时间（毫秒）</span></span><br><span class="line">                    connection.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">                    <span class="comment">//设置读取超时时间（毫秒）</span></span><br><span class="line">                    connection.setReadTimeout(<span class="number">5000</span>);</span><br><span class="line">                    <span class="comment">//返回输入流</span></span><br><span class="line">                    InputStream in = connection.getInputStream();</span><br><span class="line">                    <span class="comment">//读取输入流</span></span><br><span class="line">                    reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">                    StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                    String line;</span><br><span class="line">                    <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        result.append(line);</span><br><span class="line">                    &#125;</span><br><span class="line">              <span class="comment">//将String数据转换成json</span></span><br><span class="line">                    JSONObject jsonObject= JSON.parseObject(result.toString());</span><br><span class="line">                    <span class="comment">//通过get()获取数据</span></span><br><span class="line">                    String msg = jsonObject.get(<span class="string">&quot;status&quot;</span>);</span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ProtocolException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            reader.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;<span class="comment">//关闭连接</span></span><br><span class="line">                        connection.disconnect();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="OkHttp3"><strong>OkHttp3</strong></h2><p>一个比较好用的第三方库，支持多种Http请求，异步处理结果等等，建议使用</p><h4 id="大致结构：">大致结构：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//样例，仅供参考，OKHTTP其他用法自行百度，可以直接copy，但是自己先学会如何使用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendOkhttpRequest</span><span class="params">(String address, okhttp3.Callback callback)</span> </span>&#123;</span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(address)</span><br><span class="line">                .get()</span><br><span class="line">                .build();</span><br><span class="line">        client.newCall(request).enqueue(callback);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OKHttp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        sendOkhttpRequest(<span class="string">&quot;http://wthrcdn.etouch.cn/weather_mini?city=北京&quot;</span>, <span class="keyword">new</span> okhttp3.Callback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//获取返回数据并以String格式保存</span></span><br><span class="line">                String responseData = response.body().string();</span><br><span class="line">                <span class="comment">//将String格式转换为json格式</span></span><br><span class="line">                JSONObject obj = JSON.parseObject(responseData);</span><br><span class="line">                <span class="comment">//获取JSONArray</span></span><br><span class="line">                JSONObject data = JSon.getJSONObject(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">   JSONArray array=data.getJSONArray(<span class="string">&quot;forecast&quot;</span>);</span><br><span class="line">                <span class="comment">//将JSONArray中每个位置分到JSONobject数组里</span></span><br><span class="line">                JSONObject[] objects = <span class="keyword">new</span> JSONObject[array.size()];</span><br><span class="line">                <span class="comment">//不会吧，不会吧，不会真有人提示到这种程度了还不会做吧（狗头）</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//打印异常栈</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="get与post请求的区别：">get与post请求的区别：</h4><p>最直观的区别是，get的参数写在URL里，用？（占位符）与ip或者域名隔开，参数之间用&amp;隔开。而post放在body里。</p><p>另外，get一般用于请求资源，RESTful API中get一定是用来请求资源的。post用于向服务器发送资源/数据。</p><p>对于okhttp中执行post请求，代码大致如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendPost</span><span class="params">(String address, okhttp3.Callback callback,RequestBody body)</span> </span>&#123;</span><br><span class="line">            OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">    Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">            .url(address)</span><br><span class="line">            .post(body)      <span class="comment">//注意这里</span></span><br><span class="line">            .build();</span><br><span class="line">    client.newCall(request).enqueue(callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中requestBody大致如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MultipartBody.Builder builder = <span class="keyword">new</span> MultipartBody.Builder()</span><br><span class="line">                     .setType(MultipartBody.FORM)</span><br><span class="line">                     .addFormDataPart(<span class="string">&quot;account&quot;</span>, <span class="string">&quot;1111&quot;</span>);</span><br><span class="line"></span><br><span class="line">RequestBody requestBody = builder.build();</span><br></pre></td></tr></table></figure><h4 id="注意：">注意：</h4><p>Android中发起http请求需要新开一个线程进行操作，不能在UI主线程中进行网络访问，不然容易导致主线程阻塞，app崩溃（崩溃理由不会的自行百度）。<strong>OKhttp会自动给你开一个新的线程。</strong></p><p>UI的更新只能在主线程进行，不然app也会崩溃（原因不会的自行百度），解决方法自行百度。</p><p>如果你想更新UI，提示可以使用runOnUiThread，AsyncTask、Handler等，用法自行学习。</p><p>21级使用runOnUiThread，AsyncTask、Handler等可以加分，20级强制使用（如果需要用）。</p><h2 id="Android中的网络访问限制">Android中的网络访问限制</h2><ul><li><p>Manifest中需要申请INTERNET权限</p></li><li><p>Android P及以上的系统有强制使用https限制，需手动编写配置文件绕过</p><p>这个具体使用虽然我写了，但我不放，自行百度，很简单。（我再写的话你们作业就直接全copy完了），大家不要怕踩坑，只有踩坑才会积累经验。</p></li></ul><h1>接口文档</h1><table><thead><tr><th>修订版本号</th><th>修订日期</th><th>修改人</th><th>修改内容</th></tr></thead><tbody><tr><td>1.0</td><td>2021.8.27</td><td>赵炜宁</td><td>Init</td></tr><tr><td>1.1</td><td>8.28</td><td>赵炜宁</td><td>对发动态的身份认证做了优化</td></tr><tr><td>2.0</td><td>10.16</td><td>赵炜宁</td><td>更改端口；增加上传头像</td></tr><tr><td>2.1</td><td>10.20</td><td>赵炜宁</td><td>检修，迁移；增加获取用户名</td></tr></tbody></table><h2 id="项目基本说明">项目基本说明</h2><ul><li><p>项目接口根目录为http://82.156.169.66:8181，下方以URL代替</p></li><li><p><strong>统一的错误码</strong></p></li></ul><table><thead><tr><th>错误码</th><th>信息</th></tr></thead><tbody><tr><td>-1</td><td>输入的信息不完整（缺少）或不合法（为空）</td></tr><tr><td>-2</td><td>用户不存在或已被注册</td></tr><tr><td>-3</td><td>密码错误</td></tr></tbody></table><p><strong>返回值是由code，message，data构成的json，下文的传出参数指的是data部分</strong></p><h2 id="1、用户操作-URL：-user">1、用户操作   URL：/user</h2><h3 id="1-1-登录">1.1 登录</h3><table><thead><tr><th>URL</th><th>method</th></tr></thead><tbody><tr><td>/login</td><td>GET</td></tr></tbody></table><table><thead><tr><th>传入参数</th><th>类型</th><th>是否可为空</th><th>说明</th></tr></thead><tbody><tr><td>account</td><td>String</td><td>否</td><td>账号</td></tr><tr><td>password</td><td>String</td><td>否</td><td>密码</td></tr></tbody></table><p>也就是说登录的完整URL为http://82.156.169.66:8181/user/login</p><p>成功之后没有返回的数据，样例：</p><img src="2.png"  style="zoom:80%;" /><h3 id="1-2-注册">1.2 注册</h3><table><thead><tr><th>URL</th><th>method</th></tr></thead><tbody><tr><td>/register</td><td>GET</td></tr></tbody></table><table><thead><tr><th>传入参数</th><th>类型</th><th>是否可为空</th><th>说明</th></tr></thead><tbody><tr><td>account</td><td>String</td><td>否</td><td>账号</td></tr><tr><td>password</td><td>String</td><td>否</td><td>密码</td></tr><tr><td>username</td><td>String</td><td>否</td><td>用户名</td></tr></tbody></table><h3 id="1-3-修改密码">1.3 修改密码</h3><table><thead><tr><th>URL</th><th>method</th></tr></thead><tbody><tr><td>/changePassword</td><td>GET</td></tr></tbody></table><table><thead><tr><th>传入参数</th><th>类型</th><th>是否可为空</th><th>说明</th></tr></thead><tbody><tr><td>account</td><td>String</td><td>否</td><td>账号</td></tr><tr><td>oldPwd</td><td>String</td><td>否</td><td>旧密码</td></tr><tr><td>newPwd</td><td>String</td><td>否</td><td>新密码</td></tr></tbody></table><h3 id="1-4-获取用户名">1.4 获取用户名</h3><table><thead><tr><th>URL</th><th>method</th></tr></thead><tbody><tr><td>/username</td><td>GET</td></tr></tbody></table><table><thead><tr><th>传入参数</th><th>类型</th><th>是否可为空</th><th>说明</th></tr></thead><tbody><tr><td>account</td><td>String</td><td>否</td><td>账号</td></tr></tbody></table><table><thead><tr><th>传出参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>username</td><td>String</td><td>用户名</td></tr></tbody></table><h2 id="2、动态-URL：-message">2、动态  URL：/message</h2><h3 id="2-1-发布动态">2.1 发布动态</h3><table><thead><tr><th>URL</th><th>method</th></tr></thead><tbody><tr><td>/send</td><td>POST</td></tr></tbody></table><table><thead><tr><th>传入参数</th><th>类型</th><th>是否可为空</th><th>说明</th></tr></thead><tbody><tr><td>senderName</td><td>String</td><td>否</td><td>发动态的用户名</td></tr><tr><td>account</td><td>String</td><td>否</td><td>账号</td></tr><tr><td>messageText</td><td>String</td><td>否</td><td>动态内容</td></tr></tbody></table><h3 id="2-2获取动态">2.2获取动态</h3><table><thead><tr><th>URL</th><th>method</th></tr></thead><tbody><tr><td>/get</td><td>GET</td></tr></tbody></table><p>传出参数data为JSONArray</p><table><thead><tr><th>单个传出参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>id（序号）</td></tr><tr><td>time</td><td>String</td><td>发布时间</td></tr><tr><td>senderName</td><td>String</td><td>发动态的用户名</td></tr><tr><td>messageText</td><td>String</td><td>动态内容</td></tr><tr><td>account</td><td>String</td><td>账号</td></tr></tbody></table><p>样例：</p><img src="1.png"  style="zoom:60%;" /><h2 id="3、-发布头像与获取头像-RESTful-API">3、 发布头像与获取头像(RESTful API)</h2><h3 id="3-1-发布头像">3.1 发布头像</h3><table><thead><tr><th>URL</th><th>method</th></tr></thead><tbody><tr><td>/headImage</td><td>POST</td></tr></tbody></table><table><thead><tr><th>传入参数</th><th>类型</th><th>是否可为空</th><th>说明</th></tr></thead><tbody><tr><td>account</td><td>String</td><td>否</td><td>账号</td></tr><tr><td>file</td><td>file</td><td>否</td><td>图片文件</td></tr></tbody></table><h3 id="3-2-获取头像">3.2 获取头像</h3><table><thead><tr><th>URL</th><th>method</th></tr></thead><tbody><tr><td>/headImage</td><td>GET</td></tr></tbody></table><table><thead><tr><th>传入参数</th><th>类型</th><th>是否可为空</th><th>说明</th></tr></thead><tbody><tr><td>account</td><td>String</td><td>否</td><td>账号</td></tr></tbody></table><table><thead><tr><th>单个传出参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>String</td><td>图片保存的地址</td></tr></tbody></table><img src="4.png"  style="zoom:60%;" /><h1>作业：</h1><p>通过三次次培训，完成一个“树洞”或者“表白墙”</p><h3 id="基本要求：">基本要求：</h3><p>在第二次作业的基础上使用网络</p><p>使用网络进行登录，注册，发布动态，获取动态。</p><h3 id="进阶任务：">进阶任务：</h3><p>1、完成修改密码功能。</p><p>2、更加完善及美观的界面（类似于校圈圈那种，而不是可怜巴巴的三个界面）。</p><p>3、实现头像功能。</p><p><strong>三个进阶任务完成后都有相应加分</strong></p><p>提交方式：将src文件夹打包后发送到邮箱  <a href="mailto:2134356214@qq.com">2134356214@qq.com</a></p><p>第二次作业依旧要交，发送至邮箱 <a href="mailto:718102754@qq.com">718102754@qq.com</a></p><p>DDL：10月25日（周一）中午12:00</p>]]></content>
      
      
      <categories>
          
          <category> 安卓原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学线培训 </tag>
            
            <tag> 安卓原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计原则与MaterialDesign基础原则</title>
      <link href="/2021/10/07/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8EMaterialDesign%E5%9F%BA%E7%A1%80%E5%8E%9F%E5%88%99/"/>
      <url>/2021/10/07/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8EMaterialDesign%E5%9F%BA%E7%A1%80%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1>基础设计原则：</h1><blockquote><p>一旦你能够说出什么东西的名字，就会很容易注意到它。你就会掌握它，拥有它，使它在你的控制之中。当我们没用听说过一些设计的概念，我们就很难会注意到一个设计作品上的问题、缺漏，更不可能做出良好的设计。</p></blockquote><h2 id="对比（Contrast）"><strong>对比（Contrast）</strong></h2><blockquote><p>Robin对比原则指出：页面上的不同元素之间要有对比效果，达到吸引读者的对比效果。</p></blockquote><h3 id="原理：">原理：</h3><p><strong>页面上的不同元素会存在关联性和差异性，对比原则倡导通过视觉元素的对比来表现这种差异性</strong>。对比原则要解决的问题是如何更好的吸引用户的眼球，以及如何更好的为用户展现不同信息的重要程度。如果元素（字体、颜色、大小、线宽、形状、空间等）不相同，那就干脆让它们截然不同。对比能够让讯息更准确的传达，内容更容易的被找到、被记住。</p><p>对比不仅可以用来吸引眼球，还可以用来组织信息、清晰层级、在界面上指引读者，并且制造焦点。</p><h3 id="样例：">样例：</h3><p>比如：</p><p><img src="0.webp" alt=""></p><p>又比如：</p><img src="1.jpg" style="zoom:30%;" /><p>为什么暂停、上下曲目按键是白色实心button而其他button不仅小而且还是灰色的？QQ音乐使用这种对比突出button层级与重要性。而曲名与其余信息也有明显对比。</p><p>反面教材：</p><img src="5.jpg" style="zoom:27%;" /><p>背景图片导致的hint文字看不清，两者对比度过低</p><h3 id="总结：">总结：</h3><p>要增加有意思的对比，最容易的方法就是实现字体对比）。不过不要忘记，还可以利用线、颜色、元素之间的间隔、材质等形成对比。如果你想让对比效果更明显，就一定要大胆，不要让两种颜色看起来好像差不错又不一样。当然也不要在同一个页面使用太多种字体。</p><h2 id="重复（Repetition）"><strong>重复（Repetition）</strong></h2><blockquote><p>Robin重复原则指出：设计的某些方面需要在整个作品中重复。</p></blockquote><h3 id="原理：-2">原理：</h3><p><strong>重复的目的就是“一致性”</strong>，让设计中的视觉要素在整个作品中重复出现。可以重复颜色、形状、材质、空间关系、线宽、材质、空间等。这样一来既能增加条理性，又能增加统一性，增强视觉效果。</p><p>不过呢，重复也不能泛滥，如果一个页面上全是一模一样的内容或者风格，那就违背了上面的对比原则。所以更推荐跳跃性重复。</p><h4 id="应用技巧：">应用技巧：</h4><ul><li><p>把已有的重复元素取出，让这些元素效果更强、更生动。通过把重复表现得更明显，这样不仅页面看上去更有趣，还能在视觉上增强其条理性和一致性。</p></li><li><p>即使在一个只有一页的文档中，重复元素也可以建立一种连续性，将文档“整个捆在一起” 。如果在创建一个多页的、作为一个精美包装一部分的文档，充分使用重复就很关键。</p></li><li><p>有时重复的项并不一定完全相同，而只是存在明确关联的紧密相关的对象。为了实现重复，完全可以为此增加一些全新的东西。或者，也可以选择一个简单的元素，然后以多种不同的方式加以使用，比如说指定不同的大小、颜色或角度。</p></li><li><p>通常还可以增加实际上与页面主题没有任何关系的重复元素。只要确保，作品看起来是有意为之，而不是乱七八糟就行了。</p></li><li><p>使用重复原则时，有时可以把一个元素从现在的设计中抽取出来，并根据这个元素创建一个新设计。</p></li><li><p><strong>重复性元素并不必须是图形或者剪贴画。可以是空白、线、字体、对齐，或者任何你有意重复的东西。</strong></p></li><li><p>有时，尽管只有重复元素的一点儿暗示，但这可能与使用整个元素有同样的效果。对于一个大家都熟悉的元素，可以尝试只包含其中的一部分，或者采用不同的方式加以使用。</p></li><li><p><strong>要避免太多地重复一个元素，重复太多会让人讨厌</strong>。</p><p>技巧选自：<a href="https://blog.csdn.net/u010111837/article/details/118085567">https://blog.csdn.net/u010111837/article/details/118085567</a></p></li></ul><h3 id="样例：-2">样例：</h3><p><img src="4.png" alt=""></p><p>其实这个名片也用到了对比，其实是对比与重复的结合。</p><p>再回到上面的QQ音乐，</p><img src="1.jpg" style="zoom:30%;" /><p>所有灰色button的设计风格都是重复的，这使得整个界面很协调。</p><h2 id="对齐（Alignment）"><strong>对齐（Alignment）</strong></h2><blockquote><p>Robin对齐原则是指：任何元素都不能在页面上随意安放。每一项都应当与页面上的某个内容存在某种视觉联系。</p></blockquote><h3 id="原理：-3">原理：</h3><p>页面上的不同元素之间会因为关联性不同而会有不同的物理距离，<strong>对齐原则倡导的是将这些不同元素建立视觉上的某种联系，而不是被随意的摆放，建立这种联系的方式就是为元素寻找某种对齐。</strong></p><p>这样能够建立一种清晰、精巧而清爽的外观，提升可读性。避免一个页面上混用多种对其模式，也就是不要有一些置左，有一些置右。<strong>尽量避免使用居中对齐，除非是比较正式、稳重的设计</strong>（别动不动就让什么都居中，有些时候居中是一种很土的对齐方式）。</p><p><strong>对齐性原则解决的问题是如何将要呈现的信息有秩序的展现在用户面前。</strong></p><h3 id="样例：-3">样例：</h3><img src="6.png" style="zoom:100%;" /><h4 id="不建议初学者轻易使用居中对齐">不建议初学者轻易使用居中对齐</h4><p><strong>如果文本为左对齐或右对齐，让文本联系在一起的那条看不见的线会更明确</strong>，因为现在有一条“硬”的竖边。这就使左对齐和右对齐的文本看起来外观更清晰、效果更分明。</p><p><img src="7.webp" alt=""></p><p>居中对齐会创建一种更正式、更稳重的外观，这种外观显得更为中规中矩，但通常也很乏味。请注意你喜欢的那些设计。我敢保证，大多数看来精巧的设计都没有采用居中对齐。我知道，作为一个初学者，要完全摒弃居中对齐会很难，但你必须从一开始就强制自己避开它。</p><p><strong><u>在得到更多培训之前，一定要坚持一个原则：只使用一种对齐方式</u></strong>。页面上只使用一种文本对齐，所有文本都左对齐，或右对齐，或者全部居中。</p><img src="8.webp" style="zoom:67%;" /><p><strong>明显而有意为之的居中对齐效果最好</strong>。当对齐经过精心策划而又明确时，你就可以对其他元素充分发挥创造力，作品看起来仍然显得匠心独具，而这些元素也不会像是莫名其妙地散落在页面上一样。</p><h4 id="页面上每一个项都应该与其他项存在某种对齐">页面上每一个项都应该与其他项存在某种对齐</h4><p>在页面上放其他项时，一定要确保每一项都与页面上的其他项存在某种对齐。如果文本行水平摆放，则按其基线对齐。如果有多个单独的文本块，则对齐其左边界或右边界。如果有图片元素，将其边界与页面的其他边界对齐。</p><img src="9.png" style="zoom: 80%;" /><p>还是这张QQ音乐：</p><img src="10.png" style="zoom:30%;" /><p>明显的对齐使得界面看起来非常规整。</p><h3 id="总结：-2">总结：</h3><p><strong>倾听你的眼睛</strong></p><p>眼睛看向哪里，路线是什么，这是最佳路径吗？重要的信息是否都归入了逻辑亲密性中？对齐是否对清晰的表达有帮助？</p><h2 id="亲密性（Proximity）"><strong>亲密性（Proximity）</strong></h2><blockquote><p>Robin亲密性原则是指：将相关的项组织在一起，移动这些项，使它们的物理位置相互靠近，这样一来，相关的项将被看作凝聚为一体的一个组，而不再是一堆彼此无关的片段。</p></blockquote><h3 id="原理：-4">原理：</h3><p>如果多个项相互之间存在很近的亲密性，它们就会成为一个<strong>视觉单元</strong>，而不是多个孤立的元素。这有助于组织信息，减少混乱，为读者提供清晰的结构。<strong>亲密性原则倡导通过物理距离来管理同一个页面上不同元素之间的关联性，相关性高的元素应该紧挨在一起，相关性低的元素之间应该保持一定的距离</strong>。亲密性（即紧密性）意味着存在关联。逻辑上关联紧密的项目在布局上也应该紧密，关联性不强的元素之间可以适当增加区隔。位置是否靠近可以体现出元素之间是否存在关系。</p><h4 id="亲密性原则实现方法">亲密性原则实现方法</h4><ul><li>在设计时，应该厘清哪些信息在逻辑上存在关联，那些信息应当强调，而哪些信息不用强调，然后可以通过分组形象地表现这种信息。利用亲密性原则合理的组织信息的效果可以从下面的对比中看出来，将需要表现的信息进行分组，从排版上就体现这种信息之间的关系。</li></ul><h4 id="亲密性原则要避免的问题">亲密性原则要避免的问题</h4><ul><li><p>避免一个页面上有太多孤立的元素。</p></li><li><p><strong>不要在元素之间留出同样大小的空白</strong>，除非各组同属于一个子集。</p></li><li><p>标题、子标题、图表标题、图片能否归入其相关材料？在这个问题上一定要非常清楚（哪怕只有一点含糊都要尽量避免）。</p></li><li><p>在有很近亲密性的元素之间建立关系。<strong>不同属一组的元素之间不要建立关系</strong>！如果元素彼此无关，要把它们分开。不要仅仅因为有空白就把元素放在角落或中央。</p></li></ul><h3 id="样例：-4">样例：</h3><img src="11.png" style="zoom:100%;" /><p>这个样例太过经典，不想多说。</p><p>还是说说QQ音乐，大致给界面元素分个组：</p><img src="12.png" style="zoom:30%;" /><p>又及，亲密性的经典界面：</p><img src="13.jpg" style="zoom:33%;" /><p>为什么要留白？直接大杂烩不好吗？显然不好。许多设置是相似的，放在一起并加以分组，能让界面更加条例清晰，用户感受更好。</p><h3 id="总结：-3">总结：</h3><p><strong>亲密性的根本目的是实现组织性，避免一个页面上出现太多孤立的元素。</strong> 尤其在我们排版时要注意一点，就是小标题和其对应内容之间的距离要小于小标题和上文的距离，这样就能将他们之间的关系迅速绑定在一起。</p><h2 id="PS">PS.</h2><p>色彩暂时不讲，可以看看这个[(23条消息) 颜色运用-CSDN博客</p><p><a href="https://blog.csdn.net/PigBiBiX/article/details/56674737"></a></p><h1>一些APP设计原则：</h1><h3 id="充分考虑用户的使用习惯">充分考虑用户的使用习惯</h3><p>比如大多数人拿手机的时候是双手握还是单手握，单手握的时候是右手操作还是左手操作，操作的时候用哪个手指就能进行操作。考虑到用户的使用习惯有助于在设计时避开手指的触碰盲区。比如，button不要太靠近屏幕左边，对单手操作极其不友好。</p><h3 id="尽量减少产品层级以及深度">尽量减少产品层级以及深度</h3><p>在移动设备上，过多的层级会使用户失去耐心而放弃对产品的使用。如果产品层级确实过深，考虑用一下几种方法扁平化你的层级结构：使用选项卡（tabs）结合分类和内容的展示；允许穿越层级操作，比如允许用户在第一层级对第二层级的内容进行直接操作。</p><h3 id="设计要主次分明">设计要主次分明</h3><p>将主流用户最常用的 20% 功能进行显现，其他进行适度的隐藏，越不常用的功能，隐藏的层级越深。例如：微信的扫本机二维码。要避免新浪微博广场的堆积式设计。确保主页看起来像主页（使主页有别于其它二三级页面）。</p><h3 id="APP的导航尽量采用底部导航的方式，3-5个为最佳">APP的导航尽量采用底部导航的方式，3-5个为最佳</h3><h3 id="自然过渡"><strong>自然过渡</strong></h3><p>界面的交互都是环环相扣的，所以设计时，要深思熟虑地考虑到交互的下一步。考虑到下一步的交互是怎样的，并且通过设计将其实现。这就好比我们的日常谈话，要为深入交谈提供话由。当用户已经完成该做的步骤，不要让他们不知所措，给他们自然而然继续下去的方法，以达成目标。</p><p>比如删除前的警告dialog，加载时的进度条，都是必要的。</p><h3 id="色彩决定APP风格和用户使用感受"><strong>色彩决定APP风格和用户使用感受</strong></h3><p>红色让人感到激情、活泼，而灰色等暗色调则让人感到压抑。合理选用色彩，让用户有更好的体验。</p><h1>一些组件使用原则：</h1><ul><li><p>凡是涉及操作的组件都要做出视觉上的响应。</p><ul><li>比如button按下变色或者一些其他特效，输入框获取\获得焦点时边框或者背景变色等等</li></ul></li><li><p>适当的圆角有利于界面美化</p><ul><li>尤其是在button和头像、cardview方面</li></ul></li><li><p>过度绚丽的背景并不利于信息呈现</p><ul><li>相反，更推荐纯色、相近色或者渐变色</li></ul></li><li><p>巧妙的边距能事半功倍</p></li><li><p>风格一致性问题。</p><ul><li>账号密码两个输入框背景颜色为什么要不一样？</li><li>登录注册两个button为什么要一大一小？</li><li>为什么从一个暗色调界面能一下子跳转到亮色调界面？</li></ul></li><li><p>设计要人性化</p><ul><li>为什么输入框那么短？</li><li>为什么button那么小？</li><li>为什么图片占据那么大的空间？</li><li>字号的大小要有区分，但不要标题太大而正文太小</li></ul></li></ul><h1>MaterialDesign基础原则</h1><p>实体感就是(通过设计方式来表达)隐喻</p><p>通过构建系统化的动效和空间合理化利用，并将两个理念合二为一，构成了实体隐喻。与众不同的触感是实体的基础，这一灵感来自我们对纸墨的研究，但是我们相信，随着科技的进步，应用前景将不可估量。</p><p><strong>实体的表面和边缘提供基于真实效果的视觉体验，熟悉的触感让用户可以快速地理解和认知。实体的多样性可以让我们呈现出更多反映真实世界的设计效果，但同时又绝不会脱离客观的物理规律。</strong></p><p><strong>光效、表面质感、运动感</strong>这三点是解释物体<strong>运动规律、交互方式、空间关系</strong>的关键。真实的光效可以解释物体之间的交合关系、空间关系，以及单个物体的运动。</p><p>新的视觉语言，在基本元素的处理上，借鉴了传统的印刷设计——排版、网格、空间、比例、配色、图像使用——这些基础的平面设计规范。在这些设计基础上下功夫，不但可以愉悦用户，而且能够构建出视觉层级、视觉意义以及视觉聚焦。精心选择色彩、图像、选择合乎比例的字体、留白，力求构建出鲜明、形象的用户界面，让用户沉浸其中。</p><p><strong>Material Design 设计语言强调根据用户行为凸显核心功能，进而为用户提供操作指引。</strong></p><h1>环境</h1><h3 id="三维世界（3D-world）">三维世界（3D world）</h3><p>Material 环境是一个三维的空间，这意味着每个对象都有 x ， y ， z 三维坐标属性，z 轴垂直于显示平面，并延伸向用户视角,每个 material 元素在 z 轴上占据一定的位置并且有一个 1dp 厚度的标准。 在网页上，z 轴被用来分层而不是为了视角。3D 空间通过操纵 y 轴进行仿真。</p><img src="14.png" style="zoom:80%;" /><h3 id="光影关系（Light-and-shadow）">光影关系（Light and shadow）</h3><p>在 material 环境中，<strong>虚拟的光线照射使场景中的对象投射出阴影，主光源投射出一个定向的阴影，而环境光从各个角度投射出连贯又柔和的阴影。</strong></p><p>material 环境中的所有阴影都是由这两种光投射产生的，阴影是光线照射不到的地方，因为各个元素在z轴上占据了不同大小的位置遮挡住了这些光线。</p><img src="15.png" style="zoom:80%;" /><p>以上摘自极客学院翻译的MaterialDesign中文文档。</p><h3 id="下面讲一点最基础的阴影：">下面讲一点最基础的阴影：</h3><p>三维世界中，z轴决定的是组件的高度，那么高度该如何让用户清晰地感知到呢？靠阴影。某一对象的“高度”决定了其具体“阴影”的表现形式。阴影并不是一成不变的，根据用户的行为，阴影应当有相应的响应。</p>]]></content>
      
      
      <categories>
          
          <category> 设计理念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学线培训 </tag>
            
            <tag> 设计理念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora插入数学符号与公式</title>
      <link href="/2021/10/05/typora%E6%8F%92%E5%85%A5%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7%E4%B8%8E%E5%85%AC%E5%BC%8F/"/>
      <url>/2021/10/05/typora%E6%8F%92%E5%85%A5%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7%E4%B8%8E%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="公式块与行内公式的添加">公式块与行内公式的添加</h2><p>先在偏好设置里面打开公式输入，然后重启Typora</p><hr><h3 id="常用公式代码">常用公式代码</h3><p><u><strong>（下面LaTeX代码在Typora中使用时要用$包裹起来</strong>）</u></p><ul><li>上下标，正负无穷</li><li>加减乘，分式，根号，省略号</li><li>三角函数</li><li>矢量，累加累乘，极限</li><li>希腊字母</li><li>数学符号</li></ul><h4 id="上下标，正负无穷"><strong>上下标，正负无穷</strong></h4><p><img src="0.png" alt=""></p><h4 id="加减乘，分式，根号，省略号"><strong>加减乘，分式，根号，省略号</strong></h4><p><img src="1.png" alt=""></p><h4 id="三角函数"><strong>三角函数</strong></h4><p><img src="2.png" alt=""></p><h4 id="矢量，累加累乘，极限"><strong>矢量，累加累乘，极限</strong></h4><p><img src="3.png" alt=""></p><h4 id="希腊字母"><strong>希腊字母</strong></h4><p><img src="4.png" alt=""></p><h4 id="关系运算符"><strong>关系运算符</strong></h4><p><img src="5.png" alt=""></p><hr><p>以上https://blog.csdn.net/mingzhuo_126/article/details/82722455</p><h4 id="数学符号"><strong>数学符号</strong></h4><table><thead><tr><th style="text-align:center">数学表达式</th><th style="text-align:center">代码</th></tr></thead><tbody><tr><td style="text-align:center">⟺</td><td style="text-align:center">\iff</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo mathvariant="normal">≠</mo></mrow><annotation encoding="application/x-tex">\neq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span></span></span></span></td><td style="text-align:center">\neq</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≡</mo></mrow><annotation encoding="application/x-tex">\equiv</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mrel">≡</span></span></span></span></td><td style="text-align:center">\equiv</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span></td><td style="text-align:center">\rightarrow</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇒</span></span></span></span></td><td style="text-align:center">\Rightarrow</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>y</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span></td><td style="text-align:center">\hat{y}</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi></mrow><annotation encoding="application/x-tex">\forall</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">∀</span></span></span></span></td><td style="text-align:center">\forall</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∃</mi></mrow><annotation encoding="application/x-tex">\exists</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">∃</span></span></span></span></td><td style="text-align:center">\exists</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∈</mo></mrow><annotation encoding="application/x-tex">\in</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">∈</span></span></span></span></td><td style="text-align:center">\in</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊄</mo></mrow><annotation encoding="application/x-tex">\not\subset</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">⊂</span></span></span></span></td><td style="text-align:center">\not\subset</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">\emptyset</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">∅</span></span></span></span></td><td style="text-align:center">\emptyset</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊂</mo></mrow><annotation encoding="application/x-tex">\subset</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">⊂</span></span></span></span></td><td style="text-align:center">\subset</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊆</mo></mrow><annotation encoding="application/x-tex">\subseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">⊆</span></span></span></span></td><td style="text-align:center">\subseteq</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∵</mo></mrow><annotation encoding="application/x-tex">\because</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∵</span></span></span></span></td><td style="text-align:center">\because</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∴</mo></mrow><annotation encoding="application/x-tex">\therefore</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span></span></span></span></td><td style="text-align:center">\therefore</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∵</mo></mrow><annotation encoding="application/x-tex">\because</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∵</span></span></span></span></td><td style="text-align:center">\because</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∠</mi></mrow><annotation encoding="application/x-tex">\angle</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mord">∠</span></span></span></span></td><td style="text-align:center">\angle</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span></td><td style="text-align:center">\infty</td></tr></tbody></table><p>补充的一些：</p><table><thead><tr><th style="text-align:center">数学表达式</th><th style="text-align:center">代码</th></tr></thead><tbody><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>x</mi><mo>⋅</mo><mi>y</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{x\cdot y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388899999999999em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.64445em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.56445em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span></td><td style="text-align:center">\overline{x\cdot y}</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>d</mi><mi>y</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{dy}{dx}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td><td style="text-align:center">\dfrac{dy}{dx}</td></tr><tr><td style="text-align:center">$ \int_{0}^{4} f(x) dx   $</td><td style="text-align:center">\int_{0}^{4} f(x) dx</td></tr><tr><td style="text-align:center">$ 90 ^\circ $</td><td style="text-align:center">90 ^\circ</td></tr><tr><td style="text-align:center">$ \iint $</td><td style="text-align:center">\iint</td></tr><tr><td style="text-align:center">$ \iiint  $</td><td style="text-align:center">\iiint</td></tr><tr><td style="text-align:center">$ \iint_{0}^{4} f(x) dx  $</td><td style="text-align:center">\iint_{0}^{4} f(x) dx</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∪</mo><mi>y</mi><mo>∩</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x \cup y \cap z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.75em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span></td><td style="text-align:center">x \cup y \cap z</td></tr><tr><td style="text-align:center">$ \sqrt[n]{345}</td><td style="text-align:center">\sqrt[n]{345}</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">a_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">a_{ij}</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo separator="true">,</mo><msup><mi>y</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup></mrow><annotation encoding="application/x-tex">y&#x27;,y&#x27;&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′′</span></span></span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">y’,y’’</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∨</mo><mi>y</mi><mo>∧</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x \lor y \land z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.75em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span></td><td style="text-align:center">x \lor y \land z</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∮</mo></mrow><annotation encoding="application/x-tex">\oint</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.11112em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∮</span></span></span></span></td><td style="text-align:center">\oint</td></tr></tbody></table><h2 id="矩阵"><strong>矩阵</strong></h2><p><strong>简单矩阵</strong></p><p>使用<code>\begin&#123;matrix&#125;…\end&#123;matrix&#125;</code>生成， 每一行以<code>\\</code>结尾表示换行，元素间以<code>&amp;</code>间隔，式子的表示序号<code>\tag&#123;1&#125;</code>（右边的序号）。</p><p><img src="6.svg" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> $$</span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line"> 1 &amp; 2 &amp; 3 \\</span><br><span class="line"> 4 &amp; 5 &amp; 6 \\</span><br><span class="line"> 7 &amp; 8 &amp; 9 </span><br><span class="line">\end&#123;matrix&#125; \tag&#123;1&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p><strong>带左右括号的矩阵(大中小括号)</strong></p><p><strong>方法一</strong>：在<code>\begin&#123;&#125;</code>之前和<code>\end&#123;&#125;</code>之后添加左右括号的代码。</p><p>大括号：</p><p><img src="7.svg" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"> \left\&#123;</span><br><span class="line"> \begin&#123;matrix&#125;</span><br><span class="line">   1 &amp; 2 &amp; 3 \\</span><br><span class="line">   4 &amp; 5 &amp; 6 \\</span><br><span class="line">   7 &amp; 8 &amp; 9</span><br><span class="line">  \end&#123;matrix&#125;</span><br><span class="line">  \right\&#125; \tag&#123;2&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>中括号：</p><p><img src="8.svg" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"> \left[</span><br><span class="line"> \begin&#123;matrix&#125;</span><br><span class="line">   1 &amp; 2 &amp; 3 \\</span><br><span class="line">   4 &amp; 5 &amp; 6 \\</span><br><span class="line">   7 &amp; 8 &amp; 9</span><br><span class="line">  \end&#123;matrix&#125;</span><br><span class="line">  \right] \tag&#123;3&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>小括号：</p><p><img src="9.svg" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"> \left(</span><br><span class="line"> \begin&#123;matrix&#125;</span><br><span class="line">   1 &amp; 2 &amp; 3 \\</span><br><span class="line">   4 &amp; 5 &amp; 6 \\</span><br><span class="line">   7 &amp; 8 &amp; 9</span><br><span class="line">  \end&#123;matrix&#125;</span><br><span class="line">  \right) \tag&#123;4&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p><strong>方法二</strong>：改变<code>\begin&#123;matrix&#125;</code>和<code>\end&#123;matrix&#125;</code>中<code>&#123;matrix&#125;</code></p><p>大括号：</p><p><img src="10.svg" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"> \begin&#123;Bmatrix&#125;</span><br><span class="line">   1 &amp; 2 &amp; 3 \\</span><br><span class="line">   4 &amp; 5 &amp; 6 \\</span><br><span class="line">   7 &amp; 8 &amp; 9</span><br><span class="line">  \end&#123;Bmatrix&#125; \tag&#123;6&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>中括号：</p><p><img src="11.svg" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"> \begin&#123;bmatrix&#125;</span><br><span class="line">   1 &amp; 2 &amp; 3 \\</span><br><span class="line">   4 &amp; 5 &amp; 6 \\</span><br><span class="line">   7 &amp; 8 &amp; 9</span><br><span class="line">  \end&#123;bmatrix&#125; \tag&#123;6&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p><strong>包含希腊字母与省略号</strong></p><p>行省略号<code>\cdots</code>，列省略号<code>\vdots</code>，斜向省略号（左上至右下）<code>\ddots</code>。</p><p><img src="12.svg" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"> \left\&#123;</span><br><span class="line"> \begin&#123;matrix&#125;</span><br><span class="line"> 1      &amp; 2        &amp; \cdots &amp; 5        \\</span><br><span class="line"> 6      &amp; 7        &amp; \cdots &amp; 10       \\</span><br><span class="line"> \vdots &amp; \vdots   &amp; \ddots &amp; \vdots   \\</span><br><span class="line"> \alpha &amp; \alpha+1 &amp; \cdots &amp; \alpha+4 </span><br><span class="line"> \end&#123;matrix&#125;</span><br><span class="line"> \right\&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><hr><h2 id="表格">表格</h2><p><strong>简易表格</strong></p><p><img src="13.svg" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;array&#125;&#123;|c|c|c|&#125;</span><br><span class="line">\hline 2&amp;9&amp;4\\</span><br><span class="line">\hline 7&amp;5&amp;3\\</span><br><span class="line">\hline 6&amp;1&amp;8\\</span><br><span class="line">\hline</span><br><span class="line">\end&#123;array&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p><strong>开头结尾</strong>： <code>\begin&#123;array&#125;</code> ， <code>\end&#123;array&#125;</code></p><p><strong>定义式</strong>：例：<code>&#123;|c|c|c|&#125;</code>，其中<code>c</code> <code>l</code> <code>r</code> 分别代表居中、左对齐及右对齐。</p><p><strong>分割线</strong>：①<strong>竖直分割线</strong>：在定义式中插入 <code>|</code>， （<code>||</code>表示两条竖直分割线）。</p><p>②<strong>水平分割线</strong>：在下一行输入前插入 <code>\hline</code>，以下图真值表为例。</p><p>其他：每行元素间均须要插入 <code>&amp;</code> ，每行元素以 <code>\\</code> 结尾。</p><p><strong>真值表</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.1600em" columnalign="center center center" columnlines="none solid" columnspacing="1em" rowlines="solid none none none"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>A</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>B</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>F</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{cc|c}       A&amp;B&amp;F\\\hline 0&amp;0&amp;0\\       0&amp;1&amp;1\\       1&amp;0&amp;1\\       1&amp;1&amp;1\\\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.000000000000001em;vertical-align:-2.7500000000000004em;"></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.25em;"><span class="pstrut" style="height:5.25em;"></span><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-0.6099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.6099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="vertical-separator" style="height:6.000000000000001em;border-right-width:0.04em;border-right-style:solid;margin:0 -0.02em;vertical-align:-2.7500000000000004em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-0.6099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span style="top:-7.300000000000001em;"><span class="pstrut" style="height:5.25em;"></span><span class="hline" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span></span></span></span></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;array&#125;&#123;cc|c&#125;</span><br><span class="line">       A&amp;B&amp;F\\</span><br><span class="line">\hline 0&amp;0&amp;0\\</span><br><span class="line">       0&amp;1&amp;1\\</span><br><span class="line">       1&amp;0&amp;1\\</span><br><span class="line">       1&amp;1&amp;1\\</span><br><span class="line">\end&#123;array&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><hr><h2 id="多行等式对齐"><strong>多行等式对齐</strong></h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.2500em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>b</mi><mo>+</mo><mi>c</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>d</mi><mo>+</mo><mi>e</mi><mo>+</mo><mi>f</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}a &amp;= b + c \\  &amp;= d + e + f\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000000000000004em;vertical-align:-1.2500000000000002em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">c</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;aligned&#125;</span><br><span class="line">a &amp;= b + c \\</span><br><span class="line">  &amp;= d + e + f</span><br><span class="line">\end&#123;aligned&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><h2 id="方程组、条件表达式"><strong>方程组、条件表达式</strong></h2><p>方程组：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3600em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>3</mn><mi>x</mi><mo>+</mo><mn>5</mn><mi>y</mi><mo>+</mo><mi>z</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>7</mn><mi>x</mi><mo>−</mo><mn>2</mn><mi>y</mi><mo>+</mo><mn>4</mn><mi>z</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>6</mn><mi>x</mi><mo>+</mo><mn>3</mn><mi>y</mi><mo>+</mo><mn>2</mn><mi>z</mi></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}3x + 5y +  z \\7x - 2y + 4z \\-6x + 3y + 2z\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.9099999999999997em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.3500199999999998em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19199em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.31599999999999984em;width:0.889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.889em' height='0.31599999999999984em' style='width:0.889em' viewBox='0 0 889 316' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V316 H384z M384 0 H504 V316 H384z'/></svg></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.31599999999999984em;width:0.889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.889em' height='0.31599999999999984em' style='width:0.889em' viewBox='0 0 889 316' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V316 H384z M384 0 H504 V316 H384z'/></svg></span></span><span style="top:-4.600019999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">3</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">5</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">7</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">−</span><span class="mord">6</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;cases&#125;</span><br><span class="line">3x + 5y +  z \\</span><br><span class="line">7x - 2y + 4z \\</span><br><span class="line">-6x + 3y + 2z</span><br><span class="line">\end&#123;cases&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>同理，条件表达式：</p><p><img src="16.svg" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">f(n) =</span><br><span class="line">\begin&#123;cases&#125; </span><br><span class="line">n/2,  &amp; \text&#123;if &#125;n\text&#123; is even&#125; \\</span><br><span class="line">3n+1, &amp; \text&#123;if &#125;n\text&#123; is odd&#125;</span><br><span class="line">\end&#123;cases&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><hr><h2 id="间隔-大小空格、紧贴"><strong>间隔 (大小空格、紧贴)</strong></h2><p><strong>紧贴 + 无空格 + 小空格 + 中空格 + 大空格 + 真空格 + 双真空格</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">a\!b + ab + a\,b + a\;b + a\ b + a\quad b + a\qquad b</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>紧贴<code>\!</code></p><p>无空格 小空格<code>\,</code> 中空格<code>\;</code> 大空格<code>\</code></p><p>真空格<code>\quad</code> 双真空格<code>\qquad</code></p>]]></content>
      
      
      <categories>
          
          <category> 实用知识(杂谈) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散：1.图的表示和同构及连通性</title>
      <link href="/2021/10/05/%E7%A6%BB%E6%95%A3%EF%BC%9A1.%E5%9B%BE%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%90%8C%E6%9E%84/"/>
      <url>/2021/10/05/%E7%A6%BB%E6%95%A3%EF%BC%9A1.%E5%9B%BE%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%90%8C%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h3 id="图的表示：">图的表示：</h3><ul><li><p>邻接表</p><p><img src="1.png" alt=""></p></li><li><p>邻接矩阵(<strong>无向图的邻接矩阵总是对称的</strong>)</p><ol><li><p>图的邻接矩阵依赖于所选择的顶点的顺序。因此带n个顶点的图有n!个不同的邻接矩阵，因为n个顶点有n!个不同的顺序。</p></li><li><p>当图里的边相对少时，邻接矩阵是稀疏矩阵，即只有很少的非0项的矩阵。可以用特殊的方法来表示和计算这样的矩阵。</p></li><li><p>邻接矩阵也可以表示带环和多重边的无向图,把顶点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>上的环表示成邻接矩阵（i,i）位置上的1。当出现多重边时候，邻接矩阵不再是0－1矩阵，这是因为邻接矩阵的第( i,j)项等于与{<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">a_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>}关联的边数。包括多重图与伪图在内的所有无向图都具有对称的邻接矩阵</p></li></ol><p><img src="0.png" alt=""></p><p><strong>对无向图来说，邻接矩阵每一行各个位置上数字之和代表什么？</strong></p><p>等于顶点i的度减去在顶点i上的环数</p><p>对于有向图而言，邻接矩阵每一行各个位置上数字之和代表什么？代表该顶点的出度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>e</mi><msup><mi>g</mi><mo>+</mo></msup><mo stretchy="false">(</mo><msub><mi>v</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">deg^+(v_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.021331em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>,每一列各个位置上数字之和代表什么？代表该顶点的入度</p></li><li><p>关联矩阵</p><p><img src="2.png" alt=""></p><p><img src="3.png" alt=""></p></li></ul><h3 id="图的同构">图的同构</h3><p><img src="4.png" alt=""></p><h4 id="怎么判断两个简单图是否同构"><strong>怎么判断两个简单图是否同构</strong>?</h4><h5 id="相同不变量：">相同不变量：</h5><ul><li><p>相同的顶点数</p></li><li><p>有相同的边数</p></li><li><p><strong>连通分支的数目及其大小</strong></p></li><li><p><strong>两图同构只有当他们具有相同长度的简单回路。</strong></p></li><li><p>应用两图中相应顶点具有相同的度来判断两图的同构情况</p></li></ul><h3 id="连通性">连通性</h3><h4 id="定义1-路径">定义1:路径</h4><p>图<em>G</em>的一个非空点、边交替序列<em>W</em>＝<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub><msub><mi>e</mi><mn>1</mn></msub><msub><mi>v</mi><mn>1</mn></msub><msub><mi>e</mi><mn>2</mn></msub><msub><mi>v</mi><mn>2</mn></msub><mo>…</mo><msub><mi>e</mi><mi>k</mi></msub><msub><mi>v</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">v_0e_1v_1e_2v_2…e_kv_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 称为一条<strong>从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">v_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">v_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的路径</strong>或(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">v_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">v_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)路径，</p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">v_{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>e</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">e_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的<strong>端点</strong>(1≤i≤k)。 称<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">v_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为W的<strong>起点</strong>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">v_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为W的<strong>终点</strong>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>(1≤i≤k－1)为W的内点，k为W的<strong>路长</strong>。</p><p><img src="5.png" alt=""></p><h4 id="定义２-迹与路">定义２:迹与路</h4><p>设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub><msub><mi>e</mi><mn>1</mn></msub><msub><mi>v</mi><mn>1</mn></msub><msub><mi>e</mi><mn>2</mn></msub><msub><mi>v</mi><mn>2</mn></msub><mo>…</mo><msub><mi>e</mi><mi>k</mi></msub><msub><mi>v</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">v_0e_1v_1e_2v_2…e_kv_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为图<em>G</em>中的一条路径，若边$ e_1，e_2，…，e_k$ 互不相同，则称该路径为<strong>迹</strong>；若点序列<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub><mtext>，</mtext><msub><mi>v</mi><mn>1</mn></msub><mtext>，</mtext><mo>…</mo><mtext>，</mtext><msub><mi>v</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">v_0，v_1，…，v_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>互不相同，则称该路径为<strong>路</strong>。</p><h4 id="定义３：开闭路径与开闭迹">定义３：开闭路径与开闭迹</h4><p>设 $v_0e_1v_1e_2v_2…e_k v_k <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>是图</mtext><mi>G</mi><mtext>中的一条路径且</mtext><mi>k</mi><mo>≥</mo><mn>1</mn><mtext>，如果</mtext></mrow><annotation encoding="application/x-tex">是图G中的一条路径且k≥1，如果</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord cjk_fallback">是图</span><span class="mord mathnormal">G</span><span class="mord cjk_fallback">中的一条路径且</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord cjk_fallback">，如果</span></span></span></span>v_0＝v_k$，则称该路径为<strong>闭路径</strong>，否则称为<strong>开路径</strong>。</p><p>特别地，若$v_0e_1v_1e_2v_2…e_kv_k <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>是一条迹，</mtext><mi>k</mi><mo>≥</mo><mn>1</mn><mtext>，当</mtext></mrow><annotation encoding="application/x-tex">是一条迹，k≥1，当</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord cjk_fallback">是一条迹，</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord cjk_fallback">，当</span></span></span></span>v_0＝v_k$时称为<strong>闭迹</strong>，否则称为<strong>开迹</strong>。 <strong>闭迹也称为回路</strong>。</p><h4 id="定义４：圈">定义４：圈</h4><p>设$v_0e_1v_1e_2v_2…e_k v_0 $是一条<strong>闭迹</strong>，</p><p>如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub><mtext>，</mtext><msub><mi>v</mi><mn>1</mn></msub><mtext>，</mtext><mo>…</mo><mtext>，</mtext><msub><mi>v</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">v_0，v_1，…，v_{k-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>互不相同，</p><p>则称该闭迹为<strong>圈或k圈</strong>，</p><p>且当k为偶数时称为<strong>偶圈</strong>，k为奇数时称为<strong>奇圈</strong>。</p><h4 id="PS">PS.</h4><ul><li><strong>一条路必是一条迹</strong></li><li>自环和两条平行边都自成一圈</li></ul><h4 id="定理1">定理1</h4><p>若图<em>G</em>中每个顶点度数至少为２，则<em>G</em>中必含有圈。</p><h4 id="定义５：连通">定义５：连通</h4><p>设<em>G</em>是一个图，u，v∈V(G)，<br>如果存在从<em>u</em>到<em>v</em>的路，则称<em>u</em>，<em>v</em>是相连的或连通的，若<em>G</em>中任意两点都连通，则称图<em>G</em>是<strong>连通的</strong>。</p><p><strong>图G中顶点之间的连通关系是一个等价关系根据该关系可将V(G)划分成一些等价类<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>1</mn></msub><mtext>，</mtext><msub><mi>V</mi><mn>2</mn></msub><mtext>，</mtext><mo>…</mo><mtext>，</mtext><msub><mi>V</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">V_1，V_2，…，V_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，每个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">V_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>导出的子图G(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">V_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)称为G的一个连通分支。</strong></p><p>图G的连通分支是图G的连通子图，且该子图不是图G的另一个连通子图的真子图。</p><p><strong>G的连通分支数通常用ω(G)表示</strong><br><strong>G是连通的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\iff</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟺</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>ω(G)＝1</strong></p><h4 id="有向图的连通性与连通图">有向图的连通性与连通图</h4><p>存在有向(u，v)路，则称v是从u<strong>可达的</strong>或者<strong>弱连通的</strong></p><p>若u，v互相可达，则称u，v是<strong>双向连通的</strong>或者说是<strong>强连通的</strong></p><p><u>注意，u、v可以不直接相连，而是“可达”</u></p><p>若对D中任何两顶点，至少有一顶点可从另一顶点可达，即任何两定点间都是弱连通的，则称D是<strong>单向连通图</strong>或<strong>弱连通图</strong></p><p>若D中任何两顶点都是双向连通的，则称D是<strong>双向连通图或强连通图</strong></p><p>有向图G的子图是强连通图但不包含在更大的强连通子图中，可称为G的<strong>强连通分支</strong></p><p>PS.</p><ul><li>双向连通关系是<em>D</em>的顶点集<em>V</em>上的一个等价关系</li><li>双向分支<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\iff</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟺</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>强连通分支</li><li><em>Ｄ</em>强连通<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\iff</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟺</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span><em>Ｄ</em>恰有一个强连通分支。</li></ul><h4 id="定义６：距离">定义６：距离</h4><p>设<em>u</em>，<em>v</em>∈<em>V</em>(<em>G</em>)，若<em>u</em>，<em>v</em>连通，则称最短(<em>u</em>，<em>v</em>)路的长为<em>u</em>，<em>v</em>的<strong>距离</strong>，记为d(u，v)<br>当u，v不连通时，认为u，v的距离是∞</p><h4 id="定理２">定理２</h4><p>一个图<em>G</em>是二分图<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\iff</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟺</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>G中不含奇圈</p><p><img src="6.png" alt=""></p><p><strong>当<em>G</em>有<em>n</em>个顶点<em>ω</em>个分支时，怎样让边最多？</strong><br><em>G</em>的一个连通分支是<em>n</em>－<em>ω</em>＋1个点的完全图，其余<em>ω</em>－1个连通分支均是弧立点。</p><ul><li>当<em>ω</em>＝1时，<em>ε</em>≥<em>n</em>－1。即<em>n</em>个顶点的连通图至少有<em>n</em>－1条边</li><li>具有<em>n</em>个顶点，<em>n</em>－1条边的连通图称为<strong>最小连通图</strong>。</li></ul><h4 id="定义7：割点与割边">定义7：割点与割边</h4><p>有时删除一个顶点和它所关联的边，就产生带有比原图更多的连通分支的子图。把这样的<strong>顶点</strong>称为<strong>割点</strong>（或节点）。从连通图里删除割点，就产生不连通的子图。<br>同理，把一旦删除就产生带有比原图更多的连通分支的子图的<strong>边</strong>称为<strong>割边或桥</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绘制：path基础与贝塞尔函数</title>
      <link href="/2021/10/04/%E7%BB%98%E5%88%B6%EF%BC%9Apath%E4%B8%8E%E8%B4%9D%E5%A1%9E%E5%B0%94/"/>
      <url>/2021/10/04/%E7%BB%98%E5%88%B6%EF%BC%9Apath%E4%B8%8E%E8%B4%9D%E5%A1%9E%E5%B0%94/</url>
      
        <content type="html"><![CDATA[<h1>以flutter为例的path基础讲解：</h1><h3 id="路径形成的基础方法：">路径形成的基础方法：</h3><p>图源<a href="https://juejin.cn/book/6844733827265331214">Flutter 绘制指南 - 妙笔生花</a>，下面案例同，</p><p><img src="%E7%BB%98%E5%88%B6%EF%BC%9A0.awebp" alt=""></p><ul><li><p><code>moveTo</code>：将画笔起点移动到给定坐标</p></li><li><p><code>relativeMoveTo</code>：相对当前画笔起点坐标将画笔起点进行dx与dy的平移</p></li><li><p><code>lineTo</code>：从画笔起始点画直线到给定坐标</p></li><li><p><code>relativeLineTo</code>：在起始点与相对起始点dx、dy距离的点之间画线</p></li></ul><p><strong>flutter的圆弧都是以矩形的内接椭圆截取绘制而来的，所以下面的画弧的方法会传入Rect</strong></p><ul><li><code>arcTo</code>:</li></ul><p><img src="1.awebp" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//rect: 圆弧所在矩形</span><br><span class="line">//startAngle : 开始弧度</span><br><span class="line">//sweepAngle : 需要绘制的弧度大小</span><br><span class="line">//forceMoveTo : 如果“forceMoveTo”参数为false，则添加一条直线段和一条弧段。</span><br><span class="line">//如果“forceMoveTo”参数为true，则启动一个新的子路径，其中包含一个弧段。</span><br><span class="line"></span><br><span class="line">Path path = Path();</span><br><span class="line">Paint paint = Paint()</span><br><span class="line">  ..color = Colors.purpleAccent</span><br><span class="line">  ..strokeWidth = 2</span><br><span class="line">  ..style = PaintingStyle.stroke;</span><br><span class="line"></span><br><span class="line">// 绘制左侧</span><br><span class="line">//首先绘制外接矩形</span><br><span class="line">var rect = Rect.fromCenter(center: Offset(0, 0), width: 160, height: 100);</span><br><span class="line">path.lineTo(30, 30);//画线，注意向下方向是y轴</span><br><span class="line">//forcemoveTo为true，使得绘制圆弧时起始点强制moveTo圆弧的起始点</span><br><span class="line">path..arcTo(rect, 0, pi * 1.5, true);//注意用的是级联</span><br><span class="line">canvas.drawPath(path, paint);</span><br><span class="line"></span><br><span class="line">path.reset();</span><br><span class="line">//移动画布</span><br><span class="line">canvas.translate(200, 0);</span><br><span class="line">// 绘制右侧</span><br><span class="line">path.lineTo(30, 30);</span><br><span class="line">//forcemoveTo为true，使得绘制圆弧时起始点强制lineTo圆弧的起始点</span><br><span class="line">path..arcTo(rect, 0, pi * 1.5, false);</span><br><span class="line">canvas.drawPath(path, paint);</span><br></pre></td></tr></table></figure><ul><li><p><code>arcToPoint</code>：当想要画圆弧到某个点，用 <code>arcToPoint</code> 会非常方便</p><ul><li>接受一个<code>点位入参 Offset</code>，是圆弧的终点，可指定<code>圆弧半径radius、是否使用优弧、是否顺时针</code>。</li><li>半径默认是0，即：不指定半径的话就会绘制直线，如果半径小于直径的一半则会以该半径做圆进行弧度近似（拼接）</li></ul></li><li><p><code>relativeArcToPoint</code>：与<code>arcToPoint</code>不同之处在于传入的offset代表dx、dy。</p></li><li><p><code>conicTo</code>：<code>conicTo</code> 接收五个参数用于绘制圆锥曲线，包括<code>椭圆线</code>、<code>抛物线</code>和<code>双曲线</code></p><ul><li>其中前两参是<code>控制点</code>，三四参是<code>结束点</code>，第五参是权重。(下图已画出辅助点)<ul><li>当<code>权重&lt; 1</code> 时，圆锥曲线是<code>椭圆线</code>,如下左图</li><li>当<code>权重= 1</code> 时，圆锥曲线是<code>抛物线</code>,如下中图</li><li>当<code>权重&gt; 1</code> 时，圆锥曲线是<code>双曲线</code>,如下右图</li></ul></li></ul></li></ul><p><img src="2.awebp" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">final Offset p1 = Offset(80, -100);</span><br><span class="line">final Offset p2 = Offset(160, 0);</span><br><span class="line"></span><br><span class="line">Path path = Path();</span><br><span class="line">Paint paint = Paint()</span><br><span class="line">  ..color = Colors.purpleAccent</span><br><span class="line">  ..strokeWidth = 2</span><br><span class="line">  ..style = PaintingStyle.stroke;</span><br><span class="line"></span><br><span class="line">//抛物线</span><br><span class="line">path.conicTo(p1.dx, p1.dy, p2.dx, p2.dy, 1);</span><br><span class="line">canvas.drawPath(path, paint);</span><br><span class="line"></span><br><span class="line">path.reset();</span><br><span class="line">canvas.translate(-180, 0);</span><br><span class="line">//椭圆线</span><br><span class="line">path.conicTo(p1.dx, p1.dy, p2.dx, p2.dy, 0.5);</span><br><span class="line">canvas.drawPath(path, paint);</span><br><span class="line"></span><br><span class="line">path.reset();</span><br><span class="line">canvas.translate(180+180.0, 0);</span><br><span class="line">//双曲线</span><br><span class="line">path.conicTo(p1.dx, p1.dy, p2.dx, p2.dy, 1.5);</span><br><span class="line">canvas.drawPath(path, paint);</span><br></pre></td></tr></table></figure><ul><li><code>relativeConicTo</code>:使用相对位置来加入圆锥曲线路径，参数含义与上面一致。</li></ul><p>以上大部分引自小册，有些注释是我自己加的。大佬讲的挺好（<s>绝对不是因为我平时根本不用才去cv的</s>）</p><h3 id="PS">PS.</h3><p>安卓原生也可以画弧但不能画双曲线，画弧的策略与flutter一样，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addArc</span> <span class="params">(RectF oval, <span class="keyword">float</span> startAngle, <span class="keyword">float</span> sweepAngle)</span></span></span><br></pre></td></tr></table></figure><p>float startAngle：开始的角度，X轴正方向为0度，float sweepAngel：持续的度数；而且好像只能顺时针画</p><h3 id="贝塞尔函数：">贝塞尔函数：</h3><p>感谢<a href="https://qijian.blog.csdn.net/">启舰</a>大佬的动图</p><h4 id="一阶：">一阶：</h4><p>虽然一阶贝塞尔函数没啥用，但它是认识高阶贝塞尔函数的基础。</p><p>对于一阶贝赛尔曲线，我们可以理解为在起始点和终点形成的这条直线上，匀速移动的点取值形成的轨迹，其实与这条直线没有区别。</p><h4 id="二阶：">二阶：</h4><p><img src="3.png" alt=""></p><p>有一说一不研究真的看不明白，好在发现了大佬做的动画:</p><p><img src="4" alt=""></p><p>可以发现二阶其实就是两个一阶拼成的直线中又取了一次一阶贝塞尔函数</p><p><code>quadraticBezierTo</code>：假设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">P_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是起始点，那么前两个参数代表<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，后两个参数代表<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">P_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><p><code>relativeQuadraticBezierTo</code>：同上，不过参数都代表dx、dy</p><h4 id="三阶：">三阶：</h4><p><img src="5" alt=""></p><p>其实就是贝塞尔曲线逐渐降阶的过程。</p><p><code>cubicTo</code>：三阶，两个控制点，一个结束点</p><p><code>relativeCubicTo</code>：同理</p><p>PS.安卓除了方法名外，参数并无不同。</p><h1>贝塞尔函数的使用</h1><h3 id="作用：">作用：</h3><p>一般来说最常见的应用是关于绘制时的优化（抗锯齿）以及波纹的相关动画。</p><h4 id="绘制优化：">绘制优化：</h4><p>如果按照最基础的点动成线：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (event.getAction())&#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class="line">            mPath.moveTo(event.getX(), event.getY());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            mPath.lineTo(event.getX(), event.getY());</span><br><span class="line">            postInvalidate();<span class="comment">//界面重绘</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意path只有调用<code>canvas.paint</code>的时候才会进行绘制嗷</p><p>至于效果嘛，感觉锯齿比较严重，而且特别生硬：</p><img src="6.png" style="zoom:50%;" /><p>然后，我的策略是很简单的暴力贝塞尔：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> x,y;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">switch</span> (event.getAction())&#123;</span><br><span class="line">         <span class="keyword">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class="line">             x = event.getX();</span><br><span class="line">             y = event.getY();</span><br><span class="line">             mPath.moveTo(event.getX(), event.getY());</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">             mPath.quadTo(x,y,event.getX(), event.getY());</span><br><span class="line">             x = event.getX();</span><br><span class="line">             y = event.getY();</span><br><span class="line">             postInvalidate();</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">default</span>:</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>效果嘛，emmm，怎么感觉好像没起作用？</p><p>那我来告诉你答案，就是没起作用！</p><img src="7.png" style="zoom:50%;" /><p>问题出在哪呢？可以看看启舰大佬给的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> mPreX,mPreY;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (event.getAction())&#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:&#123;</span><br><span class="line">            mPath.moveTo(event.getX(),event.getY());</span><br><span class="line">            mPreX = event.getX();</span><br><span class="line">            mPreY = event.getY();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:&#123;</span><br><span class="line">            <span class="keyword">float</span> endX = (mPreX+event.getX())/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">float</span> endY = (mPreY+event.getY())/<span class="number">2</span>;</span><br><span class="line">            mPath.quadTo(mPreX,mPreY,endX,endY);</span><br><span class="line">            mPreX = event.getX();</span><br><span class="line">            mPreY =event.getY();</span><br><span class="line">            invalidate();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br></pre></td></tr></table></figure><p>区别就在于<code>MotionEvent.ACTION_MOVE</code>上：首先将上次的坐标与这次的坐标取了中点，作为结束点，用上次坐标作为控制点进行路径添加，一个<code>quadTo</code>的终点，是下一个<code>quadTo</code>的起始点。所以这里的起始点，就是上一个线段的中间点。那么显然我给的代码起始点和控制点是一个点，那不就是一阶贝塞尔函数嘛，那摆明了就是直线相连，能有啥作用。</p><p>图示：</p><img src="9.png" style="zoom:50%;" /><p>下面是更正后的效果图，要好很多：</p><img src="8.png" style="zoom:50%;" /><h5 id="PS：">PS：</h5><p>flutter写起来相对麻烦一些，因为无法直接调用监听，所以就需要手势监听获取坐标</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">GestureDetector(</span><br><span class="line">                onPanDown: (details) &#123;</span><br><span class="line">                    <span class="comment">//准备当前图层的画笔颜色和粗细</span></span><br><span class="line">                    imageDrawLogic.isClear = <span class="keyword">false</span>;</span><br><span class="line">                    imageDrawLogic.points[imageDrawLogic.curFrame].color</span><br><span class="line">                    = imageDrawLogic.selectedColor;</span><br><span class="line">                    imageDrawLogic.points[imageDrawLogic.curFrame].strokeWidth</span><br><span class="line">                    = imageDrawLogic.strokeWidth;</span><br><span class="line">                &#125;,</span><br><span class="line">                onPanUpdate: (details) &#123;</span><br><span class="line">                    <span class="comment">//收集点坐标</span></span><br><span class="line">                    <span class="comment">//因为是放在StatefulBuilder(builder: (context, state) &#123;&#125;</span></span><br><span class="line">                    <span class="comment">//内使用的，所以用state刷新状态</span></span><br><span class="line">                    RenderBox referenceBox = context.findRenderObject() <span class="keyword">as</span> RenderBox;</span><br><span class="line">                    Offset localPosition =</span><br><span class="line">                    referenceBox.globalToLocal(details.globalPosition);</span><br><span class="line">                    state(() &#123;                  imageDrawLogic.points[imageDrawLogic.curFrame].points.add(localPosition);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;,</span><br><span class="line">                onPanEnd: (details) &#123;</span><br><span class="line">                  <span class="comment">//准备下次绘制</span></span><br><span class="line">                    imageDrawLogic.points.add(</span><br><span class="line">                        Point(</span><br><span class="line">                            imageDrawLogic.selectedColor,</span><br><span class="line">                            imageDrawLogic.strokeWidth,</span><br><span class="line">                            []</span><br><span class="line">                        ));</span><br><span class="line">                    imageDrawLogic.curFrame++;</span><br><span class="line">                &#125;,</span><br><span class="line">              )</span><br></pre></td></tr></table></figure><p>然后在绘制时，</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">  <span class="keyword">final</span> Path linePath = <span class="keyword">new</span> Path() ;</span><br><span class="line">  <span class="keyword">final</span> rect = Rect.fromLTRB(<span class="number">0.0</span>, <span class="number">0.0</span>, size.width, size.height);</span><br><span class="line">  canvas.clipRect(rect);<span class="comment">//裁剪画布</span></span><br><span class="line">  <span class="keyword">if</span> (isClear || points.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; points.length; i++) &#123;</span><br><span class="line">      </span><br><span class="line">    _linePaint..color = points[i].color;</span><br><span class="line">    _linePaint..strokeWidth = points[i].strokeWidth;</span><br><span class="line">    <span class="built_in">List</span>&lt;Offset&gt; curPoints = points[i].points;</span><br><span class="line">    <span class="keyword">if</span> (curPoints.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="built_in">double</span> x = curPoints[<span class="number">0</span>].dx<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">double</span> y = curPoints[<span class="number">0</span>].dy<span class="number">-1</span>;</span><br><span class="line">    linePath.moveTo(x, y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; curPoints.length; i++) &#123;</span><br><span class="line">      <span class="built_in">double</span> endX = (x + curPoints[i].dx)/<span class="number">2</span>;</span><br><span class="line">      <span class="built_in">double</span> endY = (y + curPoints[i].dy)/<span class="number">2</span>;</span><br><span class="line">      linePath.quadraticBezierTo(x,y,endX,endY);</span><br><span class="line">       x = curPoints[i].dx;</span><br><span class="line">       y = curPoints[i].dy;</span><br><span class="line">    &#125;</span><br><span class="line">    canvas.drawPath(linePath, _linePaint);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="水波纹效果">水波纹效果</h4><p>（坑）</p>]]></content>
      
      
      <categories>
          
          <category> 绘制原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> 安卓原生 </tag>
            
            <tag> 绘制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绘制：安卓原生（二、Region）</title>
      <link href="/2021/10/03/%E7%BB%98%E5%88%B6%EF%BC%9A%E5%AE%89%E5%8D%93%E5%8E%9F%E7%94%9FRegion/"/>
      <url>/2021/10/03/%E7%BB%98%E5%88%B6%EF%BC%9A%E5%AE%89%E5%8D%93%E5%8E%9F%E7%94%9FRegion/</url>
      
        <content type="html"><![CDATA[<h1>安卓原生Region：</h1><p>今天没有讲flutter，貌似，flutter并没有与之对应的内容。</p><p>Region，中文意思即区域的意思，它表示的是canvas图层上的某一块封闭的区域。</p><p>你可能会问，既然已经有canvas，为什么还要有region？</p><p>这是因为，安卓原生的组件无法像flutter那样，通过使用GestureDetector或者GestureRecognizer对组件进行包裹从而非常方便的实现控件的手势控制，而是要进行实例化与调用，那么在自绘组件的时候如何实现手势控制呢？这其实就是region的功能之一了。</p><h2 id="首先放上基本上所有的API：">首先放上基本上所有的API：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**构造方法*/</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Region</span><span class="params">()</span>  <span class="comment">//创建一个空的区域</span></span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="title">Region</span><span class="params">(Region region)</span> <span class="comment">//拷贝一个region的范围</span></span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="title">Region</span><span class="params">(Rect r)</span>  <span class="comment">//创建一个矩形的区域</span></span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="title">Region</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> <span class="comment">//创建一个矩形的区域</span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"><span class="comment">/**一系列set方法，这些set方法，和上面构造方法形式差不多*/</span></span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(Region region)</span> </span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(Rect r)</span> </span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span></span><br><span class="line"><span class="function"> <span class="comment">/*往一个Region中添加一个Path只有这种方法，参数clip代表这个整个Region的区域，在在里面裁剪出path范围的区域*/</span></span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setPath</span><span class="params">(Path path, Region clip)</span> <span class="comment">//用指定的Path和裁剪范围构建一个区域</span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"><span class="comment">/**几个判断方法*/</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;<span class="comment">//判断该区域是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">isRect</span><span class="params">()</span></span>; <span class="comment">//是否是一个矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">isComplex</span><span class="params">()</span></span>;<span class="comment">//是否是多个矩阵组合</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**一系列的getBound方法，返回一个Region的边界*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Rect <span class="title">getBounds</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getBounds</span><span class="params">(Rect r)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Path <span class="title">getBoundaryPath</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getBoundaryPath</span><span class="params">(Path path)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**一系列的判断是否包含某点 和是否相交*/</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;<span class="comment">//是否包含某点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">quickContains</span><span class="params">(Rect r)</span><span class="comment">//是否包含某矩阵</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">quickContains</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right,<span class="keyword">int</span> bottom)</span><span class="comment">//是否包含某矩阵</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">quickReject</span><span class="params">(Rect r)</span> <span class="comment">//是否没和该矩阵相交</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">quickReject</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span></span>; <span class="comment">//是否没和该矩阵相交</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">quickReject</span><span class="params">(Region rgn)</span></span>;  <span class="comment">//是否没和该矩阵相交</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**几个平移变换的方法*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">translate</span><span class="params">(<span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">translate</span><span class="params">(<span class="keyword">int</span> dx, <span class="keyword">int</span> dy, Region dst)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scale</span><span class="params">(<span class="keyword">float</span> scale)</span> <span class="comment">//hide</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">scale</span><span class="params">(<span class="keyword">float</span> scale, Region dst)</span></span>;<span class="comment">//hide</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**一系列组合的方法*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">union</span><span class="params">(Rect r)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">op</span><span class="params">(Rect r, Op op)</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">op</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom, Op op)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">op</span><span class="params">(Region region, Op op)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">op</span><span class="params">(Rect rect, Region region, Op op)</span> </span></span><br></pre></td></tr></table></figure><p>说明一下最后的一组关于Region组合的方式。组合即当前的Region和另外的一个Region组合，可以用不同的Op方式来进行组合,Op是一个枚举，定义在Region类中:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Op</span> </span>&#123;</span><br><span class="line">        DIFFERENCE(<span class="number">0</span>), <span class="comment">//最终区域为region1 与 region2不同的区域</span></span><br><span class="line">        INTERSECT(<span class="number">1</span>), <span class="comment">// 最终区域为region1 与 region2相交的区域</span></span><br><span class="line">        UNION(<span class="number">2</span>),      <span class="comment">//最终区域为region1 与 region2组合一起的区域</span></span><br><span class="line">        XOR(<span class="number">3</span>),        <span class="comment">//最终区域为region1 与 region2相交之外的区域</span></span><br><span class="line">        REVERSE_DIFFERENCE(<span class="number">4</span>), <span class="comment">//最终区域为region2 与 region1不同的区域</span></span><br><span class="line">        REPLACE(<span class="number">5</span>); <span class="comment">//最终区域为为region2的区域</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>另外还有矩形集枚举区域——RegionIterator类</p><p>对于特定的区域，我们都可以使用多个矩形来表示其大致形状。事实上，如果矩形足够小，一定数量的矩形就能够精确表示区域的形状，<strong>也就是说，一定数量的矩形所合成的形状，也可以代表区域的形状</strong>。RegionIterator类，实现了获取组成区域的矩形集的功能，其实RegionIterator类非常简单，总共就两个函数，一个构造函数和一个获取下一个矩形的函数；<br>RegionIterator(Region region) //根据区域构建对应的矩形集<br>boolean next(Rect r) //获取下一个矩形，结果保存在参数Rect r 中</p><p>由于在Canvas中没有直接绘制Region的函数，我们想要绘制一个区域，就只能通过利用RegionIterator构造矩形集来逼近的显示区域。用法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawRegion</span><span class="params">(Canvas canvas,Region rgn,Paint paint)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">RegionIterator iter = <span class="keyword">new</span> RegionIterator(rgn);</span><br><span class="line">Rect r = <span class="keyword">new</span> Rect();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (iter.next(r)) &#123;</span><br><span class="line">  canvas.drawRect(r, paint);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各个API具体使用在<a href="https://blog.csdn.net/coderinchina">zhoushenxian</a>的这篇<a href="https://blog.csdn.net/coderinchina/article/details/74975180">博客</a>里有详细案例，但我感觉有点太过啰嗦。</p><h2 id="下面讲几个我认为比较重要的方法：">下面讲几个我认为比较重要的方法：</h2><h3 id="使用SetPath（）构造不规则区域">使用SetPath（）构造不规则区域</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">setPath</span> <span class="params">(Path path, Region clip)</span></span></span><br></pre></td></tr></table></figure><p>参数说明：<br>Path path：用来构造的区域的路径<br>Region clip：与前面的path所构成的路径取交集，并将两交集设置为最终的区域</p><p>由于路径有很多种构造方法，而且可以轻意构造出非矩形的路径，这就摆脱了前面的构造函数只能构造矩形区域的限制。但这里有个问题是要指定另一个区域来取共同的交集，当然如果想显示路径构造的区域，Region clip参数可以传一个比Path范围大的多的区域，取完交集之后，当然是Path参数所对应的区域喽。机智的孩子。</p><p>下面，先构造一个椭圆路径，然后在SetPath时，传进去一个比Path小的矩形区域，让它们两个取交集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRegionView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyRegionView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(context);</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"><span class="comment">//初始化Paint</span></span><br><span class="line">Paint paint = <span class="keyword">new</span> Paint();</span><br><span class="line">paint.setColor(Color.RED);</span><br><span class="line">paint.setStyle(Style.FILL);</span><br><span class="line">paint.setStrokeWidth(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//构造一个椭圆路径</span></span><br><span class="line">Path ovalPath = <span class="keyword">new</span> Path();</span><br><span class="line">RectF rect =  <span class="keyword">new</span> RectF(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">500</span>);  </span><br><span class="line">ovalPath.addOval(rect, Direction.CCW);</span><br><span class="line"><span class="comment">//SetPath时,传入一个比椭圆区域小的矩形区域,让其取交集</span></span><br><span class="line">Region rgn = <span class="keyword">new</span> Region();</span><br><span class="line">rgn.setPath(ovalPath,<span class="keyword">new</span>  Region(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">200</span>));</span><br><span class="line"><span class="comment">//画出路径</span></span><br><span class="line">drawRegion(canvas, rgn, paint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawRegion</span><span class="params">(Canvas canvas,Region rgn,Paint paint)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">RegionIterator iter = <span class="keyword">new</span> RegionIterator(rgn);</span><br><span class="line">Rect r = <span class="keyword">new</span> Rect();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (iter.next(r)) &#123;</span><br><span class="line">  canvas.drawRect(r, paint);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="0.png" alt=""></p><p>上面的例子其实可以看出region的一个重要作用是对图形的截取，因为有些时候我们并不能通过绘制的方法完美地绘制出我们想要的图形。但其实也有一定的局限性，就是一次只能有一个路径与region取交集。多个路径的话，先把路径合并不就完了嘛。</p><h3 id="区域的合并、交叉等操作">区域的合并、交叉等操作</h3><p>无论是区域还是矩形，都会涉及到与另一个区域的一些操作，比如取交集、取并集等，涉及到的函数有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">union</span><span class="params">(Rect r)</span>   </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">op</span><span class="params">(Rect r, Op op)</span> </span>&#123;  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">op</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom, Op op)</span>   </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">op</span><span class="params">(Region region, Op op)</span>   </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">op</span><span class="params">(Rect rect, Region region, Op op)</span>   </span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Rect;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Region;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint.Style;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Region.Op;</span><br><span class="line"><span class="keyword">import</span> android.graphics.RegionIterator;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRegionView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyRegionView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造两个矩形</span></span><br><span class="line">Rect rect1 = <span class="keyword">new</span> Rect(<span class="number">100</span>,<span class="number">100</span>,<span class="number">400</span>,<span class="number">200</span>);</span><br><span class="line">Rect rect2 = <span class="keyword">new</span> Rect(<span class="number">200</span>,<span class="number">0</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造一个画笔，画出矩形轮廓</span></span><br><span class="line">Paint paint = <span class="keyword">new</span> Paint();</span><br><span class="line">paint.setColor(Color.RED);</span><br><span class="line">paint.setStyle(Style.STROKE);</span><br><span class="line">paint.setStrokeWidth(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">canvas.drawRect(rect1, paint);</span><br><span class="line">canvas.drawRect(rect2, paint);</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造两个Region</span></span><br><span class="line">Region region = <span class="keyword">new</span> Region(rect1);</span><br><span class="line">Region region2= <span class="keyword">new</span> Region(rect2);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//取两个区域的交集</span></span><br><span class="line">region.op(region2, Op.INTERSECT);</span><br><span class="line"></span><br><span class="line"><span class="comment">//再构造一个画笔,填充Region操作结果</span></span><br><span class="line">Paint paint_fill = <span class="keyword">new</span> Paint();</span><br><span class="line">paint_fill.setColor(Color.GREEN);</span><br><span class="line">paint_fill.setStyle(Style.FILL);</span><br><span class="line">drawRegion(canvas, region, paint_fill);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawRegion</span><span class="params">(Canvas canvas,Region rgn,Paint paint)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">RegionIterator iter = <span class="keyword">new</span> RegionIterator(rgn);</span><br><span class="line">Rect r = <span class="keyword">new</span> Rect();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (iter.next(r)) &#123;</span><br><span class="line">  canvas.drawRect(r, paint);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是取了交集，其余情况如图：</p><p><img src="1.png" alt=""></p><h3 id="判断包含与相交：">判断包含与相交：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**一系列的判断是否包含某点 和是否相交*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;<span class="comment">//是否包含某点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">quickContains</span><span class="params">(Rect r)</span><span class="comment">//是否包含某矩阵</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">quickContains</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right,<span class="keyword">int</span> bottom)</span><span class="comment">//是否包含某矩阵</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">quickReject</span><span class="params">(Rect r)</span> <span class="comment">//是否和该矩阵不相交</span></span></span><br><span class="line"><span class="function"><span class="comment">//官方注释：</span></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="function"> * Return true if the region is empty, or if the specified rectangle does</span></span></span><br><span class="line"><span class="comment"><span class="function"> * not intersect the region. Returning false is not a guarantee that they</span></span></span><br><span class="line"><span class="comment"><span class="function"> * intersect, but returning true is a guarantee that they do not.</span></span></span><br><span class="line"><span class="comment"><span class="function"> */</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">quickReject</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span></span>; <span class="comment">//是否和该矩阵不相交</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">quickReject</span><span class="params">(Region rgn)</span></span>;  <span class="comment">//是否和该矩阵不相交</span></span><br></pre></td></tr></table></figure><p>判断触点是否在某region内：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> downX = (<span class="keyword">int</span>)event.getX();</span><br><span class="line">    <span class="keyword">int</span> downY = (<span class="keyword">int</span>)event.getY();</span><br><span class="line">    <span class="keyword">boolean</span> isContain =  region.contains(downX,downY);</span><br><span class="line">    <span class="keyword">if</span>(isContain)&#123;</span><br><span class="line">        Toast.makeText(getContext(),<span class="string">&quot;这个点在这个区域内&quot;</span>,Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        Toast.makeText(getContext(),<span class="string">&quot;这个点不在这个区域内&quot;</span>,Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="个人的一些理解：">个人的一些理解：</h2><p>region的使用，给了开发者更高的灵活性，毕竟canvas只有一个，将组件的各个部分利用region解耦，能够在开发中与开发后带来更大的便利。这里类似于将flutter的组件组合与绘制融合起来的一种策略，细细想来也确实是显得更加便利，毕竟region既拥有类似于canvas的“绘制”能力，也拥有类似于GestureDetector的点击监听，虽然没有其他手势监听，确实显得有些遗憾，但region的任务更偏向于绘制，也显得更加内聚了。</p><p>参考文章：<a href="https://blog.csdn.net/harvic880925/article/details/39056701">自定义控件之绘图篇（三）：区域（Range）</a></p>]]></content>
      
      
      <categories>
          
          <category> 绘制原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓原生 </tag>
            
            <tag> 绘制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JetBrains系列常用快捷键汇总</title>
      <link href="/2021/10/02/JetBrains%E7%B3%BB%E5%88%97%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%B1%87%E6%80%BB/"/>
      <url>/2021/10/02/JetBrains%E7%B3%BB%E5%88%97%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1>引言：</h1><p>作为一名资深咸鱼，美观强大的编译器一直是我的追求，所谓工欲善其事必先利其器，当然了，也要学会高效地使用编译器，才能讲编译器的优点最大化。磨刀不误砍柴工，下面汇总一些JetBrains家IDE的常用快捷键与设置。</p><h1>快捷键汇总：</h1><p>首先，在网上看到有人推荐Key Promoter X 这款插件，当你使用鼠标和菜单项时，这个插件会提示相应的快捷键。我刚安装，先试试水。</p><p><img src="0.png" alt=""></p><h2 id="导航类快捷键">导航类快捷键</h2><h3 id="Ctrl-Tab（-Tab）-——-切换标签页（特别好用）"><code>Ctrl + Tab</code>（<code>^ Tab</code>） —— 切换标签页（特别好用）</h3><p>快速切换打开的文件。按住 Ctrl 键不释放时可以在打开文件列表中逐个移动，释放时会切换到相应文件。</p><h3 id="Ctrl-B-（⌘-B）-——-跳转到声明-实现"><code>Ctrl + B</code> （<code>⌘ B</code>） —— 跳转到声明/实现</h3><p>在某一方法处按此快捷键，会跳转到该方法的声明处，例如，对应的接口。相反，按下 <code>Ctrl + Alt + B</code>（<code>⌘ ⌥ B</code>）不会跳转到接口，而是跳转到接口的实现，很多时候这能节省不少时间。</p><h3 id="按两下-Shift（⇧⇧）-——-搜索任意内容">按两下 <code>Shift</code>（<code>⇧⇧</code>） —— 搜索任意内容</h3><p>快速点按两下 shift，快速搜索项目中的任意内容，包括文件、行动、类在内的任意内容。</p><h3 id="Ctrl-N-（⌘-O）-——-查找类"><code>Ctrl + N</code> （<code>⌘ O</code>） —— 查找类</h3><p>如果已知需要查找的是类，那么就不必使用上面的搜索任意内容的快捷键。按下此快捷键后，开始输入类名。不必输入完整的类名，只需输入前面的部分，或者仅输入类名中的大写字母，还可以输入星号（<code>*</code>）表示通配符。</p><h3 id="Ctrl-Shift-N-（⌘-⇧-O）-——-查找文件"><code>Ctrl + Shift + N</code> （<code>⌘ ⇧ O</code>） —— 查找文件</h3><p>需要查找文本文件或配置文件时，这个快捷键很方便。</p><h3 id="Ctrl-Shift-T-（⇧-⌘-T）-——-跳转至测试"><code>Ctrl + Shift + T</code> （<code>⇧ ⌘ T</code>） —— 跳转至测试</h3><p>如果你对测试轻度上瘾，那么这个快捷键可以让你在测试和实现间快速跳转。当在测试处按此快捷键，会跳转至相应实现。反之，在实现处按此快捷键，则会跳转至相应测试。如果测试不存在，会根据你选择的测试框架，自动创建相应的测试类。</p><h3 id="Ctrl-Alt-F7-（⌘-⌥-F7）-——-显示用例"><code>Ctrl + Alt + F7</code> （<code>⌘ ⌥ F7</code>） —— 显示用例</h3><p>在弹出对话框中显示当前方法、类、变量的所有用例，让你可以迅速跳转。</p><h3 id="Ctrl-F12-（⌘-F12）-——-结构视图"><code>Ctrl + F12</code> （<code>⌘ F12</code>） —— 结构视图</h3><p>显示属性、方法列表，方便快捷地大致了解当前类的用途。</p><h3 id="Ctrl-G-（⌘-L）-——-跳转至行"><code>Ctrl + G</code> （<code>⌘ L</code>） —— 跳转至行</h3><p>有同事问你第 45 行的代码是做什么的时，这个方便的快捷键让你可以迅速跳转至相应代码。</p><h3 id="F2-（F2）-——-跳转至报错-警告"><code>F2</code> （<code>F2</code>） —— 跳转至报错/警告</h3><p>IntelliJ 有报错或警告时（编辑区域右上角会显示一个小的状态图标），按下 F2 会跳转至下一处错误/警告。这个快捷键有助于你保持状态图标常绿。</p><h2 id="编辑类快捷键">编辑类快捷键</h2><p>除了导航，我们也希望能在编写代码时提速。以下快捷键有助于我们达成这一点。</p><h3 id="Ctrl-W-（⌥-Up）-——-扩展选择区域（特别好用）"><code>Ctrl + W</code> （<code>⌥ Up</code>） —— 扩展选择区域（特别好用）</h3><p>这是我个人最常用的快捷键。不需要用鼠标选择文本了，只需跳转至代码中的某个元素，然后按下此快捷键。它会智能地扩展选择区域，从单词到语句，从语句到代码块，从代码块到方法，以此类推。在你想要提取方法时尤为便捷。<code>Ctrl + Shift + W</code> （<code>⌥ Down</code>）则会缩小选择区域。</p><h3 id="Alt-Enter-（⌥-Enter）-——-显示意图（特别好用）"><code>Alt + Enter</code> （<code>⌥ Enter</code>） —— 显示意图（特别好用）</h3><p>修正引入，运行测试，优化引入，等等。如果你的代码有问题，让这个快捷键来修复。如果你的代码没问题，这个快捷键能让你的代码变得更好。</p><h3 id="Ctrl-Shift-Enter-（⌘-⇧-Enter）-——-补全语句"><code>Ctrl + Shift + Enter</code> （<code>⌘ ⇧ Enter</code>） —— 补全语句</h3><p>就我的经验而言，这是一个被严重低估的快捷键。少个括号？少了行尾的分号？不管光标是不是在行尾，按下此快捷键便可补全必要的字符。</p><h3 id="Ctrl-D-（⌘-D）-——-复制当前行（特别好用）"><code>Ctrl + D</code> （<code>⌘ D</code>） —— 复制当前行（特别好用）</h3><p>根据我的经验，还是有许多人使用鼠标选中当前行，复制，然后粘贴。相比之下，<code>Ctrl + D</code> （<code>⌘ D</code>）可以节约很多时间：按下之后就可以新增一行，内容和当前行一样。如果当前选中了多行，这个快捷键会重复整个代码块。</p><h3 id="Ctrl-Y-（⌘-⌫）-——-删除当前行"><code>Ctrl + Y</code> （<code>⌘ ⌫</code>） —— 删除当前行</h3><p>类似 <code>Ctrl + D</code> （<code>⌘ D</code>），这个快捷键可以删除代码行。</p><h3 id="Ctrl-（⌘-）-——-注释当前行"><code>Ctrl + /</code> （<code>⌘ /</code>） —— 注释当前行</h3><p>不管光标在当前行的什么位置，只需按下这个快捷键就可以注释掉当前行。我个人从不用这个快捷键注释代码，不过有时候我会用这个快捷键切换某段代码是否运行。不过，记得永远不要提交注释掉的代码。</p><h3 id="Ctrl-Shift-——块注释"><code>Ctrl + Shift + /</code>  ——块注释 (/**/)</h3><h3 id="Ctrl-Alt-L-——格式化代码（特别好用）"><code>Ctrl + Alt + L</code> ——格式化代码（特别好用）</h3><p>一般来说，写的代码格式不整齐统一，这个很有用</p><h3 id="Ctrl-z-Ctrl-x-Ctrl-c-Ctrl-v-Ctrl-F-老生常谈，不提了">Ctrl + z , Ctrl + x ,Ctrl + c ,Ctrl + v ,Ctrl + F 老生常谈，不提了</h3><h2 id="重构快捷键">重构快捷键</h2><p>IntelliJ 的最大强项之一就是充裕到过剩的重构机会。尽管重构代码的机会很多，实践中 90% 的情况下，用到的重构快捷键是我下面列出的。</p><h3 id="Ctrl-Alt-M-（⌘-⌥-M）-——-提取方法"><code>Ctrl + Alt + M</code> （<code>⌘ ⌥ M</code>） —— 提取方法</h3><p>选中一段代码（比如使用之前提到的 <code>Ctrl + W</code> / <code>⌥ Up</code> 快捷键），接着按下 <code>Ctrl + Alt + M</code> （<code>⌘ ⌥ M</code>），便可将选中的代码提取为新方法或匿名函数表达式。</p><h3 id="Shift-F6-（⇧-F6）-——-重命名（特别好用）"><code>Shift + F6</code> （<code>⇧ F6</code>） —— 重命名（特别好用）</h3><p>不管是方法、变量，还是类，按下 <code>Shift + F6</code> （⇧ F6）便可将当前选中元素在所有代码中的用例一次性替换。不过要小心点，IntelliJ 的默认配置有点激进，同时也会替换文本中的用例，这常常不合你意。按下两次 <code>Shift + F6</code> （⇧ F6）将提供重命名选项，让你可以定制设定。我建议只替换代码，关闭文本替换选项。</p><h3 id="Ctrl-Alt-V-（⌘-⌥-V）-——-提取变量"><code>Ctrl + Alt + V</code> （<code>⌘ ⌥ V</code>） —— 提取变量</h3><p>同样，使用 <code>Ctrl + W</code> / <code>⌥ Up</code> 选中一段代码，接着按下 <code>Ctrl + Alt + V</code> （<code>⌘ ⌥ V</code>），便可创建一个新变量，变量的类型常常是正确的，命名常常是合理的。将表达式传入方法或类时，赋值给一个变量常常可以增强可读性，此时这个快捷键很方便。</p><h2 id="调试类快捷键（用的不是太多）">调试类快捷键（用的不是太多）</h2><table><thead><tr><th>按键</th><th>作用</th></tr></thead><tbody><tr><td>F8</td><td>跳过</td></tr><tr><td>F7</td><td>步进</td></tr><tr><td>Shift + F8</td><td>跳出</td></tr><tr><td>Alt + F8</td><td>表达式求值</td></tr><tr><td>F9</td><td>恢复程序</td></tr><tr><td>Ctrl + F8</td><td>切断断点</td></tr><tr><td>Ctrl+Shift+F8</td><td>查看断点</td></tr></tbody></table><h2 id="以上选自Erik-Pragt的原创以及kumfo">以上选自<a href="https://nextfe.com/jetbrains-ide-shortcuts/">Erik Pragt的原创</a>以及<a href="https://segmentfault.com/a/1190000007206543">kumfo</a></h2><h1>IDE设置汇总：</h1><h2 id="导包设置：">导包设置：</h2><ul><li>Add unambiguous imports on the fly：快速添加明确的导入。</li><li>Optimize imports on the fly：快速优化导入，优化的意思即自动帮助删除无用的导入。</li></ul><p><img src="1.png" alt=""></p><h2 id="配置Log颜色：">配置Log颜色：</h2><p><img src="2.png" alt=""></p><p>看个人喜好即可</p><h2 id="缩写设置：（活动模板）">缩写设置：（活动模板）</h2><p>Android Studio 中默认提供了很多非常方便的活动模板(Live Templates)，例如，我们输入 sout 后按 enter 键， Android Studio 会自动帮我们写入 System.out.println();</p><p><img src="3.png" alt=""></p><p>可以看到IDE已经帮我们定义好了很多，想添加自定义的模板直接点击右上角加号就可以了。</p><h3 id="常用的比如：">常用的比如：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//psvm:</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sout</span></span><br><span class="line">System.out.println();</span><br><span class="line"><span class="comment">//souf</span></span><br><span class="line">System.out.printf(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fori</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ; i++) &#123;&#125;</span><br><span class="line"><span class="comment">//itar</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Array.length; i++) &#123; <span class="keyword">int</span> i1 = Array[i];&#125;<span class="comment">//遍历数组</span></span><br><span class="line"><span class="comment">//foreach</span></span><br><span class="line"><span class="keyword">for</span> (:) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//psf</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  </span><br><span class="line"><span class="comment">//psfi</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>  </span><br><span class="line"><span class="comment">//psfs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String  </span><br></pre></td></tr></table></figure><p>等等等等</p><h1>虚拟机等大文件迁出：</h1><p>android studio产生的.gradle .android .androidStudio缓存默认存在C盘，时间长了之后会占用大量空间，建议提前进行迁移。</p><p>由于我已经迁出过了，就不再演示了</p><p>放链接：</p><p><a href="https://blog.csdn.net/SmallWalnutBG/article/details/107463138?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EOPENSEARCH%7Edefault-7.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EOPENSEARCH%7Edefault-7.no_search_link">https://blog.csdn.net/SmallWalnutBG/article/details/107463138?utm_medium=distribute.pc_relevant.none-task-blog-2~default~OPENSEARCH~default-7.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~OPENSEARCH~default-7.no_search_link</a></p><h1>PS. 如果C盘满了又不敢乱删怎么办：</h1><h2 id="1-删除一些东西：">1.删除一些东西：</h2><p>这个删除当然不是乱删，建议下载spaceSniffer对C盘空间进行分析删掉一些安装包或者临时文件什么的。</p><p><img src="4.png" alt=""></p><h2 id="2-扩容C盘：">2.扩容C盘：</h2><p>常规方法是无法扩容C盘的，但可以借助一些软件</p><p>我使用的DiskGenius，免费而且功能强大，我就用它给我的C盘扩容过</p><p><img src="5.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 实用知识(杂谈) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载与汇总 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绘制：安卓原生与flutter(一、引言与绘图)</title>
      <link href="/2021/10/01/%E7%BB%98%E5%88%B6%EF%BC%9A%E5%AE%89%E5%8D%93%E5%8E%9F%E7%94%9F%E4%B8%8Eflutter/"/>
      <url>/2021/10/01/%E7%BB%98%E5%88%B6%EF%BC%9A%E5%AE%89%E5%8D%93%E5%8E%9F%E7%94%9F%E4%B8%8Eflutter/</url>
      
        <content type="html"><![CDATA[<h1>先放上 <a href="https://blog.csdn.net/harvic880925/article/details/50995268">安卓大佬</a> 和<a href="https://juejin.cn/book/6844733827265331214/section/6844733827214999565">flutter大佬</a>镇楼</h1><h1>引言：我为什么要学绘制</h1><p>​       其实对于flutter来说，自绘的需求并不是很大，尤其是组件的自绘，一方面，flutter的组件就是依据MaterialDesign风格绘制的，本来就很好看，另一方面，一些复杂的组件也完全可以通过组件组装的方式进行构建，比自绘要省事。但这并不意味着flutter没有自绘组件的需求，一些高度自定义的组件（比如QQ编辑图片的时候能在图片上贴表情或者加文字时显示的文字框以及文字输入框的拖动缩放旋转等等等等）还是需要我们去自绘组件的。</p><p>​       不过对于安卓原生嘛，嘿嘿，就开始离谱了。原生组件UI也不算。。特别丑，但是相较于flutter来说，高下立判。一方面，原生组件最好还是不要直接拿来用，还是建议进行封装。另一方面，原生的动画效果做的并不比flutter好，而且组件也比较单一，都留给了自绘很大的发展空间（<s>给开发者增加了工作量</s>）。</p><p><img src="1.jpg" alt=""></p><p>以下内容选自<a href="https://juejin.cn/user/149189281194766">张风捷特烈</a>的小册<a href="https://juejin.cn/book/6844733827265331214/section">Flutter 绘制指南 - 妙笔生花</a>，我觉得说的挺好：</p><h5 id="为什么要学绘制">为什么要学绘制</h5><p>打开你的<code>手机</code>、<code>电脑</code>、<code>平板</code>，你可视的所有的一切在本质上都是<code>依靠绘制实现</code>的。每个平台都会有自身的绘制体系，平台自身的控件很多时候可能<code>并不能满足</code>设计的需求，也有很多控件是和项目<code>特点高度契合</code>的，所以平台会<code>暴露出绘制的接口</code>给开发者，让开发者对界面元素拥有 <code>高度的可定制性</code>。</p><p>但凡<code>可定制性</code>的东西，都意味着一定的<code>门槛</code>，这可能会让很多人<code>望而却步</code>，所以绘制这个技能总是被开发者所冷漠，毕竟抱着<code>又不是不能用</code>心态的人不在少数，而且伟大的先驱者们也为我们留下来<code>丰富的资源</code>，这些轮子，装上就能跑，岂不美哉，干嘛费心费力地自己画？</p><p>但不要忘记: 用别人的东西，是<code>被约束</code>的一方，用起来束手束脚。而且别人的代码不一定能百分百符合你的需求，很多时候还是需要自己改改，如果你不会绘制的知识，那将非常痛苦。如果<code>找不到</code>能用的轮子，自己的绘制技能又这么蹩脚，那就只能去问，或花钱找别人实现。为什么要让自己混这么惨呢，<code>何不食肉糜？</code></p><p>有轮子和自己会绘制并不冲突，就像<code>有钱花</code>和<code>拥有挣钱的能力</code>一样，两者可以很好地<code>相辅相成</code>，一旦你懂了，就能更好的去用，甚至去修改轮子来满足自身的设计需求，或发现轮子中的缺点加以改正，<code>使用者和创造者</code>的身份并不冲突。</p><p><strong>总而言之，没有剑，和有剑不用，是两码事</strong>。</p><h1>绘图基础介绍与对比</h1><h2 id="原生：Paint-Canvas-即画笔与画布">原生：Paint&amp;Canvas,即画笔与画布</h2><h3 id="代码结构与调用：如何让IDE知道你是在进行绘制呢？绘制完如何使用呢？">代码结构与调用：如何让IDE知道你是在进行绘制呢？绘制完如何使用呢？</h3><p>其实方法很简单，让你的类继承view类并重写OnDraw（）函数，OnDraw（）函数中进行画笔画板配置并调用画板对象即可完成绘制。结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">Context m_context;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(context);</span><br><span class="line">m_context=context;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重写OnDraw（）函数，在每次重绘时自主实现绘图</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"><span class="comment">//设置画笔</span></span><br><span class="line">Paint paint=<span class="keyword">new</span> Paint();</span><br><span class="line">        </span><br><span class="line">paint.set....</span><br><span class="line">        <span class="comment">//画</span></span><br><span class="line">        canvas.draw....</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用：大佬在他的博客里使用的是通过类文件进行添加，个人不是很喜欢，但还是放上：</p><p>默认的XML改成FrameLayout布局，布局代码如下：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/root&quot;</span>//注意这里，在类文件中会用到</span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;com.example.try_paint_blog.MainActivity&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>类文件如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        </span><br><span class="line">      setContentView(R.layout.activity_main);</span><br><span class="line">      FrameLayout root=(FrameLayout)findViewById(R.id.root);<span class="comment">//对应xml中的framelayout</span></span><br><span class="line">      root.addView(<span class="keyword">new</span> MyView(MainActivity.<span class="keyword">this</span>));<span class="comment">//添加</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        我为什么不喜欢这么用呢？个人认为，除非必要（指需要动态添加或者删除的组件），静态组件就应该在xml文件中进行声明，避免因视图层与逻辑层耦合过高而导致后期维护困难。举个例子，当你重写一个界面，却发现总有个xml中没定义过的组件出现在UI里，那八成是在逻辑层里动态添加的。但如果万一你动态添加的这个组件是透明的，那你就会发现自己的UI排布非常奇怪又找不出原因。</p><p>bb了半天，写一下我推荐的xml中的写法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;com.example.try_paint_blog.MainActivity&quot;</span> &gt;</span> </span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;<span class="name">com.zwn.view.MyView</span>       //用路径去进行定义</span></span><br><span class="line"><span class="tag">         <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span>             </span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Paint的基本设置函数：">Paint的基本设置函数：</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">paint.setAntiAlias(<span class="keyword">true</span>);<span class="comment">//抗锯齿功能</span></span><br><span class="line">paint.setColor(Color.RED);  <span class="comment">//设置画笔颜色    </span></span><br><span class="line">paint.setStyle(Style.FILL);<span class="comment">//设置填充样式</span></span><br><span class="line">paint.setStrokeWidth(<span class="number">30</span>);<span class="comment">//设置画笔宽度</span></span><br><span class="line">paint.setShadowLayer(<span class="number">10</span>, <span class="number">15</span>, <span class="number">15</span>, Color.GREEN);<span class="comment">//设置阴影</span></span><br></pre></td></tr></table></figure><p>另外，对于填充样式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setStyle</span> <span class="params">(Paint.Style style)</span>     <span class="comment">//设置填充样式</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Paint.Style.FILL             <span class="comment">//：填充内部</span></span></span><br><span class="line"><span class="function">Paint.Style.FILL_AND_STROKE  <span class="comment">//：填充内部和描边</span></span></span><br><span class="line"><span class="function">Paint.Style.STROKE           <span class="comment">//：仅描边</span></span></span><br></pre></td></tr></table></figure><p>FILL与FILL_AND_STROKE在<strong>画笔比较细时</strong>没什么区别，描边一般搭配画笔宽度使用</p><p>对于阴影：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setShadowLayer</span> <span class="params">(<span class="keyword">float</span> radius, <span class="keyword">float</span> dx, <span class="keyword">float</span> dy, <span class="keyword">int</span> color)</span>    <span class="comment">//添加阴影</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//参数：</span></span></span><br><span class="line"><span class="function"><span class="comment">//radius:阴影的倾斜度</span></span></span><br><span class="line"><span class="function"><span class="comment">//dx:水平位移</span></span></span><br><span class="line"><span class="function"><span class="comment">//dy:垂直位移</span></span></span><br></pre></td></tr></table></figure><h3 id="然后是Canvas的设置：">然后是Canvas的设置：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">canvas.drawColor(Color.BLUE);</span><br><span class="line">canvas.drawRGB(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>);  <span class="comment">//这两个功能一样，都是用来设置背景颜色的。</span></span><br><span class="line">canvas.drawRect();</span><br><span class="line">canvas.drawRoundRect();</span><br><span class="line">canvas.drawCircle();</span><br><span class="line">canvas.drawPath();</span><br><span class="line">canvas.drawLine();</span><br><span class="line">canvas.drawArc();</span><br><span class="line">canvas.drawOval();</span><br><span class="line">canvas.drawPoint();</span><br><span class="line">canvas.drawPoints();</span><br><span class="line">canvas.drawText();</span><br><span class="line">canvas.drawTextOnPath();</span><br><span class="line">canvas.drawBitmap();</span><br></pre></td></tr></table></figure><p><a href="https://juejin.cn/post/7011904646348275725#heading-0">canvas的各个绘制函数</a><br><a href="https://juejin.cn/post/7012646921470738469">canvas的变换</a></p><h3 id="基本几何图形：">基本几何图形：</h3><h4 id="啊不想写了，这部分太基础了，一般用到的情况也不太多，直接看大佬写的吧。">啊不想写了，这部分太基础了，一般用到的情况也不太多，直接看大佬写的吧。</h4><p><a href="https://blog.csdn.net/harvic880925/article/details/38875149">概述及基本几何图形绘制</a><br><a href="https://blog.csdn.net/harvic880925/article/details/38926877">路径及文字</a></p><p>感觉最基本的还是个人抽象思维与逻辑思维。</p><p><img src="2.jpg" alt=""></p><h2 id="flutter-：Paint-Canvas-Path-即画笔、画布与路径，">flutter ：Paint&amp;Canvas&amp;Path,即画笔、画布与路径，</h2><h3 id="同样地，代码结构：">同样地，代码结构：</h3><p>与原生不同的是，flutter在开发过程中并不存在动态添加的问题。想要调用自定义的组件，只需要调用一个CustomPaint（），在其painter类中对绘制的逻辑进行设置即可。样例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Paper</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      color: Colors.white,</span><br><span class="line">      child: CustomPaint( <span class="comment">// 使用CustomPaint</span></span><br><span class="line">        painter: PaperPainter(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaperPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">    <span class="comment">// 创建画笔</span></span><br><span class="line">    <span class="keyword">final</span> Paint paint = Paint();</span><br><span class="line">    <span class="comment">// 绘制圆</span></span><br><span class="line">    canvas.drawCircle(Offset(<span class="number">100</span>, <span class="number">100</span>), <span class="number">10</span>, paint);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(CustomPainter oldDelegate) =&gt; <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中painter类继承了CustomPainter，并重写paint方法用于绘制，其实与原生一样的逻辑。最终painter参数传给CustomPaint进行绘制。</p><h3 id="Canvas-方法一览">Canvas 方法一览 :</h3><blockquote><p>Canvas 的方法非常多，但大多数顾名思义。其中画布<code>状态</code>、<code>变换</code>将是最难的地方。</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">----&gt;[画布状态]----</span><br><span class="line"><span class="keyword">void</span> save()</span><br><span class="line"><span class="keyword">void</span> saveLayer(Rect bounds, Paint paint)</span><br><span class="line"><span class="keyword">void</span> restore()</span><br><span class="line"><span class="built_in">int</span> getSaveCount()</span><br><span class="line"></span><br><span class="line">----&gt;[画布变换]----</span><br><span class="line"><span class="keyword">void</span> skew(<span class="built_in">double</span> sx, <span class="built_in">double</span> sy)</span><br><span class="line"><span class="keyword">void</span> rotate(<span class="built_in">double</span> radians)</span><br><span class="line"><span class="keyword">void</span> scale(<span class="built_in">double</span> sx, [<span class="built_in">double</span> sy])</span><br><span class="line"><span class="keyword">void</span> translate(<span class="built_in">double</span> dx, <span class="built_in">double</span> dy)</span><br><span class="line"><span class="keyword">void</span> transform(Float64List matrix4)</span><br><span class="line"></span><br><span class="line">----&gt;[画布裁剪]----</span><br><span class="line"><span class="keyword">void</span> clipRect(Rect rect, &#123; ClipOp clipOp = ClipOp.intersect, <span class="built_in">bool</span> doAntiAlias = <span class="keyword">true</span> &#125;)</span><br><span class="line"><span class="keyword">void</span> clipRRect(RRect rrect, &#123;<span class="built_in">bool</span> doAntiAlias = <span class="keyword">true</span>&#125;) </span><br><span class="line"><span class="keyword">void</span> clipPath(Path path, &#123;<span class="built_in">bool</span> doAntiAlias = <span class="keyword">true</span>&#125;)</span><br><span class="line"></span><br><span class="line">----&gt;[画布绘制--点相关]----</span><br><span class="line"><span class="keyword">void</span> drawPoints(PointMode pointMode, <span class="built_in">List</span>&lt;Offset&gt; points, Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawRawPoints(PointMode pointMode, Float32List points, Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawLine(Offset p1, Offset p2, Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawVertices(Vertices vertices, BlendMode blendMode, Paint paint)</span><br><span class="line"></span><br><span class="line">----&gt;[画布绘制--矩形相关]----</span><br><span class="line"><span class="keyword">void</span> drawRect(Rect rect, Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawRRect(RRect rrect, Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawDRRect(RRect outer, RRect inner, Paint paint)</span><br><span class="line">  </span><br><span class="line">----&gt;[画布绘制--类圆相关]----</span><br><span class="line"><span class="keyword">void</span> drawOval(Rect rect, Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawCircle(Offset c, <span class="built_in">double</span> radius, Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawArc(Rect rect, <span class="built_in">double</span> startAngle, <span class="built_in">double</span> sweepAngle, <span class="built_in">bool</span> useCenter, Paint paint)</span><br><span class="line"></span><br><span class="line">----&gt;[画布绘制--图片相关]----</span><br><span class="line"><span class="keyword">void</span> drawImage(Image image, Offset p, Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawImageRect(Image image, Rect src, Rect dst, Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawImageNine(Image image, Rect center, Rect dst, Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawAtlas(Image atlas,<span class="built_in">List</span>&lt;RSTransform&gt; transforms,<span class="built_in">List</span>&lt;Rect&gt; rects,<span class="built_in">List</span>&lt;Color&gt; colors,BlendMode blendMode,Rect cullRect,Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawRawAtlas(Image atlas,Float32List rstTransforms,Float32List rects,Int32List colors,BlendMode blendMode,Rect cullRect,Paint paint)</span><br><span class="line">  </span><br><span class="line">----&gt;[画布绘制--文字]----</span><br><span class="line"><span class="keyword">void</span> drawParagraph(Paragraph paragraph, Offset offset)</span><br><span class="line">  </span><br><span class="line">----&gt;[画布绘制--其他]----</span><br><span class="line"><span class="keyword">void</span> drawColor(Color color, BlendMode blendMode)</span><br><span class="line"><span class="keyword">void</span> drawPath(Path path, Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawPaint(Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawShadow(Path path, Color color, <span class="built_in">double</span> elevation, <span class="built_in">bool</span> transparentOccluder)</span><br><span class="line">    <span class="comment">//第一个参数时绘制一个图形 Path，第二个是设置阴影颜色，第三个为阴影范围，最后一个阴影范围是否填充满</span></span><br><span class="line"><span class="keyword">void</span> drawPicture(Image image)</span><br></pre></td></tr></table></figure><hr><h3 id="Paint-属性一览">Paint 属性一览 :</h3><blockquote><p>粗略数了一下大概有 14 个属性: 这些都是之后需要详细介绍的<br>下面代码是简单使用 Paint 和 Canvas 绘制的斜线：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">isAntiAlias(抗锯齿) color(颜色)          blendMode(混合模式)     style(画笔样式)</span><br><span class="line">strokeWidth(线宽)   strokeCap(线帽类型)  strokeJoin(线接类型)    strokeMiterLimit(斜接限制)  </span><br><span class="line">maskFilter(遮罩滤镜) shader(着色器)      colorFilter(颜色滤镜)    imageFilter(图片滤镜)</span><br><span class="line">invertColors(是否反色)                  filterQuality(滤镜质量)</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">  <span class="keyword">final</span> Paint paint = Paint(); <span class="comment">// 创建画笔</span></span><br><span class="line">  paint</span><br><span class="line">    ..color = Colors.blue <span class="comment">//颜色</span></span><br><span class="line">    ..strokeWidth = <span class="number">4</span> <span class="comment">//线宽</span></span><br><span class="line">    ..style = PaintingStyle.stroke; <span class="comment">//模式--线型</span></span><br><span class="line">  canvas.drawLine(Offset(<span class="number">0</span>, <span class="number">0</span>), Offset(<span class="number">100</span>, <span class="number">100</span>), paint);  <span class="comment">//绘制线</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Path-方法一览">Path 方法一览 :</h3><blockquote><p>可以说 <code>Canvas</code> 的一个 <code>drawPath</code> 方法，为绘制打开了一扇通往无限可能的大门。<br>通过 Path 可以完成非常多的效果，Path 的这些方法将在 <code>[Path篇]</code> 进行详细阐述。</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">----&gt;[路径绝对移动]----</span><br><span class="line"><span class="keyword">void</span> moveTo(<span class="built_in">double</span> x, <span class="built_in">double</span> y)</span><br><span class="line"><span class="keyword">void</span> lineTo(<span class="built_in">double</span> x, <span class="built_in">double</span> y)</span><br><span class="line"><span class="keyword">void</span> quadraticBezierTo(<span class="built_in">double</span> x1, <span class="built_in">double</span> y1, <span class="built_in">double</span> x2, <span class="built_in">double</span> y2)</span><br><span class="line"><span class="keyword">void</span> cubicTo(<span class="built_in">double</span> x1, <span class="built_in">double</span> y1, <span class="built_in">double</span> x2, <span class="built_in">double</span> y2, <span class="built_in">double</span> x3, <span class="built_in">double</span> y3)</span><br><span class="line"><span class="keyword">void</span> conicTo(<span class="built_in">double</span> x1, <span class="built_in">double</span> y1, <span class="built_in">double</span> x2, <span class="built_in">double</span> y2, <span class="built_in">double</span> w)</span><br><span class="line"><span class="keyword">void</span> arcTo(Rect rect, <span class="built_in">double</span> startAngle, <span class="built_in">double</span> sweepAngle, <span class="built_in">bool</span> forceMoveTo)</span><br><span class="line"><span class="keyword">void</span> arcToPoint(Offset arcEnd, &#123;Radius radius = Radius.zero, <span class="built_in">double</span> rotation = <span class="number">0.0</span>, <span class="built_in">bool</span> largeArc = <span class="keyword">false</span>, <span class="built_in">bool</span> clockwise = <span class="keyword">true</span>,&#125;)</span><br><span class="line"></span><br><span class="line">----&gt;[路径相对移动]----</span><br><span class="line"><span class="keyword">void</span> relativeMoveTo(<span class="built_in">double</span> dx, <span class="built_in">double</span> dy)</span><br><span class="line"><span class="keyword">void</span> relativeLineTo(<span class="built_in">double</span> dx, <span class="built_in">double</span> dy)</span><br><span class="line"><span class="keyword">void</span> relativeQuadraticBezierTo(<span class="built_in">double</span> x1, <span class="built_in">double</span> y1, <span class="built_in">double</span> x2, <span class="built_in">double</span> y2)</span><br><span class="line"><span class="keyword">void</span> relativeCubicTo(<span class="built_in">double</span> x1, <span class="built_in">double</span> y1, <span class="built_in">double</span> x2, <span class="built_in">double</span> y2, <span class="built_in">double</span> x3, <span class="built_in">double</span> y3)</span><br><span class="line"><span class="keyword">void</span> relativeConicTo(<span class="built_in">double</span> x1, <span class="built_in">double</span> y1, <span class="built_in">double</span> x2, <span class="built_in">double</span> y2, <span class="built_in">double</span> w)</span><br><span class="line"><span class="keyword">void</span> relativeArcToPoint(Offset arcEndDelta, &#123; Radius radius = Radius.zero, <span class="built_in">double</span> rotation = <span class="number">0.0</span>, <span class="built_in">bool</span> largeArc = <span class="keyword">false</span>, <span class="built_in">bool</span> clockwise = <span class="keyword">true</span>, &#125;)</span><br><span class="line"></span><br><span class="line">----&gt;[路径添加]----</span><br><span class="line"><span class="keyword">void</span> addRect(Rect rect)</span><br><span class="line"><span class="keyword">void</span> addRRect(RRect rrect)</span><br><span class="line"><span class="keyword">void</span> addOval(Rect oval)</span><br><span class="line"><span class="keyword">void</span> addArc(Rect oval, <span class="built_in">double</span> startAngle, <span class="built_in">double</span> sweepAngle)</span><br><span class="line"><span class="keyword">void</span> addPolygon(<span class="built_in">List</span>&lt;Offset&gt; points, <span class="built_in">bool</span> close)</span><br><span class="line"><span class="keyword">void</span> addPath(Path path, Offset offset, &#123;Float64List matrix4&#125;)</span><br><span class="line"><span class="keyword">void</span> extendWithPath(Path path, Offset offset, &#123;Float64List matrix4&#125;)</span><br><span class="line"></span><br><span class="line">----&gt;[路径操作]----</span><br><span class="line"><span class="keyword">void</span> close()</span><br><span class="line"><span class="keyword">void</span> reset()</span><br><span class="line"><span class="built_in">bool</span> contains(Offset point)</span><br><span class="line">Path shift(Offset offset)</span><br><span class="line">Path transform(Float64List matrix4)</span><br><span class="line">Rect getBounds()   </span><br><span class="line"><span class="keyword">set</span> fillType(PathFillType value)</span><br><span class="line"><span class="keyword">static</span> Path combine(PathOperation operation, Path path1, Path path2)</span><br><span class="line">PathMetrics computeMetrics(&#123;<span class="built_in">bool</span> forceClosed = <span class="keyword">false</span>&#125;)</span><br></pre></td></tr></table></figure><p><strong>以上dart代码均引自https://juejin.cn/book/6844733827265331214/section/6844733827214999565</strong></p><p>​        粗略对比，其实flutter的绘制逻辑跟原生基本是一模一样，flutter在paint的属性上要多一点，不过一般来说其实用到的也就是跟原生一样的那几个。不过flutter的滤镜不出意外是一层封装，因为安卓原生也能通过矩阵变换实现滤镜效果，就是有点费头发（雾）。</p><p>​        不过呢，flutter的canvas的drawShadow方法还是很有趣的，这大概也从侧面说明了flutter组件中广泛存在的阴影的最基本绘制方法。而原生canvas.drawBitmap()与flutter的canvas.drawPicture(Picture picture)是相对应的，但原生的bitmap速度理论上是比较快的，而flutter使用的是image作为参数而不是file或者Uint8List，其性能尚未可知。</p><p>​        另外，flutter显然对Path类更加上心，相对于原生，flutter考虑到了绘制的灵活性，为绘制添加了通过相对位置添加路径的方法，使得在组合类组件中，使用flutter开发更加简单，不过还是因需求而异。</p><p>​       <s>而且有级联语法糖</s></p><p>​      又，canvas的变换是要经常用到的，主要是为了避免绘制出界以及画布方向的问题。但是呢，matrix4或者说矩阵变换相关的问题，显然是非人类简单能理解的，并不建议使用。</p>]]></content>
      
      
      <categories>
          
          <category> 绘制原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> 安卓原生 </tag>
            
            <tag> 绘制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学线oj思路讲解</title>
      <link href="/2021/09/30/%E5%AD%A6%E7%BA%BFoj%E6%80%9D%E8%B7%AF%E8%AE%B2%E8%A7%A3/"/>
      <url>/2021/09/30/%E5%AD%A6%E7%BA%BFoj%E6%80%9D%E8%B7%AF%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<img src="0.jpg"  /><h3 id="学线，集合！-by-zwn">学线，集合！(by zwn)</h3><h4 id="难度：简单-tag：数组，计算，送分题">难度：简单  tag：数组，计算，送分题</h4><p>又到了一年一度的迎新季，由于学线福利待遇好，又有新办公室，导致今年迎新展台异常火爆。孔站火速召集学线同学前来帮忙。现在把前来帮忙的同学的位置标记在数轴上，每个同学的位置也存在数组 locate 当中。</p><p>孔站可以对 任何同学 执行下面两种操作之一（不限操作次数，0 次也可以）：</p><p>将任意一个同学向左或者右移动 2 个单位，代价为 0。<br>将任意一个同学向左或者右移动 1 个单位，代价为 1。</p><p>输入数组locate，返回将所有同学移动到同一位置（任意位置）上所需要的最小代价。</p><p><strong>最开始的时候，同一位置上也可能有两个或者更多的同学哦。</strong></p><p>输入样例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>输出样例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解释：第二个筹码移动到位置三的代价是 1，第一个筹码移动到位置三的代价是 0，总代价为 1。</span><br></pre></td></tr></table></figure><h4 id="思路：最基础的贪心思想">思路：最基础的贪心思想</h4><h5 id="贪心算法："><strong>贪心算法</strong>：</h5><p>（英语：greedy algorithm），又称<strong>贪婪算法</strong>，是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的<a href="https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95">算法</a>。比如在<a href="https://zh.wikipedia.org/wiki/%E6%97%85%E8%A1%8C%E6%8E%A8%E9%94%80%E5%91%98%E9%97%AE%E9%A2%98">旅行推销员问题</a>中，如果旅行员每次都选择最近的城市，那这就是一种贪心算法。</p><p><strong>贪心算法在有最优子结构的问题中尤为有效。最优子结构的意思是局部最优解能决定全局最优解。简单地说，问题能够分解成子问题来解决，子问题的最优解能递推到最终问题的最优解。</strong></p><p>贪心算法与<a href="https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92">动态规划</a>的不同在于它对每个子问题的解决方案都做出选择，不能回退。动态规划则会保存以前的运算结果，并根据以前的结果对当前进行选择，有回退功能。</p><p>贪心法可以解决一些<a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E4%BC%98%E5%8C%96">最优化</a>问题，如：求<a href="https://zh.wikipedia.org/wiki/%E5%9B%BE">图</a>中的<a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91">最小生成树</a>、求<a href="https://zh.wikipedia.org/wiki/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81">哈夫曼编码</a>……对于其他问题，**贪心法一般不能得到我们所要求的答案。一旦一个问题可以通过贪心法来解决，那么贪心法一般是解决这个问题的最好办法。**由于贪心法的高效性以及其所求得的答案比较接近最优结果，贪心法也可以用作辅助算法或者直接解决一些要求结果不特别精确的问题。在不同情况，选择最优的解，可能会导致辛普森悖论（Simpson’s Paradox），不一定出现最优的解。</p><h5 id="基本步骤："><strong>基本步骤：</strong></h5><p>步骤1：从某个初始解出发；<br>步骤2：采用迭代的过程，当可以向目标前进一步时，就根据局部最优策略，得到一部分解，缩小问题规模；<br>步骤3：将所有解综合起来。</p><h5 id="栗子："><strong>栗子</strong>：</h5><p><strong>找零钱问题</strong></p><p>假设你开了间小店，不能电子支付，钱柜里的货币只有 <strong>25 分、10 分、5 分和 1 分</strong>四种硬币，如果你是售货员且要找给客户 <strong>41 分钱的硬币</strong>，如何安排才能找给客人的钱既<strong>正确</strong>且硬币的个数又<strong>最少</strong>？</p><p>这里需要明确的几个点：<br>1.货币只有 25 分、10 分、5 分和 1 分四种硬币；<br>2.找给客户 41 分钱的硬币；<br>3.硬币最少化</p><p>（回顾一下上文贪婪法的基本步骤，1，2，3）</p><p>1.找给顾客sum_money=41分钱，可选择的是25 分、10 分、5 分和 1 分四种硬币。能找25分的，不找10分的原则，初次先找给顾客25分；<br>2.还差顾客sum_money=41-25=16。然后从25 分、10 分、5 分和 1 分四种硬币选取局部最优的给顾客，也就是选10分的，此时sum_money=16-10=6。重复迭代过程，还需要sum_money=6-5=1,sum_money=1-1=0。至此，顾客收到零钱，交易结束；<br>3.此时41分，分成了1个25，1个10，1个5，1个1，共四枚硬币。</p><p><strong>但是，我们再回顾一下第一个事例问题</strong></p><p>现在问题变了，还是需要找给顾客41分钱，现在的货币只有 25 分、20分、10 分、5 分和 1 分四种硬币；该怎么办？</p><p><strong>按照贪心算法的三个步骤：</strong></p><p>1.41分，局部最优化原则，先找给顾客25分；<br>2.此时，41-25=16分，还需要找给顾客10分，然后5分，然后1分；<br>3.最终，找给顾客一个25分，一个10分，一个5分，一个1分，共四枚硬币。</p><p><strong>是不是觉得哪里不太对，如果给他2个20分，加一个1分，三枚硬币就可以了呢？^_^;</strong></p><h5 id="对于本题：">对于本题：</h5><p>既然要贪心，即保证总开销值最小，那么对于每一次的移动选择，我们如果能选择开销为0的移动方式，就绝对不选择开销为1的移动方式。因此我们尽量通过方式一先将尽量多的同学移动到一起，在剩下的同学无法再通过方式一来移动到同一位置的时候，尽量使用最少次数的方式二来移动。</p><p>那么，不妨先将处于奇数位的同学移动到1的位置，偶数位都移动到2，在此过程中，0开销，然后再将两组同学合并，哪组同学人数少就移动到另一组里去，仍然是一步贪心。</p><h5 id="总结："><strong>总结：</strong></h5><p><strong>贪心算法的优缺点</strong></p><p><strong>优点：简单，高效，省去了为了找最优解可能需要穷举操作，通常作为其它算法的辅助算法来使用；</strong></p><p><strong>缺点：不从总体上考虑其它可能情况，每次选取局部最优解，不再进行回溯处理，所以很少情况下得到最优解。</strong></p><p>（样例选自<a href="https://zhuanlan.zhihu.com/p/53334049">小白算法</a>）</p><h3 id="吃果冻-by-zwn">吃果冻(by zwn)</h3><h4 id="难度：一般-tag：-String操作-流程控制-基本数据类型">难度：一般    tag： String操作 流程控制 基本数据类型</h4><p>众~~~所周知，ycjj最喜欢吃果冻。今天ycjj兴致勃勃地去超市买果冻，但现在超市售货机出现了乱码，老板表示只要ycjj能写程序找对乱码中“果冻”出现的次数就可以让ycjj免费吃相应数量的果冻，但ycjj表示：我都转专业了你竟然还让我写代码，你礼貌吗？于是找到了你来帮她写代码，并保证会根据代码的正确性给予一定的oj分数作为回报。现在有多行乱码（字符串），老板保证每行字符串不含空格，请你输出其中“果冻”这两个字出现的次数。</p><p>输入样例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a14&amp;&amp;果冻*guhj</span><br><span class="line">b果冻%hask果冻</span><br></pre></td></tr></table></figure><p>输出样例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="思路：">思路：</h4><p>老生常谈的一类题目，对于java来说特别友好，可用的方法有很多，但基本都绕不开split方法。</p><p>一种方法是采用字符串循环截取，对于输入的每一行，只要该行仍然包含目标字符串，就将该行字符串截取为从该行最前面的目标字符串的下一个字符到字符串最后的一个子串，同时次数++，如此依次处理各行字符串即可。</p><p>另一种方法可以采用字符串直接截取，对一行字符串，如果包含目标字符串，直接调用split将其划分为字符串数组，将数组长度减一即为包含的目标字符串个数。但有一个问题，如果目标字符串在开头或结尾，split划分出来的字符串数组中不会含有空字符串，导致再使用上述方法会导致答案错误。比如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;果冻啊果冻真好&quot;</span>;</span><br><span class="line">System.out.print(Arrays.toString(str.split(<span class="string">&quot;果冻&quot;</span>)));</span><br><span class="line"><span class="comment">//[&quot;啊&quot;,&quot;真好&quot;]</span></span><br></pre></td></tr></table></figure><p>那该如何解决呢？方法有很多，我最喜欢的方法是拼接无关子串，也就是在每行字符串的两端加上不相关的字符串，然后再split就好了。</p><h3 id="wngg爬八楼-by-zwn">wngg爬八楼(by zwn)</h3><p>众所周知，wngg住在八楼，每天都要爬好多楼梯，wngg发现自己每天要爬M阶楼梯，由于wngg腿长，wngg可以一次上两级楼梯，但累了也可以一次上一级，即每次上一级楼梯或者两级楼梯都可以。wngg突发奇想让你来算算他爬楼梯爬到M级一共有多少种方法。</p><p><strong>初始时wngg在第一级台阶，并且认为爬到第一级一共有0种方法。同样地也可以知道上到第二级有1种方法。</strong></p><p>Input</p><p>输入数据首先包含一个整数N，表示测试实例的个数，然后是N行数据，每行包含一个整数M（1&lt;=M&lt;=40）,表示楼梯的级数。</p><p>Output</p><p>对于每个测试实例，请输出不同走法的数量，共N行。</p><p>Sample Input 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>Sample Output 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>Sample Input 2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">8</span><br></pre></td></tr></table></figure><p>Sample Output 2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">21</span><br></pre></td></tr></table></figure><p>Hint</p><p>这是高中常见，算法入门，几乎每本编程书都会讲的一类问题。建议逆向思考，正向编程。</p><h4 id="思路：斐波那契数列">思路：斐波那契数列</h4><p>逆向思考，正向编程，循环就能解决。逆向思考，逆向编程，递归。</p><p>这道题想明白了就很简单，除了几个小坑。</p><p>都说了要<strong>逆向思考</strong>，指的是我们不要从第一级台阶考虑如何上到第n级台阶，而是要考虑，在第n级台阶的时候，我是从哪里上来的。那么很明显，只能从第n-1级或者n-2级台阶走到第n级台阶，也就是说，走到第n级台阶的方法就是走到第n-1级和n-2级台阶的方法的求和，那么一直递推到第1级台阶就很显然是一个斐波那契数列，但是如果要从第n级台阶开始递推，显然是一个递归问题，但是既然知道了是斐波那契数列，为啥不直接从第一级台阶开始用循环进行递加呢，难度瞬间降低，这就是所谓的正向编程。</p><p><strong>那么，坑在哪？</strong></p><p>首先，读题问题。wngg初始在第一级台阶，并且认为爬到第一级一共有0种方法。我都给你加粗了你都看不见这能赖谁。</p><p>其次，一个思维惯性的小坑。很多情况时往往是一些特殊情况我们没有考虑到位而导致无法AC。这道题，第一、第二级台阶是特殊情况需要单独处理，这是一般斐波那契数列的惯性思维，但也恰恰会忽略，其实第三极台阶也需要特殊处理。</p><p>走到第一级，方法有0种。第二级，方法有1种，第三级，方法有2种，从第四级开始才是斐波那契数列。（我的样例里面都直接写了你还做不对）</p><img src="1.jpg" style="zoom:140%;"  /><img src="2.jpg"  style="zoom:33%;" />]]></content>
      
      
      <categories>
          
          <category> 学线培训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oj </tag>
            
            <tag> 学线培训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutterweb鼠标移入时改变card的阴影</title>
      <link href="/2021/09/29/flutterweb%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%85%A5%E6%97%B6%E6%94%B9%E5%8F%98card%E7%9A%84%E9%98%B4%E5%BD%B1/"/>
      <url>/2021/09/29/flutterweb%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%85%A5%E6%97%B6%E6%94%B9%E5%8F%98card%E7%9A%84%E9%98%B4%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<p>最近做flutter web正好有这个需求，就随手找了找，最终看上了inkwell，（inkwell不只是水波纹啊喂）<br>基本思路就是调用inkwell的onhover方法对鼠标事件进行监听，状态管理用的getx，代码：</p><h3 id="view：-也算是封装了个组件）">view：(也算是封装了个组件）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:get/get.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;logic.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicCard</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> basicCardLogic = Get.put(BasicCardLogic());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> ShapeBorder? shape;</span><br><span class="line">  <span class="keyword">final</span> EdgeInsetsGeometry? margin;</span><br><span class="line">  <span class="keyword">final</span> Widget? child;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  BasicCard(&#123;</span><br><span class="line">    <span class="keyword">this</span>.shape,</span><br><span class="line">    <span class="keyword">this</span>.margin,</span><br><span class="line">    <span class="keyword">this</span>.child</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="function">Widget <span class="title">build</span><span class="params">(BuildContext context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GetBuilder&lt;BasicCardLogic&gt;(</span><br><span class="line">        builder: (logic)=&gt;</span><br><span class="line">         InkWell(</span><br><span class="line">            onTap: ()&#123;&#125;,</span><br><span class="line">            child: Card(</span><br><span class="line">              elevation: basicCardLogic.elevation.value,</span><br><span class="line">              shape: shape,</span><br><span class="line">              margin: margin,</span><br><span class="line">              child: child,</span><br><span class="line">            ),</span><br><span class="line">            onHover: (value)&#123;</span><br><span class="line">              value ? basicCardLogic.cursorMoveIn() : basicCardLogic.cursorMoveOut();</span><br><span class="line">            &#125;,</span><br><span class="line">        ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="logic-binding">logic&amp;binding</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:get/get.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicCardLogic</span> <span class="keyword">extends</span> <span class="title">GetxController</span> </span>&#123;</span><br><span class="line">  RxDouble elevation = <span class="number">1.0</span>.obs;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">cursorMoveIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">    elevation.value = <span class="number">5.0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">cursorMoveOut</span><span class="params">()</span></span>&#123;</span><br><span class="line">    elevation.value = <span class="number">1.0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicCardBinding</span> <span class="keyword">extends</span> <span class="title">Bindings</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">dependencies</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Get.lazyPut(() =&gt; BasicCardLogic());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="踩坑：">踩坑：</h3><p>inkwell如果没写onTap方法的那个匿名函数会导致onHover无效。</p><h3 id="9-28更新">9.28更新:</h3><p>干掉了inkwell的自带阴影，另外提供了另一种实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="function">Widget <span class="title">build</span><span class="params">(BuildContext context)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> GetBuilder&lt;BasicCardLogic&gt;(</span><br><span class="line">    builder: (logic) =&gt;InkWell(</span><br><span class="line">      focusColor: MyTheme.transparent,</span><br><span class="line">      hoverColor: MyTheme.transparent,</span><br><span class="line">      highlightColor: MyTheme.transparent,</span><br><span class="line">      splashColor: MyTheme.transparent,</span><br><span class="line">      onTap: ()&#123;&#125;,</span><br><span class="line">      child: Container(</span><br><span class="line">          child: Card(</span><br><span class="line">            shape: <span class="function"><span class="keyword">const</span> <span class="title">RoundedRectangleBorder</span><span class="params">(borderRadius: BorderRadius.all(Radius.circular(<span class="number">8.0</span>)</span>)), <span class="comment">//设置圆角</span></span></span><br><span class="line"><span class="function">            elevation: basicCardLogic.elevation.value,</span></span><br><span class="line"><span class="function">            margin: margin,</span></span><br><span class="line"><span class="function">            child: child,</span></span><br><span class="line"><span class="function">          ),</span></span><br><span class="line"><span class="function">          <span class="comment">// decoration: BoxDecoration(</span></span></span><br><span class="line"><span class="function">          <span class="comment">//   borderRadius: BorderRadius.all(Radius.circular(8)),</span></span></span><br><span class="line"><span class="function">          <span class="comment">//   boxShadow: [</span></span></span><br><span class="line"><span class="function">          <span class="comment">//     BoxShadow(</span></span></span><br><span class="line"><span class="function">          <span class="comment">//       color: basicCardLogic.cursorIn.value ? Colors.black45 : Colors.black12,  //底色,阴影颜色</span></span></span><br><span class="line"><span class="function">          <span class="comment">//       offset: Offset(4, 4), //阴影位置,从什么位置开始</span></span></span><br><span class="line"><span class="function">          <span class="comment">//       blurRadius: 16,  // 阴影模糊层度</span></span></span><br><span class="line"><span class="function">          <span class="comment">//       spreadRadius: 0,  //阴影模糊大小</span></span></span><br><span class="line"><span class="function">          <span class="comment">//     )],</span></span></span><br><span class="line"><span class="function">          <span class="comment">// )</span></span></span><br><span class="line"><span class="function">      ),</span></span><br><span class="line"><span class="function">      onHover: <span class="params">(value)</span></span>&#123;</span><br><span class="line">        value ? basicCardLogic.cursorMoveIn() : basicCardLogic.cursorMoveOut();</span><br><span class="line">      &#125;,</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
