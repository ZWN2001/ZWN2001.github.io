<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学线移动的两年：安卓从小白到进阶</title>
      <link href="/2022/05/16/%E5%AD%A6%E7%BA%BF%E7%A7%BB%E5%8A%A8%E7%9A%84%E4%B8%A4%E5%B9%B4-%E5%AE%89%E5%8D%93%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%88%B0%E8%BF%9B%E9%98%B6/"/>
      <url>/2022/05/16/%E5%AD%A6%E7%BA%BF%E7%A7%BB%E5%8A%A8%E7%9A%84%E4%B8%A4%E5%B9%B4-%E5%AE%89%E5%8D%93%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%88%B0%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1>学线移动的两年：安卓从小白到进阶</h1><h2 id="前言的前言">前言的前言</h2><p>从2020入学时的小白，到如今即将卸任学生在线移动开发部总监，不知不觉之间安卓已经陪伴了我接近两年的时光。两年以来有过学习的汗水、前进方向的迷茫，也有过将想法变成现实的喜悦，我很庆幸过去的两年时光之中自己能够按照自己的想法去生活，既不被焦虑裹挟而卷，也没有因佛系而摆烂。</p><p>从去年十月以来，因为学线的纳新培训，我写了很多关于安卓开发的博客，当然这其中也参考了网上很多大佬的教程，但一直没有太逻辑性的总结，所以如果你一点点翻看我的博客会感觉特别凌乱，在此我对过往两年中的路程进行梳理，写下我的学习路程与收获。</p><h2 id="前言">前言</h2><p>如何快速上手一门技术？我曾与很多大佬讨论这个问题，得到的答案也五花八门，我曾尝试过很多道路，也失败过很多次（<s>绝对不是因为喜欢考试前一天晚上才开始预习</s>），或许每个人都有每个人的方法，我只能说我的方法可能更适合我。</p><p>回归正题，如何快速上手一门技术？至少现在看来，我勉强算是找到了属于自己的一种方法。其实我们最大的痛点是什么？是我在啥也不会的时候翻完一遍书，以为自己都学会了，但是打开IDE却不知道该如何下手。我们该如何改变这一局面？方法五花八门，真的，每个人都有自己的心得。对于我而言，我更倾向于在学完最基本的知识之后去<code>github</code>上找几个小项目或者比较完善的<code>demo</code>，自己跑一跑，看看能不能理解他们的源码，这期间肯定会有看不懂的地方，也正是我进阶的好时机。</p><p>当然，这也会带来一些问题。并不是所有的<code>demo</code>都是好的样例，也不可能是完善的<code>demo</code>，这就会导致我自己的技术栈不可避免地受这些问题影响而留下暗伤，我深知这一点。</p><h2 id="安卓">安卓</h2><h3 id="入门之路">入门之路</h3><p>对于安卓原生的入门，我认为至少需要掌握这几部分：</p><ol><li><p>首先，最基础的，我们需要学会最基础的一些<strong>布局</strong>，这与web开发还是有很大区别，安卓会对布局有更多的支持，比如线性布局，相对布局，约束布局等等，并且至少要对线性布局有灵活的使用。一般来说，几乎大部分的界面都可以选用线性布局绘制。此外是安卓的<strong>常用组件</strong>，从按钮、到输入框、选择框、图片与视频、到表单、到高性能表单甚至瀑布流等等，有很多组件是我们常用的，我们可以选择记住，不过更多的可能是现用现查。</p><ul><li><p>如果可以，我还是强烈建议了解一下安卓<code>Activity</code>的<strong>生命周期</strong>，<a href="https://developer.android.com/guide/components/activities/activity-lifecycle?hl=zh-cn">链接</a>。</p></li><li><p>这几部分在网上包括第一行代码中广有提及，可以自行搜索参考</p></li><li><p>当然，如果可以，我还是推荐了解一些界面的设计原则，这会让我们在设计界面时有更好更快的思路与更佳的用户体验（<s>当然也会让甲方高兴</s>）<a href="https://zwn2001.github.io/2021/10/07/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8EMaterialDesign%E5%9F%BA%E7%A1%80%E5%8E%9F%E5%88%99/">博客链接</a></p></li><li><p>经过这一部分，我们就可以做出最基本的交互界面。</p></li></ul></li><li><p>其次，掌握移动端的<strong>数据长期存储</strong>方式（数据库）。</p><ul><li>最简单的，我们可以选择<code>SharedPreference</code>，这是一种基于文件系统的键值对存储方式，优点就是简单易用，缺点就是进程间不安全，而且没有任何加密可言。</li></ul></li></ol><ul><li>除此之外我们可以选择<code>LitePal</code>，这是由郭霖大佬开发的数据库，是最简单的封装过的数据库，网上教程同样特别多（甚至你可以直接去翻郭霖写的文档），<a href="https://github.com/guolindev/LitePal">地址</a>。<ul><li>再者，我们可以选用<code>Sqlite</code>，这是目前来说应用最为广泛的数据库，轻量化、高可用性，也是我最推荐的数据库选择。</li><li>最后，谷歌官方给出了最新的数据持久保存方案：<code>Room</code>，其在<code> SQLite</code> 的基础上提供了一个抽象层，让用户能够在充分利用 <code>SQLite</code> 的强大功能的同时，获享更强健的数据库访问机制。作为谷歌官方强烈推荐的存储方案，<code>Room</code>有更好的性能与更简化的数据库方案，<a href="https://developer.android.google.cn/training/data-storage/room?hl=zh-cn#kts">链接</a>。</li><li>这四种方案，由易到难，但还是更推荐 <code>SQLite</code> 。</li><li>经过这一部分，我们的应用至少有了本地的持久化存储，可以进行一些最基本的单机服务。</li></ul></li></ul><ol start="3"><li>最后，了解一下<strong>网络</strong>。我们在移动端通常使用<code>okhttp</code>执行网络请求（当然也可以用<code>HttpURLConnection</code>），当然在此之前需要保证我们对网络有足够的认识，同时对<code>JSON</code>、类等概念有足够的了解。这一部分其实很简单，我在学线纳新培训时讲过，<a href="https://zwn2001.github.io/2021/10/11/%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%9F%B9%E8%AE%AD%EF%BC%9A%E7%BD%91%E7%BB%9C%E9%83%A8%E5%88%86/">博客链接</a>。<ul><li>经过这一部分，我们的APP就已经算是符合了主流APP最基本的标准。</li></ul></li><li><strong>传感器</strong>。这个有大量案例与现成API，调用就好，并无太大难度。</li></ol><h4 id="非安卓方面的知识">非安卓方面的知识</h4><p>最基本的，我们在入门时至少要尽量保证代码有更高的可维护性、可阅读行，尽量保证高内聚低耦合，尽量保证更清晰的逻辑结构，那么如何去保证这几点呢？我认为首先是代码的规范性问题，一份规范的代码是程序员最基本的素养，也是可维护性的必要保证。其次是好的架构，从<code>MVC</code>到<code>MVP</code>到<code>MVVM</code>，更好的架构往往意味着更高的可维护性，但架构还是事在人为，考验的更多的是我们的开发经验。我对这两部分也有过讲解，<a href="https://zwn2001.github.io/2021/11/17/%E5%AD%A6%E7%BA%BF%E7%A7%BB%E5%8A%A8%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BE%8B%E4%BC%9A/">博客链接</a>。当然，如果可以，我们也要尽量利用设计模式的一些基本原则去设计我们的代码，不过还是那句话，活学活用，<a href="https://zwn2001.github.io/2022/04/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/">博客连接</a>。</p><h4 id="写在最后">写在最后</h4><p>对于第一点，我个人认为并不难，难的是我们对界面的建立有足够清晰的思路。</p><p>对于第二点，我当初在这一部分踩过很多坑，但我觉得每一次踩坑都是我们成长、收获知识的机会，至少在我现在看来是如此。尤其对于没有任何编程经验的小白来讲，这一部分将是一道坎，会有各种各样的报错摆在我们面前使得我们束手无策，但我们必须学会解决问题，相对来说<code>Sqlite</code>的社区建设更加完善，几乎所有问题都可以找到答案，这也是我更推荐的理由之一。</p><p>对于第三点，对于没有任何编程经验的小白来讲，这一部分将是更深的一道坎。虽然从我们现在来看，网络的种种似乎都是理所当然，但一切都不是那么美好。其实对于网络的部分，首先是对<code>B/S</code>或者<code>C/S</code>等等模型的了解，其次，我们应该认识到，网络是<strong>不可靠</strong>的、<strong>不能保证及时响应</strong>的，基于这最基本的两点，我们会对网络有更深刻的认识。</p><h3 id="进阶">进阶</h3><ol><li><p><strong>网络</strong>进阶。网络是<strong>不可靠</strong>的、<strong>不能保证及时响应</strong>的，不可靠我们可以通过异常的捕获等等手段解决，但我们如何处理响应的延时？这时就需要我们建立<strong>同步/异步</strong>模型，同时也考验我们多线程的理解。</p><ul><li>主要困难还是在于，如何理解异步？说白了，在发现这时一个异步操作时，我们往往会继续执行其余的代码部分，等异步操作收到返回的结果时调用回调函数进行处理。<a href="https://zwn2001.github.io/2021/10/27/%E7%BD%91%E7%BB%9C%E7%9A%84%E5%BC%82%E6%AD%A5/">博客链接</a></li></ul></li><li><p><strong>组件进阶：自定义组件</strong>。有很多时候，很多现有组件并不能满足我们的需求，对于这个问题我们可以使用自定义组件，这在很大程度上提高了我们APP的灵活性。自定义组件最大的困难在于理解安卓对于自定义组件的处理方式以及调用方式，与界面相同，组件也会有自己的布局逻辑，也会有自己的逻辑控制(.java/.kt)，我们往往可以简单的记住整个流程，不过其实组件的自定义更深层次的理解会涉及到安卓更加底层的原理，后面会提到。</p></li><li><p><strong>绘制原理与动画</strong>。对于这两方面，个人认为其实并不难，而且也很少有刚需。（<s>少了自定义绘制与好看的动画又不是不能活</s>）当然，如果真的有兴趣的话可以去了解。</p><ul><li>对于绘制原理，可以帮助我们在没有好用的组件的时候自定义组件，这里的自定义并不是指通过现有组件的拼接，而是纯粹的自己画，然后加上事件的监听与处理就好。我曾有一段时间痴迷于绘制，到最后发现真正的用处并不多，但如果真的用到的时候，不会这些知识就很难受。<a href="https://zwn2001.github.io/tags/%E7%BB%98%E5%88%B6/">博客链接</a></li><li>对于动画，说实话，就是数学计算，最重要的是我们要明确在哪两个状态之间执行动画，这个动画是以什么样的规律去执行的。</li></ul></li><li><p><strong>从<code>Activity</code>到<code>Fragment</code></strong>。如果对于每个界面都维护一个<code>Activity</code>，那显然会带来不必要的性能损耗。相对于<code>Activity</code>，<code>Fragment</code>有更灵活的生命周期（多），可以作为可重用的部分，有更高的性能（更轻量），更好的屏幕适配性，更灵活的组建方式（你可以用<code>Fragment</code>构建<code>Fragment</code>）。<a href="https://developer.android.com/guide/fragments?hl=zh-cn">链接</a></p></li><li><p><strong>架构进阶</strong>。前面曾提到过MVC，但其缺点较多，并不适用于大型项目。谷歌更加推荐MVP与MVVM，后者会更优。对于架构，其实我们可以发现，我们很难改变<code>Model</code>与<code>View</code>，但这<strong>两者之间如何进行交互</strong>其实是区分不同架构方式的关键部分，或者说是不同架构着眼的关键之处，如果我们能对此有更深的了解与实践，就能获得更丰富的开发经验。当然，<strong>拘泥于某一架构是不必要的</strong>，我们所要做的是活学活用。<a href="https://zwn2001.github.io/2022/04/12/%E5%AD%A6%E7%BA%BF%EF%BC%9Aintroduction-of-MVP-and-MVVM/">博客链接</a></p></li><li><p><strong>基于<code>View</code>的体系</strong>。这一部分主要分为两方面，一部分是<code>View</code>的事件体系及其消息传递机制，另一方面是其绘制原理，这方面又会牵涉到自定义组件的一些知识。</p><ul><li>对于事件，我们有点击、长按、拖拽、双击等等事件，对于组件尤其是自定义组件，需要处理那些事件，事件由谁监听、处理，如果出现冲突（尤其是滑动冲突）怎么办，这其实都是我们要考虑的一些问题。</li><li>对于组件的绘制流程，我个人认为是安卓原理中最难以掌握的一部分，我们的布局是如何呈现在界面上的，这背后涉及到安卓的绘制与一些渲染机制，难度非常高。</li><li>当然，除了这些，我们也可以考虑<strong>桌面小组件</strong>，其开发是简单的、模式化的。</li><li>最少要有下面的结构认识。</li><li><img src="1.png" style="zoom:50%;" /></li></ul></li><li><p><strong>安卓四大组件</strong>：<code>activity、service、content provider、broadcast receiver</code>，第一个我们已经耳熟能详，但剩下的三个好像从没见过。其实对于我们开发来说也并不会经常用到。<code>service</code>用于在<strong>后台</strong>完成用户指定的操作。<code>Content Provider</code>使一个应用程序的指定数据集提供给其他应用程序。<code>broadcast receiver</code>。。。。。就是广播，字面意思理解。</p><ul><li>对于APP，对于服务可能会用到的相对更多，所以在我看来也相对更加重要。广播次之，<code>content Provider</code>最次。</li><li>我对服务与广播有过一些讲解，当初对于<code>WIFI-DIRECT</code>功能的所有实现中用到过，你可以参考我的项目去学，代码层次还是比较清晰的。<a href="https://zwn2001.github.io/2022/05/16/%E5%AD%A6%E7%BA%BF%E7%A7%BB%E5%8A%A8%E7%9A%84%E4%B8%A4%E5%B9%B4-%E5%AE%89%E5%8D%93%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%88%B0%E8%BF%9B%E9%98%B6/source-code-java.zip">代码</a>，<a href="https://zwn2001.github.io/2022/03/10/%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91%E5%BC%80%E5%8F%91-WIFI-DIRECT/">文档</a>，<a href="https://zwn2001.github.io/2022/03/11/%E5%AE%89%E5%8D%93%E5%8E%9F%E7%94%9F-%E5%B9%BF%E6%92%AD/">我对广播机制的讲解</a>，<a href="https://zwn2001.github.io/2022/03/11/%E5%AE%89%E5%8D%93%E5%8E%9F%E7%94%9F-%E6%9C%8D%E5%8A%A1/">我对服务的讲解</a></li><li>在我个人看来，<strong>服务应该是安卓进阶中不可或缺的一环</strong>。</li></ul></li><li><p><strong>java高级</strong>。这部分包括但不限于：JVM、GC与内存调度（后者偏向安卓）、高并发、高性能IO、动态代理等等。这将会成为安卓调优与高性能的必备。</p></li><li><p><strong>SDK、NDK开发</strong>。相对来说，后者可能热度更高，因为近几年各类音视频及游戏软件大火，对于NDK开发的需求也水涨船高，而且相对于OpenCV for Android的臃肿，NDK开发就成了不二之选。<a href="https://blog.csdn.net/huahuadashen/article/details/21520995">网上的NDK介绍</a>。</p></li><li><p><strong>动态编译</strong>。这位更是重量级，<a href="https://blog.csdn.net/yulong0809/article/details/77752098">大佬的博客</a>。</p></li><li><p><strong>平台架构</strong>。这个应该是安卓中最难的一环了，但也是走向大佬的必经之路（反正我不是），我对此知之甚少，而且其实网上的教程也大多雷同，或许未来会继续探索吧。</p><img src="4.png" style="zoom:40%;" /></li></ol><h4 id="进阶推荐">进阶推荐</h4><ul><li><p>《Android开发艺术探索》</p></li><li><p>《Android进阶指北》</p></li><li><p>《安卓进阶之光》</p></li></ul><h4 id="写在最后-2">写在最后</h4><p>安卓进阶其实永无止境，我所能写出来的其实也只是其中一部分，谷歌近几年大力强推<code>kotlin</code>、<code>Jetpack Compose</code>等等，给这一体系带来了更多的生机（<s>与负担</s>），如果真的有可能，我们可以试图了解，<a href="https://developer.android.google.cn/jetpack/compose/documentation?hl=zh-cn">链接</a>。此外，我并不觉得我对于安卓有多么高的水平，尤其是进阶的部分，愧对精通二字，但我一直在路上。</p><h2 id="Flutter"><code>Flutter</code></h2><p>两年时间中有很大一部分我都在做<code>Flutter</code>，它也帮助我解决了很多课设，也会成为我技术栈的一部分。</p><p>这两年 Flutter 技术热度持续提高，整个 Flutter 生态和社区也发生了翻天覆地的变化，主要体现在：</p><ul><li>Flutter 稳定版发布到了3.0，现在已经支持移动端、Web端和PC端，通过Flutter 开发的应用程序能够轻松的在各个平台迁移并获得很好的性能。</li><li>Flutter 在 Github Star 数上排名已经进入了前20，在跨端框架中已经成为稳稳的第一。</li><li>全球很多公司都已经在商业项目中使用 Flutter，比如Google、微软、阿里、字节、百度、京东等，已经有很多成功案例。</li><li>Flutter 第三方库数量持续保持高速增长，有越来越多的人为Flutter生态贡献代码。Flutter 相关的教程、书籍数量也在高速增长。</li></ul><p>综上，可以看见Flutter 技术从第一个测试版发布到现在短短 3 年多时间获得了巨大的成功。而之所以能获得成功的主要原因是：Flutter 既能保持很高的开发效率的又能获得丝滑的性能。根据近几年实践统计，Flutter 相比原生开发，人效能提高近一倍，而性能可以接近原生。</p><h3 id="入门之路-2">入门之路</h3><ol><li><p><strong>组件与布局</strong>。与安卓相似，我们首先需要熟悉组件，但我们很少着重提及布局。或者说，这里使用“组件”二字是不太准确的，<code>Flutter</code>中一切皆<code>Widget</code>。其布局逻辑也会由<code>Widget</code>逻辑体现，我们可以使用<code>Row+Column</code>实现线性布局，也可以使用<code>Stack</code>实现层叠布局，或者<code>Position</code>实现相对布局，等等。总而言之，这种统一给了布局上更高的灵活性，同时也更加考验开发者的布局逻辑思维与代码功底。（否则你写的代码真的就是一坨shit）</p></li><li><p><strong>路由管理</strong>。Flutter对于路由有更着重的强调，一方面是路由方式多种多样，另一方面是路由逻辑的正确性。有时候我们在进入下一个界面时需要将前面的界面销毁，甚至是前面的所有界面，这保证了我们APP界面跳转不会出现逻辑问题（原生也是如此）。另一方面，我们要跳向何方，携带什么参数，等等，也还是一个问题。</p><ul><li>对于以上两方面，<strong>我们更多的是与安卓进行类比，而不是从头再来</strong>。我们应该认识到Flutter与安卓原生的区别，尤其是在语法上，但这并不妨碍我们对其原理与逻辑进行抽象的理解，先理解，后应用，边学边用往往可以事半功倍。</li><li>以上两方面，我的<a href="https://zwn2001.github.io/2022/01/07/%E5%AD%A6%E7%BA%BF%E5%9F%B9%E8%AE%AD-winter-flutter-1/">博客讲解链接</a></li></ul></li><li><p><strong>网络、同步与异步</strong>。这一部分跟原生相比不能说是大致相同，只能说是一模一样。不过细微的区别在于，Flutter引入了专门的异步函数与更加详细的异步机制，但思想是不变的。</p><ul><li><a href="https://zwn2001.github.io/2022/01/26/%E5%AD%A6%E7%BA%BF%E5%9F%B9%E8%AE%AD-winter-flutter-%E7%BD%91%E7%BB%9C%E3%80%81%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5/">我的博客讲解</a></li></ul></li></ol><h4 id="写在最后-3">写在最后</h4><p>这部分实在少的可怜，因为Flutter本身就是一个可以快速上手的框架，对比而言你会发现Flutter并没有数据持久层，这当然是一个问题，但Flutter的优势在于你可以方便地使用各种第三方库并进行管理（如<code>sqflite</code>），相对于原生会更便捷。</p><p>Flutter有太多强大的第三方库，很多其实都是对多端库的封装。比如我使用过<code>qrcode</code>，其安卓端就是基于<code>zxing</code>。当然还有很多非常强大的库是原创的，比如状态管理的<code>GetX</code>、<code>Provider</code>，图片加载<code>flutter_svg</code>等等。</p><p>当然如果你想找到更全的Flutter样例，我会推荐这个<a href="https://github.com/toly1994328/FlutterUnit">仓库</a>，会节省一些不必要的入门时间</p><h3 id="进阶-2">进阶</h3><ol><li><p><strong><code>JNI</code>、<code>ffi</code>与<code>PlatformChannel</code></strong>。有些功能可能是安卓才能实现的，我们就需要在Flutter中调用安卓原生的一些方法，最简单的，我们可以直接调用<code>PlatformChannel</code>，但如果对平台有特定的需求，比如，我想与安卓通信，那么<code>JNI</code>会是一个好的选择，如果是与windows交互，<code>ffi</code>会有更高的效率，至少避免了数据传递时的复制。但其实，<code>PlatformChannel</code>就已经很方便（不太追求性能的话）。<a href="https://zwn2001.github.io/2022/01/17/%E5%AD%A6%E7%BA%BF%E5%9F%B9%E8%AE%AD%EF%BC%9Awinter-flutter%EF%BC%9AMethodChannel%E4%B8%8E%E6%A1%8C%E9%9D%A2%E7%BB%84%E4%BB%B6/">博客讲解</a></p></li><li><p><strong>高级组件与自定义组件及其事件</strong>。高级组件包括但不限于滚动类如<code>PageView</code>、各种<code>ScrollView</code>等，其最主要的事件关键点就在于滑动，开发过程中经常要处理其滑动冲突问题，除此之外还有各种功能类组件等。自定义组件也有两种思路，一种是对现有组件进行建造、封装，另一种是自绘，<a href="https://book.flutterchina.club/chapter10/intro.html">自定义组件</a>。Flutter中也独立了事件处理机制，同时也会有事件分发问题。<a href="https://book.flutterchina.club/chapter8/hittest.html#_8-3-1-flutter-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B">事件处理</a></p></li><li><p><strong>动画</strong>。同样地，动画作为APP非刚需需求，<code>Flutter</code>动画有专门的类进行封装，对于动画控制有更清晰的逻辑，只要能控制好<code>Controller</code>并确定动画过渡逻辑就能解决大部分问题（个人观点）。</p></li><li><p><strong>状态管理与事件循环机制</strong>。安卓当然没有太强调组件或者布局的状态，但也会有类似于状态管理的界面更新机制，无论是<code>runOnUIThread</code>还是<code>Handler</code>，但个人认为这与Flutter的定位还是有一定区别，安卓来讲会更侧重与<strong>事件</strong>的处理，我们甚至可以把一些非UI改动交给它们去执行，对于Flutter，则会更加强调组件状态，这与其对<code>Widget</code>的定位不无关系，但究其本质也不过是<code>EventLoop</code>（尤其是异步组件更新），只不过更加突出了其组件的地位。</p><ul><li>简单的状态管理你可以使用<code>GetX</code>来协助，其最大优点是<strong>部分更新组件树以提高重绘渲染性能</strong>，但如果我们能力足够，完全可以自己实现这样的功能。（但是既然有轮子为什么还要重复造呢）</li></ul></li></ol><img src="2.png" style="zoom:50%;" /><ol start="5"><li><p><strong>高级关键字</strong>。这里主要指<code>key</code>与<code>context</code>，在原生中也有类似的<code>context</code>，但一般也不太会过分强调（对于入门级以及中级开发），但对于Flutter，这两个关键字是高频出现但却好像深藏功与名，只要不乱改，程序就不会崩的那种，但如果我们涉及到Flutter组件绘制原理等方面又难免会涉及。总的来说，这两个关键字并不是特别容易理解，尤其是对于没有多少经验的开发者来说可能更是云里雾里，但这两个关键字在<strong>特定的小场景</strong>下会有最为便捷高效的功能，如动态组件位置变更等等。</p><ul><li>我对这两个关键字也有过讲解，但在开发过程中，更多的还是作为后手留作备用，很少会去主动使用。</li><li><a href="https://zwn2001.github.io/2022/04/20/flutter-key/">我的博客：flutter-key</a>，<a href="https://zwn2001.github.io/2022/04/20/flutter-context/">我的博客：flutter-context</a></li></ul></li><li><p><strong>库开发</strong>。我们常常使用很多好用的第三方库，有时候也会遇到一些问题并没有太理想的第三方库可用，与其坐以待毙为什么不自己动手写一个呢？</p></li><li><p><strong><code>Flutter Engine</code>与Flutter基本原理</strong>。Dart 运行时和编译器支持 Flutter 的两个关键特性的组合：</p><ul><li><strong>基于 JIT 的快速开发周期</strong>：Flutter 在开发阶段采用，采用 JIT 模式（即时编译），这样就避免了每次改动都要进行编译，极大的节省了开发时间；</li><li><strong>基于 AOT 的发布包</strong>: Flutter 在发布时可以通过 AOT 生成高效的机器码以保证应用性能。而 JavaScript 则不具有这个能力。</li></ul></li></ol><ul><li><p>AOT 程序的典型代表是用 C/C++ 开发的应用，它们必须在执行前编译成机器码；而JIT的代表则非常多，如JavaScript、python等，事实上，所有脚本语言都支持 JIT 模式。但需要注意的是 JIT 和 AOT 指的是程序运行方式，和编程语言并非强关联的，有些语言既可以以 JIT 方式运行也可以以 AOT 方式运行，如Python，它可以在第一次执行时编译成中间字节码，然后在之后执行时再将字节码实施转为机器码执行。也许有人会说，中间字节码并非机器码，在程序执行时仍然需要动态将字节码转为机器码，这不应该是 JIT 吗 ? 是这样，但通常我们区分是否为AOT 的标准就是看代码在执行之前<strong>是否需要编译</strong>，只要需要编译，无论其编译产物是字节码还是机器码，都属于AOT。</p></li><li><p>此外，如果你对UI渲染感兴趣，可以尝试了解Flutter渲染机制与渲染管线，我相信在此可以收获很多高性能渲染的心得。</p></li><li><p>最后，也是最为重量级的，Flutter之所以高效，与其架构模式不无关系，可能所有技术栈的最终奥义都是理解其架构与源码吧。</p></li><li><img src="3.png" style="zoom:50%;" /></li></ul><h4 id="写在最后-4">写在最后</h4><p>Flutter相对于安卓来说要更加简单，整个过程中比较大的困难可能就是适应Dart的语法习惯与界面构建以及状态管理，其余的知识点其实都可以跟安卓类比去学，而且总的来说，Flutter知识点相对更少，入门也就更快。</p><p>但回归本质，如果我们想学好Flutter，安卓的基础（或者说原生移动开发基础）是必不可少的。同时，Flutter也并非万能，虽然能够几乎覆盖全平台，但并不意味着平台原生就会因此不必要。</p><p>当然，Flutter还有好多高级特性是我很少触及的，未来或许会有更加深入的认识。</p><h2 id="结语">结语</h2><p>想不到能敲这么多字，林林总总大概敲了五个多小时。两年前的懵懂如今历历在目，两年后的我也算不上什么技术精通，可能说两年前96个志愿中来到了软院是个意外，但我还是尽我所能做了自己喜欢做的事，这其中有得有失，但我不希望自己患得患失。</p><img src="5.png" style="zoom:20%;" />]]></content>
      
      
      
        <tags>
            
            <tag> 移动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手控鼠标</title>
      <link href="/2022/05/15/%E6%89%8B%E6%8E%A7%E9%BC%A0%E6%A0%87/"/>
      <url>/2022/05/15/%E6%89%8B%E6%8E%A7%E9%BC%A0%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/ZWN2001/handControlMouse">https://github.com/ZWN2001/handControlMouse</a></p><h1>手控鼠标</h1><p>参考了https://github.com/HGL706789355/shoushi_OpenCv</p><p>没有做多进程。</p><p>目前做了单击双击右键和窗口的滑动</p><h2 id="窗口滑动">窗口滑动</h2><p>竖中指、无名指、小拇指是向上滑动窗口，竖无名指向下滑动，同时竖起则不会滑动</p><h2 id="鼠标点击">鼠标点击</h2><p><code>baseDistance</code>：手掌根部到食指根部的距离</p><p>目前测算<code>distance/baseDistance</code>：</p><table><thead><tr><th></th><th>放松展开</th><th>极限拉伸</th><th>微蜷</th></tr></thead><tbody><tr><td>食指-大拇指</td><td>1.0</td><td>1.6</td><td>0.8</td></tr><tr><td>中指-大拇指</td><td>1.45</td><td>2.0</td><td>1.3</td></tr><tr><td>小拇指-大拇指</td><td>1.7</td><td>2.1</td><td>1.5</td></tr></tbody></table><p>大于阈值时执行操作。设定阈值：</p><table><thead><tr><th></th><th>阈值</th></tr></thead><tbody><tr><td>单击：食指-大拇指</td><td>1.15</td></tr><tr><td>双击：中指-大拇指</td><td>1.6</td></tr><tr><td>右键：小拇指-大拇指</td><td>1.8</td></tr></tbody></table><p>目前通过简单的参数实现了三个操作的互斥，避免出现单击双击右键的情况。</p><h2 id="性能瓶颈">性能瓶颈</h2><p>60-64行每次执行耗时约为0.1秒，检测函数的其余部分耗时约0.2-0.3秒，帧率在6-8帧浮动</p><p>去掉检测效果显示的窗口的话性能可能会稍微好一点</p><h3 id="修改">修改</h3><p>将耗时函数替换为了   autopy.mouse.move(currentMouseX/2, currentMouseY/2)</p><p>但对两个参数存疑，不除以2的话会越界</p><p>目前帧率20帧左右。</p><h2 id="一点问题">一点问题</h2><ol><li><p>安装<code>autopy</code>前请保证装了rust环境</p></li><li><p>安装<code>autopy</code>的教程参见 <a href="https://github.com/autopilot-rs/autopy">https://github.com/autopilot-rs/autopy</a></p></li><li><p><code>autopy</code>只适配Python3.8</p></li><li><p>这个库怎么一堆破事（无力吐槽）</p></li><li><p>没有做鼠标拖拽</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> cv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用快捷键禁用键盘</title>
      <link href="/2022/05/11/%E4%BD%BF%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E7%A6%81%E7%94%A8%E9%94%AE%E7%9B%98/"/>
      <url>/2022/05/11/%E4%BD%BF%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E7%A6%81%E7%94%A8%E9%94%AE%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h1>使用快捷键禁用键盘</h1><h2 id="前言：AutoHotkey">前言：AutoHotkey</h2><p><strong>tips：这一步并不是必要的，先看完前言再决定是否下载</strong></p><hr><p>中文项目指导下载项目：<a href="https://sourceforge.net/projects/ahkcn/files/latest/download">地址</a></p><p>项目<a href="https://www.autohotkey.com/boards/viewtopic.php?f=29&amp;t=1099">学习指南</a></p><p><a href="https://www.autohotkey.com/download/ahk.zip">Download AutoHotkey .zip</a></p><p>下载后你会拿到这样的文件夹</p><img src="1.png" style="zoom:50%;" /><p>如果你下载了中文版文档，不要直接做简单替换，并不适用（有时候）</p><p>这样的话如果你有脚本可以使用AutoHotkey去执行。本次的项目也提供了可以由AutoHotkey执行的脚本。</p><h3 id="安装">安装</h3><p>将文件夹下的<code>Installer.ank</code>用上面的应用程序打开（取决于你的电脑的系统是32位还是64位）</p><p>完成安装即可。</p><h2 id="正文">正文</h2><p>download <a href="https://www.howtogeek.com/wp-content/uploads/2017/01/Keyboard-Locker.zip">Keyboard Locker</a></p><p>下载后，你会得到这样的文件夹</p><img src="2.png" style="zoom:50%;" /><p>如果你有下载AutoHotkey，可以执行ahk文件。ahk文件的好处就是，你可以自己进行魔改。</p><p>如果没有，直接运行exe文件也可以，Ctrl+Alt+L是锁定键盘，不过仍然有一些不容易误触的组合键是可用的，如Ctrl+Alt+Delete 与 Win+L。如果你想解锁，直接在键盘上敲<code>unlock</code>就可以了</p><h3 id="显示通知">显示通知</h3><p>默认情况下，键盘锁定器在锁定或解锁键盘时不显示通知。如果您想看到他们，右键单击键盘Keyboard Locker图标在通知区域，并选择“显示托盘通知。”</p><p>如果你不想看到通知，你也可以把鼠标悬停在Keyboard Locker图标上，这样你就会收到一个提醒，提醒你锁定和解锁键盘的快捷键。</p><h3 id="设置自启动">设置自启动</h3><p><strong>RELATED:</strong> <a href="https://www.howtogeek.com/208224/how-to-add-programs-files-and-folders-to-system-startup-in-windows-8.1/"><strong>How to Add Programs, Files, and Folders to System Startup in Windows</strong></a></p><p>在 Windows 启动文件夹（ <code>%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup</code>）中创建“ KeyboardLocker.exe”或“ KeyboardLocker.ahk”文件的快捷方式，无论您使用哪个文件。你可以用鼠标右键拖动文件到启动文件夹，然后选择“在这里创建快捷方式”，或者在启动文件夹中的任何地方右键单击，然后从上下文菜单中选择“新建 &gt; 快捷方式”。一旦快捷键就位，当你启动 Windows 时，Keyboard Locker将自动运行。</p><h3 id="原理">原理</h3><p>钩子(Hook)，是Windows消息处理机制的一个平台，应用程序可以在上面设置子程以监视指定窗口的某种消息，而且所监视的窗口可以是其他进程所创建的。当消息到达后，在目标窗口处理函数之前处理它。钩子机制允许应用程序截获处理window消息或特定事件。</p><p>钩子实际上是一个处理消息的程序段，通过系统调用，把它挂入系统。每当特定的消息发出，在没有到达目的窗口前，钩子程序就先捕获该消息，亦即钩子函数先得到控制权。这时钩子函数即可以加工处理（改变）该消息，也可以不作处理而继续传递该消息，还可以强制结束消息的传递。</p><p>我们通常使用通常使用SetWindowsHookEx来安装消息钩子，函数原型如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SetWindowsHookEx</span></span><br><span class="line"><span class="function">HHOOK <span class="title">SetWindowsHookExA</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">int</span>       idHook,<span class="comment">//设置钩子的类型.意思就是我要设置的钩子是什么钩子. 可以是监视窗口过程.可以是监视消息队列.</span></span></span></span><br><span class="line"><span class="params"><span class="function">  HOOKPROC  lpfn, <span class="comment">//根据钩子类型.设置不同的回调函数.</span></span></span></span><br><span class="line"><span class="params"><span class="function">  HINSTANCE hmod, <span class="comment">//钩子设置的Dll实例句柄,就是DLL的句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">  DWORD     dwThreadId <span class="comment">//设置钩子的线程ID. 如果为0 则设置为全局钩子.</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>; <span class="comment">// HHOOK 返回值. 是一个钩子过程句柄.</span></span><br></pre></td></tr></table></figure><p>官网：<a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowshookexa">https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowshookexa</a></p><h2 id="一个问题：会禁用所有键盘">一个问题：会禁用所有键盘</h2><p>你会发现，上面的exe会把所有键盘都禁用掉，包括外置键盘。</p><p>一个方案：<a href="https://github.com/evilC/AutoHotInterception">https://github.com/evilC/AutoHotInterception</a></p><p>但是非常麻烦。</p><p>更多人会这样推荐：但是需要重启</p><p><strong>1、<strong>右键点击左下角开始图标（Win+X），选择</strong>Windows Powershell（管理员）</strong>。</p><p><strong>2、<strong>在打开的窗口中，输入</strong>cmd</strong>。</p><p><strong>3、<strong>然后输入</strong>sc config i8042prt start= disabled</strong>，提示成功之后就可以重启电脑。</p><p>管理员输入<strong>sc config i8042prt start= auto</strong> 然后重启，这样我们又可以愉快的使用内置键盘</p><h1>参考</h1><blockquote><p><a href="https://www.howtogeek.com/howto/11570/disable-the-keyboard-with-a-keyboard-shortcut-in-windows/">https://www.howtogeek.com/howto/11570/disable-the-keyboard-with-a-keyboard-shortcut-in-windows/</a></p><p><a href="https://www.howtogeek.com/56481/the-beginners-guide-to-using-an-autohotkey-script/">https://www.howtogeek.com/56481/the-beginners-guide-to-using-an-autohotkey-script/</a></p><p><a href="https://github.com/Lexikos/AutoHotkey_L/">https://github.com/Lexikos/AutoHotkey_L/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 实用知识(杂谈) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载与汇总 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学线培训：TCP-UDP</title>
      <link href="/2022/05/08/%E5%AD%A6%E7%BA%BF%E5%9F%B9%E8%AE%AD-TCP-UDP/"/>
      <url>/2022/05/08/%E5%AD%A6%E7%BA%BF%E5%9F%B9%E8%AE%AD-TCP-UDP/</url>
      
        <content type="html"><![CDATA[<h1><code>TCP</code>&amp;<code>UDP</code>初步</h1><h2 id="基本概念">基本概念</h2><p><code>TCP</code>：传输控制协议（<code>Transmission Control Protocol</code>）</p><p><code>UDP</code>：用户数据报协议（<code>User Datagram Protocol</code>）</p><p><strong><code>TCP</code>跟<code>UDP</code>的一些基本区别：</strong></p><blockquote><ol><li><code>TCP</code>面向连接，<code>UDP</code>不面向连接。</li><li><code>TCP</code>面向字节，不存在消息边界，所以可能存在粘包问题。<code>UDP</code>则面向报文。<ul><li><a href="https://draveness.me/whys-the-design-%60TCP%60-message-frame/">为什么会粘包</a></li></ul></li><li><code>TCP</code>会尽力保证数据的可靠交付，而<code>UDP</code>默认不做保证。</li><li><code>TCP</code>头部20字节，<code>UDP</code>头部8字节。</li></ol></blockquote><p><strong>编者注</strong>：如何理解1和3：</p><p><code>TCP</code>协议是一种可靠的通信协议，<strong>它要求传输的过程是可靠的，因此需要经过三次握手的环节，确立连接关系之后，才可以进行传输</strong>。除此之外，<code>TCP</code>还有超时重传机制，还有排序的机制，有发送的窗口，有窗口大小等等，保证接收方接收到的就是发送方发送过去的。</p><p><code>UDP</code>是一种不可靠的通信协议，它<strong>不需要建立连接</strong>，不需要对连接进行确认<code>ACK</code>的操作，不需要重传，不需要排序，它<strong>只管传输</strong>。</p><p>比如：</p><blockquote><p>“我给你讲一个关于<code>TCP</code>的笑话。”</p><p>“好的你给我讲一个关于<code>TCP</code>的笑话。”</p><p>“好的。”</p><p><strong>------确立连接关系，进行传输------</strong></p><p>“苟。这是第一个字。”</p><p>“第一个字收到，请发第二个字。”</p><p>“利。这是第二个字。”</p><p>“第二个字收到，请发第三个字。”</p><p>“国。这是第三个字。”</p><p><strong>------超时重传-------</strong></p><p>“国。这是第三个字。”</p><p>“第三个字收到，请发第四个字。”</p><p>“家……”</p><p>……</p><p>“我讲完了。”</p><p>“好的。我听完了。”</p><p>“好的。”</p><p><strong>------关闭连接------</strong></p><p>“我给你讲一个关于<code>UDP</code>的笑话。”</p><p>“咦我好像听见一个关笑P话的U……？咦这苟啊国家啊这什么什么之是啥玩意？我让应用层看看……应用层说应该是两句诗？”</p></blockquote><p><code>TCP</code> 最适合用于对时序不太关心的，且要求高可靠性的应用程序。</p><ul><li><a href="https://www.zhihu.com/search?q=%E4%B8%87%E7%BB%B4%E7%BD%91&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1883510114%7D">万维网</a>（<code>HTTP/HTTPS</code>）</li><li>安全外壳（<code>SSH</code>）</li><li><a href="https://www.zhihu.com/search?q=%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1883510114%7D">电子邮件</a>（<code>SMTP，IMAP / POP</code>）</li><li>文件传输协议（<code>FTP</code>）</li></ul><p><code>UDP</code> 最适合需要速度和效率的应用程序。</p><ul><li>串流影片</li><li>线上游戏</li><li>现场直播</li><li>域名系统（<code>DNS</code>）</li><li><a href="https://www.zhihu.com/search?q=%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1883510114%7D">互联网协议</a>语音（<code>VoIP</code>）</li><li>普通文件传输协议（<code>TFTP</code>）</li></ul><h3 id="一个问题：什么是协议">一个问题：什么是协议</h3><p>协议实际上就是一种约定。好比说，我们做一个石头剪刀布的游戏，我们约定好：石头&gt;剪刀、剪刀&gt;布、布&gt;石头，以此作为游戏规则。我们所有人都遵循这个约定，那么就不需要任何的多余的沟通便可以完成这个游戏。而这种方式形成的约定实际上就是一种协议了。</p><h2 id="模型">模型</h2><h3 id="TCP-IP模型"><code>TCP/IP</code>模型</h3><p><code>TCP/IP</code>其实也可以指代一个遵循<code>TCP/IP</code>的协议族，我们后面会说到，我们先来看这个模型。</p><p><code>TCP/IP</code>的四层模型：</p><ol><li>应用层，在这一层上的有<code>HTTP、DNS、FTP、SSH</code>等。</li><li>传输层，在这一层上的有<code>TCP</code>、<code>UDP</code>等。</li><li>网络层，在这一层上的有<code>IP</code>、<code>ARP</code>等。</li><li>网络接口层，在这一层上的有以太网、<code>PPP</code>等。</li></ol><p><img src="3.jpg" alt=""></p><p><strong>编者注</strong>:<code>TCP/IP</code>模型是由 <code>OSI</code> 模型演化而来，<code>TCP/IP</code> 模型将 <code>OSI</code> 模型由七层简化为五层（一开始为四层），应用层、表示层、会话层统一为应用层。</p><p><img src="8.jpg" alt=""></p><p>如果从客户端到来一个请求：</p><ol><li>服务器端接收到客户端的SYN报文，返回SYN+ACK报文，服务器端进入<strong>SYN_RCVD</strong>状态。</li><li>服务器端收到客户端返回的ACK应答后，连接建立，进入<strong>ESTABLISHED</strong>状态。</li><li>服务器端的数据传输完毕，给客户端发送FIN报文，进入<strong>FIN_WAIT_1</strong>状态。</li><li>服务器端接收到客户端返回的ACK应答后，进入<strong>FIN_WAIT_2</strong>状态。</li><li>服务器端接收到客户端的FIN报文，接着返回一个ACK应答，等待连接关闭，进入<strong>TIME_WAIT</strong>状态。</li><li>服务器端经过<strong>2MSL</strong>时间后进入<strong>CLOSED</strong>状态，此时连接关闭。</li></ol><p>至于客户端，在每个阶段也有各自的状态，下图表示了<code>TCP</code>状态迁移的过程：</p><p><img src="2.jpg" alt="别太较真，图一乐"></p><hr><p><code>TCP/IP</code> 协议族里重要的一点就是分层。把 <code>TCP/IP</code> 层次化是有好处的。比如，如果互联网只由一个协议统筹，某个地方需要改变设计时，就必须把所有部分整体替换掉。而分层之后只需把变动的层替换掉即可。把各层之间的接口部分规划好之后，每个层次内部的设计就能够自由改动了。</p><p>值得一提的是，层次化之后，设计也变得相对简单了。处于应用层上的应用可以只考虑分派给自己的任务，而不需要弄清对方在地球上哪个地方、对方的传输路线是怎样的、是否能确保传输送达等问题。</p><h4 id="数据链路层">数据链路层</h4><p>数据链路层是负责接收 <code>IP</code> 数据包并通过网络发送，或者从网络上接收物理帧，抽出 <code>IP</code> 数据包，交给网络层（<code>IP</code>层）。</p><p>常见的接口层协议有：</p><p>Ethernet 802.3、Token Ring 802.5、X.25、Frame relay、HDLC、PPP ATM等。</p><h4 id="网络层">网络层</h4><p>负责相邻计算机之间的通信。其功能包括三方面。</p><ul><li><p>处理来自传输层的分组发送请求，收到请求后，将分组装入 <code>IP</code> 数据报，填充报头，选择去往信宿机的路径，然后将数据报发往适当的网络接口。</p></li><li><p>处理输入数据报：首先检查其合法性，然后进行寻径–假如该数据报已到达信宿机，则去掉报头，将剩下部分交给适当的传输协议；假如该数据报尚未到达信宿，则转发该数据报。</p></li><li><p>处理路径、流控、拥塞等问题。</p></li></ul><p>网络层包括：<code>IP</code>(<code>Internet Protocol</code>) 协议、<code>ICMP</code>(<code>Internet Control Message Protocol</code>)控制报文协议、<code>ARP</code>(<code>Address Resolution Protocol</code>) 地址转换协议、<code>RARP</code>(<code>Reverse ARP</code>) 反向地址转换协议。</p><p><code>ARP</code> 是正向地址解析协议，通过已知的 <code>IP</code>，寻找对应主机的 <code>MAC</code> 地址。</p><p><code>RARP</code> 是反向地址解析协议，通过 <code>MAC</code> 地址确定 <code>IP</code> 地址。比如无盘工作站还有 <code>DHCP</code> 服务。</p><p><code>IP</code> 是网络层的核心，通过路由选择将下一条IP封装后交给接口层。<code>IP</code>数据报是无连接服务。</p><p><code>ICMP</code> 是网络层的补充，可以回送报文。用来检测网络是否通畅。</p><p><code>Ping</code> 命令就是发送 <code>ICMP</code> 的 <code>echo</code> 包，通过回送的 <code>echo relay</code> 进行网络测试。</p><h4 id="传输层">传输层</h4><p>提供应用程序间的通信。其功能包括：一、格式化信息流；二、提供可靠传输。</p><p>传输层协议主要是：传输控制协议 <code>TCP</code>(<code>Transmission Control Protocol</code>) 和用户数据报协议 <code>UDP</code>(<code>User Datagram protocol</code>)。</p><h4 id="应用层">应用层</h4><p>向用户提供一组常用的应用程序，比如电子邮件、文件传输访问、远程登录等。远程登录 TELNET 使用 TELNET 协议提供在网络其它主机上注册的接口。TELNET 会话提供了基于字符的虚拟终端。文件传输访问 FTP 使用 FTP 协议来提供网络内机器间的文件拷贝功能。</p><p>应用层协议主要包括如下几个：<code>FTP、TELNET、DNS、SMTP、NFS、HTTP</code>。</p><p><code>FTP</code>(<code>File Transfer Protocol</code>）是文件传输协议，一般上传下载用<code>FTP</code>服务，数据端口是 20H，控制端口是 21H。</p><p><code>Telnet</code> 服务是用户远程登录服务，使用 23H 端口，使用明码传送，保密性差、简单方便。</p><p><code>DNS</code>(<code>Domain Name Service</code>）是域名解析服务，提供域名到 IP 地址之间的转换，使用端口 53。</p><p><code>SMTP</code>(<code>Simple Mail Transfer Protocol</code>）是简单邮件传输协议，用来控制信件的发送、中转，使用端口 25。</p><p><code>NFS</code>()<code>Network File System</code>）是网络文件系统，用于网络中不同主机间的文件共享。</p><p><code>HTTP</code>(<code>Hypertext Transfer Protocol</code>）是超文本传输协议，用于实现互联网中的 WWW 服务，使用端口 80。</p><h3 id="TCP模型"><code>TCP</code>模型</h3><h4 id="TCP协议作用"><code>TCP</code>协议作用</h4><p><code>TCP</code>协议位于协议栈的传输层。当应用层向<code>TCP</code>层发送用于网间传输的、用8位字节表示的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E6%B5%81">数据流</a>，<code>TCP</code>则把数据流分割成适当长度的报文段，最大传输段大小（<a href="https://baike.baidu.com/item/MSS/3567770">MSS</a>）通常受该计算机连接的网络的数据链路层的最大传送单元（<a href="https://baike.baidu.com/item/MTU">MTU</a>）限制。之后<code>TCP</code>把数据包传给IP层，由它来通过网络将包传送给接收端实体的<code>TCP</code>层。</p><p><code>TCP</code>为了保证报文传输的可靠，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的字节发回一个相应的确认(ACK)；如果发送端实体在合理的往返时延(RTT)内未收到确认，那么对应的数据（假设丢失了）将会被重传。</p><ul><li>在数据正确性与合法性上，<code>TCP</code>用一个校验和函数来检验数据是否有错误，在发送和接收时都要计算校验和；同时可以使用md5认证对数据进行加密。</li><li>在保证可靠性上，采用超时重传和捎带确认机制。</li><li>在流量控制上，采用滑动窗口协议，协议中规定，对于窗口内未经确认的分组需要重传。</li></ul><p>在拥塞控制上，采用广受好评的<code>TCP</code>拥塞控制算法（也称AIMD算法）。 该算法主要包括三个主要部分：</p><ul><li><p>加性增、乘性减；</p></li><li><p>慢启动；</p></li><li><p>对超时事件做出反应。</p></li></ul><h4 id="TCP连接的建立"><code>TCP</code>连接的建立</h4><blockquote><p>一些常见的标志位：</p><p><code>URG</code>：指示报文中有紧急数据，应尽快传送（相当于高优先级的数据）。</p><p><code>ACK</code>：确认序号（AN）有效。</p><p><code>PSH</code>：接到后尽快交付给接收的应用进程。</p><p><code>RST</code>：<code>TCP</code>连接中出现严重差错（如主机崩溃），必须释放连接，在重新建立连接。</p><p><code>SYN</code>：处于<code>TCP</code>连接建立过程。</p><p><code>FIN</code>：发送端已完成数据传输，请求释放连接。</p><p>后面有更详细的解释</p></blockquote><p><code>TCP</code>是一个面向连接的协议，在每一次传输数据前，客户端和服务端需要进行连接，这个链接就是著名的三次握手。</p><blockquote><p>第一次：客户端向服务端发送一个 <code>SYN</code>（<code>SEQ=J</code> 客户端序号）报文给服务器端，进入<code>SYN_SEND</code>状态。</p><p>第二次：服务器端收到SYN报文，回应一个<code>SYN</code> （<code>SEQ=K</code> 服务端序号）<code>ACK</code>(<code>ACK=J+1</code> 确认号=客户端序号+1）报文，进入<a href="https://baike.baidu.com/item/SYN_RECV">SYN_RECV</a>状态。</p><p>第三次：客户端收到服务器端的<code>SYN</code>报文，回应一个<code>ACK</code>(<code>ACK=K+1</code>）报文，进入<code>Established</code>状态。</p></blockquote><p><img src="1.webp" alt=""></p><p>三次握手就很安全了吗？在三次握手过程中，<code>Server</code>发送<code>SYN-ACK</code>之后，收到<code>Client</code>的<code>ACK</code>之前的<code>TCP</code>连接称为半连接（<code>half-open connect</code>），此时<code>Server</code>处于<code>SYN_RCVD</code>状态，当收到<code>ACK</code>后，<code>Server</code>转入<code>ESTABLISHED</code>状态。<code>SYN</code>攻击就是<code>Client</code>在短时间内伪造大量不存在的<code>IP</code>地址，并向<code>Server</code>不断地发送<code>SYN</code>包，<code>Server</code>回复确认包，并等待<code>Client</code>的确认，由于源地址是不存在的，因此，<code>Server</code>需要不断重发直至超时，这些伪造的<code>SYN</code>包将产时间占用未连接队列，导致正常的<code>SYN</code>请求因为队列满而被丢弃，从而引起网络堵塞甚至系统瘫痪。<code>SYN</code>攻击是一种典型的<code>DDOS</code>攻击，检测<code>SYN</code>攻击的方式非常简单，即当<code>Server</code>上有大量半连接状态且源<code>IP</code>地址是随机的，则可以断定遭到<code>SYN</code>攻击了。</p><h4 id="能不能通过两次握手建立连接">能不能通过两次握手建立连接</h4><p>其实是可以的，但那同时存在一个问题，我们无法在发送方和接收方两边都建立安全、稳定的连接。</p><h5 id="什么是连接">什么是连接</h5><p><a href="https://tools.ietf.org/html/rfc793">RFC 793 - Transmission Control Protocol</a> 文档中非常清楚地定义了 <code>TCP</code> 中的连接是什么，我们简单总结一下：用于保证可靠性和流控制机制的信息，包括 Socket、序列号以及窗口大小叫做连接。</p><p><img src="4.png" alt="what-is-TCP-connection"></p><p>所以，建立 <code>TCP</code> 连接就是通信的双方需要对上述的三种信息达成共识，连接中的一对 <code>Socket</code> 是由互联网地址标志符和端口组成的，窗口大小主要用来做流控制，最后的序列号是用来追踪通信发起方发送的数据包序号，接收方可以通过序列号向发送方确认某个数据包的成功接收。</p><p>到这里，我们将原有的问题转换成了『为什么需要通过三次握手才可以初始化 <code>Sockets</code>、窗口大小和初始序列号？』，那么接下来我们就开始对这个细化的问题进行分析并寻找解释。</p><h5 id="阻止重复历史连接的初始化">阻止重复历史连接的初始化</h5><p><a href="https://tools.ietf.org/html/rfc793">RFC 793 - Transmission Control Protocol</a> 其实就指出了 <code>TCP</code> 连接使用三次握手的首要原因 —— 为了阻止历史的重复连接初始化造成的混乱问题，防止使用 <code>TCP</code> 协议通信的双方建立了错误的连接。</p><blockquote><p>The principle reason for the three-way handshake is to prevent old duplicate connection initiations from causing confusion.</p></blockquote><p>想象一下这个场景，如果通信双方的通信次数只有两次，那么发送方一旦发出建立连接的请求之后它就没有办法撤回这一次请求，如果在网络状况复杂或者较差的网络中，发送方连续发送多次建立连接的请求，如果 <code>TCP</code> 建立连接只能通信两次，那么接收方只能选择接受或者拒绝发送方发起的请求，它并不清楚这一次请求是不是由于网络拥堵而早早过期的连接。</p><p>所以，<code>TCP</code> 选择使用三次握手来建立连接并在连接引入了 <code>RST</code> 这一控制消息，接收方当收到请求时会将发送方发来的 <code>SEQ+1</code> 发送给对方，这时由发送方来判断当前连接是否是历史连接：</p><ul><li>如果当前连接是历史连接，即 <code>SEQ</code> 过期或者超时，那么发送方就会直接发送 <code>RST</code> 控制消息中止这一次连接；</li><li>如果当前连接不是历史连接，那么发送方就会发送 <code>ACK</code> 控制消息，通信双方就会成功建立连接；</li></ul><p><strong>使用三次握手和 <code>RST</code> 控制消息将是否建立连接的最终控制权交给了发送方，因为只有发送方有足够的上下文来判断当前连接是否是错误的或者过期的，这也是 <code>TCP</code> 使用三次握手建立连接的最主要原因</strong>。</p><p><img src="5.png" alt="tcp-recovery-from-old-duplicate-syn"></p><blockquote><p><code>ACK</code>：确认序号（AN）有效。</p><p><code>RST</code>：<code>TCP</code>连接中出现严重差错（如主机崩溃），必须释放连接，在重新建立连接。</p><p><code>SYN</code>：处于<code>TCP</code>连接建立过程。</p></blockquote><p>在上图的过程中，发送方<code>SEQ=90</code>的历史连接请求被接收到并被服务器做出应答，但此时发送方的<code>SEQ</code>已经增长为100，发送方就可以知道这是历史连接，通过<code>RST</code>告知接受方废弃该连接，从而避免这个连接被建立在一个已经超时废弃的连接之上。</p><h5 id="初始序列号">初始序列号</h5><p>另一个使用三次握手的重要的原因就是通信双方都需要获得一个用于发送信息的初始化序列号，作为一个可靠的传输层协议，<code>TCP</code> 需要在不稳定的网络环境中构建一个可靠的传输层，网络的不确定性可能会导致数据包的缺失和顺序颠倒等问题，常见的问题可能包括：</p><ul><li>数据包被发送方多次发送造成数据的重复；</li><li>数据包在传输的过程中被路由或者其他节点丢失；</li><li>数据包到达接收方可能无法按照发送顺序；</li></ul><p>为了解决上述这些可能存在的问题，<code>TCP</code> 协议要求发送方在数据包中加入『序列号』字段，有了数据包对应的序列号，我们就可以：</p><ul><li>接收方可以通过序列号对重复的数据包进行去重；</li><li>发送方会在对应数据包未被 <code>ACK</code> 时进行重复发送；</li><li>接收方可以根据数据包的序列号对它们进行重新排序；</li></ul><p>序列号在 <code>TCP</code> 连接中有着非常重要的作用，初始序列号作为 <code>TCP</code> 连接的一部分也需要在三次握手期间进行初始化，由于 <code>TCP</code> 连接通信的双方都需要获得初始序列号，所以它们其实需要向对方发送 <code>SYN</code> 控制消息并携带自己期望的初始化序列号 <code>SEQ</code>，对方在收到 <code>SYN</code> 消息之后会通过 <code>ACK</code> 控制消息以及 <code>SEQ+1</code> 来进行确认。</p><p><img src="6.png" alt="basic-4-way-handshake"></p><p>如上图所示，通信双方的两个 <code>TCP A/B</code> 分别向对方发送 <code>SYN</code> 和 <code>ACK</code> 控制消息，等待通信双方都获取到了自己期望的初始化序列号之后就可以开始通信了，由于 <code>TCP</code> 消息头的设计，我们可以将中间的两次通信合成一个，<code>TCP B</code> 可以向 <code>TCP A</code> 同时发送 <code>ACK</code> 和 <code>SYN</code> 控制消息，这也就帮助我们将四次通信减少至三次。</p><blockquote><p>A three way handshake is necessary because sequence numbers are not tied to a global clock in the network, and TCPs may have different mechanisms for picking the ISN’s. The receiver of the first SYN has no way of knowing whether the segment was an old delayed one or not, unless it remembers the last sequence number used on the connection (which is not always possible), and so it must ask the sender to verify this SYN. The three way handshake and the advantages of a clock-driven scheme are discussed in [3].</p></blockquote><p>除此之外，网络作为一个分布式的系统，其中并不存在一个用于计数的全局时钟，而 <code>TCP</code> 可以通过不同的机制来初始化序列号，作为 <code>TCP</code> 连接的接收方我们无法判断对方传来的初始化序列号是否过期，所以我们需要交由对方来判断，<code>TCP</code> 连接的发起方可以通过保存发出的序列号判断连接是否过期，如果让接收方来保存并判断序列号却是不现实的，这也再一次强化了我们在上一节中提出的观点 —— 避免历史错连接的初始化。</p><h4 id="连接的断开">连接的断开</h4><p>一个<code>TCP</code>完整的断开需要进行四次挥手。</p><blockquote><p>第一次：客户端向服务端发送 <code>FIN + ACK</code> 报文，同时携带序号为 X。 客户端进入 <code>FIN-WAIT1</code></p><p>第二次：服务器端回复 <code>ACK</code> 报文。附带序号Z和确认序号X+1，表示服务器已经接受到了客服端的报文。但是由于服务器可能还在处理事务，因此，报文并不会携带FIN标志。状态：<code>CLOSE WAIT</code></p><p>第三次：在一段时间之后，服务器已经处理完毕，发送带有 <code>FIN</code>和<code>ACK</code>的报文，序号为Y，确认序号为 X + 1 。状态： <code>ACK-LAST</code></p><p>第四次：客户端发送<code>ACK</code>报文，序号为 X+1，确认号Y+1 。 客户端进入： <code>TIME_WAIT</code>。服务端进入<code>CLOSE</code>（初始状态）</p></blockquote><p><img src="10.webp" alt=""></p><p>为什么建立连接是三次握手，而关闭连接却是四次挥手呢？</p><p>这是因为服务端在<code>LISTEN</code>状态下，收到建立连接请求的<code>SYN</code>报文后，把<code>ACK</code>和<code>SYN</code>放在一个报文里发送给客户端。而关闭连接时，<strong>当收到对方的<code>FIN</code>报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即<code>close</code>，也可以发送一些数据给对方后，再发送<code>FIN</code>报文给对方来表示同意现在关闭连接，因此，己方<code>ACK</code>和<code>FIN</code>一般都会分开发送</strong>。</p><p>打个不太恰当的比方，你点击关机按钮，相当于你向电脑发送<code>FIN</code>，但其实你电脑还有一些程序在运行，不过电脑会立即响应，进入关机阶段，相当于想你发送了<code>ACK</code>，然后他还会告诉你哪些程序需要被关闭，可以理解为又向你发送了一部分必要的数据，等待这些程序也被系统关闭后，电脑完成关机流程，黑屏，相当于向你发送了<code>FIN</code>，你发现电脑完成了关机、不再有任何响应，于是合上电脑起身离开，相当于发送了<code>ACK</code>（最后这个<code>ACK</code>有点牵强）</p><h3 id="UDP模型"><code>UDP</code>模型</h3><p><code>UDP</code>（<code>User Datagram Protocol</code>）是一个简单的面向消息的传输层协议，尽管<code>UDP</code>提供标头和有效负载的完整性验证（通过校验和），但它不保证向上层协议提供消息传递，并且<code>UDP</code>层在发送后不会保留<code>UDP</code> 消息的状态。因此，<code>UDP</code>有时被称为不可靠的数据报协议。如果需要传输可靠性，则必须在用户应用程序中实现。</p><p><code>UDP</code>使用具有最小协议机制的简单无连接通信模型。<code>UDP</code>提供数据完整性的校验和，以及用于在数据报的源和目标寻址不同函数的端口号。它没有握手对话，因此将用户的程序暴露在底层网络的任何不可靠的方面。如果在网络接口级别需要纠错功能，应用程序可以使用为此目的设计的传输控制协议（<code>TCP</code>）。</p><p>综上所述：<code>UDP</code>是基于IP的简单协议，不可靠的协议。</p><p><code>UDP</code>的优点：简单，轻量化。</p><p><code>UDP</code>的缺点：没有流控制，没有应答确认机制，不能解决丢包、重发、错序问题。</p><p>这里需要注意一点，并不是所有使用<code>UDP</code>协议的应用层都是不可靠的，应用程序可以自己实现可靠的数据传输，通过增加确认和重传机制，所以使用<code>UDP</code> 协议最大的特点就是速度快。</p><h4 id="PING包"><code>PING</code>包</h4><p>我们经常使用<code>ping</code>命令来测试两台主机之间<code>TCP/IP</code>通信是否正常， 其实<code>ping</code>命令的原理就是向对方主机发送<code>UDP</code>数据包，然后对方主机确认收到数据包， 如果数据包是否到达的消息及时反馈回来，那么网络就是通的。</p><p><code>ping</code>命令是用来探测主机到主机之间是否可通信，如果不能<code>ping</code>到某台主机，表明不能和这台主机建立连接。<code>ping</code>命令是使用 <code>IP</code> 和网络控制信息协议 (<code>ICMP</code>)，因而没有涉及到任何传输协议(<code>UDP</code>/<code>TCP</code>) 和应用程序。它发送<code>ICMP</code>回送请求消息给目的主机。</p><p><code>ICMP</code>协议规定：目的主机必须返回<code>ICMP</code>回送应答消息给源主机。如果源主机在一定时间内收到应答，则认为主机可达。</p><h4 id="UDP洪水"><code>UDP</code>洪水</h4><p><code>UDP</code> 洪水是一种拒绝服务攻击，攻击者将大量用户数据报协议(<code>UDP</code>) 数据包发送到目标服务器，旨在让该设备的处理和响应能力无力承担。由于<code>UDP</code> 洪水攻击，保护目标服务器的防火墙也可能不堪重负，导致对正常流量拒绝服务。</p><p><code>UDP</code> 洪水攻击的工作原理</p><p><code>UDP</code> 洪水的工作原理主要是利用服务器响应发送到其端口之一的<code>UDP</code> 数据包时所采取的步骤。在正常情况下，服务器在特定端口上收到<code>UDP</code> 数据包时，将通过以下两个步骤进行响应：</p><p>服务器首先检查是否有任何当前侦听指定端口请求的程序正在运行。</p><p>如果该端口上没有程序正在接收数据包，则服务器将以<code> ICMP (ping)</code> 数据包作为响应，以告知发送方目标不可达。</p><p><code>UDP</code>洪水就好比酒店接待员转接呼叫的情况。首先，接待员接到电话，呼叫者要求将其连接到特定客房。然后，接待员需要查看所有房间的列表，以确保客人在客房内，并愿意接听电话。如果接待员了解到客人没有接听电话，他们就必须重新接听电话，并告诉呼叫者客人不会接听电话。如果所有电话线路都突然同时发出类似请求，他们很快就会变得不堪重负。</p><p>由于目标服务器利用资源来检查并响应每个接收到的<code>UDP</code> 数据包，当收到大量<code>UDP</code> 数据包时，目标资源会很快耗尽，从而导致对正常流量拒绝服务。</p><p><img src="9.jpg" alt=""></p><p><strong>如何防护<code>UDP</code> 洪水攻击？</strong></p><p>大多数操作系统限制<code>ICMP</code> 数据包的响应速率，部分原因是为了中断需要<code>ICMP</code> 响应的<code>DDoS</code> 攻击。这种防护措施的一个缺点是，在攻击期间，合法数据包也可能在此过程中被过滤。如果<code>UDP</code>洪水的大小足以使目标服务器的防火墙的状态表饱和，则在服务器级别发生的任何防护都将是不够的，因为瓶颈将发生在目标设备的上游。</p><h2 id="详细的标志位">详细的标志位</h2><p><code>URG</code>：此标志表示<code>TCP</code>包的紧急指针域有效，用来保证<code>TCP</code>连接不被中断，并且督促中间层设备要尽快处理这些数据；</p><p><code>ACK</code>：此标志表示应答域有效，就是说前面所说的<code>TCP</code>应答号将会包含在<code>TCP</code>数据包中；有两个取值：0和1，为1的时候表示应答域有效，反之为0；</p><p><code>PSH</code>：这个标志位表示<code>Push</code>操作。所谓<code>Push</code>操作就是指在数据包到达接收端以后，立即传送给应用程序，而不是在缓冲区中排队；</p><p><code>RST</code>：这个标志表示连接复位请求。用来复位那些产生错误的连接，也被用来拒绝错误和非法的数据包；</p><p><code>SYN</code>：表示同步序号，用来建立连接。<code>SYN</code>标志位和<code>ACK</code>标志位搭配使用，当连接请求的时候，<code>SYN=1，ACK=0；</code>连接被相应的时候，<code>SYN=1，ACK= 1；</code>这个标志的数据包经常被用来进行端口扫描。扫描者发送一个只有<code>SYN</code>的数据包，如果对方主机响应了一个数据包回来，就表明这台主机存在这个端口；但是 由于这种扫描方式只是进行<code>TCP</code>三次握手的第一次握手，因此这种扫描的成功表示被扫描的机器不很安全，一台安全的主机将会强制要求一个连接严格的进行 <code>TCP</code>的三次握手；</p><p><code>FIN</code>：表示发送端已经达到数据末尾，也就是说双方的数据传送完成，没有数据可以传送了，发送<code>FIN</code>标志位的<code>TCP</code>数据包后，连接将被断开。这个标志的数 据包也经常被用于进行端口扫描。当一个FIN标志的<code>TCP</code>数据包发送到一台计算机的特定端口，如果这台计算机响应了这个数据，并且反馈回来一个<code>RST</code>标志 的<code>TCP</code>包，就表明这台计算机上没有打开这个端口，但是这台计算机是存在的；如果这台计算机没有反馈回来任何数据包，这就表明，这台被扫描的计算机存在这 个端口。</p><h1>参考</h1><p><a href="https://blog.csdn.net/freekiteyu/article/details/72236734">https://blog.csdn.net/freekiteyu/article/details/72236734</a></p><p><a href="https://www.jianshu.com/p/dac7b8bdb682">https://www.jianshu.com/p/dac7b8bdb682</a></p><p><a href="https://draveness.me/whys-the-design-TCP-three-way-handshake/">https://draveness.me/whys-the-design-TCP-three-way-handshake/</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter屏幕旋转与状态栏、导航按钮处理</title>
      <link href="/2022/05/07/flutter%E5%B1%8F%E5%B9%95%E6%97%8B%E8%BD%AC%E4%B8%8E%E7%8A%B6%E6%80%81%E6%A0%8F%E3%80%81%E5%AF%BC%E8%88%AA%E6%8C%89%E9%92%AE%E5%A4%84%E7%90%86/"/>
      <url>/2022/05/07/flutter%E5%B1%8F%E5%B9%95%E6%97%8B%E8%BD%AC%E4%B8%8E%E7%8A%B6%E6%80%81%E6%A0%8F%E3%80%81%E5%AF%BC%E8%88%AA%E6%8C%89%E9%92%AE%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1>flutter屏幕旋转与状态栏、导航按钮处理</h1><h2 id="屏幕旋转">屏幕旋转</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  <span class="string">&#x27;package:flutter/services.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">void</span>  main()  &#123;</span><br><span class="line"> WidgetsFlutterBinding.ensureInitialized();   </span><br><span class="line"> SystemChrome.setPreferredOrientations([DeviceOrientation.landscapeLeft]).then((_)&#123;</span><br><span class="line"> runApp(MyApp());</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置屏幕水平方向:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SystemChrome.setPreferredOrientations([DeviceOrientation.landscapeLeft,DeviceOrientation.landscapeRight]);</span><br></pre></td></tr></table></figure><p>垂直：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SystemChrome.setPreferredOrientations([DeviceOrientation.portraitDown,DeviceOrientation.portraitUp]);</span><br></pre></td></tr></table></figure><p>动态改变屏幕方向 ：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RaisedButton(</span><br><span class="line"> child:  Text(<span class="string">&quot;Portrait&quot;</span>),</span><br><span class="line"> onPressed:  ()&#123;</span><br><span class="line"> SystemChrome.setPreferredOrientations([DeviceOrientation.portraitUp]);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>获取当前屏幕方向 ：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MediaQuery.of(context).orientation</span><br><span class="line">MediaQuery.of(context).orientation  ==  Orientation.landscape</span><br></pre></td></tr></table></figure><h2 id="隐藏状态栏和底部按钮">隐藏状态栏和底部按钮</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SystemChrome.setEnabledSystemUIMode(SystemUiMode.manual, overlays: []);<span class="comment">//隐藏状态栏，底部按钮栏</span></span><br><span class="line">SystemChrome.setEnabledSystemUIMode(SystemUiMode.manual, overlays: [SystemUiOverlay.bottom]);<span class="comment">//隐藏状态栏，保留底部按钮栏</span></span><br><span class="line">SystemChrome.setEnabledSystemUIMode(SystemUiMode.manual, overlays: [SystemUiOverlay.values]);<span class="comment">//显示状态栏、底部按钮栏</span></span><br></pre></td></tr></table></figure><h2 id="参考">参考</h2><blockquote><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdev.to%2Fmightytechno%2Fhow-to-change-screen-orientation-in-flutter-32c1">https://dev.to/mightytechno/how-to-change-screen-orientation-in-flutter-32c1</a></p><p><a href="https://blog.csdn.net/NotesChapter/article/details/110406540">https://blog.csdn.net/NotesChapter/article/details/110406540</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象课程设计</title>
      <link href="/2022/05/07/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/"/>
      <url>/2022/05/07/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1>面向对象课程设计分析与总结</h1><h2 id="代码结构">代码结构</h2><img src="1.png" style="zoom:80%;" /><p>勉强算是MVC架构，但其实项目不大，纯代码只有2543行，所以谈架构并没有什么太大的意义。</p><p>老规矩，<code>bean</code>目录用于存放对象（实体类），<code>shortcut</code>包用于存放按键监听函数的注册，<code>widgets</code>用于存放自定义的<code>widget</code>，<code>main.dart</code>用于构建主界面与主界面逻辑。</p><h3 id="UML">UML</h3><img src="oop课设.png" style="zoom:80%;" /><p>（虽然看起来<code>dart</code>文件不多但其实类还是很多，关系比较复杂）</p><p>代码/程序主要分为四部分，基本也是可以与上面的代码结构相对应：</p><ul><li>flutter框架部分（当然这部分不需要我们关心）</li><li>实体类部分</li><li>组件类部分</li><li>主程序部分</li></ul><h2 id="各部分代码的功能">各部分代码的功能</h2><h3 id="实体类部分">实体类部分</h3><p>主要负责程序中的实体类构建，包括卡牌（以及一整副牌）、各种牌堆、用户执行的操作以及这个游戏本身。</p><p>实体类的创建主要以<strong>建造者模式</strong>为导向，事实上这也是在构建实体类模块时常用的思想。我选择从最基本的元素开始抽象，灵活运用组合与继承，同时通过一定的<strong>装饰器模式</strong>思想，逐渐完成对整个游戏的抽象。</p><p>但其实存在一个小问题，<code>SolitaireGame</code>方法庞杂，逻辑众多，并不利于后期维护，我尽量通过函数名的自解释来解决这一问题。</p><h3 id="组件类部分">组件类部分</h3><p>相应的，组件类的构建也是以建造者模式的思想为引导，通过小组件逐步完成对整个游戏的构建。</p><p>这种组件式构建的主要好处就是能够通过子组件自己管理的<code>build()</code>以及必要的<code>const</code>标识，尽量减少不必要的界面重绘。尤其是，项目中涉及较多的<code>StatefulWidget</code>而并没有使用<code>GetX</code>+<code>StatelessWidget</code>的方案进行状态管理，所以尽可能的子组件抽离将对提高程序性能有更大的帮助。</p><p>而项目中涉及频繁卡牌拖拽、吸附、自动翻面、自动移动等动作及动画，如何高效完成状态的更新、保证动画流畅性、减少卡顿就会成为一大难题，而组件化或许就是答案之一。</p><h3 id="主程序部分">主程序部分</h3><p>由于程序只有一个界面，所以<code>main.dart</code>内存放了所有主界面代码，同时通过内部类的划分完成了主程序启动逻辑域与视图代码域的分离（这其实是flutter的特性/规定），从而保证程序在界面逻辑上的拓展性。</p><p>界面构建方面，依然主要采用安卓经典的<code>LinearLayout</code>思想，使用<code>Row+Column</code>，即左到右划分为不同的列，在每一列上再进行水平方向的划分，这样就能在保证了界面有序的同时也尽量兼顾了窗口缩放时不同元素的缩放问题。</p><img src="2.png" style="zoom:60%;" /><p>另一方面，你可能会发现，按照线性布局的思想，组件之间不可能发生重叠，但界面中的卡牌组件却明显地发生了重叠。这是因为为了保证游戏界面符合常理，我在卡牌堆的界面构建（包括<code>Stock</code>和<code>Tableau</code>两种卡牌堆）上使用的是层叠布局，包括左下角的游戏标识，使用的也全是层叠布局。</p><p>同时，对于卡牌的定位，我选择通过坐标计算的方法，对于<code>Tableau</code>七个牌堆中的卡牌，通过获取其牌堆号与堆内序号，我们可以利用<code>FinalOffset=BasicOffset+PileNum*TableauOffset.dx+RowNum*TableauOffset.dy</code>来计算得出，这部分的逻辑主要由<code>OverlapStack</code>完成，这个类相当于牌堆数据的装饰器与牌堆的建造器，完成牌堆数据与牌堆组件的解耦，避免将复杂的定位逻辑耦合到牌堆组件的UI逻辑中，也避免将这部分逻辑放到数据或者实体类中导致其过于臃肿。</p><h2 id="代码中的设计模式思想">代码中的设计模式思想</h2><p>代码中很频繁地使用了<strong>建造者模式</strong>的思想，上文已经说过。</p><p>代码中实现了<code>do，undo，redo</code>三个操作，主要由<strong>命令模式</strong>与<strong>备忘录模式</strong>结合，代码通过对<code>Move</code>对象的<code>execure()</code>方法和<code>undo()</code>方法及相应的存放每一步<code>Move</code>和被撤销的<code>UndoneMove</code>的列表的维护，并通过相应列表记录其原本位置，实现撤销与重做及其相应的动画。</p><p>代码中频繁使用了<strong>装饰器模式</strong>，比如游戏中卡牌的生成，首先我们创建<code>StandardCard</code>类，用于存放扑克牌的数据：花色和纸牌值。我们使用<code>SolitaireCard</code>装饰该类，赋予其<code>Solitaire</code>游戏中的一些必要判断如：翻面函数<code>filp()</code>、能否放在另一张牌上面<code>canPlaceBlow(SolitaireCard card)</code>等，最后我们使用<code>PokerCard</code>类作为最终装饰类装饰<code>SolitaireCard</code>，将其中的数据组装成卡片组件并提供相应的点击等逻辑。</p><p>同时装饰器模式在主界面逻辑中也有使用，我们执行每一次<code>Move</code>的<code>execute()</code>方法与<code>undo()</code>方法只是在数据上完成了执行与撤销，但我们也要完成卡片的移动的动画，我们在主界面逻辑中对这些函数进行装饰，并使用<code>animatePileMove()</code>方法统一完成动画的执行。</p><p>对于代码中快捷键绑定的逻辑，我参照<strong>访问者模式</strong>的思想，将作用于所有键盘事件的各元素的操作分离出来封装成独立的<code>Intent</code>类，从而保证职责单一性，也方便后期拓展。</p><p>最后，游戏中大部分时间始终只维护一个<code>SolitaireGame</code>对象，初期我选择参考<strong>单例模式</strong>，由<code>SolitaireGame</code>类自行创建单例对象并提供唯一访问节点，在进行新游戏时只需要将该对象执行初始化即可，但后期引入撤销与重做后发现这样会带来很多逻辑上的问题，如果玩家选择进行新游戏但随后选择撤销，那么在这个过程中，我需要记录两个游戏之间所有数据的不同并需要来回赋值，这些数据主要由两方面构成，一方面是UI层的数据，记录牌堆移动、位置、拖拽情况、所有牌的唯一键等状态的所有变量，另一部分是<code>SolitaireGame</code>本身的大量属性，这就导致完全割裂的两部分无法统一完成这两部分的来回更改。</p><p>初期我选择了一种较为简单的方法，即在UI逻辑中直接新建一个过渡的<code>game</code>对象并对原有对象进行替换，由新建的对象引导视图重建逻辑，这样在程序的大部分时间内仍然保持使用唯一的<code>game</code>对象，但这样做有一定的弊端，由于程序中维护的<code>SolitaireGame</code>对象是所有对象中体积最大、属性最多的对象，所以我们还是尽量避免其频烦新建，尤其是在频繁执行新游戏操作与撤销时，使用新建对象并随之弃用就会导致新建对象的性能损耗与大量垃圾对象的回收问题。</p><p>所以我选择了严格按照单例模式的策略，由<code>SolitaireGame</code>类自行创建单例对象并提供唯一访问节点，并提供<code>newGame()</code>与<code>undoNewGame()</code>方法，进行对象数据的更改，同时在主界面中分别用不同方法装饰这两个方法，完成UI层面的新游戏操作与撤销。从而减少了程序性能损耗，使得频繁执行开始新游戏与撤销操作时界面能稳定在40帧左右。</p><img src="3.png" style="zoom:60%;" /><h2 id="一些问题">一些问题</h2><p>首先是视图与逻辑耦合的问题，属于是<code>flutter</code>一直以来存在的问题，使用<code>GetX</code>可以在一定程度上解决这一问题，但会导致代码中的类文件变得比较冗杂。</p><p>另外，程序也存在些动画上的问题，比如<code>Stock</code>牌堆翻开的动画与撤销时的动画并不是可逆的，就导致撤销翻开时并没有动画进行过渡（因为<code>flutter</code>动画<code>animation</code>要求动画可以执行<code>reverse()</code>和<code>forward()</code>，也就是说，动画要求是可逆的，否则就属于不同的动画），另一方面，如果撤销对多张牌的移动，动画会出现底部的牌的位置瞬间复原而最顶部的牌执行动画的问题，这个问题暂时还没有解决方案，主要受到牌（堆）移动策略的限制。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter生成UML</title>
      <link href="/2022/05/05/flutter-generate-uml/"/>
      <url>/2022/05/05/flutter-generate-uml/</url>
      
        <content type="html"><![CDATA[<h1>flutter生成UML的方法</h1><h2 id="准备">准备</h2><ol><li>首先，确保你安装了PlantUML这个插件</li></ol><img src="1.png" style="zoom:60%;" /><ol start="2"><li>安装dcdg.dart</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dart pub global activate dcdg</span><br></pre></td></tr></table></figure><h2 id="使用">使用</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dart pub global run dcdg -o 要保存的文件路径/文件名.puml</span><br></pre></td></tr></table></figure><p>即可</p><p>See <code>--help</code> for more options, including ways to filter what ends up in the output.</p><h2 id="保存UML为图片">保存UML为图片</h2><p>点这里即可：</p><img src="2.png" style="zoom:80%;" /><h1>参考</h1><blockquote><p><a href="https://juejin.cn/post/6979795376731586573">https://juejin.cn/post/6979795376731586573</a></p><p><a href="https://github.com/glesica/dcdg.dart">https://github.com/glesica/dcdg.dart</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机术语中英对照</title>
      <link href="/2022/05/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%AF%E8%AF%AD%E4%B8%AD%E8%8B%B1%E5%AF%B9%E7%85%A7/"/>
      <url>/2022/05/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9C%AF%E8%AF%AD%E4%B8%AD%E8%8B%B1%E5%AF%B9%E7%85%A7/</url>
      
        <content type="html"><![CDATA[<h1>转自：<a href="https://github.com/EarsEyesMouth">EarsEyesMouth</a>/<strong><a href="https://github.com/EarsEyesMouth/computerese-cross-references">computerese-cross-references</a></strong></h1><h1>计算机专业术语对照</h1><h2 id="A">A</h2><ul><li>abstraction layer，抽象层</li><li>access，获取，存取</li><li>acoustic coupler，声音耦合器</li><li>Active Directory，活动目录</li><li>Acyclic Dependencies Principle，非循环依赖原则（ADP）</li><li>acyclic digraph，有向无环图</li><li>Adaptive Code，自适应代码</li><li>Add Parameter，添加参数</li><li>ADSL，Asymmetrical Dingital Subscriber Loop，非对称数字用户环线</li><li>affinity，绑定</li><li>affinity group，地缘组</li><li>agent，代理</li><li>agent-based interface，代理人界面</li><li>Aggregate，聚合</li><li>Aggregate Root，聚合根</li><li>Agile，敏捷方法论</li><li>agile practice，敏捷实践</li><li>agile process，敏捷流程</li><li>agility，敏捷性</li><li>AI，Artificial Intelligence，人工智能</li><li>air waves，无线电波</li><li>algorithm，算法</li><li>analog，模拟的</li><li>animation，动画</li><li>annotation，注解，注释</li><li>answering machine，电话应答机</li><li>antenna，天线</li><li>anti-pattern，反模式</li><li>APM，异步编程模型（Asynchronous Programming Model）</li><li>Apocalyptic defect，灾难缺陷</li><li>application，应用，应用程序，应用软件</li><li>application life cycle，应用程序生命周期</li><li>application pool，应用程序池</li><li>Application Programming Interface，应用程序编程接口（API），目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。</li><li>Application Service，应用服务</li><li>arbitrary error，任意错误</li><li>architecture，体系机构，结构</li><li>architecture decay，架构腐坏</li><li>Architecture Style，架构风格</li><li>ARPA，Advanced Research Projects Agency，（美国国防部）高级研究计划署</li><li>ARPAnet，ARPA 网</li><li>Arrange-Act-Assert，准备-执行-断言（AAA）</li><li>artifact，构建物<sup>4</sup></li><li>ASF，Apache Software Foundation 的简写</li><li>Aspect-Oriented Programming，面向切面编程（AOP）</li><li>aspect ratio，屏幕高宽比</li><li>assembly，程序集</li><li>associative array，关联数组</li><li>Asynchronous Programming Model，异步编程模型（APM）</li><li>ATM，asynchronous transfer mode，异步传输模式</li><li>atomic opreation，原子操作</li><li>atomic transaction，原子事务</li><li>atomicity，原子性</li><li>attribute，特性</li><li>augmented reality，增强实现（AR）</li><li>authentication，身份验证</li><li>authorization，授权</li><li>automated unit testing，自动化单元测试</li><li>automation，自动化</li><li>autonomous，独立性</li><li>auxiliary database，辅助数据库</li><li>availability，可用性</li><li>availability set，可用性集</li><li>AZs，可用性区域（Availability Zones，亚马逊 AWS 中数据中心的叫法）<sup>4</sup></li></ul><h2 id="B">B</h2><ul><li>Backend as a Service，后端即服务（BaaS）</li><li>backpane，底板</li><li>backward compatibility，向后兼容性</li><li>bandwidth，带宽</li><li>bar code，条形码</li><li>Base Class Library，基类库（BCL）</li><li>baseline，准线</li><li>baud，波特</li><li>BCL，基类库（Base Class Library）</li><li>bear，熊</li><li>behavior，行为</li><li>behavior preserving program transformations，行为保留式程序转换<sup>1</sup></li><li>Behavioral error，行为错误</li><li>BFF，为前端服务的后端（Backends For Frontends）<sup>4</sup></li><li>Big Ball of Mud，大泥球（BBM）</li><li>big data，大数据</li><li>Big Design Up Front，大优先设计（BDUF）</li><li>binary，二进制的</li><li>binochlar，双目并用的</li><li>bit，比特</li><li>Bit-field，位域</li><li>bitnik，比特族</li><li>blob，BLOB</li><li>block，阻断</li><li>block blob，块 BLOB</li><li>Blockchain as a Service，区块链即服务（BaaS）</li><li>bottleneck，瓶颈</li><li>bounded context，边界上下文、界限上下文<sup>4</sup></li><li>box，装箱</li><li>bps，bits per second，比特/秒</li><li>Brainstorming，头脑风暴（脑暴）</li><li>BRD，商业需求文档（Business Requirements Document）</li><li>breakpoint，断点</li><li>broadcast，（无线电或电视）广播</li><li>Broken Hierarchy，支离破碎的层次结构<sup>2</sup></li><li>Broken Modularization，拆散的模块化<sup>2</sup></li><li>brownfield project，行进中项目</li><li>Browser Object Model，浏览器对象模型（BOM）</li><li>browser-server，浏览器-服务器</li><li>bug，缺陷</li><li>built-in，内置的，内建的；嵌入的；内置</li><li>bulkhead，舱壁<sup>4</sup></li><li>business intelligence，商业智能，将企业中现有的数据进行有效的整合，快速准确地提供报表并提出决策依据，帮助企业做出明智的业务经营决策。</li><li>business layer，业务层</li><li>business logic layer，业务逻辑层</li><li>Business Requirements Document，商业需求文档（BRD）</li><li>busy (status)，忙（状态）；繁忙（状态）</li><li>byte，字节</li></ul><h2 id="C">C</h2><ul><li>cable，电缆</li><li>Cache/Caching，缓存</li><li>call stack，调用堆栈</li><li>callout box，标注框</li><li>camelCase，camel 大小写</li><li>canary releasing，金丝雀发布<sup>4</sup></li><li>carbon copy，复写本，副本；抄送（CC）</li><li>carriage return，回车</li><li>Cascading Style Sheets，层叠样式表（CSS）</li><li>catastrophic failover，灾难性故障转移<sup>4</sup></li><li>CD，持续交付（Continuous Delivery）<sup>4</sup></li><li>CDC，消费者驱动的契约（Customer-Driven Contract）<sup>4</sup></li><li>CDN，内容分发网络（Content Delivery Network）</li><li>cell，单元</li><li>cellular telephone，移动电话</li><li>Central Processing Unit，中央处理器（CPU）</li><li>certificate，（数字）证书</li><li>Certificate Authority，证书认证机构</li><li>Change Bidirectional Association to Unidirectional，将双向关联改为单向关联<sup>1</sup></li><li>Change Point，修改点：需要往代码中引入修改的点</li><li>Change Reference to Value，将引用对象改为值对象<sup>1</sup></li><li>Change Unidirectional Association to Bidirectional，将单向关联改为双向关联<sup>1</sup></li><li>Change Value to Reference，将值对象改为引用对象<sup>1</sup></li><li>channel，信道，频道</li><li>character，字符</li><li>Characterization test，特征测试：描述软件某部分的当前行为的测试，当你修改代码时能够用来保持行为</li><li>check in，签入</li><li>check out，签出</li><li>checksum，校验和</li><li>chip，芯片</li><li>choreography，协同</li><li>CI，持续集成（Continuous Integration）<sup>4</sup></li><li>cipher，密码</li><li>claim，声明</li><li>class definition，类定义</li><li>Clean Object-oriented and Layered Architecture，整洁面向对象分层架构（COLA）</li><li>CLI，公共语言基础结构（Common Language Infrastructure）</li><li>client-server，客户端-服务器</li><li>clone，克隆，复制</li><li>cloud computing，云计算</li><li>cloud service，云服务</li><li>CLR，公共语言运行时（Common Language Runtime）</li><li>CLS，公共语言规范（Common Language Specification）</li><li>cluster，集群</li><li>clustered index，聚集索引</li><li>co-occurring smells，同时出现的坏味<sup>2</sup></li><li>CoAP，受限应用协议</li><li>coaxial cable，同轴电缆</li><li>COBIT，信息和相关技术的控制目标，Control Objectives for Information and Related Technology<sup>4</sup></li><li>CoC，更改开销（Cost of Change）</li><li>code smell，代码味道</li><li>COLA，整洁面向对象分层架构，Clean Object-oriented and Layered Architecture</li><li>Collapse Hierarchy，折叠继承关系<sup>1</sup></li><li>comcurrency，并发</li><li>command，命令</li><li>command prompt，命令行提示</li><li>Command/Query Responsibility Segregation，命令/查询职责分离（CQRS）</li><li>Command/Query Separation，命令/查询分离（CQS）</li><li>commingled bits，混合的比特</li><li>communication，通信</li><li>community，社区</li><li>committed，已提交（的）</li><li>Common Intermediate Language，公共中间语言</li><li>Common Language Infrastructure，公共语言基础结构（CLI）</li><li>Common Language Runtime，公共语言运行时（CLR）</li><li>Common Language Specification，公共语言规范（CLS）</li><li>Common Type System，公共类型系统（CTS）</li><li>common name，通用名称</li><li>compatibility，兼容性</li><li>Competing Consumer pattern，消费者竞争模式<sup>4</sup></li><li>Component Object Model，组件对象模型（COM）</li><li>Composability，组合性</li><li>composite formatting，复合格式化</li><li>Composite Pattern，复合模式</li><li>concurrency conflicts，并发冲突</li><li>concurrency mode，并发模式</li><li>conditional compilation，条件编译</li><li>conditional compilation statement，条件编译语句</li><li>configuration，配置，设置</li><li>connection string，连接字符串</li><li>Consolidate Conditional Expression，合并条件表达式<sup>1</sup></li><li>Consolidate Duplicate Conditional Fragments，合并重复的条件片段<sup>1</sup></li><li>consistenct，一致性</li><li>constructor，构造函数</li><li>container，容器</li><li>Container As A Service，容器即服务（CaaS）<sup>4</sup></li><li>content，内容</li><li>context，上下文</li><li>context map, 上下文映射图，上下文地图 <sup>5</sup></li><li>Context Mapping，上下文映射 <sup>5</sup></li><li>contextual keyword，上下文关键字</li><li>continuous integration，持续集成</li><li>contribute，贡献</li><li>Contributor License Agreement，贡献者许可协议</li><li>convention，约定</li><li>covariance，协变</li><li>contravariance，逆变</li><li>convert，转换</li><li>Convert Procedural Design to Objects，将过程化设计转化为对象设计<sup>1</sup></li><li>cookie，Cookie</li><li>copy-on-write，写时复制</li><li>core，内核；.NET Core 的简写（能且仅能与 .NET Framework 的简写 <code>nfx</code> 同时出现，作如 <code>nfx/core</code>，单独使用时应为全称 <code>.NET Core</code>）</li><li>core domain，核心领域</li><li>corruption，损毁</li><li>Cosmetic issue，外观上问题</li><li>Cost of Change，更改开销（CoC）</li><li>COTS，现成的商业软件（Commercial Off-The Shelf）<sup>4</sup></li><li>counterpoint，对位<sup>4</sup></li><li>Coupling count，耦合数：当一个方法被调用时传给它以及从它传出来的值的数目。如果该方法没有返回值，则耦合数就是它的参数数目。否则就是参数数目加 1。如果你想要在没有测试的情况下提取出一个消防法的话，计算一下它的耦合数是很有意义的。</li><li>CPU，中央处理器（Central Processing Unit）</li><li>CQRS，命令查询职责分离（Command-Query Responsibility Segregation）</li><li>crash，（程序）崩溃</li><li>crash dump，故障转储</li><li>CRC，类-职责-交互（class-responsibility-collaboration）<sup>4</sup></li><li>credential，凭证<sup>4</sup></li><li>cririque，评估</li><li>CRM，客户关系管理（Customer Relationship Management）</li><li>Cross Domain，跨域</li><li>Cross-browser ，跨浏览器</li><li>Cross-platform ，跨平台</li><li>Cross-Functuinal Requirement，跨功能需求（CFR）<sup>4</sup></li><li>CRT，cathode ray tube，阴极射线管</li><li>cruft，残留</li><li>crytography，密码术</li><li>CTS，公共类型系统（Common Type System）</li><li>cursor，光标</li><li>Customizability，可定制性</li><li>cybraian，电脑族</li><li>cyberspace，电脑空间</li><li>cycle time，周期时间</li><li>cyclic digraph，有向有环图</li><li>Cyclic Hierarchy，循环层次结构<sup>2</sup></li><li>Cyclically-dependent Modularization，循环依赖式模块化<sup>2</sup></li><li>Cyclomatic complexity，圈复杂度</li></ul><h2 id="D">D</h2><ul><li>dashboard，仪表盘</li><li>data access layer，数据访问层</li><li>Data Storage as a Service，数据存储即服务（DaaS）</li><li>data clumps，数据泥团<sup>2</sup></li><li>Data Encryption Standard，数据加密标准（DES）</li><li>data layer，数据层</li><li>data integrity，数据完整性</li><li>data invariant，数据不变式</li><li>data mining，数据挖掘</li><li>data pump，数据泵</li><li>Data Transfer Object，数据传输对象（DTO）</li><li>declarative programming，宣告式编程</li><li>Decompose Conditional，分解条件表达式<sup>1</sup></li><li>Decorator Pattern，修饰器模式（DP）</li><li>Deep Hierarchy，过深的层次结构<sup>2</sup></li><li>Default Literal，默认常值</li><li>Defensive Programming，防御式编程</li><li>Deficient Encapsulation，不充分的封装<sup>2</sup></li><li>Definition of Done，完成的定义（DoD）</li><li>denial-of-service attacks，拒绝服务攻击<sup>4</sup></li><li>dependenct injection，依赖注入（DI）</li><li>dependency，依赖</li><li>dependency digraph，依赖有向图</li><li>deployment，部署</li><li>dequeue，出列</li><li>derives from，继承</li><li>design pattern，设计模式</li><li>Design Requirements Document，交互设计说明文档（DRD）</li><li>device，设备</li><li>DfT，为可测试性而设计</li><li>DI，依赖注入（dependenct injection）</li><li>diagnostics，诊断</li><li>directed graph，有向图</li><li>directive，指令</li><li>DiRT，灾难恢复测试（Disaster Recovery Test）<sup>4</sup></li><li>discussion forum，论坛</li><li>disk，磁盘</li><li>distributed system，分布式系统</li><li>DLL，动态链接库（Dynamic Link Library）</li><li>DNS，域名系统（Domain Name System）</li><li>Document Object Model，文档对象模型（DOM）</li><li>domain-driven design，领域驱动设计（DDD）</li><li>Domain Event，领域事件</li><li>Domain Model，领域模型</li><li>Domain Name System，域名系统（DNS）</li><li>Domain Service，领域服务</li><li>Domain Specific Language，领域特定语言（DSL）</li><li>DRD，交互设计说明文档（Design Requirements Document）</li><li>DRY 原则，不自我重复原则（Don’t Repeat Yourself），“不要重复你自己<sup>3</sup>”</li><li>duck-typing，鸭子类型</li><li>duck test，鸭子测试</li><li>dummy function，虚构函数</li><li>dump，转储</li><li>Duplicate Abstraction，重复的抽象<sup>2</sup></li><li>Duplicate Observed Data，复制“被监视数据”<sup>1</sup></li><li>durability，持久性</li><li>Dynamic Link Library，动态链接库（DLL）</li></ul><h2 id="E">E</h2><ul><li>EAP，早期评估版本（Early Assessment Program）</li><li>EAP，基于事件的异步模式（Event-based Asynchronous Pattern）</li><li>Early Assessment Program，早期评估版本（EAP）</li><li>effect sketch，影响草图</li><li>Egress，流出</li><li>elasticity，弹性</li><li>ELBs，弹性负载均衡器（Elastic Load Balancers）<sup>4</sup></li><li>Element (XML)，元素</li><li>Encapsulate Collection，封装集合<sup>1</sup></li><li>Encapsulate Downset，封装向下转型<sup>1</sup></li><li>Encapsulate Field，封装字段<sup>1</sup></li><li>endpoint，端点</li><li>enqueue，入列；加入队列</li><li>Enterprise Resource Planning，企业资源计划（ERP）</li><li>entity，实体</li><li>Entity Tags，实体标签（ETag）</li><li>entourage anti-pattern，随从反模式</li><li>erosion，侵蚀</li><li>Event-based Asynchronous Pattern，基于事件的异步模式（EAP）</li><li>event data pump，时间数据泵<sup>4</sup></li><li>event sourcing，事件源</li><li>Evolvability，可进化性</li><li>exception handling，异常处理</li><li>Exclusive OR，异或（XOR）</li><li>explanatory figures，图示</li><li>Extensible Markup Language，可扩展标记语言（XML）</li><li>Extensibility，可扩展性</li><li>extra large，特大型</li><li>extra small，特小型</li><li>Extract Class，提炼类<sup>1</sup></li><li>Extract Hierarchy，提炼继承体系<sup>1</sup></li><li>Extract Inerface，提炼接口<sup>1</sup></li><li>Extract Method，提炼函数<sup>1</sup></li><li>Extract Subclass，提炼子类<sup>1</sup></li><li>Extract Superclass，提炼超类<sup>1</sup></li><li>eXtreme Programming，极限编程（XP）</li></ul><h2 id="F">F</h2><ul><li>failover，容错转移</li><li>failure domain，故障域</li><li>fake object，伪对象：在测试中伪装成一个类的合作者的对象</li><li>fan-in，扇入</li><li>fan-out，扇出</li><li>fat client，胖客户端</li><li>FCL，.NET Framework 类库（Framework Class Library）</li><li>FDD，软盘（Floopy Disk Drive）</li><li>feature sketch，特性草图</li><li>feed，聚合（资源聚合）</li><li>first-party，第一方</li><li>Floopy Disk Drive，软盘（FDD）</li><li>follow up，跟进</li><li>foreign key，外键</li><li>Form Template Method，塑造模板函数<sup>1</sup></li><li>format item，格式项</li><li>format string，格式字符串</li><li>forward，转发</li><li>FPP，零售版（Full Packaged Product）</li><li>Framework Class Library，.NET Framework 类库（FCL）</li><li>FRD，功能需求文档（Functional Requirements Document）</li><li>free，免费</li><li>free function，自由函数：一个不属于任何类的函数。在 C 和其他过程式语言中，自由函数被简单地称为函数；在 C++ 中被称为非成员函数。在 Java 和 C# 中没有自由函数。</li><li>Functional Requirements Document，功能需求文档（FRD）</li><li>full-duplex，全双工</li><li>Full Packaged Product，零售版（FPP）</li></ul><h2 id="G">G</h2><ul><li>Garbage Collection，垃圾回收器（GC）</li><li>gauge，计量表<sup>4</sup></li><li>GC Heap，垃圾回收堆</li><li>GC root，GC 根对象</li><li>Generalized Async，通用异步</li><li>Generalized Async Return，通用异步返回（C# 7.0）</li><li>generalizing specialist，全科专家（敏捷开发术语）</li><li>generator，生成器</li><li>Geo-Replication，地域复制</li><li>Geo Redundant，地域冗余</li><li>Global Assembly Cache，全局程序集缓存（GAC）</li><li>global state，全局状态</li><li>Goal Directed Design，目标导向设计，旨在处理并满足用户目标和动机，包含产品目标和用户目标</li><li>Graphical User Interface，图像用户界面设计（GUI），是一种结合计算机科学、美学、心理学、行为学、及各商业领域需求分析的人机系统工程，强调人、机、环境三者作为一个系统进行总体设计。</li><li>GUI，图像用户界面设计（Graphical User Interface）</li></ul><h2 id="H">H</h2><ul><li>Hackable，修改方便（根据《Web API 设计与开发》一书之翻译）</li><li>HAL，超文本应用程序语言（Hypertext Application Language）<sup>4</sup></li><li>handle，句柄</li><li>Hard Disk Drive，硬盘（HDD）</li><li>HATEOAS，超媒体作为程序状态的引擎（Hypermedia As The Engine Of Application State）<sup>4</sup></li><li>HCI，人机交互（Human-Computer Interaction），属于研究层面，是人与计算机之间传递、交换信息的媒介和对话接口，是计算机系统的重要组成部分。</li><li>HDD，硬盘（Hard Disk Drive）</li><li>header，头；标头；表头</li><li>Hexagonal Architecture，六边形架构<sup>4</sup>，由 Alistair Cockburn 提出</li><li>HMAC，基于哈希的小系列码（Hash-based Message Authentication）<sup>4</sup></li><li>Hide Delegate，隐藏“委托关系”<sup>1</sup></li><li>Hide Method，隐藏函数<sup>1</sup></li><li>High Avaliability，高可用性</li><li>High Fidelity Prototype，高保真原型，细节都比较详细的原型</li><li>high surrogate，高位代理项</li><li>Homogeneous，同质化</li><li>hook，钩子</li><li>hook point，挂接点</li><li>Horizontal Scale，水平缩放</li><li>Hosting，宿主</li><li>Hub-like Modularization，轮毂式模块化<sup>2</sup></li><li>HUI，手持设备用户界面，包括手机端和车载导航等（Handset User Interface）</li><li>Human-Computer Interaction，人机交互（HCI）</li><li>Humane Registry，人文注册表（由 Martin Fowler 提出）<sup>4</sup></li><li>Hybrid Cloud，混合云</li><li>hypertext-driven，超文本驱动</li><li>HyperText Markup Language，超文本标记语言（HTML）</li></ul><h2 id="I">I</h2><ul><li>IA，信息架构（Information Architect）；</li><li>Iaas，设施即服务（Infrastructure as a Service）</li><li>Idempotence，幂等性</li><li>Idempotent Operation，幂等操作</li><li>Identity Provider，身份提供方</li><li>IL，中间语言（intermediate language）</li><li>Illegitimate Injection，非法注入</li><li>IM，即时通讯（Instant Messaging）</li><li>image，映像</li><li>immersion approach，沉浸法</li><li>Imperative Abstraction，命令式抽象<sup>2</sup></li><li>Incomplete Abstraction，不完整的抽象<sup>2</sup></li><li>index，索引</li><li>Information Architect，信息架构（IA）</li><li>Infrastructure as a Service，设施即服务（Iaas）</li><li>ingesting，摄取</li><li>ingress，流入</li><li>Inline Class，将类内联化<sup>1</sup></li><li>Inline Method，内联函数<sup>1</sup></li><li>Inline Temp，内联临时变量<sup>1</sup></li><li>input endpoint，输入端点</li><li>instance，实例</li><li>Instance InputEndpoint，实例输入端点</li><li>Instant Messaging，即时通讯（IM）</li><li>instantiation，实例化</li><li>Insufficient Modularization，不充分的模块化<sup>2</sup></li><li>Interaction-based testing，基于交互的测试</li><li>Intercept，截取</li><li>interception point，拦截点：可以编写测试来感知某些条件的地方</li><li>intermediate language，中间语言（IL）</li><li>Internal Endpoint，内部端点</li><li>Internet Information Service，Internet 信息服务（IIS）</li><li>Internet Protocol，互联网协议（IP）</li><li>Introduce Assertion，引入断言<sup>1</sup></li><li>Introduce Explaining Variable，引入解释性变量<sup>1</sup></li><li>Introduce Foreign Method，引入外加函数<sup>1</sup></li><li>Introduce Local Extension，引入本地扩展<sup>1</sup></li><li>Introduce Null Object，引入 Null 对象<sup>1</sup></li><li>Introduce Parameter Object，引入参数对象<sup>1</sup></li><li>Intrusion Detection Systems，入侵检测系统（IDS）<sup>4</sup></li><li>Intrusion Prevention Systems，入侵预防系统（IPS）<sup>4</sup></li><li>Inversion of Control，控制反转（IoC）</li><li>Isolation，隔离性</li><li>isomorphism，同构（数学领域专用术语）</li><li>iterable，可迭代的</li><li>iteration，迭代</li><li>iterator，迭代器</li><li>iterator protocol，迭代器协议</li></ul><h2 id="J">J</h2><ul><li>Job，作业</li><li>Job Description，岗位描述（JD）</li><li>JOSE，JSON 对象签名和加密</li><li>Json Web Token，JSON Web 令牌<sup>4</sup></li><li>just-in-time compilation，即时编译，JIT 编译</li><li>JVM，Java 虚拟机（Java Virtual Machine）</li></ul><h2 id="K">K</h2><ul><li>Key，密钥</li><li>key-event notification，键事件通知</li><li>Key Opinion Leader，关键意见领袖（KOL），俗称大 V</li><li>Key Performance Indicator，关键绩效考核指标（KPI）</li><li>Key Space，键空间</li><li>key-space notification，键空间通知</li><li>Key-Value Pair，键-值对</li><li>KISS 原则，保持简单原则（Keep It Simple Silly），“简单是一切之本<sup>3</sup>”</li><li>KPI，关键绩效考核指标（Key Performance Indicator）</li></ul><h2 id="L">L</h2><ul><li>Language Integrated Query，语言集成查询（LINQ）</li><li>Large，大型</li><li>Layered Architecture，分层架构</li><li>LDAP，Lightweight Directory Access Protocol，轻型目录访问协议</li><li>Leaky Encapsulation，泄露的封装<sup>2</sup></li><li>Legacy system，遗留系统</li><li>license，许可证</li><li>lifetime，生命周期</li><li>Lightweight Directory Access Protocol，轻量级目录访问协议（LDAP）<sup>4</sup></li><li>LINE of Business，业务线（LOB）<sup>4</sup></li><li>link，链接</li><li>link seam，连接期接缝：在连接期接缝处，可以通过连接到另一个库来替换行为。在编译型语言中可替换的东西包括产品库、DLL、程序集或 JAR 文件。其目的是为了解除依赖，或感知某些在测试期间可有能会发生的条件。</li><li>linked resource，链接的资源</li><li>Liskov Substitution Principle，里氏替换原则（LSP）</li><li>literal，字面量、文字常量、直接量</li><li>living style guides，活样式指导<sup>4</sup></li><li>load-balancing，负载平衡</li><li>load balancer，负载平衡器</li><li>load factor，负载因子</li><li>load shedding，减载<sup>4</sup></li><li>LOC，代码行数</li><li>Local Function，局部函数</li><li>lock-step release，同步发布<sup>4</sup></li><li>log，日志</li><li>loop，自循环</li><li>loose coupling，松散耦合</li><li>Low Fidelity Prototype，低保真原型，抽象原型视图</li><li>low surrogate，低位代理项</li><li>LSUD，大批你所不知道的开发人员（Large Set of Unknown Developers）</li></ul><h2 id="M">M</h2><ul><li>Mainframe，主机</li><li>Maintainability，可维护性</li><li>managed code，托管代码</li><li>managed execution，托管执行</li><li>Man-In-The-Middle Attack，中间人攻击（MITM 攻击）</li><li>Management Key，管理密钥</li><li>manifest，清单</li><li>map，映射</li><li>Market Requirement Document，市场需求文档（MRD）</li><li>Massive Multiplayer Online Role-Playing Game，大型多人在线角色扮演游戏（MMORPG）</li><li>Massively Multiplayer Online Role-Playing Game，大型多人在线角色扮演游戏（MMORPG）</li><li>Mathematical Markup Language，数学标记语言（MathML）</li><li>Mean Time Between Failures，平均故障时间间隔（MTBF）<sup>4</sup></li><li>Mean Time To Repair，平均修复时间（MTTR）<sup>4</sup></li><li>Media Service，媒体服务</li><li>Medium，中型</li><li>Merge，合并</li><li>Metadata，元数据</li><li>Middleware，中间件</li><li>mind map，思维导图、脑图、心智图</li><li>Minimum Marketable Feature，最小可售特性（MMF）</li><li>Minimum Viable Product，最小化可行产品（MVP）</li><li>Minimum Viable Release，最小可行发布（MVR）</li><li>Missing Abstraction，缺失抽象<sup>2</sup></li><li>Missing Encapsulation，缺失的封装<sup>2</sup></li><li>Missing Hierarchy，缺失层次结构<sup>2</sup></li><li>Mixed Reality，混合现实（MR）</li><li>Mobile Service，移动服务</li><li>Mock Object，模拟对象，仿对象：在内部对条件进行断言的伪对象</li><li>Move Field，搬移字段<sup>1</sup></li><li>Move Method，搬移函数<sup>1</sup></li><li>MRD，市场需求文档（Market Requirement Document）</li><li>Multitenancy，多租户</li><li>Multifaced Abstraction，多方面抽象<sup>2</sup></li><li>Multipath Hierarchy，多路径层次结构<sup>2</sup></li><li>Multitier Architecture，多层体系结构</li><li>Multi-factor Authentication，多重验证</li></ul><h2 id="N">N</h2><ul><li>Namespace，命名空间，名称空间</li><li>native code，本机代码</li><li>NCC，.NET Core 社区（.NET Core Community）/.NET 中国社区（.NET China Community）</li><li>Near Field Communication，近距离无线通信（NFC）</li><li>network hops，网络跳数</li><li>NFC，近距离无线通信（Near Field Communication）</li><li>nfx，.NET Framework（.NET 框架）</li><li>Non-clustered Index，非聚集索引</li><li>non-transactional pipeline，非事务型流水线</li><li>node，节点</li><li>normalize，规格化</li><li>notification，通知</li><li>notification hub，通知中心</li><li>null-coalescing，空值合并</li><li>N-Tier，N 层（结构）</li></ul><h2 id="O">O</h2><ul><li>obfuscator，混淆器</li><li>Object/Relational Mapper，对象/关系映射器（ORM，O/RM）</li><li>object seam，对象接缝：在对象连接处可以通过替换一个对象为另一个对象来“更替”行为。在面向对象语言中，通常通过子类化产品代码中的类并重写其方法来实现这一点。</li><li>Objectives and Key Results，目标与关键成果法（OKR）</li><li>On-demand (media)，点播（媒体）</li><li>Once and Only Once，一次且仅一次<sup>3</sup>(OAOO)</li><li>One rule, one place，一个规则，实现一次</li><li>One-Size-Fits-All，OSFA</li><li>one-time token，一次性令牌</li><li>Onion Architecture，洋葱架构，由 Jeffrey Palermo 提出</li><li>Open Closed Principle，开闭原则（OCP）</li><li>Open System Interconnection，开放式系统互联（OSI）</li><li>Operating System，操作系统（OS）</li><li>Optical Character Recognition，光学字符识别（OCR）</li><li>Optimistic Concurrency，乐观并发控制</li><li>optimistic locking，乐观锁</li><li>orchestration，编排</li><li>Orchestration Layer，策略编排层</li><li>Ordering Principal，良序原则</li><li>OS，操作系统（Operating System）</li><li>OSGI，开放服务网关协议（Open Source Gateway Initiative）<sup>4</sup></li><li>overriding，重写</li><li>Overview，概览</li><li>over-post，过度提交</li><li>OWASP，开放式 Web 应用程序安全项目（Open Web Application Security Project）<sup>4</sup></li></ul><h2 id="P">P</h2><ul><li>P2P，个人对个人（Person-to-Person）</li><li>Paas，平台即服务（Platform As A Service）</li><li>packet sniffing，分组嗅探</li><li>Page Blob，页 BLOB</li><li>Parameterize Method，令函数携带参数<sup>1</sup></li><li>partition，分区</li><li>partition tolerabce，分区容忍性<sup>4</sup></li><li>PascalCase，Pascal 大小写</li><li>pass-through，直托</li><li>passive，被动（的）</li><li>pattern，模式</li><li>Pay as You Go，即用即付</li><li>PC，个人计算机（Personal Computer）</li><li>peek，查看</li><li>peering rules，对等交互规则<sup>4</sup></li><li>Percent Encoding，百分号编码</li><li>performance，性能</li><li>performance counter，性能计数器</li><li>Person-to-Person，个人对个人（P2P）</li><li>Personal Computer，个人计算机（PC）</li><li>Pessimistic Concurrency，悲观并发控制</li><li>pessimistic locking，悲观锁</li><li>PHAME，由 Booch 提出的对象模型的 4 个主要元素的设计规则的统称，即 Principle of Hierarchy, Abstraction, Modularization, and Encapsulation，层次结构、抽象、模块化与封装原则</li><li>pinch point，汇点：影响结构图中的隘口和交通要冲，在汇点编写测试的好处就是只需针对少数几个方法编写测试，就能达到探测大量其他方法的改动的目的。</li><li>placeholder，占位符</li><li>Platform as a Service，平台即服务（Paas）</li><li>PMD，项目管理文档（Program Managment Document）</li><li>Point-to-Site，点到站点</li><li>polling，轮询</li><li>polymorphism，多态</li><li>polyrot programming，多语言编程</li><li>Poor Man’s Dependency Injection，穷人的依赖注入</li><li>post-initialization，后初始化</li><li>postcondition，后置条件</li><li>PRD，产品需求文档（Product Requirements Document）</li><li>pre-flight request，事先请求</li><li>pre-initialization，预初始化</li><li>Predicate Decorator，谓词修饰器</li><li>precondition，前提，前置条件</li><li>presentation layer，表现层</li><li>Preserve Whole Object，保持对象完整<sup>1</sup></li><li>primary database，主数据库</li><li>primary storage，主存储</li><li>primitive obsession，基本类型偏执<sup>2</sup></li><li>principal，主体<sup>4</sup></li><li>private cloud，私有云</li><li>priority queue，优先级队列</li><li>probe，探测器</li><li>process，进程</li><li>producer，生产者</li><li>product backlog，产品积压工作</li><li>Product Owner，产品负责人（PO）</li><li>Product Requirements Document，产品需求文档（PRD）</li><li>production，生产（环境）</li><li>production load，生产负载<sup>4</sup></li><li>Program Managment Document，项目管理文档（PMD）</li><li>programming by difference，差异式编程</li><li>proof of concept，概念验证</li><li>proportional error rate，错误率比例<sup>4</sup></li><li>protected variation，防止变异</li><li>protocol，协议</li><li>prototype，原型</li><li>proxy，代理</li><li>public cloud，公有云</li><li>Pull Up Constructor Body，构造函数本体上移<sup>1</sup></li><li>Pull Up Field，字段上移<sup>1</sup></li><li>Pull Up Method，函数上移<sup>1</sup></li><li>push，推送</li><li>Push Down Field，字段下移<sup>1</sup></li><li>Push Down Method，函数下移<sup>1</sup></li></ul><h2 id="Q">Q</h2><ul><li>quality assurance，质量保证（QA）</li><li>Queue，队列</li><li>Quota，配额</li></ul><h2 id="R">R</h2><ul><li>Rack，机架</li><li>Rapid Application Development，快速应用程序开发（RAD）</li><li>RDBMS，关系型数据库管理系统（Relational Database Management System）</li><li>Reactive extensions，响应式扩展（Rx）<sup>4</sup></li><li>Ready (status)，就绪（状态）</li><li>real-time，即时、实时</li><li>real-time discussions，即时讨论、实时讨论</li><li>Rebellious Hierarchy，叛逆性层次结构<sup>2</sup></li><li>recursion，递归</li><li>Redundancy，冗余</li><li>Redundant，冗余（的）</li><li>Ref Return，应用返回</li><li>Ref Local，局部引用</li><li>Ref Property，引用属性</li><li>Refactor，重构</li><li>region，地域</li><li>reification，具体化</li><li>relay，中继</li><li>Relevancy，适切性</li><li>Reliability，可靠性</li><li>Relying Party，依赖方</li><li>Remove Assignments to Parameters，移除对参数的赋值<sup>1</sup></li><li>Remove Control Flag，移除控制标记<sup>1</sup></li><li>Remove Middle Man，移除中间人<sup>1</sup></li><li>Remove Parameter，移除参数<sup>1</sup></li><li>Remove Setting Method，移除配置函数<sup>1</sup></li><li>Rename Method，函数改名<sup>1</sup></li><li>Replace Array with Object，以对象取代数组<sup>1</sup></li><li>Replace Conditional with Polymorphism，以多态取代条件表达式<sup>1</sup></li><li>Replace Constructor with Factory Method，以工厂函数取代构造函数<sup>1</sup></li><li>Replace Data Value with Object，以对象取代数据值<sup>1</sup></li><li>Replace Delegation with Inheritance，以继承取代委托<sup>1</sup></li><li>Replace Error 　 Code with Exception，以异常取代错误码<sup>1</sup></li><li>Replace Exception with Test，以测试取代异常<sup>1</sup></li><li>Replace Inheritance with Delegation，以委托取代继承<sup>1</sup></li><li>Replace Magic Number with Symbolic Constant，以字面常量取代魔法数<sup>1</sup></li><li>Replace Method with Method Object，以函数对象取代函数<sup>1</sup></li><li>Replace Nested Conditional with Guard Clauses，以卫语句取代嵌套条件表达式<sup>1</sup></li><li>Replace Parameter with Explicit Methods，以明确函数取代参数<sup>1</sup></li><li>Replace Parameter with Methods，以函数取代参数<sup>1</sup></li><li>Replace Record with Data Class，以数据类取代记录<sup>1</sup></li><li>Replace Subclass with Fields，以字段取代子类<sup>1</sup></li><li>Replace Temp with Query，以查询取代临时变量<sup>1</sup></li><li>Replace Type Code with Class，以类取代类型码<sup>1</sup></li><li>Replace Type Code with State/Strategy，以 State/Strategy 取代类型码<sup>1</sup></li><li>Replace Type Code with Subclass，以子类取代类型码<sup>1</sup></li><li>reporting，报表</li><li>Repository，存储库；仓储；仓库；资源库</li><li>REpresentational State Transfer，表述性状态转移、表征性状态传输、具象状态传输（REST）</li><li>request pipeline，请求管道</li><li>Requirements Churn，需求波动</li><li>reserved，专属</li><li>resolution，解析</li><li>Resource-Oriented Architecture，面向资源的架构(ROA)</li><li>Response Group，响应群</li><li>Return on Investment，投资回报（ROI）</li><li>reverse proxy module，反向代理模块</li><li>retail，零售版</li><li>Rich Client，丰富客户端</li><li>Ripple Effect，涟漪效应</li><li>role，角色</li><li>Rolling Upgrade，滚动升级</li><li>round-robin，轮流（分配）；轮叫</li><li>round-tripping，还原；回传；往返，往返切换</li><li>router，路由器</li><li>row，行</li><li>RPC，远程过程调用（Remote Procedure Call）<sup>4</sup></li></ul><h2 id="S">S</h2><ul><li>Saas，软件即服务（Software As A Service）</li><li>salted password hashing，加盐密码哈希<sup>4</sup></li><li>SAN，存储区域网络（Storage Area Network）<sup>4</sup></li><li>SASL，简单认证与安全层</li><li>Scalability，缩放性</li><li>Scalable Vector Graphic，可伸缩矢量图（SVG）</li><li>Scale，缩放</li><li>Scale Out，向外缩放</li><li>Scale Up，向上缩放</li><li>scaling pattern，扩展模式<sup>4</sup></li><li>Schema (database)，架构（数据）</li><li>Schema (xml)，架构（xml）</li><li>Scrum Master，Scrum 主管（SM）</li><li>SDK，软件开发工具箱（Software Development Kits）</li><li>seam，接缝：程序中的一些特殊的点，可以让你无需做任何修改就能达到修改程序行为的目的。</li><li>Search Engine，搜索引擎（SE）</li><li>Search Engine Marketing，搜索引擎营销（SEM）</li><li>Search Engine Optimization，搜索引擎优化（SEO）</li><li>secondary storage，二级存储</li><li>Secure Socket Layer，安全套接层（SSL）</li><li>Security，安全（性）</li><li>Security Development Lifecycle，安全开发生命周期<sup>4</sup></li><li>Security Socket Layer，安全套接层</li><li>Security Token，安全令牌</li><li>Self Encapsulate Field，自封装字段<sup>1</sup></li><li>self-hosted，自管理主机<sup>4</sup></li><li>Self-signed Certificate，自签名证书</li><li>semantic monitoring，语义监控<sup>4</sup></li><li>Semantic Versioning，语义化版本控制</li><li>Seqarate Domain from Presentation，将领域和表述/显示分离<sup>1</sup></li><li>Seqarate Query from Modifier，将查询函数和修改函数分离<sup>1</sup></li><li>Serializable，可序列化</li><li>Server Affinity，服务器绑定</li><li>Server Driven Content Negotiation，服务器驱动的内容协商</li><li>Server Side Render，服务器渲染（SSR）</li><li>Service Bus，服务总线</li><li>Service Contract，服务合同</li><li>Service Level Agreement，服务水平协议（SLA）</li><li>Service Provider，服务提供方</li><li>session jacking，会话劫持</li><li>Setting，设置</li><li>Shared，共享；分享</li><li>shared-memory data structure，共享内存数据结构</li><li>Sign in，登录</li><li>Sign out，注销</li><li>Signature，签名</li><li>Single Level of Abstraction Principle，单一抽象层次原则（SLAP）</li><li>Single responsibility principle，单一职责原则（SRP）</li><li>Single Page Application，单页面应用（SPA）</li><li>single point of failure，单一故障点（SPOF）</li><li>Singleton Pattern，单例模式</li><li>Site，站点</li><li>Site-to-Site，站点到站点</li><li>skip list，跳跃表</li><li>SLA，服务水平协议、服务等级协议（Service Level Agreement）</li><li>Small，小型</li><li>smart endpoint，智能端点<sup>4</sup></li><li>snapshot，快照</li><li>SOA，面向服务的架构（Service-Oriented Architecture）</li><li>Software as a Service，软件即服务（Saas）</li><li>source lines of code，源代码行数（SLOC）</li><li>Speculative Hierarchy，凭空想象的层次结构<sup>2</sup></li><li>Split Temporary Variable，分解临时变量<sup>1</sup></li><li>sprint，冲刺（敏捷开发术语）</li><li>sprint backlog，冲刺积压工作</li><li>SQL Database，SQL 数据库</li><li>SSKD，少量你所知道的开发人员（Small Set of Known Developers）</li><li>SSO，单点登录（Single Sign-On）<sup>4</sup></li><li>stage，阶段</li><li>Staging，过渡（环境）</li><li>state indeterminism，状态不确定性</li><li>State-based testing，基于状态的测试</li><li>Stateless，无状态</li><li>Sticky Session，黏性会话</li><li>Stickyness，黏性；黏度</li><li>story，故事（敏捷开发术语）</li><li>Storage，存储</li><li>Storage Account，存储账户</li><li>Strangler Application Pattern，绞杀者模式<sup>4</sup></li><li>strategic development tools，战略设计工具 <sup>5</sup>，战略开发工具</li><li>Stream，流</li><li>structure，结构</li><li>Structured Systems Analysis and Design Methodology，结构化系统分析和设计方法（SSADM）</li><li>Subnet，子网</li><li>Subordinate，附属</li><li>Sub-region，子地域</li><li>Subdomain，子领域</li><li>Subscription，订阅</li><li>Substitute Algorithm，替换算法<sup>1</sup></li><li>SW，Apache SkyWalking 的简写</li><li>symbol table，符号表</li><li>Synchronized Multimedia Integration Language，同步多媒体集成语言（SMIL）</li><li>syntactic sugar，语法糖</li><li>System Under Test，测试目标系统（SUT）</li></ul><h2 id="T">T</h2><ul><li>Table，表</li><li>tactical development tools，战术实施工具 <sup>5</sup>，战术开发工具</li><li>TAP, ，基于任务的异步模式</li><li>targeted testing，目标测试</li><li>Task-based Asynchronous Pattern，基于任务的异步模式</li><li>TCP，传输控制协议（Transmission Control Protocol）</li><li>TDD,测试驱动开发（Test-Driven Development）</li><li>Tease Apart Inheritance，梳理并分解继承体系<sup>1</sup></li><li>technical bankruptcy，技术破产</li><li>Technical Debt，技术债务（TDBT）</li><li>Template Method pattern，模板方法模式</li><li>Tenant，租户</li><li>Terminus，端点</li><li>test doubles，测试替身</li><li>Test-Driven Development，测试驱动开发（TDD）</li><li>test harness，测试用具</li><li>the normalization of deviance，异常正常化<sup>4</sup></li><li>Thin Client，瘦客户端</li><li>Thread，线程</li><li>Thread Environment Block，线程环境块</li><li>Thread Kernel Object，线程内核对象</li><li>Thread Pool，线程池</li><li>Thread Starvation，线程饥荒</li><li>Throttle，节流；限速</li><li>Timestamp，时间戳</li><li>Throughput，吞吐量</li><li>TNP，交通网络提供者（Transportation Network Providers）</li><li>TOFU，首次使用时信任（Trust On First Use）</li><li>Topic，主题</li><li>Topology，拓扑结构</li><li>Token，令牌</li><li>TPL，任务并行库</li><li>(Code) Tracing，（代码）追踪</li><li>Transaction，事务</li><li>Transaction Script，事务脚本</li><li>Transient Error，瞬时错误</li><li>Transparent Data Encryption，透明数据加密<sup>4</sup></li><li>Transportation Network Providers，交通网络提供者（TNP）</li><li>Type Bloat，类型膨胀</li></ul><h2 id="U">U</h2><ul><li>UAT，用户验收测试（User Acceptance Testing）<sup>4</sup></li><li>Ubiquitous Computing，普存计算</li><li>Ubiquitous Language，统一语言</li><li>UDDI，通用描述、发现与集成服务（Universal Description, Discovery, and Integration）</li><li>UI，用户界面，包括视觉设计、交互设计和用户体验（User Interface）</li><li>Uncommitted，未提交（的）</li><li>Update Domain，更新域</li><li>unbox，拆箱</li><li>under-post，提交不足</li><li>undirected graph，无向图</li><li>Unexploited Encapsulation，未利用封装<sup>2</sup></li><li>Unfactored Hierarchy，未归并的层次结构<sup>2</sup></li><li>Unified Modeling Language，统一建模语言（UML）</li><li>Uniform Interface，统一接口</li><li>Uniform Resource Locator，统一资源定位符（URL）</li><li>unit of work，工作单元</li><li>Unit test，单元测试</li><li>unit test coverage，单元测试覆盖率</li><li>unmanaged code，非托管代码</li><li>unit-testing harnesses，单元测试用例</li><li>Unnecessary Abstract，不必要的抽象<sup>2</sup></li><li>Unnecessary Hierarchy，不必要的层次结构<sup>2</sup></li><li>Unutilized Abstraction，未用的抽象<sup>2</sup></li><li>Usability Review，可用性评估</li><li>User Acceptance Test，接受度测试（UAT）</li><li>User Analysis，用户分析</li><li>User Datagram Protocol，用户数据报协议（UDP）</li><li>User Interface，用户界面，包括视觉设计、交互设计和用户体验（UI）</li><li>User Mode Stack，用户模式栈</li></ul><h2 id="V">V</h2><ul><li>Value Object，值对象</li><li>variant，变体</li><li>Variation Encapsulation Principle，变化封装原则（VEP）</li><li>versionable interaction contract，可以进行版本控制的交互契约</li><li>Vertical Scale，垂直缩放</li><li>VES，虚拟执行系统（Visual Execution System）</li><li>viscosity，粘滞性</li><li>VIP，虚拟 IP（或不译）</li><li>VIP Swap，VIP 交换</li><li>Virtual Execution System，虚拟执行系统（VES）</li><li>Virtual Network，虚拟网络</li><li>Virtual Machine，虚拟机</li><li>Virtual Private Network，虚拟专用网络（VPN），在公用网络上建立专用网络，进行加密通讯，如网关通过对数据包的加密和数据包目标地址的转换实现远程访问。</li><li>Virtual Reality，虚拟现实（VR）</li><li>viscosity，粘稠性</li><li>VLO，团体批量许可证；大量采购授权合约（Volume Licensing for Organizations）</li><li>VOL，团体批量许可证；大量采购授权合约（Volume Licensing for Organizations）</li><li>Volume Licensing for Organizations，团体批量许可证；大量采购授权合约（VOL 或 VLO）</li><li>VPC，虚拟私有云（Virtual Private Cloud）<sup>4</sup></li><li>VPN，虚拟专用网络（Virtual Private Network）</li></ul><h2 id="W">W</h2><ul><li>WCF，Windows 通讯开发平台（Windows Comminication Foundation）</li><li>Weak Generational Hypothesis，弱分代假设</li><li>Wearable Device，可穿戴设备</li><li>Web Role，网站角色</li><li>Web Scraping，网络爬虫</li><li>Web Service，网络服务</li><li>Web Service Definition Language，Web 服务定义语言（WSDL）</li><li>Web Sites，网站</li><li>Weighted Method per Class，类累计圈复杂度（WMC）</li><li>WF，工作流（WIndows Workflow）</li><li>Wide Hierarchy，过宽的层次结构<sup>2</sup></li><li>Windows Comminication Foundation，分布式通信（WCF）</li><li>Windows Internet Name Service，Windows Internet 命名服务（WINS）</li><li>Windows Management Instrumentation，Windows 管理规范（WMI）</li><li>Windows Presentation Foundation，富客户端表示（WPF）</li><li>Windows Workflow，工作流（WF）</li><li>WINS，Windows Internet 命名服务（Windows Internet Name Service）</li><li>WINS Proxy，WINS 代理</li><li>WINS Resource，WINS 资源</li><li>wireless communication，无线通讯</li><li>WMI，Windows 管理规范（Windows Management Instrumentation）</li><li>Worker Role，辅助角色</li><li>Workflow，工作流</li><li>workgroup，工作组</li><li>World Wide Web Consortium，万维网联盟（W3C）</li><li>WPF，富客户端表示（Windows Presentation Foundation）</li><li>writebehind，后写式</li></ul><h2 id="X">X</h2><ul><li>X.509v3 certificate，X.509 证书</li><li>XML，可扩展标记语言（Extensible Markup Language）</li><li>XOR，异或（Exclusive OR）</li><li>XUL，XML 用户界面语言（XML User Interface Language）</li></ul><h2 id="Y">Y</h2><ul><li>YAGNI 原则，不需要原则（You Aren’t Gonna Need It），“你不会用到它<sup>3</sup>”</li></ul><h2 id="Z">Z</h2><ul><li>Zero-downtime Upgrade，零停机升级</li><li>zip disk，压缩磁盘</li><li>zone，区域</li><li>zone list，区域列表</li><li>zone transfer，区域传送</li></ul><h1>注释</h1><p>[1] 重构列表，摘自《重构》一书。</p><p>[2] 坏味道列表，摘自《软件设计重构》一书。</p><p>[3] 摘自《<a href="http://Microsoft.NET">Microsoft.NET</a> 企业级应用架构设计》一书。</p><p>[4] 摘自《微服务设计》一书。</p><p>[5] 摘自《领域驱动设计精粹》一书</p>]]></content>
      
      
      <categories>
          
          <category> 实用知识(杂谈) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载与汇总 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些你应该知道的名词</title>
      <link href="/2022/05/02/%E4%B8%80%E4%BA%9B%E4%BD%A0%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E5%90%8D%E8%AF%8D/"/>
      <url>/2022/05/02/%E4%B8%80%E4%BA%9B%E4%BD%A0%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E5%90%8D%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<p>UML：UML（Unified Modeling Language的缩写）统一建模语言,是用来对软件密集系统进行<a href="https://cloud.tencent.com/solution/dtrr?from=10680">可视化建模</a>的一种语言。</p><p>URL：统一资源定位符（URL，英语UniformResourceLocator的缩写）也被称为网页地址，是因特网上标准的资源的地址。</p><p>URI：Web上可用的每种资源-HTML文档、图像、视频片段、程序等-由一个通用资源标志符（Universal ResourceIdentifier,简称&quot;URI&quot;）进行定位。安卓也是。</p><p>XML：XML（ExtensibleMarkup Language）即可扩展标记语言，它与HTML一样，都是SGML(StandardGeneralized Markup Language,标准通用标记语言)。</p><p>YAML：YAML是&quot;YAMLAin’t Markup Language(YAML不是一种标记语言)&quot;的缩写。</p><p>C/S结构：即Client/Server(客户机/服务器)结构，是大家熟知的软件系统体系结构，通过将任务合理分配到Client端和Server端，降低了系统的通讯开销，需要安装客户端才可进行管理操作。</p><p>B/S结构：B/S（Browser/Server结构）结构即浏览器和服务器结构。</p><p>Aspect-Oriented Programming：面向切面编程（AOP）</p><p>just-in-time compilation：即时编译，JIT 编译</p><p>NFC：近距离无线通信（Near Field Communication）</p><p>SVG：Scalable Vector Graphic，可伸缩矢量图（SVG）</p><p>SDK：软件开发工具箱（Software Development Kits）</p><p>NDK：<code>Native Development Kit</code>，是 <code>Android</code>的一个工具开发包。作用：快速开发<code>C</code>、 <code>C++</code>的动态库，并自动将<code>so</code>和应用一起打包成 <code>APK</code></p><p>JNI：<code>Java Native Interface</code>，即 <code>Java</code>本地接口</p><p><a href="https://blog.csdn.net/carson_ho/article/details/73250163">JNI与NDK</a></p><p>SSL：Secure Socket Layer，安全套接层（SSL）</p><p>SSO：单点登录（Single Sign-On）</p><p>TCP：传输控制协议（Transmission Control Protocol）</p><p>User Datagram Protocol，用户数据报协议（UDP）</p><p>User Interface：用户界面，包括视觉设计、交互设计和用户体验（UI）</p><p>VIP：虚拟 IP（或不译）</p><p>VPN：虚拟专用网络（Virtual Private Network）</p><p>Inversion of Control：控制反转（IoC）</p><p>Internet Protocol：互联网协议（IP）</p><p>Hyper Text Transfer Protocol：超文本传输协议（HTTP）</p><p>Hyper Text Transfer Protocol Secure：超文本传输安全协议（HTTPS）</p><p>File Transfer Protocol：文件传输协议（FTP）</p><p>Content Delivery Network：内容分发网络（CDN）</p><p>Command-Line Interface：命令行界面（CLI）</p><p>Garbage Collector：垃圾回收（GC）</p><p>Secure Shell：  安全外壳协议（远程连接作用）（SSH）</p>]]></content>
      
      
      <categories>
          
          <category> 实用知识(杂谈) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载与汇总 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统实验五-进程互斥</title>
      <link href="/2022/04/30/os-%E5%AE%9E%E9%AA%8C%E4%BA%94/"/>
      <url>/2022/04/30/os-%E5%AE%9E%E9%AA%8C%E4%BA%94/</url>
      
        <content type="html"><![CDATA[<h1>进程互斥实验</h1><p>为了能够体验IPC机制的消息队列的用法，示例程序采用了 <code>Theaker &amp;Brookes</code> 提出的消息传递算法。该算法中有一控制进程，带有3个不同类型的消息信箱，它们分别是：读请求信箱、写请求信箱和操作完成信箱。读者需要<br>访问临界资源时首先要向控制进程发送读请求消息，写者需要访问临界资源时也要先向控制进程发送写请求消息，在得到控制进程的允许消息后方可进入临界区读或写。读或写者在完成对临界资源的访问后还要向控制进程发送操作完成消息。</p><p>控制进程使用一个变量<code>count</code>控制读写者互斥的访问临界资源并<strong>允许写者优先</strong>。 <code>count </code>的初值需要一个比最大读者数还要大的数，本例取值为100。当<code>count</code> 大于0 时说明没有新的读写请求，控制进程接收读写者新的请求，如果收到读者完成消息，对<code>count</code> 的值加1，如果收到写者请求消息，<code>count</code>的值减100，如果收到读者请求消息，对<code>count</code>的值减1。 当<code>count</code>等于0时说明写者正在写，控制进程等待写者完成后再次令<code>count</code> 的值等于100。 当<code>count</code>小于0 时说明读者正在读，控制进程等待读者完成后对<code>count</code> 的值加1。</p><h2 id="Linux系统调用语法">Linux系统调用语法</h2><h3 id="创建消息队列">创建消息队列</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgget</span><span class="params">(<span class="keyword">key_t</span> key,<span class="keyword">int</span> flags)</span></span></span><br></pre></td></tr></table></figure><p><code>key</code> 消息队列的键值,可以为<code>IPC_PRIVATE</code>，也可以用整数指定一个</p><p><code>flags</code> 消息队列权限位。</p><p><code>msgget</code> 调用成功，如果<code>key</code> 用新整数指定，且<code>flags</code> 中设置了<code>IPC_CREAT</code>位，则返回一个新建立的消息队列标识符。 如果指定的整数<code>key</code> 已存在则返回与<code>key</code>关联的标识符。成功返回-1。</p><h3 id="追加一条新消息到消息队列">追加一条新消息到消息队列</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys.msg.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgsnd</span><span class="params">(<span class="keyword">int</span> msqid, struct msgbuf *msgp, <span class="keyword">size_t</span> msgsz, <span class="keyword">int</span> msgflg)</span></span>;</span><br></pre></td></tr></table></figure><p><code>msqid</code> 由消息队列的标识符</p><p><code>msgp</code> 消息缓冲区指针。消息缓冲区结构为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msgbuf</span> &#123;</span></span><br><span class="line"><span class="keyword">long</span> mtype; <span class="comment">/* 消息类型，必须大于０ */</span></span><br><span class="line"><span class="keyword">char</span> mtext[<span class="number">1</span>]; <span class="comment">/* 消息数据，长度应于msgsz 声明的一致*/</span></span><br><span class="line">｝</span><br></pre></td></tr></table></figure><p><code>msgsz</code> 消息数据的长度</p><p><code>msgflg</code> 为０表示阻塞方式，设置<code>IPC_NOWAIT</code>表示非阻塞方式</p><p><code>msgsnd</code>调用成功返回0，不成功返回-1。</p><h3 id="从到消息队列中读出一条新消息">从到消息队列中读出一条新消息</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys.msg.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgrcv</span><span class="params">(<span class="keyword">int</span> msqid, struct msgbuf *msgp, <span class="keyword">size_t</span> msgsz, <span class="keyword">long</span> msgtype, <span class="keyword">int</span> msgflg)</span></span>;</span><br></pre></td></tr></table></figure><p><code>msqid</code> 消息队列的标识符</p><p><code>msgp</code> 消息缓冲区指针。消息缓冲区结构为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msgbuf</span> &#123;</span></span><br><span class="line"><span class="keyword">long</span> mtype; <span class="comment">/* 消息类型，必须大于０ */</span></span><br><span class="line"><span class="keyword">char</span> mtext[<span class="number">1</span>]; <span class="comment">/* 消息数据，长度应于msgsz 声明的一致*/</span></span><br><span class="line">｝</span><br></pre></td></tr></table></figure><p><code>msgsz</code> 消息数据的长度</p><p><code>msgtype</code> 决定从队列中返回哪条消息：</p><ul><li><p><code>=0</code> 返回消息队列中第一条消息</p></li><li><p><code>&gt;0</code> 返回消息队列中等于<code>mtype</code>类型的第一条消息。</p></li><li><p><code>&lt;0</code> 返回 <code>mtype&lt;=type</code>绝对值最小值的第一条消息。</p></li></ul><p><code>msgflg</code> 为０表示阻塞方式，设置<code>IPC_NOWAIT</code>表示非阻塞方式</p><p><code>msgrcv</code>调用成功返回0，不成功返回-1。</p><h3 id="删除消息队列">删除消息队列</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgctl</span><span class="params">(<span class="keyword">int</span> msqid, <span class="keyword">int</span> cmd, struct msqid_ds *buf)</span></span>;</span><br></pre></td></tr></table></figure><p><code>msqid</code> 由消息队列的标识符</p><p><code>cmd</code> 控制命令。常用的有：</p><ul><li><code>IPC_RMID</code> 删除<code>msgid</code>标识的消息队列</li><li><code>IPC_STAT</code> 为非破坏性读，从队列中读出一个<code>msgid_ds</code>结构填充缓冲<code>buf</code></li><li><code>IPC_SET</code> 改变队列的<code>UID，GID</code>，访问模式和最大字节数。</li></ul><p><code>msgctl</code>调用成功返回0，不成功返回-1。</p><h2 id="思路">思路</h2><p>首先，我们对程序要有最基本的构思：一个控制台运行理发师程序，这个程序要创建三个进程（包括最初的父进程）作为三个理发师。另一个控制台运行顾客程序，负责不断产生顾客，同时顾客要满足题目中给定的沙发与等候室的数量要求。</p><p>其次，由于使用消息队列，我们可以这样定义理发师与消费者的行为。</p><p>对于理发师，采用非阻塞的消息队列，如果沙发申请的消息队列中能收到消息，说明有顾客来理发了，理发师向沙发回应的队列中发送消息，释放一个沙发位置，相当于为该坐在沙发上的顾客理发，并互斥地完成结账。</p><p>对于顾客，逻辑就要更复杂一些。首先，我们要进行判断，如果沙发上就坐的人数少于4个，那么由于我们要保证等候室的顾客先占用沙发的位置，就需要先看等候室人数是否为0，不为0则将一个等候室中的顾客调入沙发（向等候室回应的消息队列发送消息），为0就说明店内总人数还没有将沙发坐满，优先进入沙发的位置，但无论等候室人数多少，都会向沙发申请的队列发送消息。当沙发上坐满四个人，我们就让顾客去等候室等待（向等候室申请的消息队列发送消息），再否则，阻塞掉当前生产顾客的进程，认为顾客不再进入理发店。</p><p>其次，在上述判断之外，我们还需要添加沙发回应和等候室回应两个消息队列中消息的处理方法，其实就是没接受到一个回应，就将相应位置的人数减一。</p><h2 id="代码">代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ipc.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFSZ   256</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVAL   100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STRSIZ   8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WRITERQUEST  1 <span class="comment">//写请求标识</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> READERQUEST  2 <span class="comment">//读请求标识</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FINISHED  3 <span class="comment">//读写完成标识</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*信号灯控制用的共同体*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> <span class="title">semuns</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    &#125; Sem_uns;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 消息结构体*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">msgbuf</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> mtype;</span><br><span class="line">    <span class="keyword">int</span>  mid;</span><br><span class="line">    &#125; Msg_buf;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//信号量</span></span><br><span class="line"><span class="keyword">key_t</span> account_key;</span><br><span class="line"><span class="keyword">int</span> account_sem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sem_val;</span><br><span class="line"><span class="keyword">int</span> sem_flg;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消息队列</span></span><br><span class="line"><span class="keyword">int</span> wait_quest_flg;</span><br><span class="line"><span class="keyword">key_t</span> wait_quest_key;</span><br><span class="line"><span class="keyword">int</span> wait_quest_id;</span><br><span class="line"><span class="keyword">int</span> wait_respond_flg;</span><br><span class="line"><span class="keyword">key_t</span> wait_respond_key;</span><br><span class="line"><span class="keyword">int</span> wait_respond_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sofa_quest_flg;</span><br><span class="line"><span class="keyword">key_t</span> sofa_quest_key;</span><br><span class="line"><span class="keyword">int</span> sofa_quest_id;</span><br><span class="line"><span class="keyword">int</span> sofa_respond_flg;</span><br><span class="line"><span class="keyword">key_t</span> sofa_respond_key;</span><br><span class="line"><span class="keyword">int</span> sofa_respond_id;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_ipc_id</span><span class="params">(<span class="keyword">char</span> *proc_file,<span class="keyword">key_t</span> key)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">set_shm</span><span class="params">(<span class="keyword">key_t</span> shm_key,<span class="keyword">int</span> shm_num,<span class="keyword">int</span> shm_flag)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">set_msq</span><span class="params">(<span class="keyword">key_t</span> msq_key,<span class="keyword">int</span> msq_flag)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">set_sem</span><span class="params">(<span class="keyword">key_t</span> sem_key,<span class="keyword">int</span> sem_val,<span class="keyword">int</span> sem_flag)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> sem_id)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> sem_id)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ipc.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ipc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_ipc_id</span><span class="params">(<span class="keyword">char</span> *proc_file,<span class="keyword">key_t</span> key)</span> </span>&#123;</span><br><span class="line">    FILE *pf;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">char</span> line[BUFSZ],colum[BUFSZ];</span><br><span class="line">    <span class="keyword">if</span>((pf = fopen(proc_file,<span class="string">&quot;r&quot;</span>)) == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;Proc file not open&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    fgets(line, BUFSZ,pf);</span><br><span class="line">    <span class="keyword">while</span>(!feof(pf))&#123;</span><br><span class="line">        i = j = <span class="number">0</span>;</span><br><span class="line">        fgets(line, BUFSZ,pf);</span><br><span class="line">        <span class="keyword">while</span>(line[i] == <span class="string">&#x27; &#x27;</span>) i++;</span><br><span class="line">        <span class="keyword">while</span>(line[i] !=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            colum[j++] = line[i++];</span><br><span class="line">            colum[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(atoi(colum) != key)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(line[i] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">while</span>(line[i] !=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            colum[j++] = line[i++];</span><br><span class="line">        colum[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        i = atoi(colum);</span><br><span class="line">        fclose(pf);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(pf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> sem_id)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">buf</span>;</span></span><br><span class="line">    buf.sem_op = <span class="number">-1</span>;</span><br><span class="line">    buf.sem_num = <span class="number">0</span>;</span><br><span class="line">    buf.sem_flg = SEM_UNDO;</span><br><span class="line">    <span class="keyword">if</span>((semop(sem_id,&amp;buf,<span class="number">1</span>)) &lt;<span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;down error &quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> sem_id)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">buf</span>;</span></span><br><span class="line">    buf.sem_op = <span class="number">1</span>;</span><br><span class="line">    buf.sem_num = <span class="number">0</span>;</span><br><span class="line">    buf.sem_flg = SEM_UNDO;</span><br><span class="line">    <span class="keyword">if</span>((semop(sem_id,&amp;buf,<span class="number">1</span>)) &lt;<span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;up error &quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">set_sem</span><span class="params">(<span class="keyword">key_t</span> sem_key,<span class="keyword">int</span> sem_val,<span class="keyword">int</span> sem_flg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sem_id;  Sem_uns sem_arg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试由 sem_key 标识的信号灯数组是否已经建立</span></span><br><span class="line">    <span class="keyword">if</span>((sem_id = get_ipc_id(<span class="string">&quot;/proc/sysvipc/sem&quot;</span>,sem_key)) &lt; <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="comment">//semget 新建一个信号灯,其标号返回到 sem_id</span></span><br><span class="line">        <span class="keyword">if</span>((sem_id = semget(sem_key,<span class="number">1</span>,sem_flg)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            perror(<span class="string">&quot;semaphore create error&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置信号灯的初值</span></span><br><span class="line">        sem_arg.val = sem_val;</span><br><span class="line">        <span class="keyword">if</span>(semctl(sem_id,<span class="number">0</span>,SETVAL,sem_arg) &lt;<span class="number">0</span>)&#123;</span><br><span class="line">            perror(<span class="string">&quot;semaphore set error&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> sem_id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">set_shm</span><span class="params">(<span class="keyword">key_t</span> shm_key,<span class="keyword">int</span> shm_num,<span class="keyword">int</span> shm_flg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,shm_id;</span><br><span class="line">    <span class="keyword">char</span> * shm_buf;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试由 shm_key 标识的共享内存区是否已经建立</span></span><br><span class="line">    <span class="keyword">if</span>((shm_id = get_ipc_id(<span class="string">&quot;/proc/sysvipc/shm&quot;</span>,shm_key)) &lt; <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="comment">//shmget 新建 一个长度为 shm_num 字节的共享内存,其标号返回到 shm_id</span></span><br><span class="line">        <span class="keyword">if</span>((shm_id = shmget(shm_key,shm_num,shm_flg)) &lt;<span class="number">0</span>)&#123;</span><br><span class="line">            perror(<span class="string">&quot;shareMemory set error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//shmat 将由 shm_id 标识的共享内存附加给指针 shm_buf</span></span><br><span class="line">    <span class="keyword">if</span>((shm_buf = (<span class="keyword">char</span> *)shmat(shm_id,<span class="number">0</span>,<span class="number">0</span>)) &lt; (<span class="keyword">char</span> *)<span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;get shareMemory error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;shm_num; i++) shm_buf[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//初始为 0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//shm_key 标识的共享内存区已经建立,将由 shm_id 标识的共享内存附加给指 针 shm_buf</span></span><br><span class="line">    <span class="keyword">if</span>((shm_buf = (<span class="keyword">char</span> *)shmat(shm_id,<span class="number">0</span>,<span class="number">0</span>)) &lt; (<span class="keyword">char</span> *)<span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;get shareMemory error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> shm_buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">set_msq</span><span class="params">(<span class="keyword">key_t</span> msq_key,<span class="keyword">int</span> msq_flg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> msq_id;</span><br><span class="line">    <span class="comment">//测试由 msq_key 标识的消息队列是否已经建立</span></span><br><span class="line">    <span class="keyword">if</span>((msq_id = get_ipc_id(<span class="string">&quot;/proc/sysvipc/msg&quot;</span>,msq_key)) &lt; <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="comment">//msgget 新建一个消息队列,其标号返回到 msq_id</span></span><br><span class="line">        <span class="keyword">if</span>((msq_id = msgget(msq_key,msq_flg)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            perror(<span class="string">&quot;messageQueue set error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> msq_id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//customer.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ipc.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rate;</span><br><span class="line">    Msg_buf msg_arg;</span><br><span class="line">    msg_arg.mtype = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//可在在命令行第一参数指定一个进程睡眠秒数,以调解进程执行速度</span></span><br><span class="line">    <span class="keyword">if</span>(argv[<span class="number">1</span>] != <span class="literal">NULL</span>) rate = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">else</span> rate = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//联系一个请求消息队列</span></span><br><span class="line">    wait_quest_flg = IPC_CREAT| <span class="number">0644</span>;</span><br><span class="line">    wait_quest_key = <span class="number">401</span>;</span><br><span class="line">    wait_quest_id = set_msq(wait_quest_key,wait_quest_flg);</span><br><span class="line">    <span class="comment">//联系一个响应消息队列</span></span><br><span class="line">    wait_respond_flg = IPC_CREAT| <span class="number">0644</span>;</span><br><span class="line">    wait_respond_key = <span class="number">402</span>;</span><br><span class="line">    wait_respond_id = set_msq(wait_respond_key,wait_respond_flg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//联系一个请求消息队列</span></span><br><span class="line">    sofa_quest_flg = IPC_CREAT| <span class="number">0644</span>;</span><br><span class="line">    sofa_quest_key = <span class="number">501</span>;</span><br><span class="line">    sofa_quest_id = set_msq(sofa_quest_key,sofa_quest_flg);</span><br><span class="line">    <span class="comment">//联系一个响应消息队列</span></span><br><span class="line">    sofa_respond_flg = IPC_CREAT| <span class="number">0644</span>;</span><br><span class="line">    sofa_respond_key = <span class="number">502</span>;</span><br><span class="line">    sofa_respond_id = set_msq(sofa_respond_key,sofa_respond_flg);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sofa_count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> wait_count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = getpid() * <span class="number">100</span>;<span class="comment">//顾客标号</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        sleep(rate);</span><br><span class="line">        i++;</span><br><span class="line">        msg_arg.mid = i;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;sofa 人数 %d,waiting room 人数 %d\n&quot;</span>,sofa_count,wait_count);</span><br><span class="line">        <span class="keyword">if</span>(sofa_count &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(wait_count != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//从等候室向沙发调人</span></span><br><span class="line">                <span class="comment">//阻塞方式接收消息</span></span><br><span class="line">                msgrcv(wait_quest_id, &amp;msg_arg, <span class="keyword">sizeof</span>(msg_arg), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                msgsnd(wait_respond_id, &amp;msg_arg,<span class="keyword">sizeof</span>(msg_arg), <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;customer%d in pid %d move from waiting room to sofa\n&quot;</span>, msg_arg.mid,getpid());</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;customer%d in pid %d sit sofa\n&quot;</span>, i,getpid());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sofa_quest_flg=IPC_NOWAIT;</span><br><span class="line">            msgsnd(sofa_quest_id, &amp;msg_arg, <span class="keyword">sizeof</span>(msg_arg), sofa_quest_flg);</span><br><span class="line">            sofa_count++;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(wait_count &lt; <span class="number">13</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;sofa is full, customer%d in pid %d is waiting in the waiting room\n&quot;</span>, i,getpid());</span><br><span class="line">            wait_quest_flg = IPC_NOWAIT;</span><br><span class="line">            msgsnd(wait_quest_id, &amp;msg_arg, <span class="keyword">sizeof</span>(msg_arg), wait_quest_flg);</span><br><span class="line">            wait_count++;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">&quot;waiting room is full,customer%d in pid %d can&#x27;t get into barber shop\n&quot;</span>, i,getpid());</span><br><span class="line">              <span class="comment">//阻塞掉，不再产生顾客</span></span><br><span class="line">              msgrcv(sofa_respond_id, &amp;msg_arg, <span class="keyword">sizeof</span>(msg_arg), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">              sofa_count--;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        sofa_quest_flg = IPC_NOWAIT;</span><br><span class="line">        <span class="keyword">if</span>(msgrcv(sofa_respond_id, &amp;msg_arg, <span class="keyword">sizeof</span>(msg_arg), <span class="number">0</span>, sofa_quest_flg)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">          sofa_count--;</span><br><span class="line">        &#125;</span><br><span class="line">        wait_quest_flg = IPC_NOWAIT;</span><br><span class="line">        <span class="keyword">if</span>(msgrcv(wait_respond_id, &amp;msg_arg, <span class="keyword">sizeof</span>(msg_arg), <span class="number">0</span>, wait_quest_flg)&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">           wait_count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//barber.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ipc.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//  int i;</span></span><br><span class="line">    <span class="keyword">int</span> rate;</span><br><span class="line">    Msg_buf msg_arg;</span><br><span class="line">    msg_arg.mtype = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//可在在命令行第一参数指定一个进程睡眠秒数,以调解进程执行速度</span></span><br><span class="line">    <span class="keyword">if</span>(argv[<span class="number">1</span>] != <span class="literal">NULL</span>) rate = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">else</span> rate = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//联系一个请求消息队列</span></span><br><span class="line">    sofa_quest_flg = IPC_CREAT| <span class="number">0644</span>;</span><br><span class="line">    sofa_quest_key = <span class="number">501</span>;</span><br><span class="line">    sofa_quest_id = set_msq(sofa_quest_key,sofa_quest_flg);</span><br><span class="line">    <span class="comment">//联系一个响应消息队列</span></span><br><span class="line">    sofa_respond_flg = IPC_CREAT| <span class="number">0644</span>;</span><br><span class="line">    sofa_respond_key = <span class="number">502</span>;</span><br><span class="line">    sofa_respond_id = set_msq(sofa_respond_key,sofa_respond_flg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//信号量使用的变量</span></span><br><span class="line">    account_key = <span class="number">602</span>;<span class="comment">//账簿互斥信号灯键值</span></span><br><span class="line">    sem_flg = IPC_CREAT | <span class="number">0644</span>;</span><br><span class="line">    <span class="comment">//账簿互斥信号灯初值设为 1</span></span><br><span class="line">    sem_val = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//获取账簿互斥信号灯,引用标识存 cons_sem</span></span><br><span class="line">    account_sem = set_sem(account_key,sem_val,sem_flg);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> pid1, pid2;</span><br><span class="line">    pid1=fork();</span><br><span class="line">    <span class="keyword">if</span>(pid1==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">            wait_quest_flg=IPC_NOWAIT;</span><br><span class="line">    sleep(rate);</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span>(msgrcv(sofa_quest_id, &amp;msg_arg, <span class="keyword">sizeof</span>(msg_arg), <span class="number">0</span>, wait_quest_flg)&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">                msgsnd(sofa_respond_id, &amp;msg_arg,<span class="keyword">sizeof</span>(msg_arg), <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d barber is serving for %d customer \n&quot;</span>, getpid(), msg_arg.mid);</span><br><span class="line">                </span><br><span class="line">                down(account_sem);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d barber is collect %d customer&#x27;s money\n&quot;</span>, getpid(), msg_arg.mid);</span><br><span class="line">                up(account_sem);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">&quot;%d barber is sleeping\n&quot;</span>, getpid());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pid2=fork();</span><br><span class="line">        <span class="keyword">if</span>(pid2==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">               wait_quest_flg=IPC_NOWAIT;</span><br><span class="line">sleep(rate);</span><br><span class="line">               <span class="keyword">if</span>(msgrcv(sofa_quest_id, &amp;msg_arg, <span class="keyword">sizeof</span>(msg_arg), <span class="number">0</span>, wait_quest_flg)&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">                    msgsnd(sofa_respond_id, &amp;msg_arg,<span class="keyword">sizeof</span>(msg_arg), <span class="number">0</span>);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d barber is serving for %d customer \n&quot;</span>, getpid(), msg_arg.mid);</span><br><span class="line">                    </span><br><span class="line">                    down(account_sem);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d barber is collect %d customer&#x27;s money\n&quot;</span>, getpid(), msg_arg.mid);</span><br><span class="line">                    up(account_sem);</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d barber is sleeping\n&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">               wait_quest_flg=IPC_NOWAIT;</span><br><span class="line">sleep(rate);</span><br><span class="line">               <span class="keyword">if</span>(msgrcv(sofa_quest_id, &amp;msg_arg, <span class="keyword">sizeof</span>(msg_arg), <span class="number">0</span>, wait_quest_flg)&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">                    msgsnd(sofa_respond_id, &amp;msg_arg,<span class="keyword">sizeof</span>(msg_arg), <span class="number">0</span>);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d barber is serving for %d customer \n&quot;</span>, getpid(), msg_arg.mid);</span><br><span class="line">                    </span><br><span class="line">                    down(account_sem);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d barber is collect %d customer&#x27;s money\n&quot;</span>, getpid(), msg_arg.mid);</span><br><span class="line">                    up(account_sem);</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d barber is sleeping\n&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">hdrs = ipc.h</span><br><span class="line">r_src = barber.c ipc.c</span><br><span class="line">r_obj = barber.o ipc.o</span><br><span class="line">w_src = costumer.c ipc.c</span><br><span class="line">w_obj = costumer.o ipc.o</span><br><span class="line">opts = -g -c</span><br><span class="line"></span><br><span class="line"><span class="section">all: costumer barber</span></span><br><span class="line"></span><br><span class="line"><span class="section">barber: <span class="variable">$(r_obj)</span></span></span><br><span class="line">gcc <span class="variable">$(r_obj)</span> -o barber</span><br><span class="line"></span><br><span class="line"><span class="section">barber.o: <span class="variable">$(r_src)</span> <span class="variable">$(hdrs)</span></span></span><br><span class="line">gcc <span class="variable">$(opts)</span> <span class="variable">$(r_src)</span></span><br><span class="line"></span><br><span class="line"><span class="section">costumer: <span class="variable">$(w_obj)</span></span></span><br><span class="line">gcc <span class="variable">$(w_obj)</span> -o costumer</span><br><span class="line"></span><br><span class="line"><span class="section">costumer.o: <span class="variable">$(w_src)</span> <span class="variable">$(hdrs)</span></span></span><br><span class="line">gcc <span class="variable">$(opts)</span> <span class="variable">$(w_src)</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm barber costumer *.o</span><br></pre></td></tr></table></figure><img src="1.png" style="zoom:60%;" /><img src="2.png" style="zoom:60%;" /><img src="3.png" style="zoom:60%;" /><h2 id="遇到的一些问题与解决方案">遇到的一些问题与解决方案</h2><p>如果发现一个消息一直无法被添加到消息队列，也就是说，<code>msgsnd</code>一直返回<code>-1</code>，可以检查<code>   msg_arg.mtype</code>或者<code>    msg_arg.mid</code>是否进行了赋值。</p><h2 id="一些美中不足">一些美中不足</h2><p>顾客的进程是进程间不安全的，也就是说，没有进行进程间同步。示例实验采用的方案是将读写与控制器分离但在独立实验中这样做显得有些困难。另一种解决方案是将沙发人数与等候室人数放入共享内存，但这样的话，每个顾客生产进程就要涉及到对共享内存内容的初始化，也就是说，我们无法保证共享内存只被初始化一次。</p><p>我想到的一种方案是在共享内存中再加一个判断是否已经初始化的布尔值，来控制初始化次数，但这样的话，我们就必须引入对共享内存的三个不同值的读写的互斥锁，会导致整个代码体系变得更加臃肿。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动互联网开发-二维码接力</title>
      <link href="/2022/04/28/%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91%E5%BC%80%E5%8F%91-%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%8E%A5%E5%8A%9B/"/>
      <url>/2022/04/28/%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91%E5%BC%80%E5%8F%91-%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%8E%A5%E5%8A%9B/</url>
      
        <content type="html"><![CDATA[<h1>问题与采取的策略</h1><h2 id="身份确定问题">身份确定问题</h2><p>如何判断一个人的身份，或者说，唯一地标明一台设备？</p><p>这一点其实很好解决，安卓会给每一台设备提供唯一的ID，我们用这个ID来确认设备身份。</p><h2 id="对原有算法的改进">对原有算法的改进</h2><p>原有算法存在几个问题：首先，设备身份无法确认，这一点我们已经解决过。除此之外还有以下问题：</p><ul><li>我们如何确认一个人已经完成两轮打分，或者说，如何辨别一个人在整个过程中是否出现了只扫一次码的情况？</li><li>原有策略将打分发起者与打分者进行身份上的区分，这种区分是否有必要？或者说，是否可以采取一种策略，让大家在扫描最后完成的二维码后，都能看到打分结果？</li><li>如何自动确认此次打分可以结束？而不是由发起者去手动确认。</li><li>消息传递格式问题</li></ul><h3 id="基本代码流程">基本代码流程</h3><p>首先，定义两个对象：打分过程与个人评分。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mark</span></span>&#123;</span><br><span class="line">  <span class="keyword">late</span> <span class="built_in">double</span> score;</span><br><span class="line">  <span class="keyword">late</span> <span class="built_in">int</span> <span class="built_in">num</span>;<span class="comment">//参与打分的人数</span></span><br><span class="line">  <span class="keyword">late</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; memberList;</span><br><span class="line">  Mark(&#123;<span class="keyword">required</span> <span class="keyword">this</span>.score,<span class="keyword">required</span> <span class="keyword">this</span>.<span class="built_in">num</span>,<span class="keyword">required</span> <span class="keyword">this</span>.memberList&#125;);</span><br><span class="line">  Mark.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json)&#123;</span><br><span class="line">    score = json[<span class="string">&#x27;score&#x27;</span>];</span><br><span class="line">    <span class="built_in">num</span> = json[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="built_in">List</span> list = json[<span class="string">&#x27;memberList&#x27;</span>];</span><br><span class="line">    memberList = list.map((e) =&gt; e.toString()).toList();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="string">&#x27;score&#x27;</span>: score,</span><br><span class="line">      <span class="string">&#x27;num&#x27;</span>: <span class="built_in">num</span>,</span><br><span class="line">      <span class="string">&#x27;memberList&#x27;</span>:memberList</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span></span>&#123;</span><br><span class="line">  <span class="keyword">late</span> <span class="built_in">String</span> id;<span class="comment">//设备id</span></span><br><span class="line">  <span class="keyword">late</span> <span class="built_in">int</span> time;<span class="comment">//打分轮次</span></span><br><span class="line">  <span class="keyword">late</span> <span class="built_in">double</span> value;<span class="comment">//打分值</span></span><br><span class="line">  Member(&#123;<span class="keyword">required</span> <span class="keyword">this</span>.id,<span class="keyword">required</span> <span class="keyword">this</span>.time,<span class="keyword">required</span> <span class="keyword">this</span>.value&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过这两个对象，对整个打分流程进行维护，代码逻辑如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">Future generateCode(BuildContext context,<span class="built_in">String</span> inputNum,<span class="built_in">String</span> source) <span class="keyword">async</span> &#123;</span><br><span class="line">   <span class="keyword">final</span> DeviceInfoPlugin deviceInfoPlugin =  DeviceInfoPlugin();</span><br><span class="line">   <span class="built_in">String?</span> id;</span><br><span class="line">   Mark mark;</span><br><span class="line">   <span class="comment">//获取设备id</span></span><br><span class="line">   <span class="keyword">if</span> (Platform.isAndroid) &#123;</span><br><span class="line">     <span class="keyword">var</span> build = <span class="keyword">await</span> deviceInfoPlugin.androidInfo;</span><br><span class="line">       id = build.androidId;</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Platform.isIOS) &#123;</span><br><span class="line">     <span class="keyword">var</span> data = <span class="keyword">await</span> deviceInfoPlugin.iosInfo;</span><br><span class="line">       id = data.identifierForVendor;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//初始化一次评分</span></span><br><span class="line">   mark = Mark(score: <span class="number">0</span>, <span class="built_in">num</span>: <span class="number">0</span>, memberList: []);</span><br><span class="line">   <span class="keyword">if</span>(source.isNotEmpty) &#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">//扫码有结果，将评分赋值为扫码得到的评分</span></span><br><span class="line">       mark = Mark.fromJson(<span class="keyword">const</span> JsonDecoder().convert(source));</span><br><span class="line">     &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">       Fluttertoast.showToast(msg: <span class="string">&#x27;非法二维码&#x27;</span>);</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(id != <span class="keyword">null</span>)&#123;</span><br><span class="line">     <span class="comment">//初始化个人打分对象</span></span><br><span class="line">     Member member = Member(id: id, time: logic.times.value, value: <span class="built_in">double</span>.parse(inputNum));</span><br><span class="line">     <span class="comment">//自动判断是否需要结束</span></span><br><span class="line">     <span class="keyword">if</span>(_isEnd(mark,member) == Constant().endNormal)&#123;<span class="comment">//正确结束了</span></span><br><span class="line">       <span class="built_in">double</span> score = _getScore(mark);</span><br><span class="line">       logic.isStart.value = <span class="keyword">false</span>;</span><br><span class="line">       Navigator.pop(context);</span><br><span class="line">       Navigator.push(context, MaterialPageRoute(builder: (context) =&gt; EndPage(score: score,)));</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span> <span class="keyword">if</span>(_isEnd(mark,member) == Constant().endError)&#123;<span class="comment">//结束时出现错误</span></span><br><span class="line">       Fluttertoast.showToast(msg: <span class="string">&#x27;结束出错：还有人没有进行第二轮打分&#x27;</span>);</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;<span class="comment">//还没有结束</span></span><br><span class="line">       <span class="keyword">if</span>(_isLegal(mark, member))&#123;<span class="comment">//自动判断此次打分是否合法</span></span><br><span class="line">         mark = _markScore(mark, member);<span class="comment">//打分并保存</span></span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         Fluttertoast.showToast(msg: <span class="string">&#x27;出错：您没有进行第一轮打分&#x27;</span>);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     Fluttertoast.showToast(msg: <span class="string">&quot;设备id获取失败&quot;</span>);</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//将修改完成的打分对象生成二维码</span></span><br><span class="line">   <span class="built_in">String</span> str = <span class="keyword">const</span> JsonEncoder().convert(mark.toJson());</span><br><span class="line">   Uint8List bytes = <span class="keyword">await</span> scanner.generateBarCode(str);</span><br><span class="line">   logic.isStart.value = <span class="keyword">true</span>;</span><br><span class="line">   <span class="keyword">if</span>(logic.times.value == <span class="number">2</span>)&#123;</span><br><span class="line">     Navigator.pop(context);</span><br><span class="line">   &#125;</span><br><span class="line">   Navigator.push(context, MaterialPageRoute(builder: (context) =&gt; QrCodePage(bytes: bytes)));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//进行打分</span></span><br><span class="line"> Mark _markScore(Mark mark,Member member)&#123;</span><br><span class="line">   <span class="comment">// Constant().times++;</span></span><br><span class="line">   logic.times++;</span><br><span class="line">   <span class="keyword">if</span>(member.time == <span class="number">1</span>)&#123;</span><br><span class="line">     mark.score = mark.score+member.value + Constant().s;</span><br><span class="line">     mark.<span class="built_in">num</span>++;</span><br><span class="line">     <span class="comment">//当前设备id加入打分列表</span></span><br><span class="line">     mark.memberList.add(member.id);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     mark.score = mark.score - Constant().s;</span><br><span class="line">     <span class="comment">//将当前设备id移出</span></span><br><span class="line">     mark.memberList.remove(member.id);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> mark;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//要求在输入第二次前必须有第一次的记录</span></span><br><span class="line"> <span class="built_in">bool</span> _isLegal(Mark mark,Member member)&#123;</span><br><span class="line">   <span class="keyword">if</span>(member.time == <span class="number">2</span>)&#123;</span><br><span class="line">     <span class="keyword">if</span>(mark.memberList.contains(member.id))&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;<span class="keyword">else</span> <span class="keyword">if</span>(member.time == <span class="number">1</span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//是否可以正确结束打分</span></span><br><span class="line"> <span class="built_in">int</span> _isEnd(Mark mark,Member member)&#123;</span><br><span class="line">   <span class="keyword">if</span>(logic.times.value == <span class="number">3</span>)&#123;</span><br><span class="line">     <span class="keyword">if</span>(mark.memberList.isEmpty)&#123;</span><br><span class="line">       <span class="keyword">return</span> Constant().endNormal;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> Constant().notEnd;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//获取最终分数</span></span><br><span class="line"> <span class="built_in">double</span> _getScore(Mark mark)&#123;</span><br><span class="line">   <span class="keyword">return</span> mark.score/mark.<span class="built_in">num</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">bool</span> _isNumber(<span class="built_in">String</span> str)&#123;</span><br><span class="line">   <span class="keyword">final</span> reg = <span class="built_in">RegExp</span>(<span class="string">r&#x27;^-?[0-9]+&#x27;</span>);</span><br><span class="line">   <span class="keyword">return</span> reg.hasMatch(str);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>相应的，流程图如下：</p><img src="1.png" style="zoom:50%;" /><p>通过这种方式，我们解决了问题2、3。</p><h3 id="打分轮次问题">打分轮次问题</h3><p>那么，我们如何确认一个人已经完成两轮打分？</p><p>这其实跟我们构造的评分对象有关系，每次合法打分过程中，如果用户是第一次打分，则将用户<code>id</code>添加到<code>Mark</code>对象维护的<code>memberList</code>列表，并将打分人数<code>num</code>加一，并完成对<code>score</code>的修改。如果用户是第二次打分，则将用户<code>id</code>从<code>Mark</code>对象维护的<code>memberList</code>列表中删除，并完成对<code>score</code>的修改即可。如果在第二轮删除时没有发现该用户<code>id</code>，说明该用户没有进行第一轮打分，如果最终在结束时，<code>memberList</code>列表为空，则说明大家都完成了两轮打分，否则就是列表中的设备没有进行第二轮打分。</p><p>这样我们可以保证整个流程的正确性。</p><h3 id="编码格式问题">编码格式问题</h3><p>我们的需求是：方便地将一个对象序列化与反序列化，序列化结果可以用字符串表示（主要是排除掉二进制流），处理效率要足够高。</p><p>那么，显然非<code>JSON</code>莫属。我们对<code>Mark</code>对象定义了序列化与反序列化的方法，从而保证编码与传输上的高效。</p><h1>非核心的小功能</h1><h2 id="图片保存与分享">图片保存与分享</h2><p>主要涉及到的是安卓原生文件的<code>uri</code>与文件路径的转换问题，直接使用了网上现成的解决方案。</p><h1>可以改进之处</h1><h2 id="权限问题">权限问题</h2><p>基于一个现实的场景：公司内部的打分，如何保证我们的二维码不会被泄露到公司外部，或者被某也员工故意泄露以造成 “刷分” 的情况。</p><p>我们可以在<code>Mark</code>中标明某些信息，用于控制该权限。</p><p>比如，如果是公司内部统一采购的移动设备，我们可以保证这些设备有共同的<code>id</code>特征，比如共同的开头。或者，更进一步的，我们可以限制设备<code>id</code>的范围。</p><p>但除此之外，我们可能就需要配置一台服务器，在扫码时请求服务器进行鉴权。当然，服务器的逻辑也是对<code>id</code>进行比对，这样至少可以保证身份信息不被泄露。</p><h2 id="打分记录">打分记录</h2><p>现在的打分都是打完后可视，新一轮打分开始后就会被删除。我们可以将其进行记录（当然，使用服务器记录更好）。同时我们也可以对打分添加标题、时间等信息，方便我们调出打分记录时对此次评分有更清楚的认知。</p><h2 id="其他类型的服务">其他类型的服务</h2><p>我们可以在此基础上拓展其他服务，当然，这很简单。</p><h1>界面展示</h1><p>初始时没有开始评分</p><img src="2.jpg" style="zoom:20%;" /><p>点击加号开始进行评分，点击对号跳转到二维码界面</p><img src="3.jpg" style="zoom:20%;" /><p>该界面用于展示二维码，右上角按钮用于保存图片或分享该二维码</p><img src="4.jpg" style="zoom:20%;" /><img src="5.jpg" style="zoom:20%;" /><p>保存二维码结果如图：</p><img src="8.jpg" style="zoom:20%;" /><p>开始评分后会显示轮次：</p><img src="6.jpg" style="zoom:20%;" /><p>点击右下角按钮可以开启新一轮评分</p><img src="9.jpg" style="zoom:20%;" /><p>完成后会显示结果</p><img src="7.jpg" style="zoom:20%;" /><h1>参考</h1><p><a href="https://zhuanlan.zhihu.com/p/371279823">Flutter 如何获取设备的唯一码</a></p><p><a href="https://pub.flutter-io.cn/packages/image_gallery_saver">https://pub.flutter-io.cn/packages/image_gallery_saver</a></p><p><a href="https://pub.flutter-io.cn/packages/share_plus">https://pub.flutter-io.cn/packages/share_plus</a></p><p><a href="https://pub.flutter-io.cn/packages/qrscan">https://pub.flutter-io.cn/packages/qrscan</a></p><p><a href="https://pub.flutter-io.cn/packages/image_picker">https://pub.flutter-io.cn/packages/image_picker</a></p><p><a href="https://pub.flutter-io.cn/packages/device_info_plus">https://pub.flutter-io.cn/packages/device_info_plus</a></p><p><a href="https://pub.dev/packages/uri_to_file">https://pub.dev/packages/uri_to_file</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动 </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qrMessager项目介绍</title>
      <link href="/2022/04/25/%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91%E5%BC%80%E5%8F%91-qrMessager%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/04/25/%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91%E5%BC%80%E5%8F%91-qrMessager%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1>QRMessager</h1><p>使用二维码在移动端免连接传送文件</p><p>缘起：灵感来源于扫家里WiFi二维码进行连接WiFi的时候头脑中的一个小火花</p><p>针对的问题：不同机型的手机之间如何在不进行蓝牙连接且不依赖网络的情况下进行信息与文件传输</p><p>其实也可以占一个WiFi频道进行局域网构建，但是吧。。。。不太值得，尤其是在传输小文件的场景下，构建连接所花费的成本远高于文件传输的成本。</p><p>基于HMS Core：</p><ul><li><a href="https://developer.huawei.com/consumer/cn/hms/huawei-scankit">统一扫码服务</a></li><li><a href="https://developer.huawei.com/consumer/cn/huawei-ui-kit/">UI-kit</a></li></ul><p>后期开发目标：</p><ul><li>提高二维码在高速切换时扫码功能的捕获率</li><li>压缩传输，或者其他方法提高带宽</li><li>更高效的可视化码方案，降低编码冗余</li><li>更高效的扫描方案，感觉统一扫码服务为了服务的全面性牺牲了一些性能。</li><li>适配安卓10对文件的限制</li><li>对camera2的更新</li><li>接收到的文件的查看界面</li></ul><h1>技术要点</h1><h2 id="架构">架构</h2><p>采用安卓原生<code>MVVM</code>，对安卓官方<code>Architecture Components</code>（架构组件）进行了部分实践。</p><p>没有涉及过多<code>jetpack</code>与<code>component</code>，没有应用复杂的<code>MVVM</code>场景，是项目架构存在的几点问题。</p><p>安卓MVVM可以参考https://zwn2001.github.io/2022/04/12/%E5%AD%A6%E7%BA%BF%EF%BC%9Aintroduction-of-MVP-and-MVVM/#ViewModel-%E7%9A%84%E6%9E%84%E9%80%A0%E8%BF%87%E7%A8%8B</p><p>另外，使用<code>Fragment</code>替代了一些不必要的<code>Activity</code>，以减少维护<code>Activity</code>造成的额外内存损失以及性能损失。</p><h2 id="实现思路">实现思路</h2><p>首先我们知道，文件（尤其是图片等）很多都是以二进制文件的类型进行存储，也就是说，我们可以获取到文件的<strong>二进制比特流</strong>，然后通过某种方式进行传输。既然我们要实现真正意义上的<strong>无连接传输</strong>，而且要保证<strong>安全性</strong>（即该连接是传输的两方都可控的），那么图片显然是一种很好的载体。一方面，<strong>字符生成图片的编码方式或者说生成方式有很多</strong>，最为经典的就是二维码与条形码，除此之外还有很多更加高效的编码方式。另一方面，图片生成后<strong>很难受到干扰</strong>，不像电波或声音等介质需要进行滤波，或者说，滤波需求很小。</p><p>既然选用二维码进行传输，那么也就意味着我们要将原有的比特流转化成字符串进行编码（一种最简单的解决方案，后面会有进阶解决方案），这其实会带来一个问题，首先就是，单个<strong>二维码所能容纳的字符串长度受限</strong>，因为容纳信息过多<strong>可能超出屏幕分辩率显示范围</strong>，也会相应导致接收端响应速度受限（或者说，受到屏幕分辨率以及接收端解码速度限制）。所以这就<strong>导致整个系统传输的带宽其实有限，这个问题会在下面提出解决方案</strong>。</p><p>这里我们有必要讲一下为什么要考虑接收端解码速度问题。</p><p>我们需要通过多张二维码对特定文件进行编码传输，发送与接收两端是完全隔绝的，那么这其实会引发一系列问题。首先就是，发送端在屏幕中显示某张二维码，但<strong>发送端无法确认接收端是否完成了对该二维码的接收</strong>，所以必须设置一个<strong>阈值</strong>，在时间超过该阈值后对二维码图片进行切换，理想情况下，我们可以实现对每张发送的二维码，接收端都能在阈值内完成解析。但受到手机性能浮动等问题影响，接收端可能无法在特定时间内完成解析，那么我们就必须对每张图片进行编码，以保证接收端在进行数据重组时保证数据有序。但其实，在实际测试过程中，扫码端性能有一定的峰值，也就是说，<strong>如果我们将发送端二维码大小控制在一定大小范围内，接收端扫码就可以保证有较高的可能性能在阈值时间内完成解析</strong>。</p><p>另一方面，我们如何保证数据的<strong>有效性</strong>，或者说，我们如何得知这个文件的一些原始信息，比如文件名、大小、文件类型？我们在文件传输通道开启前，将必要的基本信息编码为二维码告知接受端。通过这种方式，我们可以重建出原有的同名同类型文件，并且我们可以通过文件大小与接收到的总大小进行比对，以确认文件文件是否有缺失。另一方面，我们在重复扫描到这个二维码时，就可以判断文件是否传输完全。</p><p>那么，我们可以将文件的二进制流转为字符串（base64），编码为二维码进行传输，传输端接受到字符串后解码为二进制流，根据标定的顺序进行组装，生成相应文件。</p><h2 id="关键代码">关键代码</h2><p>生成二维码代码较简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//QrFragment.java</span></span><br><span class="line"><span class="meta">@RequiresApi(api = Build.VERSION_CODES.O)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateQRCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException, WriterException, InterruptedException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> width = Constant.getSettings().getScreenWidth();</span><br><span class="line">        <span class="keyword">if</span>(width == <span class="number">0</span>)&#123;</span><br><span class="line">            Toast.makeText(requireContext(), <span class="string">&quot;无宽高设置&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            qrThread =  <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                InputStream inputStream;</span><br><span class="line">                HmsBuildBitmapOption options = <span class="keyword">new</span> HmsBuildBitmapOption.Creator().setBitmapMargin(<span class="number">8</span>).</span><br><span class="line">                        setBitmapColor(Color.BLACK).setBitmapBackgroundColor(Color.WHITE).create();</span><br><span class="line">                <span class="comment">//起始码</span></span><br><span class="line">                Bitmap bitmap;</span><br><span class="line">                <span class="comment">//序列码</span></span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (!Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                String startInfo = <span class="string">&quot;start:&quot;</span> + file.getName();</span><br><span class="line">                                bitmap = ScanUtil.buildBitmap(startInfo, <span class="number">0</span>, width, width, options);</span><br><span class="line">                                Bitmap finalResultImage = bitmap;</span><br><span class="line">                                requireActivity().runOnUiThread(() -&gt; image.setImageBitmap(finalResultImage));</span><br><span class="line">                                Thread.sleep(<span class="number">500</span>);<span class="comment">//等</span></span><br><span class="line">                            &#125; <span class="keyword">catch</span> (WriterException | InterruptedException | IllegalStateException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                inputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">                                String encodedByte;</span><br><span class="line">                                <span class="keyword">int</span> lastLength = <span class="number">0</span>;<span class="comment">//最后一个可能不满128</span></span><br><span class="line">                                <span class="keyword">int</span> readLength = inputStream.read(data, <span class="number">0</span>, <span class="number">128</span>);</span><br><span class="line">                                <span class="keyword">while</span> (readLength != -<span class="number">1</span>) &#123;</span><br><span class="line">                                    <span class="keyword">if</span>(readLength&lt;<span class="number">128</span>)&#123; lastLength = readLength; &#125;</span><br><span class="line">                                    encodedByte = Base64.getEncoder().encodeToString(data);</span><br><span class="line">                                    Bitmap resultImage = ScanUtil.buildBitmap(i + <span class="string">&quot;:&quot;</span> + encodedByte, <span class="number">0</span>, width, width, options);</span><br><span class="line">                                    i++;</span><br><span class="line">                                    requireActivity().runOnUiThread(() -&gt; image.setImageBitmap(resultImage));</span><br><span class="line">                                    Thread.sleep(<span class="number">120</span>);<span class="comment">//等</span></span><br><span class="line">                                    readLength = inputStream.read(data, <span class="number">0</span>, <span class="number">128</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                                bitmap = ScanUtil.buildBitmap(<span class="string">&quot;over:&quot;</span> + i +<span class="string">&quot;:&quot;</span> + lastLength, <span class="number">0</span>, width, width, options);</span><br><span class="line">                                Bitmap finalBitmap = bitmap;</span><br><span class="line">                                requireActivity().runOnUiThread(() -&gt; image.setImageBitmap(finalBitmap));</span><br><span class="line">                                Thread.sleep(<span class="number">500</span>);<span class="comment">//等</span></span><br><span class="line">                                inputStream.close();</span><br><span class="line">                                i = <span class="number">0</span>;</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (IOException | WriterException | InterruptedException | IllegalStateException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            qrThread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>（这里其实我多加了一个结束码）</p><p>解码使用的是<code>Handler</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zwn.qrmessager.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Bitmap;</span><br><span class="line"><span class="keyword">import</span> android.graphics.BitmapFactory;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.graphics.ImageFormat;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Rect;</span><br><span class="line"><span class="keyword">import</span> android.graphics.YuvImage;</span><br><span class="line"><span class="keyword">import</span> android.os.Build;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.HandlerThread;</span><br><span class="line"><span class="keyword">import</span> android.os.Message;</span><br><span class="line"><span class="keyword">import</span> android.text.TextUtils;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huawei.hms.ml.scan.HmsScan;</span><br><span class="line"><span class="keyword">import</span> com.huawei.hms.ml.scan.HmsScanAnalyzer;</span><br><span class="line"><span class="keyword">import</span> com.huawei.hms.ml.scan.HmsScanAnalyzerOptions;</span><br><span class="line"><span class="keyword">import</span> com.huawei.hms.mlsdk.common.MLFrame;</span><br><span class="line"><span class="keyword">import</span> com.zwn.qrmessager.constant.Constant;</span><br><span class="line"><span class="keyword">import</span> com.zwn.qrmessager.ui.CommonActivity;</span><br><span class="line"><span class="keyword">import</span> com.zwn.qrmessager.util.draw.ScanResultView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> android.app.Activity.RESULT_OK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.RequiresApi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> DEFAULT_ZOOM = <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CameraOperation cameraOperation;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HandlerThread decodeThread;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Handler decodeHandle;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Activity activity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String, String&gt; received = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> numAll = <span class="number">0</span>;<span class="comment">//总个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> lastNum = <span class="number">0</span>;<span class="comment">//不满的数组的长度</span></span><br><span class="line">    <span class="keyword">private</span> String fileName = <span class="string">&quot;&quot;</span>;<span class="comment">//不满的数组的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonHandler</span><span class="params">(<span class="keyword">final</span> Activity activity, CameraOperation cameraOperation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cameraOperation = cameraOperation;</span><br><span class="line">        <span class="keyword">this</span>.activity = activity;</span><br><span class="line">        decodeThread = <span class="keyword">new</span> HandlerThread(<span class="string">&quot;DecodeThread&quot;</span>);</span><br><span class="line">        decodeThread.start();</span><br><span class="line">        decodeHandle = <span class="keyword">new</span> Handler(decodeThread.getLooper())&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                decodeAsyn(msg.arg1, msg.arg2, (<span class="keyword">byte</span>[]) msg.obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        cameraOperation.startPreview();</span><br><span class="line">        restart(DEFAULT_ZOOM);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Convert camera data into bitmap data.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Bitmap <span class="title">convertToBitmap</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">byte</span>[] data)</span> </span>&#123;</span><br><span class="line">        YuvImage yuv = <span class="keyword">new</span> YuvImage(data, ImageFormat.NV21, width, height, <span class="keyword">null</span>);</span><br><span class="line">        ByteArrayOutputStream stream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        yuv.compressToJpeg(<span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, width, height), <span class="number">100</span>, stream);</span><br><span class="line">        <span class="keyword">return</span> BitmapFactory.decodeByteArray(stream.toByteArray(), <span class="number">0</span>, stream.toByteArray().length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Call the MultiProcessor API in asynchronous mode.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">decodeAsyn</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">byte</span>[] data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Bitmap bitmap = convertToBitmap(width, height, data);</span><br><span class="line">        MLFrame image = MLFrame.fromBitmap(bitmap);</span><br><span class="line">        HmsScanAnalyzerOptions options = <span class="keyword">new</span> HmsScanAnalyzerOptions.Creator().setHmsScanTypes(com.huawei.hms.ml.scan.HmsScanBase.ALL_SCAN_TYPE).create();</span><br><span class="line">        HmsScanAnalyzer analyzer = <span class="keyword">new</span> HmsScanAnalyzer(options);</span><br><span class="line">        analyzer.analyzInAsyn(image).addOnSuccessListener(hmsScans -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (hmsScans != <span class="keyword">null</span> &amp;&amp; hmsScans.size() &gt; <span class="number">0</span> &amp;&amp; hmsScans.get(<span class="number">0</span>) != <span class="keyword">null</span> &amp;&amp; !TextUtils.isEmpty(hmsScans.get(<span class="number">0</span>).getOriginalValue())) &#123;</span><br><span class="line">                HmsScan[] infos = <span class="keyword">new</span> HmsScan[hmsScans.size()];</span><br><span class="line">                Message message = <span class="keyword">new</span> Message();</span><br><span class="line">                message.obj = hmsScans.toArray(infos);</span><br><span class="line">                CommonHandler.<span class="keyword">this</span>.sendMessage(message);</span><br><span class="line">            &#125;</span><br><span class="line">            restart(DEFAULT_ZOOM);</span><br><span class="line">            bitmap.recycle();</span><br><span class="line">        &#125;).addOnFailureListener(e -&gt; &#123;</span><br><span class="line">            restart(DEFAULT_ZOOM);</span><br><span class="line">            bitmap.recycle();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiresApi(api = Build.VERSION_CODES.O)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        removeMessages(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (message.what == <span class="number">0</span>) &#123;</span><br><span class="line">            CommonActivity commonActivity1 = (CommonActivity) activity;</span><br><span class="line">            commonActivity1.scanResultView.clear();</span><br><span class="line">                CommonActivity commonActivity = (CommonActivity) activity;</span><br><span class="line">                HmsScan[] arr = (HmsScan[]) message.obj;</span><br><span class="line">                String[] array;</span><br><span class="line">            <span class="keyword">for</span> (HmsScan hmsScan : arr) &#123;</span><br><span class="line">                array = hmsScan.getOriginalValue().split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (!fileName.equals(<span class="string">&quot;&quot;</span>) &amp;&amp; numAll != <span class="number">0</span> &amp;&amp; received.size() == numAll) &#123;</span><br><span class="line">                    transToFileAndFinish();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (array[<span class="number">0</span>].equals(<span class="string">&quot;start&quot;</span>)) &#123;</span><br><span class="line">                        fileName = array[<span class="number">1</span>];</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[<span class="number">0</span>].equals(<span class="string">&quot;over&quot;</span>)) &#123;</span><br><span class="line">                        numAll = Integer.parseInt(array[<span class="number">1</span>]);</span><br><span class="line">                        lastNum = Integer.parseInt(array[<span class="number">2</span>]);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        String[] finalArray = array;</span><br><span class="line">                        received.computeIfAbsent(array[<span class="number">0</span>], k -&gt; finalArray[<span class="number">1</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                  commonActivity.scanResultView.add(<span class="keyword">new</span> ScanResultView.HmsScanGraphic(commonActivity.scanResultView, arr[<span class="number">0</span>], Color.YELLOW));</span><br><span class="line">            &#125;</span><br><span class="line">                commonActivity.scanResultView.setCameraInfo(<span class="number">1080</span>, <span class="number">1920</span>);</span><br><span class="line">                commonActivity.scanResultView.invalidate();</span><br><span class="line">                sendEmptyMessageDelayed(<span class="number">1</span>,<span class="number">500</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(message.what == <span class="number">1</span>)&#123;</span><br><span class="line">            CommonActivity commonActivity1 = (CommonActivity) activity;</span><br><span class="line">            commonActivity1.scanResultView.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cameraOperation.stopPreview();</span><br><span class="line">            decodeHandle.getLooper().quit();</span><br><span class="line">            decodeThread.join(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace();&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restart</span><span class="params">(<span class="keyword">double</span> zoomValue)</span> </span>&#123;</span><br><span class="line">        cameraOperation.callbackFrame(decodeHandle, zoomValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiresApi(api = Build.VERSION_CODES.O)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">transToFileAndFinish</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">byte</span>[] all = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">128</span>* (numAll - <span class="number">1</span>) + lastNum];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numAll - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">byte</span>[] decoded = Base64.getDecoder().decode(received.get(i+<span class="string">&quot;&quot;</span>));</span><br><span class="line">            System.arraycopy(decoded, <span class="number">0</span>, all, <span class="number">0</span>, <span class="number">128</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] decoded = Base64.getDecoder().decode(received.get(numAll - <span class="number">1</span> + <span class="string">&quot;&quot;</span>));</span><br><span class="line">        System.arraycopy(decoded, <span class="number">0</span>, all, <span class="number">0</span>, <span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">        String filepath = Constant.getSettings().getFilepath();</span><br><span class="line">        <span class="keyword">if</span>(filepath.isEmpty())&#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">            intent.putExtra(CommonActivity.SCAN_RESULT, <span class="number">0</span>);</span><br><span class="line">            activity.setResult(RESULT_OK, intent);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            String pathName = filepath + fileName;</span><br><span class="line">            <span class="keyword">int</span> j = createFileAndWrite(pathName,all);</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">            <span class="keyword">if</span>(j == <span class="number">0</span>)&#123;</span><br><span class="line">                intent.putExtra(CommonActivity.SCAN_RESULT, filepath + fileName);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                intent.putExtra(CommonActivity.SCAN_RESULT, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            activity.setResult(RESULT_OK, intent);</span><br><span class="line">        &#125;</span><br><span class="line">        activity.finish();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">createFileAndWrite</span><span class="params">(String filePath,<span class="keyword">byte</span>[] res)</span></span>&#123;</span><br><span class="line">        <span class="comment">//传入路径 + 文件名</span></span><br><span class="line">        File mFile = <span class="keyword">new</span> File(filePath);</span><br><span class="line">        <span class="keyword">if</span> (mFile.exists())&#123;</span><br><span class="line">            <span class="keyword">boolean</span>  b = mFile.delete();</span><br><span class="line">            <span class="keyword">if</span>(!b)&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">boolean</span> b =  mFile.createNewFile();</span><br><span class="line">           <span class="keyword">if</span>(b)&#123;</span><br><span class="line">               FileOutputStream outStream = <span class="keyword">new</span> FileOutputStream(mFile);</span><br><span class="line">               outStream.write(res);</span><br><span class="line">               outStream.close();</span><br><span class="line">               Log.e(<span class="string">&quot;TAG&quot;</span>, <span class="string">&quot;createFileAndWrite: &quot;</span>+mFile.length() );</span><br><span class="line">               <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">         <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一些小问题">一些小问题</h2><p>这些其实就是上面的后期开发目标想要解决的。</p><h1>问题的解决思路</h1><p>上面我提出了一个非常关键的问题，就是数据传输的带宽问题。首先我们要知道什么限制了现有的带宽：是我们当前的编码策略，我们使用<code>int readLength = inputStream.read(data, 0, 128);</code>，<code>encodedByte = Base64.getEncoder().encodeToString(data);</code>这种方案进行编码，导致单次编码的比特串长度很短。</p><p>我们如何提高带宽？这个问题其实还是要回归到我们的信息传递载体：二维码上。归根结底，是二维码的生成策略限制了我们的带宽。我们有什么策略改变这一现状呢？</p><p>其实也是受二维码的启发，首先二维码需要定位元素，以保证识别时的准确性。除此之外，我们如何提出更高效的编码方案呢？我的思路是使用黑白色素块代表二进制比特流中的0和1，通过这种方式我们可以大大提高传输带宽。当然，一些文件信息等其他数据可以采用二维码等现有数据传输策略。</p><p>当然，这其实也有一个小问题，我们面对这样的一个码时，如何判断其正确的上下左右的方向？（或者说，如何判断正确的读取顺序？）二维码其实也会有这个问题，解决方案可以直接进行参考。</p><p>另一方面，我们既然是按像素生成黑白块，就要保证接收端知道多大的色块作为一个编码单元，一方面，我们可以对其进行约定。另一方面，我们也可以采用动态色块大小，由接收端进行判断。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-volatile</title>
      <link href="/2022/04/21/java-volatile/"/>
      <url>/2022/04/21/java-volatile/</url>
      
        <content type="html"><![CDATA[<h1>关于并发关键字<code>Volatile</code></h1><p><code>volatile</code>通常被比喻成&quot;轻量级的<code>synchronized</code>&quot;，也是Java并发编程中比较重要的一个关键字。和<code>synchronized</code>不同，<code>volatile</code>是一个变量修饰符，只能用来修饰变量。无法修饰方法及代码块等。</p><p><code>Java</code>的<code>volatile</code>关键字用于标记一个变量 “应当存储在主存” 。更确切地说，每次读取<code>volatile</code>变量，都应该从主存读取，而不是从CPU缓存读取。每次写入一个<code>volatile</code>变量，应该写到主存中，而不是仅仅写到CPU缓存。</p><p>实际上，从Java 5开始，<code>volatile</code>关键字除了保证<code>volatile</code>变量从主存读写外，还提供了更多的保障。</p><h2 id="变量可见性问题">变量可见性问题</h2><p><strong><code>Java</code>的<code>volatile</code>关键字能保证变量修改后，对各个线程是可见的</strong>。这个听起来有些抽象，下面就详细说明。</p><p>在一个多线程的应用中，线程在操作非volatile变量时，出于性能考虑，每个线程可能会将变量从主存拷贝到CPU缓存中。如果你的计算机有多个CPU，每个线程可能会在不同的CPU中运行。这意味着，每个线程都有可能会把变量拷贝到各自CPU的缓存中，如下图所示：</p><img src="java-volatile-1.png" style="zoom:67%;" /><p>对于非<code>volatile</code>变量，JVM并不保证会从主存中读取数据到CPU缓存，或者将CPU缓存中的数据写到主存中。这会引起一些问题。试想一下，如果有两个以上的线程访问一个共享对象，这个共享对象包含一个<code>counter</code>变量，下面是代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SharedObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果只有线程1修改了（自增）<code>counter</code>变量，而线程1和线程2两个线程都会在某些时刻读取<code>counter</code>变量。</p><p>如果<code>counter</code>变量没有声明成<code>volatile</code>，则<code>counter</code>的值不保证会从CPU缓存写回到主存中。也就是说，<strong>CPU缓存和主存中的<code>counter</code>变量值并不一致</strong>，如下图所示：</p><img src="java-volatile-2.png" style="zoom:67%;" /><p>这就是“可见性”问题，线程看不到变量最新的值，因为其他线程还没有将变量值从CPU缓存写回到主存。一个线程中的修改对另外的线程是不可见的。这其实是非常常见的一类问题。</p><h2 id="volatile可见性保证">volatile可见性保证</h2><p><strong>可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</strong></p><p><code>Java</code>的<code>volatile</code>关键字就是设计用来解决变量可见性问题。将<code>counter</code>变量声明为<code>volatile</code>，则在写入<code>counter</code>变量时，也会同时将变量值写入到主存中。同样的，在读取<code>counter</code>变量值时，也会直接从主存中读取。</p><p>下面的代码演示了如果将<code>counter</code>声明为<code>volatile</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SharedObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将一个变量声明为<code>volatile</code>，可以保证变量写入时对其他线程的可见。</p><p>在上面的场景中，一个线程（T1）修改了<code>counter</code>，另一个线程（T2）读取了<code>counter（</code>但没有修改它），将<code>counter</code>变量声明为<code>volatile</code>，就能保证写入<code>counter</code>变量后，对T2是可见的。</p><p>然而，如果T1和T2都修改了<code>counter</code>的值，只是将<code>counter</code>声明为<code>volatile</code>还远远不够，后面会有更多的说明。</p><h3 id="完整的volatile可见性保证">完整的volatile可见性保证</h3><p>实际上，<code>volatile</code>的可见性保证并不是只对于<code>volatile</code>变量本身那么简单。可见性保证遵循以下规则：</p><ul><li><strong>如果线程A写入一个<code>volatile</code>变量，线程B随后读取了同样的<code>volatile</code>变量，则线程A在写入<code>volatile</code>变量之前的所有可见的变量值，在线程B读取<code>volatile</code>变量后也同样是可见的。</strong></li><li><strong>如果线程A读取一个<code>volatile</code>变量，那么线程A中所有可见的变量也会同样从主存重新读取。</strong></li></ul><p>下面用一段代码来示例说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> years;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> months</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> days;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> years, <span class="keyword">int</span> months, <span class="keyword">int</span> days)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.years  = years;</span><br><span class="line">        <span class="keyword">this</span>.months = months;</span><br><span class="line">        <span class="keyword">this</span>.days   = days;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>update()</code>方法写入3个变量，其中只有<code>days</code>变量是<code>volatile</code>。</p><p><strong>完整的<code>volatile</code>可见性保证意味着，在写入<code>days</code>变量时，线程中所有可见变量也会写入到主存</strong>。也就是说，写入<code>days</code>变量时，<code>years</code>和<code>months</code>也会同时被写入到主存。</p><p>下面的代码读取了<code>years</code>、<code>months</code>、<code>days</code>变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> years;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> months</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> days;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">totalDays</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> total = <span class="keyword">this</span>.days;</span><br><span class="line">        total += months * <span class="number">30</span>;</span><br><span class="line">        total += years * <span class="number">365</span>;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> years, <span class="keyword">int</span> months, <span class="keyword">int</span> days)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.years  = years;</span><br><span class="line">        <span class="keyword">this</span>.months = months;</span><br><span class="line">        <span class="keyword">this</span>.days   = days;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意<code>totalDays()</code>方法开始读取<code>days</code>变量值到<code>total</code>变量。在读取<code>days</code>变量值时，<code>months</code>和<code>years</code>的值也会同时从主存读取。因此，按上面所示的顺序读取时，可以保证读取到<code>days</code>、<code>months</code>、<code>years</code>变量的最新值。</p><blockquote><p>注：<strong>可以将对<code>volatile</code>变量的读写理解为一个触发刷新的操作</strong>，<strong>写入<code>volatile</code>变量时，线程中的所有变量也都会触发写入主存。而读取<code>volatile</code>变量时，也同样会触发线程中所有变量从主存中重新读取</strong>。因此**，应当尽量将<code>volatile</code>的写入操作放在最后，而将<code>volatile</code>的读取放在最前，这样就能连带将其他变量也进行刷新**。上面的例子中，<code>update()</code>方法对<code>days</code>的赋值就是放在<code>years、months</code>之后，就是保证<code>years、months</code>也能将最新的值写入到主存，如果是放在两个变量之前，则<code>days</code>会写入主存，而<code>years、months</code>则不会。反过来，<code>totalDays()</code>方法则将<code>days</code>的读取放在最前面，就是为了能同时触发刷新<code>years、months</code>变量值，如果是放后面，则<code>years、months</code>就可能还是从CPU缓存中读取值，而不是从主存中获取最新值。</p></blockquote><h3 id="更深入地">更深入地</h3><p>其实，volatile对于可见性的实现，<strong>内存屏障</strong>起着至关重要的作用。因为内存屏障相当于一个数据同步点，他要保证在这个同步点之后的读写操作必须在这个点之前的读写操作都执行完之后才可以执行。并且在遇到内存屏障的时候，缓存数据会和主存进行同步，或者把缓存数据写入主存、或者从主存把数据读取到缓存。</p><p>我们知道内存一致性模型的实现可以通过缓存一致性协议来实现。同时，留了一个问题：已经有了缓存一致性协议，为什么还需要<code>volatile</code>？</p><p>这个问题的答案可以从多个方面来回答：</p><blockquote><p>1、并不是所有的硬件架构都提供了相同的一致性保证，Java作为一门跨平台语言，JVM需要提供一个统一的语义。</p><p>2、操作系统中的缓存和JVM中线程的本地内存并不是一回事，通常我们可以认为：MESI可以解决缓存层面的可见性问题。使用volatile关键字，可以解决JVM层面的可见性问题。</p><p>3、缓存可见性问题的延伸：由于传统的MESI协议的执行成本比较大。所以CPU通过Store Buffer和Invalidate Queue组件来解决，但是由于这两个组件的引入，也导致缓存和主存之间的通信并不是实时的。也就是说，<strong>缓存一致性模型只能保证缓存变更可以保证其他缓存也跟着改变，但是不能保证立刻、马上执行。</strong></p></blockquote><ul><li>其实，在计算机内存模型中，也是使用内存屏障来解决缓存的可见性问题的（再次强调：缓存可见性和并发编程中的可见性可以互相类比，但是他们并不是一回事儿）。写内存屏障（Store Memory Barrier）可以促使处理器将当前store buffer（存储缓存）的值写回主存。读内存屏障（Load Memory Barrier）可以促使处理器处理invalidate queue（失效队列）。进而避免由于Store Buffer和Invalidate Queue的非实时性带来的问题。</li></ul><p>所以，内存屏障也是保证可见性的重要手段，操作系统通过内存屏障保证缓存间的可见性，JVM通过给volatile变量加入内存屏障保证线程之间的可见性。</p><p><a href="http://www.hollischuang.com/archives/2662">内存模型是怎么解决缓存一致性问题的？</a></p><h2 id="volatile的原理">volatile的原理</h2><p>为了提高处理器的执行速度，在处理器和内存之间增加了多级缓存来提升。但是由于引入了多级缓存，就存在缓存数据不一致问题。但是，对于<code>volatile</code>变量，当对<code>volatile</code>变量进行写操作的时候，JVM会向处理器发送一条lock前缀的指令，将这个缓存中的变量回写到系统主存中。</p><p>但是就算写回到内存，如果其他处理器缓存的值还是旧的，再执行计算操作就会有问题，所以在多处理器下，为了保证各个处理器的缓存是一致的，就会实现<code>缓存一致性协议</code></p><p><strong>缓存一致性协议</strong>：每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器要对这个数据进行修改操作的时候，会强制重新从系统内存里把数据读到处理器缓存里。</p><p>所以，如果一个变量被<code>volatile</code>所修饰的话，在每次数据变化之后，其值都会被强制刷入主存。而其他处理器的缓存由于遵守了缓存一致性协议，也会把这个变量的值从主存加载到自己的缓存中。这就保证了一个<code>volatile</code>在并发编程中，其值在多个缓存中是可见的。</p><h2 id="指令重排问题">指令重排问题</h2><p>出于性能考虑，JVM和CPU是允许对程序中的指令进行重排的，只要保证（重排后的）指令语义一致即可。如下代码为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">a++;</span><br><span class="line">b++;</span><br></pre></td></tr></table></figure><p>这些指令可以按以下顺序重排，而不改变程序的语义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">a++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">b++;</span><br></pre></td></tr></table></figure><p>然而，指令重排面临的一个问题就是对<code>volatile</code>变量的处理。还是以前面提到的<code>MyClass</code>类来说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> years;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> months</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> days;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> years, <span class="keyword">int</span> months, <span class="keyword">int</span> days)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.years  = years;</span><br><span class="line">        <span class="keyword">this</span>.months = months;</span><br><span class="line">        <span class="keyword">this</span>.days   = days;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦<code>update()</code>变量写了<code>days</code>值，则<code>years、months</code>的最新值也会写入到主存。但是，如果JVM重排了指令，比如按以下方式重排：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> years, <span class="keyword">int</span> months, <span class="keyword">int</span> days)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.days   = days;</span><br><span class="line">    <span class="keyword">this</span>.months = months;</span><br><span class="line">    <span class="keyword">this</span>.years  = years;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>days</code>被修改时，<code>months、years</code>的值也会写入到主存，但这时进行写入，<code>months、years</code>并不是新的值（注：<strong>即在<code>months、years</code>被赋新值之前，就触发了这两个变量值写入主存的操作，自然这两个变量在主存中的值就不是新值</strong>）。新的值自然对其他线程是不可见的。指令重排导致了程序语义的改变。</p><h3 id="Java-volatile-Happens-Before保证">Java volatile Happens-Before保证</h3><p>为了解决指令重排的问题，<code>Java</code>的<code>volatile</code>关键字在可见性之外，又提供了<code>happends-before</code>保证。<code>happens-before</code>原则如下：</p><ul><li>**如果有读写操作发生在写入<code>volatile</code>变量之前，读写其他变量的指令不能重排到写入<code>volatile</code>变量之后。**写入一个<code>volatile</code>变量之前的读写操作，对<code>volatile</code>变量是有<code>happens-before</code>保证的。注意，**如果是写入<code>volatile</code>之后，有读写其他变量的操作，那么这些操作指令是有可能被重排到写入<code>volatile</code>操作指令之前的。但反之则不成立。**即可以把位于写入<code>volatile</code>操作指令之后的其他指令移到写入<code>volatile</code>操作指令之前，而不能把位于写入<code>volatile</code>操作指令之前的其他指令移到写入<code>volatile</code>操作指令之后。</li><li>**如果有读写操作发生在读取<code>volatile</code>变量之后，读写其他变量的指令不能重排到读取<code>volatile</code>变量之前。**注意，如果是读取<code>volatile</code>之前，有读取其他变量的操作，那么这些操作指令是有可能被重排到读取<code>volatile</code>操作指令之后的。但反之则不成立。即可以把位于读取<code>volatile</code>操作指令之前的指令移到读取<code>volatile</code>操作指令之后，而不能把位于读取<code>volatile</code>操作指令之后的指令移到读取<code>volatile</code>操作指令之前。</li><li>挺绕的，反正会者不难，难者不会。</li></ul><p>以上的<code>happens-before</code>原则为<code>volatile</code>关键字的可见性提供了强制保证。</p><blockquote><p>注：这两个原则读起来有些拗口（当然翻译也不足够好），其实就是不管JVM怎么去禁止/允许某些情况下的指令重排，最终就是保证“完整的<code>volatile</code>可见性保证”的那种效果，所以，只要理解了“完整的<code>volatile</code>可见性保证”的效果就足够了。</p></blockquote><p>具体实现方式是在编译期生成字节码时，会在指令序列中增加内存屏障来保证，下面是基于保守策略的JMM内存屏障插入策略：</p><ul><li>在每个volatile写操作的前面插入一个<code>StoreStore</code>屏障。<ul><li>对于这样的语句Store1; <code>StoreStore</code>; Store2，在Store2及后续写入操作执行前，保证Store1的写入操作对其它处理器可见。</li></ul></li><li>在每个volatile写操作的后面插入一个<code>StoreLoad</code>屏障。<ul><li>对于这样的语句Store1; <code>StoreLoad</code>; Load2，在Load2及后续所有读取操作执行前，保证Store1的写入对所有处理器可见。</li></ul></li><li>在每个volatile读操作的后面插入一个<code>LoadLoad</code>屏障。<ul><li>对于这样的语句Load1; <code>LoadLoad</code>; Load2，在Load2及后续读取操作要读取的数据被访问前，保证Load1要读取的数据被读取完毕。</li></ul></li><li>在每个volatile读操作的后面插入一个<code>LoadStore</code>屏障。<ul><li>对于这样的语句Load1; <code>LoadStore</code>; Store2，在Store2及后续写入操作被刷出前，保证Load1要读取的数据被读取完毕。</li></ul></li></ul><h2 id="volatile原子性问题">volatile原子性问题</h2><p>虽然<code>volatile</code>关键字能保证<code>volatile</code>变量的所有读取都是直接从主存读取，所有写入都是直接写入到主存中，但在一些情形下，仅仅是将变量声明为<code>volatile</code>还是远远不够的。</p><p>就像前面示例所说的，线程1写入共享变量<code>counter</code>的值，将<code>counter</code>声明为<code>volatile</code>已经足够保证线程2总是能获取到最新的值。</p><p><strong>事实上，多个线程都能写入共享的<code>volatile</code>变量，主存中也能存储正确的变量值，然而这有一个前提，变量新值的写入不能依赖于变量的旧值</strong>。换句话说，就是一个线程写入一个共享<code>volatile</code>变量值时，不需要先读取变量值，然后以此来计算出新的值。</p><p>如果线程需要先读取一个<code>volatile</code>变量的值，以此来计算出一个新的值，那么<code>volatile</code>变量就不足够保证正确的可见性。（线程间）读写<code>volatile</code>变量的时间间隔很短，这将导致一个<a href="http://ifeve.com/race-conditions-and-critical-sections/">竞态条件</a>，多个线程同时读取了<code>volatile</code>变量相同的值，然后以此计算出了新的值，这时各个线程往主存中写回值，则会互相覆盖。</p><p>多个线程对<code>counter</code>变量进行自增操作就是这样的情形。</p><p>设想一下，如果线程1将共享变量<code>counter</code>的值0读取到它的CPU缓存，然后自增为1，而还没有将新值写回到主存。线程2这时从主存中读取的<code>counter</code>值依然是0，依然放到它自身的CPU缓存中，然后同样将<code>counter</code>值自增为1，同样也还没有将新值写回到主存。如下图所示：</p><img src="java-volatile-3.png" alt="img" style="zoom:67%;" /><p>从实际的情况来看，线程1和线程2现在就是不同步的。共享变量<code>counter</code>正确的值应该是2，但各个线程中CPU缓存的值都是1，而主存中的值依然是0。这是很混乱的。即使线程最终将共享变量<code>counter</code>的值写回到主存，那值也明显是错的。</p><p>所以在多线程场景下，由于时间片在线程间轮换，就会发生原子性问题。为了保证原子性，需要通过字节码指令<code>monitorenter</code>和<code>monitorexit</code>，但是<code>volatile</code>和这两个指令之间是没有任何关系的。</p><p><strong>所以，<code>volatile</code>是不能保证原子性的。</strong></p><p>在以下两个场景中可以使用<code>volatile</code>来代替<code>synchronized</code>：</p><blockquote><p>1、运算结果并不依赖变量的当前值，或者能够确保只有单一的线程会修改变量的值。</p><p>2、变量不需要与其他状态变量共同参与不变约束。</p></blockquote><p>除以上场景外，都需要使用其他方式来保证原子性，如<code>synchronized</code>或者<code>concurrent包</code>。</p><h2 id="volatile的性能考量">volatile的性能考量</h2><p>读写<code>volatile</code>变量会导致变量从主存读写。从主存读写比从CPU缓存读写更加“昂贵”。访问一个<code>volatile</code>变量同样会禁止指令重排，而指令重排是一种提升性能的技术。因此，你应当只在需要保证变量可见性的情况下，才使用<code>volatile</code>变量。</p><h1>参考</h1><p><a href="https://ifeve.com/java-volatile%E5%85%B3%E9%94%AE%E5%AD%97/">https://ifeve.com/java-volatile关键字/</a></p><p><a href="https://juejin.cn/post/6844903656274264078">https://juejin.cn/post/6844903656274264078</a></p><p><a href="http://www.hollischuang.com/archives/2673">http://www.hollischuang.com/archives/2673</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载与汇总 </tag>
            
            <tag> java并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter-context</title>
      <link href="/2022/04/20/flutter-context/"/>
      <url>/2022/04/20/flutter-context/</url>
      
        <content type="html"><![CDATA[<h1>BuildContext</h1><p>每次我们在编写界面部分代码的时候，都是在build函数中进行操作。而build函数则需要默认传入一个BuildContext。我们来看看这到底是啥。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BuildContext</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">The current configuration of the [Element] that is this [BuildContext].</span></span></span><br><span class="line">  Widget <span class="keyword">get</span> widget;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">The [BuildOwner] for this context. The [BuildOwner] is in charge of</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">managing the rendering pipeline for this context.</span></span></span><br><span class="line">  BuildOwner <span class="keyword">get</span> owner;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>我们可以看到BuildContext其实是一个抽象类，但是每次build函数传进来的是什么呢。我们来看看构建视图的时候到底发生了什么。</p><h3 id="Flutter如何构建视图">Flutter如何构建视图</h3><p>在Flutter中，Everything is Widget，我们通过构造函数嵌套Widget来编写UI界面。实际上，Widget并不是真正要显示在屏幕上的东西，只是一个配置信息，它永远是immutable（不可变）的，并且可以在多处重复使用。<strong>那真正显示在屏幕上的视图树是什么呢？Element Tree</strong>！</p><p>那我们来看一下，在构建视图的时候究竟发生了什么。这里以StatelessWidget为例。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">StatelessWidget</span> <span class="keyword">extends</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> StatelessWidget(&#123; Key key &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  StatelessElement createElement() =&gt; StatelessElement(<span class="keyword">this</span>);</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>当要把这个widget装进视图树的时候，首先会去createElement，并将当前widget传给Element。</p><p>我们再来看一看这个StatelessElement是什么</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatelessElement</span> <span class="keyword">extends</span> <span class="title">ComponentElement</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">Creates an element that uses the given widget as its configuration.</span></span></span><br><span class="line">  StatelessElement(StatelessWidget widget) : <span class="keyword">super</span>(widget);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  StatelessWidget <span class="keyword">get</span> widget =&gt; <span class="keyword">super</span>.widget;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build() =&gt; widget.build(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> update(StatelessWidget newWidget) &#123;</span><br><span class="line">    <span class="keyword">super</span>.update(newWidget);</span><br><span class="line">    <span class="keyword">assert</span>(widget == newWidget);</span><br><span class="line">    _dirty = <span class="keyword">true</span>;</span><br><span class="line">    rebuild();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，通过将widget传入StatelessElement的构造函数，StatelessElement保留了widget的引用，并且将会调用build方法。</p><p>而这个build方法真正调用的则是widget的build方法，并将this，也就是该StatelessElement对象传入。我们知道，build方法需要传入的是一个BuildContext，为什么传进去了StatelessElement？于是我们继续看。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatelessElement</span> <span class="keyword">extends</span> <span class="title">ComponentElement</span></span></span><br><span class="line"><span class="class">...</span></span><br><span class="line"><span class="class"><span class="title">abstract</span> <span class="title">class</span> <span class="title">ComponentElement</span> <span class="keyword">extends</span> <span class="title">Element</span></span></span><br><span class="line"><span class="class">...</span></span><br><span class="line"><span class="class"><span class="title">abstract</span> <span class="title">class</span> <span class="title">Element</span> <span class="keyword">extends</span> <span class="title">DiagnosticableTree</span> <span class="keyword">implements</span> <span class="title">BuildContext</span> </span></span><br></pre></td></tr></table></figure><p>实际上是Element类实现了BuildContext，并由ComponentElement  -&gt; StatelessElement 继承。</p><p>所以我们现在再来看官方对于BuildContext的解释:</p><blockquote><p><strong>BuildContext</strong> objects are actually <strong>Element</strong> objects. The <strong>BuildContext</strong> interface is used to discourage direct manipulation of <strong>Element</strong> objects.</p></blockquote><p>BuildContext对象实际上就是Element对象，BuildContext 接口用于阻止对 Element 对象的直接操作。</p><p>我们现在终于知道这个BuildContext是哪里来的了。让我们再来梳理一下，flutter构建视图究竟做了什么。</p><h3 id="视图树装载过程">视图树装载过程</h3><h4 id="StatelessWidget">StatelessWidget</h4><ul><li>首先它会调用StatelessWidget的 createElement 方法，并根据这个widget生成StatelesseElement对象。</li><li>将这个StatelesseElement对象挂载到Element树上。</li><li>StatelesseElement对象调用widget的build方法，并将element自身作为BuildContext传入。</li></ul><h4 id="StatefulWidget">StatefulWidget</h4><ul><li>首先同样也是调用StatefulWidget的 createElement方法，并根据这个widget生成StatefulElement对象，并保留widget引用。</li><li>将这个StatefulElement挂载到Element树上。</li><li>根据widget的 createState 方法创建State。</li><li>StatefulElement对象调用state的build方法，并将element自身作为BuildContext传入。</li></ul><p>所以我们在build函数中所使用的context，正是当前widget所创建的Element对象。</p><blockquote><p><strong>What do you need to know about context</strong></p><ul><li><strong>Context</strong> is a link to the location of a widget in the tree structure of widgets.</li><li>Context can belong to only one widget.</li><li>If a widget has child widgets, then the context of the parent widget becomes the parent context for the contexts of <strong>direct</strong> child elements.</li><li>A widget is visible only in its own context or in the context of its parent context.<br>Thus, it becomes clear that knowing the children’s context, you can easily find the parent widget. Conversely, using the parent context you can find the child widget.</li></ul></blockquote><p>如果你还记得这幅图：</p><p><img src="1.png" alt=""></p><h2 id="of-context-方法">of(context)方法</h2><p>在flutter中我们经常会使用到这样的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//打开一个新的页面</span><br><span class="line">Navigator.of(context).push</span><br><span class="line">//打开Scaffold的Drawer</span><br><span class="line">Scaffold.of(context).openDrawer</span><br><span class="line">//获取display1样式文字主题</span><br><span class="line">Theme.of(context).textTheme.display1</span><br></pre></td></tr></table></figure><p>那么这个of(context)到底是个什么呢。我们这里以Navigator打开新页面为例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">static NavigatorState of(</span><br><span class="line">    BuildContext context, &#123;</span><br><span class="line">      bool rootNavigator = false,</span><br><span class="line">      bool nullOk = false,</span><br><span class="line">    &#125;) &#123;</span><br><span class="line">//关键代码-----------------------------------------v</span><br><span class="line">    </span><br><span class="line">    final NavigatorState navigator = rootNavigator</span><br><span class="line">        ? context.rootAncestorStateOfType(const TypeMatcher&lt;NavigatorState&gt;())</span><br><span class="line">        : context.ancestorStateOfType(const TypeMatcher&lt;NavigatorState&gt;());</span><br><span class="line">        </span><br><span class="line">//关键代码----------------------------------------^</span><br><span class="line">    assert(() &#123;</span><br><span class="line">      if (navigator == null &amp;&amp; !nullOk) &#123;</span><br><span class="line">        throw FlutterError(</span><br><span class="line">          &#x27;Navigator operation requested with a context that does not include a Navigator.\n&#x27;</span><br><span class="line">          &#x27;The context used to push or pop routes from the Navigator must be that of a &#x27;</span><br><span class="line">          &#x27;widget that is a descendant of a Navigator widget.&#x27;</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">      return true;</span><br><span class="line">    &#125;());</span><br><span class="line">    return navigator;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看到，关键代码部分通过context.rootAncestorStateOfType向上遍历 Element tree，并找到最近匹配的 NavigatorState。也就是说of实际上是对context跨组件获取数据的一个封装。</p><p>而我们的Navigator的 push操作就是通过找到的 NavigatorState 来完成的。</p><p>不仅如此，BuildContext还有许多方法可以跨组件获取对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ancestorInheritedElementForWidgetOfExactType(Type targetType) → InheritedElement</span><br><span class="line"></span><br><span class="line">ancestorRenderObjectOfType(TypeMatcher matcher) → RenderObject</span><br><span class="line"></span><br><span class="line">ancestorStateOfType(TypeMatcher matcher) → State</span><br><span class="line"></span><br><span class="line">ancestorWidgetOfExactType(Type targetType) → Widget</span><br><span class="line"></span><br><span class="line">findRenderObject() → RenderObject</span><br><span class="line"></span><br><span class="line">inheritFromElement(InheritedElement ancestor, &#123; Object aspect &#125;) → InheritedWidget</span><br><span class="line"></span><br><span class="line">inheritFromWidgetOfExactType(Type targetType, &#123; Object aspect &#125;) → InheritedWidget</span><br><span class="line"></span><br><span class="line">rootAncestorStateOfType(TypeMatcher matcher) → State</span><br><span class="line"></span><br><span class="line">visitAncestorElements(bool visitor(Element element)) → void</span><br><span class="line"></span><br><span class="line">visitChildElements(ElementVisitor visitor) → void</span><br></pre></td></tr></table></figure><p>需要注意的是，如果我们需要与祖先 Inherit 对象建立长期联系，<code>dependOnInheritedWidgetOfExactType</code> 系列的方法不能在 <code>initState</code> 中调用，为了确保 Widget 在 Inherit 值更改时正确更新自身，请在 <code>State.didChangeDependencies</code> 阶段调用 <code>of</code> 方法。</p><h1>参考</h1><blockquote><p><a href="https://juejin.cn/post/6844903777565147150">https://juejin.cn/post/6844903777565147150</a></p><p><a href="https://appvesto.medium.com/flutter-what-is-context-ef2ed6dc7162">https://appvesto.medium.com/flutter-what-is-context-ef2ed6dc7162</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学线培训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学线培训 </tag>
            
            <tag> 移动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学线培训：flutter-key</title>
      <link href="/2022/04/20/flutter-key/"/>
      <url>/2022/04/20/flutter-key/</url>
      
        <content type="html"><![CDATA[<h1><code>key</code>的定义</h1><p>Key Class官方介绍：</p><blockquote><p>A [Key] is an identifier for [Widget]s, [Element]s and [SemanticsNode]s.</p><p>A new widget will only be used to update an existing element if its key is</p><p>the same as the key of the current widget associated with the element.</p><p>{@youtube 560 315 <a href="https://www.youtube.com/watch?v=kn0EOS-ZiIc">https://www.youtube.com/watch?v=kn0EOS-ZiIc</a>}</p><p>Keys must be unique amongst the [Element]s with the same parent.</p><p>Subclasses of [Key] should either subclass [LocalKey] or [GlobalKey].</p></blockquote><p>翻译过来：</p><blockquote><p>一个Key是Widget，Element以及SemanticsNode的标识。</p><p>一个新widget将仅用来更新一个已存在的element，假如它的key和当前widget关联的元素一致。</p><p>官方介绍视频 <a href="https://www.youtube.com/watch?v=kn0EOS-ZiIc">https://www.youtube.com/watch?v=kn0EOS-ZiIc</a></p><p>在有着相同父节点的element中，Key必须是唯一的。</p><p>Key的子类要么是LocalKey，要么是GlobalKey。</p></blockquote><p>Key 官方介绍：</p><blockquote><p>Controls how one widget replaces another widget in the tree.</p><p>If the <a href="https://api.flutter.dev/flutter/widgets/Widget/dart-core/Object/runtimeType.html">runtimeType</a> and <a href="https://api.flutter.dev/flutter/widgets/Widget/widgets/Widget/key.html">key</a> properties of the two widgets are <a href="https://api.flutter.dev/flutter/widgets/Widget/widgets/Widget/operator_equals.html">operator==</a>, respectively, then the new widget replaces the old widget by updating the underlying element (i.e., by calling <a href="https://api.flutter.dev/flutter/widgets/Widget/widgets/Element/update.html">Element.update</a>with the new widget). Otherwise, the old element is removed from the tree, the new widget is inflated into an element, and the new element is inserted into the tree.</p><p>In addition, using a <a href="https://api.flutter.dev/flutter/widgets/Widget/widgets/GlobalKey-class.html">GlobalKey</a> as the widget’s <a href="https://api.flutter.dev/flutter/widgets/Widget/widgets/Widget/key.html">key</a> allows the element to be moved around the tree (changing parent) without losing state. When a new widget is found (its key and type do not match a previous widget in the same location), but there was a widget with that same global key elsewhere in the tree in the previous frame, then that widget’s element is moved to the new location.</p><p>Generally, a widget that is the only child of another widget does not need an explicit key.</p></blockquote><p>翻译过来：</p><blockquote><p>控制一个小部件如何替换树中的另一个小部件。</p><p>如果两个widget的<a href="https://api.flutter.dev/flutter/dart-core/Object/runtimeType.html">runtimeType</a>和<a href="https://api.flutter.dev/flutter/widgets/Widget/key.html">key</a>属性分别是相等的(<a href="https://api.flutter.dev/flutter/widgets/Widget/operator_equals.html">==</a>)，则新widget通过更新基础element（即，通过使用新的widget调用<a href="https://api.flutter.dev/flutter/widgets/Element/update.html">Element.update</a>）来替换旧widget。否则，将从树中删除旧element，将新widget放大为一个element，然后将新element插入到树中。</p><p>另外，使用<a href="https://api.flutter.dev/flutter/widgets/GlobalKey-class.html">GlobalKey</a>作为窗口小部件的<a href="https://api.flutter.dev/flutter/widgets/Widget/key.html">key</a>允许该element在树上移动（更改父级）而不会丢失状态。当找到新的widget（其键和类型与相同位置的先前widget不匹配），但是在前一帧的树中其他位置有一个具有相同全局键的widget时，该widget的element将移至新位置。</p><p>通常，作为另一个widget的唯一child的widget不需要显式key。</p></blockquote><h2 id="Key的作用">Key的作用</h2><p>大多数时候并不需要使用key。</p><p>当需要在一个<strong>StatefulWidget</strong>集合中进行添加、删除、重排序等操作时，才是key登场的时候。</p><p>下面这段代码在一个Row中展示了两个彩色方片（<code>StatelessContainer</code>），当点击按钮时，会交换两个方片的位置：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">const</span> MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Key Demo&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home:  <span class="keyword">const</span> Screen(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatelessContainer</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  StatelessContainer(&#123;Key? key, Color? color&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="keyword">final</span> Color color = Color.fromRGBO(</span><br><span class="line">      Random().nextInt(<span class="number">256</span>), Random().nextInt(<span class="number">256</span>), Random().nextInt(<span class="number">256</span>), <span class="number">1</span>);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      width: <span class="number">100</span>,</span><br><span class="line">      height: <span class="number">100</span>,</span><br><span class="line">      color: color,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Screen(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ScreenState createState() =&gt; _ScreenState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ScreenState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Screen</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; widgets = [</span><br><span class="line">    StatelessContainer(),</span><br><span class="line">    StatelessContainer(),</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Row(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: widgets,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: switchWidget,</span><br><span class="line">        child: <span class="keyword">const</span> Icon(Icons.undo),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  switchWidget() &#123;</span><br><span class="line">    widgets.insert(<span class="number">1</span>, widgets.removeAt(<span class="number">0</span>));</span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码运行效果符合我们的预期。但是，如果我们把色块 <code>Widget</code> 由 <code>StatelessWidget</code> 变更为 <code>StatefulWidget</code>，并把颜色属性存储在 <code>State</code> 中，那么情况又如何呢？此时发现，无论我们怎么点击交换按钮，色块的位置或者颜色都不会再交换了。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">const</span> MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Key Demo&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home:  <span class="keyword">const</span> Screen(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatelessContainer</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> StatelessContainer(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _StatelessContainerState createState() =&gt; _StatelessContainerState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_StatelessContainerState</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Color color = Color.fromRGBO(</span><br><span class="line">      Random().nextInt(<span class="number">256</span>), Random().nextInt(<span class="number">256</span>), Random().nextInt(<span class="number">256</span>), <span class="number">1</span>);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      width: <span class="number">100</span>,</span><br><span class="line">      height: <span class="number">100</span>,</span><br><span class="line">      color: color,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Screen(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ScreenState createState() =&gt; _ScreenState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ScreenState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Screen</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; widgets = [</span><br><span class="line">    <span class="keyword">const</span> StatelessContainer(),</span><br><span class="line">    <span class="keyword">const</span> StatelessContainer(),</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Row(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: widgets,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: switchWidget,</span><br><span class="line">        child: <span class="keyword">const</span> Icon(Icons.undo),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  switchWidget() &#123;</span><br><span class="line">    widgets.insert(<span class="number">1</span>, widgets.removeAt(<span class="number">0</span>));</span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果将颜色的属性存储在 <code>Widget</code> 中而不是 <code>State</code> 中，那么此时的交换效果又变得正常了。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">const</span> MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Key Demo&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home:  <span class="keyword">const</span> Screen(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatelessContainer</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> StatelessContainer(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.color&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="keyword">final</span> Color color;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _StatelessContainerState createState() =&gt; _StatelessContainerState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_StatelessContainerState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">StatelessContainer</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      width: <span class="number">100</span>,</span><br><span class="line">      height: <span class="number">100</span>,</span><br><span class="line">      color: widget.color,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Screen(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ScreenState createState() =&gt; _ScreenState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ScreenState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Screen</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; widgets = [</span><br><span class="line">     StatelessContainer(color: Color.fromRGBO(</span><br><span class="line">         Random().nextInt(<span class="number">256</span>), Random().nextInt(<span class="number">256</span>), Random().nextInt(<span class="number">256</span>), <span class="number">1</span>)),</span><br><span class="line">     StatelessContainer(color: Color.fromRGBO(</span><br><span class="line">         Random().nextInt(<span class="number">256</span>), Random().nextInt(<span class="number">256</span>), Random().nextInt(<span class="number">256</span>), <span class="number">1</span>)),</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Row(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: widgets,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: switchWidget,</span><br><span class="line">        child: <span class="keyword">const</span> Icon(Icons.undo),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  switchWidget() &#123;</span><br><span class="line">    widgets.insert(<span class="number">1</span>, widgets.removeAt(<span class="number">0</span>));</span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，对于上面说的颜色无法交换的情况甚或其他各种类似的情况，我们在开发中该怎么处理呢？</p><p>就在此时，Key 作为一个 Key，它闪亮登场了。</p><p>我们稍微修改一下我们上面不生效的代码。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">const</span> MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Key Demo&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home:  <span class="keyword">const</span> Screen(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatefulContainer</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> StatefulContainer(&#123;<span class="keyword">required</span> Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _StatefulContainerState createState() =&gt; _StatefulContainerState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_StatefulContainerState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">StatefulContainer</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Color color = Color.fromRGBO(</span><br><span class="line">      Random().nextInt(<span class="number">256</span>), Random().nextInt(<span class="number">256</span>), Random().nextInt(<span class="number">256</span>), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      width: <span class="number">100</span>,</span><br><span class="line">      height: <span class="number">100</span>,</span><br><span class="line">      color: color,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Screen(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ScreenState createState() =&gt; _ScreenState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ScreenState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Screen</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; widgets = [</span><br><span class="line">    StatefulContainer(key: UniqueKey()),<span class="comment">//加了key</span></span><br><span class="line">    StatefulContainer(key: UniqueKey()),</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Row(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: widgets,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: switchWidget,</span><br><span class="line">        child: <span class="keyword">const</span> Icon(Icons.undo),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  switchWidget() &#123;</span><br><span class="line">    widgets.insert(<span class="number">1</span>, widgets.removeAt(<span class="number">0</span>));</span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个色块又可以交换啦。</p><h2 id="Widget-更新机制">Widget 更新机制</h2><p>若你还对 <strong>Element</strong> 的概念感到很模糊的话，请先阅读 <a href="https://juejin.cn/post/6844903777565147150">Flutter | 深入理解BuildContext</a>。</p><p>下面来来看Widget的源码。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@immutable</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Widget</span> <span class="keyword">extends</span> <span class="title">DiagnosticableTree</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Widget(&#123; <span class="keyword">this</span>.key &#125;);</span><br><span class="line">  <span class="keyword">final</span> Key key;</span><br><span class="line">  ···</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">bool</span> canUpdate(Widget oldWidget, Widget newWidget) &#123;</span><br><span class="line">    <span class="keyword">return</span> oldWidget.runtimeType == newWidget.runtimeType</span><br><span class="line">        &amp;&amp; oldWidget.key == newWidget.key;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们知道 Widget 只是一个配置且无法修改，而 Element 才是真正被使用的对象，并可以修改。</p><p>当新的 Widget 到来时将会调用 canUpdate 方法，来确定这个 Element是否需要更新。</p><p><strong>canUpdate 对两个（新老） Widget 的 runtimeType 和 key 进行比较，从而判断出当前的 Element 是否需要更新。若 canUpdate 方法返回 true 说明不需要替换 Element，直接更新 Widget 就可以了</strong>。</p><h3 id="StatelessContainer-比较过程">StatelessContainer 比较过程</h3><p>在 StatelessContainer 中，我们并没有传入 key ，所以只比较它们的 <strong>runtimeType</strong>。这里 runtimeType 一致，canUpdate 方法返回 true，两个 Widget 被交换了位置，StatelessElement 调用新持有 Widget 的 build 方法重新构建，而我们的 color 实际上就是储存在 widget 中的，因此在屏幕上两个 Widget 便被正确的交换了顺序。</p><img src="1.png" style="zoom:70%;" /><h3 id="StatefulContainer-比较过程">StatefulContainer 比较过程</h3><p>而在 StatefulContainer 的例子中，我们将 color 的定义放在了 State 中，Widget 并不保存 State，真正 hold State 的引用的是 Stateful Element。</p><p><strong>当我们没有给 Widget 任何 key 的时候，将会只比较这两个 Widget 的 runtimeType 。由于两个 Widget 的属性和方法都相同，canUpdate 方法将会返回 true，于是更新 StatefulWidget 的位置，这两个 Element 将不会交换位置。但是原有 Element 只会从它持有的 state 实例中 build 新的 widget。因为 element 没变，它持有的 state 也没变。所以颜色不会交换</strong>。这里变换 StatefulWidget 的位置是没有作用的。</p><p>而我们给 Widget 一个 key 之后，canUpdate 方法将会比较两个 Widget 的 runtimeType 以及 key。并返回 false。（这里 runtimeType 相同，key 不同）</p><p>此时 RenderObjectElement 会用新 Widget 的 key 在老 Element 列表里面查找，找到匹配的则会更新 Element 的位置并更新对应 renderObject 的位置，对于这个例子来讲就是交换了 Element 的位置并交换了对应 renderObject 的位置。都交换了，那么颜色自然也就交换了。</p><h3 id="比较范围">比较范围</h3><p>为了提升性能 Flutter 的比较算法（diff）是有范围的，它并不是对第一个 StatefulWidget 进行比较，而是对某一个层级的 Widget 进行比较。</p><p>在这个例子中，我们将两个带 key 的 StatefulContainer 包裹上 Padding 组件，然后点击交换按钮，会发生下面这件奇妙的事情。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">const</span> MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Key Demo&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home:  <span class="keyword">const</span> Screen(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatefulContainer</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> StatefulContainer(&#123;<span class="keyword">required</span> Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _StatefulContainerState createState() =&gt; _StatefulContainerState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_StatefulContainerState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">StatefulContainer</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Color color = Color.fromRGBO(</span><br><span class="line">      Random().nextInt(<span class="number">256</span>), Random().nextInt(<span class="number">256</span>), Random().nextInt(<span class="number">256</span>), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      width: <span class="number">100</span>,</span><br><span class="line">      height: <span class="number">100</span>,</span><br><span class="line">      color: color,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Screen(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ScreenState createState() =&gt; _ScreenState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ScreenState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Screen</span>&gt; </span>&#123;<span class="comment">//套了padding</span></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; widgets = [</span><br><span class="line">  Padding(</span><br><span class="line">  padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),</span><br><span class="line">  child: StatefulContainer(key: UniqueKey(),),</span><br><span class="line">  ),</span><br><span class="line">  Padding(</span><br><span class="line">  padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),</span><br><span class="line">  child: StatefulContainer(key: UniqueKey(),),</span><br><span class="line">  ),</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Row(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: widgets,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: switchWidget,</span><br><span class="line">        child: <span class="keyword">const</span> Icon(Icons.undo),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  switchWidget() &#123;</span><br><span class="line">    widgets.insert(<span class="number">1</span>, widgets.removeAt(<span class="number">0</span>));</span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个 Widget 的 Element 并不是交换顺序，而是被重新创建了。</p><p>在 Flutter 的比较过程中它下到 Row 这个层级，发现它是一个 MultiChildRenderObjectWidget（多子部件的 Widget）。然后它会对所有 children 层逐个进行扫描。</p><p><strong>在Column这一层级，padding 部分的 runtimeType 并没有改变，且不存在 Key。然后再比较下一个层级。由于内部的 StatefulContainer 存在 key，新旧 key 不同（UniqueKey使然），且现在的层级在 padding 内部，该层级没有多子 Widget。canUpdate 返回 flase，Flutter 的将会认为这个 Element 需要被替换。然后重新生成一个新的 Element 对象装载到 Element 树上替换掉之前的 Element。第二个 Widget 同理</strong>。</p><p>所以为了解决这个问题，我们需要将 key 放到 Row 的 children 这一层级。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">const</span> MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Key Demo&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home:  <span class="keyword">const</span> Screen(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatefulContainer</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _StatefulContainerState createState() =&gt; _StatefulContainerState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_StatefulContainerState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">StatefulContainer</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Color color = Color.fromRGBO(</span><br><span class="line">      Random().nextInt(<span class="number">256</span>), Random().nextInt(<span class="number">256</span>), Random().nextInt(<span class="number">256</span>), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      width: <span class="number">100</span>,</span><br><span class="line">      height: <span class="number">100</span>,</span><br><span class="line">      color: color,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Screen(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ScreenState createState() =&gt; _ScreenState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ScreenState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Screen</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; widgets = [</span><br><span class="line">  Padding(</span><br><span class="line">    key: UniqueKey(),<span class="comment">//here</span></span><br><span class="line">    padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),</span><br><span class="line">    child: StatefulContainer(),</span><br><span class="line">  ),</span><br><span class="line">    Padding(</span><br><span class="line">      key: UniqueKey(),</span><br><span class="line">      padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),</span><br><span class="line">      child: StatefulContainer(),</span><br><span class="line">    ),</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Row(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: widgets,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: switchWidget,</span><br><span class="line">        child: <span class="keyword">const</span> Icon(Icons.undo),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  switchWidget() &#123;</span><br><span class="line">    widgets.insert(<span class="number">1</span>, widgets.removeAt(<span class="number">0</span>));</span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1><code>key</code>的分类</h1><img src="5.png" style="zoom:40%;" /><h2 id="Key">Key</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@immutable</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Key</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">factory</span> Key(<span class="built_in">String</span> value) = ValueKey&lt;<span class="built_in">String</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@protected</span></span><br><span class="line">  <span class="keyword">const</span> Key.empty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认创建 Key 将会通过工厂方法根据传入的 value 创建一个 ValueKey。</p><p>Key 派生出两种不同用途的 Key：LocalKey 和 GlobalKey。</p><h3 id="Localkey">Localkey</h3><p>LocalKey 直接继承至 Key，它应用于拥有相同父 Element 的小部件进行比较的情况，也就是上述例子中，有一个多子 Widget 中需要对它的子 widget 进行移动处理，这时候你应该使用Localkey。</p><p>Localkey 派生出了许多子类 key：</p><ul><li>ValueKey : ValueKey(‘String’)</li><li>ObjectKey : ObjectKey(Object)</li><li>UniqueKey : UniqueKey()</li></ul><p>Valuekey 又派生出了 PageStorageKey : PageStorageKey(‘value’)</p><h3 id="GlobalKey">GlobalKey</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@optionalTypeArgs</span><br><span class="line">abstract class GlobalKey&lt;T extends State&lt;StatefulWidget&gt;&gt; extends Key &#123;</span><br><span class="line">···</span><br><span class="line">static final Map&lt;GlobalKey, Element&gt; _registry = &lt;GlobalKey, Element&gt;&#123;&#125;;</span><br><span class="line">static final Set&lt;Element&gt; _debugIllFatedElements = HashSet&lt;Element&gt;();</span><br><span class="line">static final Map&lt;GlobalKey, Element&gt; _debugReservations = &lt;GlobalKey, Element&gt;&#123;&#125;;</span><br><span class="line">···</span><br><span class="line">BuildContext get currentContext ···</span><br><span class="line">Widget get currentWidget ···</span><br><span class="line">T get currentState ···</span><br></pre></td></tr></table></figure><p>GlobalKey 使用了一个静态常量 Map 来保存它对应的 Element。</p><p>你可以通过 GlobalKey 找到持有该GlobalKey的 <strong>Widget</strong>，<strong>State</strong> 和 <strong>Element</strong>。</p><p>注意：GlobalKey 是非常昂贵的，需要谨慎使用。</p><h2 id="什么时候需要使用-Key">什么时候需要使用 Key</h2><h3 id="ValueKey">ValueKey</h3><p>如果您有一个 Todo List 应用程序，它将会记录你需要完成的事情。我们假设每个 Todo 事情都各不相同，而你想要对每个 Todo 进行滑动删除操作。</p><p>这时候就需要使用 ValueKey！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">return TodoItem(</span><br><span class="line">    key: ValueKey(todo.task),</span><br><span class="line">    todo: todo,</span><br><span class="line">    onDismissed: (direction)&#123;</span><br><span class="line">        _removeTodo(context, todo);</span><br><span class="line">    &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="ObjectKey">ObjectKey</h3><p>如果你有一个生日应用，它可以记录某个人的生日，并用列表显示出来，同样的还是需要有一个滑动删除操作。</p><p>我们知道人名可能会重复，这时候你无法保证给 Key 的值每次都会不同。但是，当人名和生日组合起来的 Object 将具有唯一性。</p><p>这时候你需要使用 ObjectKey！</p><h3 id="UniqueKey">UniqueKey</h3><p>如果组合的 Object 都无法满足唯一性的时候，你想要确保每一个 Key 都具有唯一性。那么，你可以使用 UniqueKey。它将会通过该对象生成一个具有唯一性的 hash 码。</p><p>不过这样做，<strong>每次 Widget 被构建时都会去重新生成一个新的 UniqueKey</strong>，失去了一致性。也就是说你的小部件还是会改变。（还不如不用😂）</p><h3 id="PageStorageKey">PageStorageKey</h3><p>当你有一个滑动列表，你通过某一个 Item 跳转到了一个新的页面，当你返回之前的列表页面时，你发现滑动的距离回到了顶部。这时候，给 Sliver 一个 PageStorageKey！它将能够保持 Sliver 的滚动状态。（没怎么见过，怪怪的）</p><h3 id="GlobalKey-2">GlobalKey</h3><p>GlobalKey 能够跨 Widget 访问状态。 在这里我们有一个 Switcher 小部件，它可以通过 changeState 改变它的状态。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwitcherScreenState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SwitcherScreen</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> isActive = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Switch.adaptive(</span><br><span class="line">            value: isActive,</span><br><span class="line">            onChanged: (<span class="built_in">bool</span> currentStatus) &#123;</span><br><span class="line">              isActive = currentStatus;</span><br><span class="line">              setState(() &#123;&#125;);</span><br><span class="line">            &#125;),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  changeState() &#123;</span><br><span class="line">    isActive = !isActive;</span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我们想要在外部改变该状态，这时候就需要使用 GlobalKey。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ScreenState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Screen</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> GlobalKey&lt;SwitcherScreenState&gt; key = GlobalKey&lt;SwitcherScreenState&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: SwitcherScreen(</span><br><span class="line">        key: key,</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(onPressed: () &#123;</span><br><span class="line">        key.currentState.changeState();</span><br><span class="line">      &#125;),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们通过定义了一个 GlobalKey 并传递给 SwitcherScreen。然后我们便可以通过这个 key 拿到它所绑定的 SwitcherState 并在外部调用 changeState 改变状态了。</p><h1>参考</h1><p><a href="https://api.flutter.dev/flutter/foundation/Key-class.html">https://api.flutter.dev/flutter/foundation/Key-class.html</a></p><p><a href="https://medium.flutterdevs.com/keys-in-flutter-104fc01db48f">https://medium.flutterdevs.com/keys-in-flutter-104fc01db48f</a></p><p><a href="https://zhuanlan.zhihu.com/p/346892355">https://zhuanlan.zhihu.com/p/346892355</a></p><p><a href="https://juejin.cn/post/6844903811870359559">https://juejin.cn/post/6844903811870359559</a></p>]]></content>
      
      
      <categories>
          
          <category> 学线培训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学线培训 </tag>
            
            <tag> 移动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式基本原则</title>
      <link href="/2022/04/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/"/>
      <url>/2022/04/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1>设计模式基本原则</h1><h2 id="开闭原则-Open-Close-Principle">开闭原则(<code>Open Close Principle</code>)</h2><p>开闭原则的意思是：<strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。</p><p>可以通过“抽象约束、封装变化”来实现开闭原则，即通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类中。因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。</p><p>开闭原则无非就是想表达这样一层意思：<strong>用抽象构建框架，用实现扩展细节</strong>。因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。当然前提是我们的抽象要合理，要对需求的变更有前瞻性和预见性才行。</p><h2 id="里氏替换原则（Liskov-Substitution-Principle）">里氏替换原则（<code>Liskov Substitution Principle</code>）</h2><p>里氏替换原则是指，任何基类可以出现的地方，子类一定可以出现，也就是说：<strong>子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法</strong>。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏替换原则是对开闭原则的补充。<strong>实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏替换原则是对实现抽象化的具体步骤的规范</strong>。</p><p>对里氏替换原则的定义可以总结如下：</p><blockquote><ul><li><strong>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法</strong></li><li>子类中可以增加自己特有的方法</li><li><strong>当子类的方法重载父类的方法时，方法的前置条件（即方法的输入参数）要比父类的方法更宽松</strong></li><li><strong>当子类的方法实现父类的抽象方法时（重写/重载或实现抽象方法），方法的后置条件（即方法的的输出/返回值）要比父类的方法更严格或相等</strong></li></ul></blockquote><p>通过重写父类的方法来完成新的功能写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大。</p><h3 id="举例">举例</h3><p>举例说明继承的风险，我们需要完成一个两数相减的功能，由类A来负责。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a-b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">A a = <span class="keyword">new</span> A();</span><br><span class="line">System.out.println(<span class="string">&quot;100-50=&quot;</span>+a.func1(<span class="number">100</span>, <span class="number">50</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;100-80=&quot;</span>+a.func1(<span class="number">100</span>, <span class="number">80</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100-50=50</span><br><span class="line">100-80=20</span><br></pre></td></tr></table></figure><p>后来，我们需要增加一个新的功能：完成两数相加，然后再与100求和，由类B来负责。即类B需要完成两个功能</p><ul><li><p>两数相减。</p></li><li><p>两数相加，然后再加100。</p></li></ul><p>由于类A已经实现了第一个功能，所以类B继承类A后，只需要再完成第二个功能就可以了，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> func1(a,b)+<span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">B b = <span class="keyword">new</span> B();</span><br><span class="line">System.out.println(<span class="string">&quot;100-50=&quot;</span>+b.func1(<span class="number">100</span>, <span class="number">50</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;100-80=&quot;</span>+b.func1(<span class="number">100</span>, <span class="number">80</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;100+20+100=&quot;</span>+b.func2(<span class="number">100</span>, <span class="number">20</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类B完成后，运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">100-50=150</span><br><span class="line">100-80=180</span><br><span class="line">100+20+100=220</span><br></pre></td></tr></table></figure><p>我们发现原本运行正常的相减功能发生了错误。原因就是类B在给方法起名时无意中重写了父类的方法，造成所有运行相减功能的代码全部调用了类B重写后的方法，造成原本运行正常的功能出现了错误。在本例中，引用基类A完成的功能，换成子类B之后，发生了异常。<strong>在实际编程中，我们常常会通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的几率非常大</strong>。如果非要重写父类的方法，比较通用的做法是：原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖、聚合，组合等关系代替。</p><h2 id="依赖倒转原则（Dependence-Inversion-Principle）">依赖倒转原则（<code>Dependence Inversion Principle</code>）</h2><p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象（<code>High level modules shouldnot depend upon low level modules.Both should depend upon abstractions.Abstractions should not depend upon details. Details should depend upon abstractions</code>）。其核心思想是：<strong>要面向接口编程，不要面向实现编程</strong>。</p><p>总结如下：</p><blockquote><ul><li><p><strong>每个类尽量提供接口或抽象类，或者两者都具备</strong>。</p></li><li><p><strong>变量的声明类型尽量是接口或者是抽象类</strong>。</p></li><li><p><strong>任何类都不应该从具体类派生</strong>。</p></li><li><p>使用继承时尽量遵循里氏替换原则。</p></li></ul></blockquote><h3 id="举例-2">举例</h3><p>依赖倒置原则的核心思想是<strong>面向接口编程</strong>，我们依旧用一个例子来说明面向接口编程比相对于面向实现编程好在什么地方。场景是这样的，母亲给孩子讲故事，只要给她一本书，她就可以照着书给孩子讲故事了。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;很久很久以前有一个阿拉伯的故事……&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mother</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">narrate</span><span class="params">(Book book)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;妈妈开始讲故事&quot;</span>);</span><br><span class="line">System.out.println(book.getContent());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Mother mother = <span class="keyword">new</span> Mother();</span><br><span class="line">mother.narrate(<span class="keyword">new</span> Book());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">妈妈开始讲故事</span><br><span class="line">很久很久以前有一个阿拉伯的故事……</span><br></pre></td></tr></table></figure><p>运行良好，假如有一天，需求变成这样：不是给书而是给一份报纸，让这位母亲讲一下报纸上的故事，报纸的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Newspaper</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;林书豪38+7领导尼克斯击败湖人……&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这位母亲却办不到，因为她居然不会读报纸上的故事，这太荒唐了，只是将书换成报纸，居然必须要修改<code>Mother</code>才能读。假如以后需求换成杂志呢？换成网页呢？还要不断地修改<code>Mother</code>，这显然不是好的设计。原因就是<code>Mother</code>与<code>Book</code>之间的耦合性太高了，必须降低他们之间的耦合度才行。</p><p>我们引入一个抽象的接口<code>IReader</code>。读物，只要是带字的都属于读物：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IReader</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Mother</code>类与接口<code>IReader</code>发生依赖关系，而<code>Book</code>和<code>Newspaper</code>都属于读物的范畴，他们各自都去实现<code>IReader</code>接口，这样就符合依赖倒置原则了，代码修改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Newspaper</span> <span class="keyword">implements</span> <span class="title">IReader</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;林书豪17+9助尼克斯击败老鹰……&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">IReader</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;很久很久以前有一个阿拉伯的故事……&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mother</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">narrate</span><span class="params">(IReader reader)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;妈妈开始讲故事&quot;</span>);</span><br><span class="line">System.out.println(reader.getContent());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Mother mother = <span class="keyword">new</span> Mother();</span><br><span class="line">mother.narrate(<span class="keyword">new</span> Book());</span><br><span class="line">mother.narrate(<span class="keyword">new</span> Newspaper());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">妈妈开始讲故事</span><br><span class="line">很久很久以前有一个阿拉伯的故事……</span><br><span class="line">妈妈开始讲故事</span><br><span class="line">林书豪17+9助尼克斯击败老鹰……</span><br></pre></td></tr></table></figure><p>这样修改后，无论以后怎样扩展<code>Client</code>类，都不需要再修改<code>Mother</code>类了。这只是一个简单的例子，实际情况中，代表高层模块的<code>Mother</code>类将负责完成主要的业务逻辑，一旦需要对它进行修改，引入错误的风险极大。所以遵循依赖倒置原则可以降低类之间的耦合性，提高系统的稳定性，降低修改程序造成的风险。</p><p>采用依赖倒置原则给多人并行开发带来了极大的便利，比如上例中，原本<code>Mother</code>类与<code>Book</code>类直接耦合时，<code>Mother</code>类必须等<code>Book</code>类编码完成后才可以进行编码，因为<code>Mother</code>类依赖于<code>Book</code>类。修改后的程序则可以同时开工，互不影响，因为<code>Mother</code>与<code>Book</code>类一点关系也没有。参与协作开发的人越多、项目越庞大，采用依赖导致原则的意义就越重大。现在很流行的TDD开发模式就是依赖倒置原则最成功的应用。</p><h2 id="单一职责原则（Single-Responsibility-Principle）">单一职责原则（<code>Single Responsibility Principle</code>）</h2><p>单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分（<code>There should never be more than one reason for a class to change</code>）。</p><blockquote><p>单一职责原则是最简单但又最难运用的原则，需要设计人员发现类的不同职责并将其分离，再封装到不同的类或模块中。</p></blockquote><p>该原则提出对象不应该承担太多职责，如果一个对象承担了太多的职责，至少存在以下两个缺点：</p><ul><li><p>一个职责的变化可能会削弱或者抑制这个类实现其他职责的能力；</p></li><li><p>当客户端需要该对象的某一个职责时，不得不将其他不需要的职责全都包含进来，从而造成冗余代码或代码的浪费。</p></li></ul><p>说到单一职责原则，很多人都会不屑一顾。因为它太简单了。稍有经验的程序员即使从来没有读过设计模式、从来没有听说过单一职责原则，在设计软件时也会自觉的遵守这一重要原则，因为这是常识。在软件编程中，谁也不希望因为修改了一个功能导致其他的功能发生故障。而避免出现这一问题的方法便是遵循单一职责原则。虽然单一职责原则如此简单，并且被认为是常识，但是即便是经验丰富的程序员写出的程序，也会有违背这一原则的代码存在。为什么会出现这种现象呢？因为有职责扩散。<strong>所谓职责扩散，就是因为某种原因，职责P被分化为粒度更细的职责P1和P2</strong>。</p><p>比如：类T只负责一个职责P，这样设计是符合单一职责原则的。后来由于某种原因，也许是需求变更了，也许是程序的设计者境界提高了，需要将职责P细分为粒度更细的职责P1，P2，这时如果要使程序遵循单一职责原则，需要将类T也分解为两个类T1和T2，分别负责P1、P2两个职责。但是在程序已经写好的情况下，这样做简直太费时间了。所以，简单的修改类T，用它来负责两个职责是一个比较不错的选择，虽然这样做有悖于单一职责原则。（这样做的风险在于职责扩散的不确定性，因为我们不会想到这个职责P，在未来可能会扩散为P1，P2，P3，P4……Pn。所以记住，在职责扩散到我们无法控制的程度之前，立刻对代码进行重构。）</p><h3 id="举例-3">举例</h3><p>用一个类描述动物呼吸这个场景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breathe</span><span class="params">(String animal)</span></span>&#123;</span><br><span class="line">System.out.println(animal+<span class="string">&quot;呼吸空气&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Animal animal = <span class="keyword">new</span> Animal();</span><br><span class="line">animal.breathe(<span class="string">&quot;牛&quot;</span>);</span><br><span class="line">animal.breathe(<span class="string">&quot;羊&quot;</span>);</span><br><span class="line">animal.breathe(<span class="string">&quot;猪&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">牛呼吸空气</span><br><span class="line">羊呼吸空气</span><br><span class="line">猪呼吸空气</span><br></pre></td></tr></table></figure><p>程序上线后，发现问题了，并不是所有的动物都呼吸空气的，比如鱼就是呼吸水的。修改时如果遵循单一职责原则，需要将<code>Animal</code>类细分为陆生动物类<code>Terrestrial</code>，水生动物<code>Aquatic</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Terrestrial</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breathe</span><span class="params">(String animal)</span></span>&#123;</span><br><span class="line">System.out.println(animal+<span class="string">&quot;呼吸空气&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Aquatic</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breathe</span><span class="params">(String animal)</span></span>&#123;</span><br><span class="line">System.out.println(animal+<span class="string">&quot;呼吸水&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Terrestrial terrestrial = <span class="keyword">new</span> Terrestrial();</span><br><span class="line">terrestrial.breathe(<span class="string">&quot;牛&quot;</span>);</span><br><span class="line">terrestrial.breathe(<span class="string">&quot;羊&quot;</span>);</span><br><span class="line">terrestrial.breathe(<span class="string">&quot;猪&quot;</span>);</span><br><span class="line"></span><br><span class="line">Aquatic aquatic = <span class="keyword">new</span> Aquatic();</span><br><span class="line">aquatic.breathe(<span class="string">&quot;鱼&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">牛呼吸空气</span><br><span class="line">羊呼吸空气</span><br><span class="line">猪呼吸空气</span><br><span class="line">鱼呼吸水</span><br></pre></td></tr></table></figure><p>我们会发现如果这样修改花销是很大的，除了将原来的类分解之外，还需要修改客户端。而直接修改类<code>Animal</code>来达成目的虽然违背了单一职责原则，但花销却小的多，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breathe</span><span class="params">(String animal)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;鱼&quot;</span>.equals(animal))&#123;</span><br><span class="line">System.out.println(animal+<span class="string">&quot;呼吸水&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(animal+<span class="string">&quot;呼吸空气&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Animal animal = <span class="keyword">new</span> Animal();</span><br><span class="line">animal.breathe(<span class="string">&quot;牛&quot;</span>);</span><br><span class="line">animal.breathe(<span class="string">&quot;羊&quot;</span>);</span><br><span class="line">animal.breathe(<span class="string">&quot;猪&quot;</span>);</span><br><span class="line">animal.breathe(<span class="string">&quot;鱼&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这种修改方式要简单的多。但是却存在着隐患：有一天需要将鱼分为呼吸淡水的鱼和呼吸海水的鱼，则又需要修改<code>Animal</code>类的<code>breathe</code>方法，而对原有代码的修改会对调用“猪”“牛”“羊”等相关功能带来风险，也许某一天你会发现程序运行的结果变为“牛呼吸水”了。这种修改方式直接在代码级别上违背了单一职责原则，虽然修改起来最简单，但隐患却是最大的。还有一种修改方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breathe</span><span class="params">(String animal)</span></span>&#123;</span><br><span class="line">System.out.println(animal+<span class="string">&quot;呼吸空气&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breathe2</span><span class="params">(String animal)</span></span>&#123;</span><br><span class="line">System.out.println(animal+<span class="string">&quot;呼吸水&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Animal animal = <span class="keyword">new</span> Animal();</span><br><span class="line">animal.breathe(<span class="string">&quot;牛&quot;</span>);</span><br><span class="line">animal.breathe(<span class="string">&quot;羊&quot;</span>);</span><br><span class="line">animal.breathe(<span class="string">&quot;猪&quot;</span>);</span><br><span class="line">animal.breathe2(<span class="string">&quot;鱼&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这种修改方式没有改动原来的方法，而是在类中新加了一个方法，这样虽然也违背了单一职责原则，但在方法级别上却是符合单一职责原则的，因为它并没有动原来方法的代码。这三种方式各有优缺点，那么在实际编程中，采用哪一中呢？其实这真的比较难说，需要根据实际情况来确定。我的原则是：<strong>只有逻辑足够简单，才可以在代码级别上违反单一职责原则；只有类中方法数量足够少，才可以在方法级别上违反单一职责原则</strong>；</p><p>例如本文所举的这个例子，它太简单了，它只有一个方法，所以，无论是在代码级别上违反单一职责原则，还是在方法级别上违反，都不会造成太大的影响。实际应用中的类都要复杂的多，<strong>一旦发生职责扩散而需要修改类时，除非这个类本身非常简单，否则还是遵循单一职责原则的好</strong>。</p><h2 id="接口隔离原则（Interface-Segregation-Principle）">接口隔离原则（<code>Interface Segregation Principle</code>）</h2><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。换言之，要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。</p><p>在具体应用接口隔离原则时，应该根据以下几个规则来衡量。</p><blockquote><ul><li><strong>接口尽量小，但是要有限度</strong>。一个接口只服务于一个子模块或业务逻辑。</li><li>为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法。</li><li>了解环境，拒绝盲从。每个项目或产品都有选定的环境因素，环境不同，接口拆分的标准就不同深入了解业务逻辑。</li><li>提高内聚，<strong>减少对外交互</strong>。使接口用最少的方法去完成最多的事情。</li></ul></blockquote><p>很多人会觉的接口隔离原则跟单一职责原则很相似，其实不然。其一，单一职责原则原注重的是职责；而接口隔离原则注重对接口依赖的隔离。其二，单一职责原则主要是约束类，其次才是接口和方法，它针对的是程序中的实现和细节；而接口隔离原则主要约束接口接口，主要针对抽象，针对程序整体框架的构建。</p><h3 id="举例-4">举例</h3><img src="0.png" alt="未遵循接口隔离原则的设计" style="zoom:80%;" /><p>这个图的意思是：<code>类A</code>依赖<code>接口I</code>中的<code>方法1</code>、<code>方法2</code>、<code>方法3</code>，<code>类B</code>是对<code>类A</code>依赖的实现。<code>类C</code>依赖<code>接口I</code>中的<code>方法1</code>、<code>方法4</code>、<code>方法5</code>，<code>类D</code>是对<code>类C</code>依赖的实现。对于<code>类B</code>和<code>类D</code>来说，虽然他们都存在着用不到的方法（也就是图中红色字体标记的方法），但由于实现了<code>接口I</code>，所以也必须要实现这些用不到的方法。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">I</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method5</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span><span class="params">(I i)</span></span>&#123;</span><br><span class="line">i.method1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend2</span><span class="params">(I i)</span></span>&#123;</span><br><span class="line">i.method2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend3</span><span class="params">(I i)</span></span>&#123;</span><br><span class="line">i.method3();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">I</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;类B实现接口I的方法1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;类B实现接口I的方法2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;类B实现接口I的方法3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对于类B来说，method4和method5不是必需的，但是由于接口A中有这两个方法，</span></span><br><span class="line"><span class="comment">//所以在实现过程中即使这两个方法的方法体为空，也要将这两个没有作用的方法进行实现。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method5</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span><span class="params">(I i)</span></span>&#123;</span><br><span class="line">i.method1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend2</span><span class="params">(I i)</span></span>&#123;</span><br><span class="line">i.method4();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend3</span><span class="params">(I i)</span></span>&#123;</span><br><span class="line">i.method5();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">I</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;类D实现接口I的方法1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对于类D来说，method2和method3不是必需的，但是由于接口A中有这两个方法，</span></span><br><span class="line"><span class="comment">//所以在实现过程中即使这两个方法的方法体为空，也要将这两个没有作用的方法进行实现。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;类D实现接口I的方法4&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;类D实现接口I的方法5&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">A a = <span class="keyword">new</span> A();</span><br><span class="line">a.depend1(<span class="keyword">new</span> B());</span><br><span class="line">a.depend2(<span class="keyword">new</span> B());</span><br><span class="line">a.depend3(<span class="keyword">new</span> B());</span><br><span class="line"></span><br><span class="line">C c = <span class="keyword">new</span> C();</span><br><span class="line">c.depend1(<span class="keyword">new</span> D());</span><br><span class="line">c.depend2(<span class="keyword">new</span> D());</span><br><span class="line">c.depend3(<span class="keyword">new</span> D());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，如果接口过于臃肿，只要接口中出现的方法，不管对依赖于它的类有没有用处，实现类中都必须去实现这些方法，这显然不是好的设计。如果将这个设计修改为符合接口隔离原则，就必须对<code>接口I</code>进行拆分。在这里我们将原有的<code>接口I</code>拆分为三个接口，拆分后的设计如图2所示：</p><img src="1.png" alt="遵循接口隔离原则的设计" style="zoom:80%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">I1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">I2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">I3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method5</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span><span class="params">(I1 i)</span></span>&#123;</span><br><span class="line">i.method1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend2</span><span class="params">(I2 i)</span></span>&#123;</span><br><span class="line">i.method2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend3</span><span class="params">(I2 i)</span></span>&#123;</span><br><span class="line">i.method3();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">I1</span>, <span class="title">I2</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;类B实现接口I1的方法1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;类B实现接口I2的方法2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;类B实现接口I2的方法3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span><span class="params">(I1 i)</span></span>&#123;</span><br><span class="line">i.method1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend2</span><span class="params">(I3 i)</span></span>&#123;</span><br><span class="line">i.method4();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend3</span><span class="params">(I3 i)</span></span>&#123;</span><br><span class="line">i.method5();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">I1</span>, <span class="title">I3</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;类D实现接口I1的方法1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;类D实现接口I3的方法4&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;类D实现接口I3的方法5&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迪米特法则-最少知道原则（Demeter-Principle）">迪米特法则/最少知道原则（<code>Demeter Principle</code>）</h2><p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。</p><blockquote><p>对于被依赖的类来说，无论逻辑多么复杂，都尽量地的将逻辑封装在类的内部，对外除了提供的public方法，不对外泄漏任何信息。迪米特法则还有一个更简单的定义：<strong>只与直接的朋友通信</strong>。首先来解释一下什么是直接的朋友：每个对象都会与其他对象有耦合关系，<strong>只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖、关联、组合、聚合等。其中，我们称出现成员变量、方法参数、方法返回值中的类为直接的朋友，而出现在局部变量中的类则不是直接的朋友</strong>。也就是说，陌生的类最好不要作为局部变量的形式出现在类的内部。</p></blockquote><p>从迪米特法则的定义和特点可知，它强调以下两点：</p><ol><li><p>从依赖者的角度来说，只依赖应该依赖的对象。</p></li><li><p>从被依赖者的角度说，只暴露应该暴露的方法。</p></li></ol><p>所以，在运用迪米特法则时要注意以下 6 点。</p><ol><li><strong>在类的划分上，应该创建弱耦合的类</strong>。类与类之间的耦合越弱，就越有利于实现可复用的目标。</li><li>在类的结构设计上，<strong>尽量降低类成员的访问权限</strong>。</li><li>在类的设计上，<strong>优先考虑将一个类设置成不变类</strong>。</li><li>在对其他类的引用上，将引用其他对象的次数降到最低。</li><li><strong>不暴露类的属性成员，而应该提供相应的访问器</strong>（set 和 get 方法）。</li><li>谨慎使用序列化（Serializable）功能。</li></ol><h3 id="举例-5">举例</h3><p>有一个集团公司，下属单位有分公司和直属部门，现在要求打印出所有下属单位的员工ID。先来看一下违反迪米特法则的设计。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//总公司员工</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//分公司员工</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubEmployee</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubCompanyManager</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SubEmployee&gt; <span class="title">getAllEmployee</span><span class="params">()</span></span>&#123;</span><br><span class="line">List&lt;SubEmployee&gt; list = <span class="keyword">new</span> ArrayList&lt;SubEmployee&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</span><br><span class="line">SubEmployee emp = <span class="keyword">new</span> SubEmployee();</span><br><span class="line"><span class="comment">//为分公司人员按顺序分配一个ID</span></span><br><span class="line">emp.setId(<span class="string">&quot;分公司&quot;</span>+i);</span><br><span class="line">list.add(emp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompanyManager</span></span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getAllEmployee</span><span class="params">()</span></span>&#123;</span><br><span class="line">List&lt;Employee&gt; list = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">30</span>; i++)&#123;</span><br><span class="line">Employee emp = <span class="keyword">new</span> Employee();</span><br><span class="line"><span class="comment">//为总公司人员按顺序分配一个ID</span></span><br><span class="line">emp.setId(<span class="string">&quot;总公司&quot;</span>+i);</span><br><span class="line">list.add(emp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAllEmployee</span><span class="params">(SubCompanyManager sub)</span></span>&#123;</span><br><span class="line">List&lt;SubEmployee&gt; list1 = sub.getAllEmployee();</span><br><span class="line"><span class="keyword">for</span>(SubEmployee e:list1)&#123;</span><br><span class="line">System.out.println(e.getId());</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">List&lt;Employee&gt; list2 = <span class="keyword">this</span>.getAllEmployee();</span><br><span class="line"><span class="keyword">for</span>(Employee e:list2)&#123;</span><br><span class="line">System.out.println(e.getId());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">CompanyManager e = <span class="keyword">new</span> CompanyManager();</span><br><span class="line">e.printAllEmployee(<span class="keyword">new</span> SubCompanyManager());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在这个设计的主要问题出在<code>CompanyManager</code>中，根据迪米特法则，只与直接的朋友发生通信，而<code>SubEmployee</code>类并不是<code>CompanyManager</code>类的直接朋友（以局部变量出现的耦合不属于直接朋友），从逻辑上讲总公司只与他的分公司耦合就行了，与分公司的员工并没有任何联系，这样设计显然是增加了不必要的耦合。按照迪米特法则，应该避免类中出现这样非直接朋友关系的耦合。修改后的代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubCompanyManager</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SubEmployee&gt; <span class="title">getAllEmployee</span><span class="params">()</span></span>&#123;</span><br><span class="line">List&lt;SubEmployee&gt; list = <span class="keyword">new</span> ArrayList&lt;SubEmployee&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</span><br><span class="line">SubEmployee emp = <span class="keyword">new</span> SubEmployee();</span><br><span class="line"><span class="comment">//为分公司人员按顺序分配一个ID</span></span><br><span class="line">emp.setId(<span class="string">&quot;分公司&quot;</span>+i);</span><br><span class="line">list.add(emp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printEmployee</span><span class="params">()</span></span>&#123;</span><br><span class="line">List&lt;SubEmployee&gt; list = <span class="keyword">this</span>.getAllEmployee();</span><br><span class="line"><span class="keyword">for</span>(SubEmployee e:list)&#123;</span><br><span class="line">System.out.println(e.getId());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompanyManager</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getAllEmployee</span><span class="params">()</span></span>&#123;</span><br><span class="line">List&lt;Employee&gt; list = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">30</span>; i++)&#123;</span><br><span class="line">Employee emp = <span class="keyword">new</span> Employee();</span><br><span class="line"><span class="comment">//为总公司人员按顺序分配一个ID</span></span><br><span class="line">emp.setId(<span class="string">&quot;总公司&quot;</span>+i);</span><br><span class="line">list.add(emp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAllEmployee</span><span class="params">(SubCompanyManager sub)</span></span>&#123;</span><br><span class="line">sub.printEmployee();</span><br><span class="line">List&lt;Employee&gt; list2 = <span class="keyword">this</span>.getAllEmployee();</span><br><span class="line"><span class="keyword">for</span>(Employee e:list2)&#123;</span><br><span class="line">System.out.println(e.getId());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后，为分公司增加了打印人员ID的方法，总公司直接调用来打印，从而避免了与分公司的员工发生耦合。</p><h2 id="合成复用原则（Composite-Reuse-Principle）">合成复用原则（<code>Composite Reuse Principle</code>）</h2><p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。如果要使用继承关系，则必须严格遵循里氏替换原则。<strong>合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范</strong>。</p><h2 id="聚合与继承的对比">聚合与继承的对比</h2><p>通常类的复用分为继承复用和合成复用两种，继承复用虽然有简单和易实现的优点，但它也存在以下缺点。</p><ul><li><p><strong>继承复用破坏了类的封装性</strong>。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用。</p></li><li><p><strong>子类与父类的耦合度高</strong>。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护。</p></li><li><p><strong>限制了复用的灵活性</strong>。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化。</p></li></ul><p>采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点。</p><ul><li><p>它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用。</p></li><li><p>新旧类之间的耦合度低。这种复用所需的依赖较少，新对象存取成分对象的唯一方法是通过成分对象的接口。</p></li><li><p>复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象。</p></li></ul><h1>最后总结</h1><p>说到这里，再回想一下前面说的5项原则，恰恰是告诉我们用抽象构建框架，用实现扩展细节的注意事项而已：单一职责原则告诉我们实现类要职责单一；里氏替换原则告诉我们不要破坏继承体系；依赖倒置原则告诉我们要面向接口编程；接口隔离原则告诉我们在设计接口的时候要精简单一；迪米特法则告诉我们要降低耦合。而开闭原则是总纲，他告诉我们要对扩展开放，对修改关闭。总而言之，这些原则的目的只有一个：<strong>降低对象之间的耦合，增加程序的可复用性、可扩展性和可维护性</strong>。</p><p>最后说明一下如何去遵守这六个原则。对这六个原则的遵守并不是是和否的问题，而是多和少的问题，也就是说，我们一般不会说有没有遵守，而是说遵守程度的多少。任何事都是过犹不及，设计模式的六个设计原则也是一样，制定这六个原则的目的并不是要我们刻板的遵守他们，而需要根据实际情况灵活运用。对他们的遵守程度只要在一个合理的范围内，就算是良好的设计。</p><h1>参考</h1><blockquote><p><a href="https://blog.csdn.net/zhengzhb/article/details/7296944">https://blog.csdn.net/zhengzhb/article/details/7296944</a></p><p><a href="https://blog.csdn.net/zhengzhb/article/details/7289269%E7%AD%89%E7%B3%BB%E5%88%97">https://blog.csdn.net/zhengzhb/article/details/7289269等系列</a></p><p><a href="https://www.runoob.com/design-pattern/design-pattern-intro.html">https://www.runoob.com/design-pattern/design-pattern-intro.html</a></p><p><a href="http://c.biancheng.net/view/1324.html">http://c.biancheng.net/view/1324.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统实验四-进程同步</title>
      <link href="/2022/04/19/os-%E5%AE%9E%E9%AA%8C%E5%9B%9B/"/>
      <url>/2022/04/19/os-%E5%AE%9E%E9%AA%8C%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<h1>进程同步实验</h1><h2 id="ipcs"><code>ipcs -*</code></h2><h3 id="ipcs-m"><code>ipcs -m</code></h3><p><code>linux</code>中可用命令<code>ipcs -m</code> 观察<strong>共享内存</strong>情况</p><ul><li><p><code>key</code> 共享内存关键值</p></li><li><p><code>shmid</code> 共享内存标识</p></li><li><p><code>owner</code> 共享内存所由者</p></li><li><p><code>perm</code> 共享内存使用权限</p></li><li><p><code>byte</code> 共享内存字节数</p></li><li><p><code>nattch</code> 共享内存使用计数</p></li><li><p><code>status</code> 共享内存状态</p></li></ul><h3 id="ipcs-s"><code>ipcs -s</code></h3><p><code>linux</code>中可用命令<code>ipcs -s</code> 观察<strong>信号量数组</strong>的情况</p><ul><li><p><code>semid</code> 信号量的标识号</p></li><li><p><code>nsems</code> 信号量的个数</p></li></ul><h3 id="ipcs-q"><code>ipcs -q</code></h3><p><code>linux</code>中可用命令<code>ipcs -q</code> 观察<strong>消息队列</strong>的情况。</p><ul><li><code>msgmid</code> 消息队列的标识号</li><li><code>used-bytes</code> 消息的字节长度</li><li><code>messages</code> 消息队列中的消息条数</li></ul><h3 id="ipcrm"><code>ipcrm</code></h3><p>在权限允许的情况下您可以使用<code>ipcrm</code>命令删除系统当前存在的IPC 对象中的任一个对象。</p><p><code>ipcrm -m 21482</code>： 删除标号为21482 的共享内存。</p><p><code>ipcrm -s 32673</code>： 删除标号为32673 的信号量数组。</p><p><code>ipcrm -q 18465</code>： 删除标号为18465 的消息队列。</p><h2 id="系统调用">系统调用</h2><p>IPC 对象有关的系统调用函数原型都声明在以下的头文件中 :</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>其余参见指导书</p><h3 id="共享内存">共享内存</h3><h4 id="创建">创建</h4><p>创建一段共享内存系统调用语法 :</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmget</span><span class="params">(<span class="keyword">key_t</span> key,<span class="keyword">int</span> size,<span class="keyword">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure><p><code>key</code> 共享内存的键值,可以为IPC_PRIVATE,也可以用整数指定一个</p><p><code>size</code> 共享内存字节长度</p><p><code>flags</code> 共享内存权限位。</p><p><code>shmget</code> 调用成功后，如果<code>key</code> 用新整数指定，且<code>flags</code> 中设置了<code>IPC_CREAT</code>位，则返回一个新建立的共享内存段标识符。 如果指定的<code>key</code> 已存在则返回与<code>key</code>关联的标识符。 不成功返回-1</p><h4 id="附加">附加</h4><p>令一段共享内存附加到调用进程中的系统调用语法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">shmat</span><span class="params">(<span class="keyword">int</span> shmid, <span class="keyword">char</span> *shmaddr,<span class="keyword">int</span> flags)</span></span></span><br></pre></td></tr></table></figure><p><code>shmid</code> 由<code>shmget</code>创建的共享内存的标识符</p><p><code>shmaddr</code> 总为0,表示用调用者指定的指针指向共享段</p><p><code>flags</code> 共享内存权限位</p><p><code>shmat</code>调用成功后返回附加的共享内存首地址</p><h4 id="分离">分离</h4><p>令一段共享内存从到调用进程中分离出去的系统调用语法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmdt</span><span class="params">(<span class="keyword">char</span> *shmadr)</span></span>;</span><br></pre></td></tr></table></figure><p><code>shmadr</code> 进程中指向附加共享内存的指针</p><p><code>shmdt</code> 调用成功将递减附加计数，当计数为0，将删除共享内存。调用不成功返回-1。</p><h3 id="信号量">信号量</h3><h4 id="创建-2">创建</h4><p>创建一个信号量数组的系统调用有语法:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semget</span><span class="params">(<span class="keyword">key_t</span> key,<span class="keyword">int</span> nsems, <span class="keyword">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure><p><code>key</code> 信号量数组的键值,可以为<code>IPC_PRIVATE</code>,也可以用整数指定一个</p><p><code>nsems</code> 信号量数组中信号量的个数</p><p><code>flags</code> 信号量数组权限位。如果<code>key</code>用整数指定，应设置<code>IPC_CREAT</code> 位。</p><p><code>semget</code>调用成功，如果<code>key</code>用新整数指定，且<code>flags</code> 中设置了<code>IPC_CREAT</code> 位，则返回一个新建立的信号等数组标识符。 如果指定的整数<code>key</code>已存在则返回与<code>key</code>关联的标识符。 不成功返回-1</p><h4 id="操作">操作</h4><p>操作信号量数组的系统调用语法:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semop</span><span class="params">(<span class="keyword">int</span> semid,struct sembuf *semop, <span class="keyword">unsigned</span> nops)</span></span>;</span><br></pre></td></tr></table></figure><p><code>semid</code> 由<code>semget</code>创建的信号量数组的标识符</p><p><code>semop</code> 指向<code>sembuf</code>数据结构的指针</p><p><code>nops</code> 信号量上的操作数,例如该值为1 相当于P操作,-1 相当于V操作.</p><p><code>semop</code>调用成功返回0，不成功返回-1。</p><h4 id="控制">控制</h4><p>控制信号量数组的系统调用语法:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semctl</span><span class="params">(<span class="keyword">int</span> semid,<span class="keyword">int</span> semnum,<span class="keyword">int</span> cmd, <span class="keyword">union</span> semun arg)</span></span>;</span><br></pre></td></tr></table></figure><p><code>semid</code> 由<code>semget</code>创建的信号量数组的标识符</p><p><code>semnum</code> 该信号量数组中的第几个信号量</p><p><code>cmd</code> 对信号量发出的控制命令。例如:</p><p><code>GETVAL</code> 返回当前信号量状态</p><p><code>SETVAL</code> 设置信号量状态</p><p><code>IPC_RMD</code> 删除标号为<code>semid</code>的信号量</p><p><code>arg</code> 保存信号量状态的联合体,信号量的值是其中一个基本成员</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">semun</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> val; <span class="comment">/* value for SETVAL */</span></span><br><span class="line">......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>semctl</code> 执行不成功返回-1，否则返回指定的<code>cmd</code>的值。</p><h3 id="semget">semget()</h3><p><code>semget()</code>函数既可以用于获取之前创建的信号量集合，也可以用于创建新的信号量集合。<code>semget()</code>的函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 成功返回信号量集合的标识符，否则返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">int</span> nsems, <span class="keyword">int</span> semflg)</span></span>;</span><br></pre></td></tr></table></figure><p><code>key</code>是绑定在信号量集合上的，我们可以用<code>key</code>来寻找已经创建的信号量集合，或者用于创建并绑定新的信号量集合。注意，<code>key</code>和函数的返回值(信号量集合)不是一样的。<code>nsems</code>表示该信号量集合有多少个信号量，如果用信号量来创建<code>binary semaphore</code>，我们只需要将<code>nsems</code>设置为1。<code>semflg</code>是设置信号量集合的标志位，其中最低9位是信号量集合的访问权限(和文件一样，3个8进制数字，比如0777)。其他位和文件创建的标志位类似，比如<code>IPC_CREAT</code>是创建新的信号量集合(文件是<code>O_CREAT</code>)，在使用信号量前，我们都需要创建信号量集合。</p><p>在调用该系统调用后，与信号量集合绑定的数据结构<code>semid_ds</code>也被初始化。</p><h3 id="semop">semop()</h3><p><code>semop()</code>用于操作信号量，简单来说就是对信号量的计数器进行加减。函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semop</span><span class="params">(<span class="keyword">int</span> semid, struct sembuf *sops, <span class="keyword">size_t</span> nsops)</span></span>;</span><br></pre></td></tr></table></figure><p><code>semid</code>是信号量集合的标识符，注意，这不是<code>semget()</code>中的<code>key</code>而是这个函数的返回值。<code>nsops</code>是有多少个信号量需要被操作，在我们的例子中只有1个信号量需要被操作。<code>sops</code>是对信号量操作的具体命令，它是一个<code>struct sembuf</code>类型的结构体，一共有<code>nsops</code>个这样的结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> sem_num;  <span class="comment">/* semaphore number */</span></span><br><span class="line"><span class="keyword">short</span>          sem_op;   <span class="comment">/* semaphore operation */</span></span><br><span class="line"><span class="keyword">short</span>          sem_flg;  <span class="comment">/* operation flags */</span></span><br></pre></td></tr></table></figure><p><code>sem_num</code>是从0开始计数的，表示是第几个信号量；<code>sem_flg</code>可以选择<code>IPC_NOWAIT</code>和<code>SEM_UNDO</code>，<code>SEM_UNDO</code>表示在进程结束后，内核会自动释放没有主动释放的信号量。<code>sops</code>是按照数组的顺序执行的，并且是原子的，如果所有的信号量不能同时操作，那么就不进行操作。</p><p><code>sem_op</code>的使用很简单，但具体如何设置、不同设置有什么不同却比较麻烦。在<code>binary semaphore</code>的例子中，<code>sem_op</code>设置为1就是信号量计数器加1；设置为-1就是信号量计数器减1，下面具体讲讲<code>sem_op</code>设置背后的故事。</p><p>除了上面提到的<code>sembuf</code>结构体，每个信号量还对应一系列变量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span>  semval;   <span class="comment">/* semaphore value */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span>  semzcnt;  <span class="comment">/* # waiting for zero */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span>  semncnt;  <span class="comment">/* # waiting for increase */</span></span><br><span class="line"><span class="keyword">pid_t</span>           sempid;   <span class="comment">/* process ID of [the] last operation */</span></span><br></pre></td></tr></table></figure><p>之前提到的信号量计数器就是<code>semval</code>，<code>semzcnt</code>是等待<code>semval</code>为0的进程数，<code>semncnt</code>是等待<code>semval</code>增加的进程数。<code>semop()</code>对信号量的操作都会改变这些变量。</p><p>如果<code>sem_op</code>设置为正数，那么每次操作后<code>semval</code>将变成<code>semval + sem_op</code>；如果<code>sem_flg</code>设置了<code>SEM_UNDO</code>，那么<code>semadj</code>将变成<code>semadj - sem_op</code>。进程需要有写的权限才能修改信号量。</p><p>如果<code>sem_op</code>设置为负数，情况要复杂些：</p><ol><li>如果<code>abs(sem_op)</code>小于等于<code>semval</code>，那么<code>semval</code>将变成<code>semval - abs(sem_op)</code>；如果<code>sem_flg</code>设置了<code>SEM_UNDO</code>，那么<code>semadj</code>将变成<code>semadj + abs(sem_op)</code>；</li><li>如果<code>abs(sem_op)</code>大于<code>semval</code>并且<code>sem_flg</code>设置了<code>IPC_NOWAIT</code>，那么将返回错误码<code>EAGAIN</code>，并且<code>sem_op</code>的操作不会进行；</li><li>如果2中没有设置<code>IPC_NOWAIT</code>，那么<code>semval</code>将变成<code>semval - abs(sem_op)</code>，同时<code>semncnt</code> 变成<code>semncnt + 1</code>，并且进程会进入<code>sleep</code>状态。当<code>semval &gt;= abs(sem_op)</code>时，进程会被唤醒。</li></ol><p>其他具体细节请参考<code>man semop</code> 。</p><p>从加锁和解锁的角度进行思考，当<code>semval = 0</code>时，如果操作是<code>sem_op = -1</code>，那么<code>semval</code>将变成-1，因此进程进入睡眠状态：这就是加锁的操作；同理，<code>sem_op = 1</code>是解锁的操作。</p><h3 id="semctl">semctl()</h3><p>通过上面两个系统调用，我们知道如何创建信号量以及如何操作信号量，下面这个系统调用可以初始化信号量以及删除信号量。我们先来看看<code>semctl()</code>的函数原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semctl</span><span class="params">(<span class="keyword">int</span> semid, <span class="keyword">int</span> semnum, <span class="keyword">int</span> cmd, ...)</span></span>;</span><br></pre></td></tr></table></figure><p><code>semctl()</code>支持的命令有很多，这里我们主要介绍两个 - <code>IPC_RMID</code>和<code>SETVAL</code>。<code>semid</code>是信号量集合的索引，<code>semnum</code>是其中第几个信号量(从0开始)，<code>cmd</code>就是命令。这个函数是可变长度参数，有些命令是4个参数，第4个参数是<code>union semun</code>，这个<code>union</code>定义如下，注释中注明了哪些命令要用这个<code>union</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">semun</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span>              val;    <span class="comment">/* Value for SETVAL */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> *<span class="title">buf</span>;</span>    <span class="comment">/* Buffer for IPC_STAT, IPC_SET */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span>  *<span class="built_in">array</span>;  <span class="comment">/* Array for GETALL, SETALL */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">seminfo</span>  *__<span class="title">buf</span>;</span>  <span class="comment">/* Buffer for IPC_INFO (Linux-specific) */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用<code>SETVAL</code>命令时，我们就是通过<code>val</code>给<code>semval</code>赋值，用于初始化信号量。我们这里看看如何使用<code>semctl()</code>来初始化和删除信号量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化信号量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">set_sem</span><span class="params">(<span class="keyword">int</span> sem_id)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">semun</span> <span class="title">sem_union</span>;</span>  </span><br><span class="line">    sem_union.val = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">if</span>(semctl(sem_id, <span class="number">0</span>, SETVAL, sem_union) == <span class="number">-1</span>) &#123; </span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to set sem\n&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除信号量  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del_sem</span><span class="params">(<span class="keyword">int</span> sem_id)</span> </span>&#123;  </span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">semun</span> <span class="title">sem_union</span>;</span>  </span><br><span class="line">    <span class="keyword">if</span>(semctl(sem_id, <span class="number">0</span>, IPC_RMID, sem_union) == <span class="number">-1</span>)  </span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to delete sem, sem has been del.\n&quot;</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://rdou.github.io/2020/06/22/Linux%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%803-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1-%E4%BF%A1%E5%8F%B7%E9%87%8F/">https://rdou.github.io/2020/06/22/Linux编程基础3-进程间通信-信号量/</a></p><h2 id="基本逻辑">基本逻辑</h2><p>生产者：首先如果缓冲区满则生产者阻塞，其次生产者不能同时进行提供材料，所以要设置互斥锁使其不能同时进行执行。生产者每次提供其中的两种后，唤醒抽烟者。</p><p>抽烟者：而对于抽烟者来说，刚开始并没有所需要的材料，要等待生产者的唤醒，同时还要设置互斥锁防止抽烟者同时进行吸烟。判断当前放的两个材料是否是其所需，是则从共享缓冲区间读取所需要的数据，然后唤起两个生产者和其他抽烟者。若不是，则唤醒其他抽烟者抽烟。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">semaphore tobacco_paper     = <span class="number">0</span>; <span class="comment">// waiting for tobacco and paper</span></span><br><span class="line">semaphore tobacco_matches   = <span class="number">0</span>; <span class="comment">// waiting for tobacco and matches</span></span><br><span class="line">semaphore paper_matches     = <span class="number">0</span>; <span class="comment">// waiting for paper and matches</span></span><br><span class="line">semaphore doneSomking       = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="keyword">while</span>( <span class="literal">true</span> ) &#123;</span><br><span class="line"> pick a random number from <span class="number">1</span><span class="number">-3</span></span><br><span class="line"> <span class="keyword">if</span> random number is <span class="number">1</span>  </span><br><span class="line">      <span class="comment">// put these two  ingredient on table</span></span><br><span class="line">        signal( tobacco_paper )</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> random number is <span class="number">2</span>    </span><br><span class="line">      <span class="comment">// put these two  ingredient on table</span></span><br><span class="line">        signal( tobacco_matches )  <span class="comment">// put on table</span></span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> random number is <span class="number">3</span>   </span><br><span class="line">      <span class="comment">// put these two  ingredient on table</span></span><br><span class="line">        signal( paper_matches )  <span class="comment">// put on table</span></span><br><span class="line">     wait( doneSmoking )</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// the smoker that has matches   </span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">   wait( tobacco_paper ); <span class="comment">/* picks up tobacco and paper */</span></span><br><span class="line">   <span class="comment">// roll cigarette and smoke</span></span><br><span class="line">   signal( doneSmoking );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the smoker that has paper   </span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">   wait(tobacco_matches); <span class="comment">/* picks up tobacco and match */</span></span><br><span class="line">   <span class="comment">// roll cigarette and smoke</span></span><br><span class="line">   signal( doneSmoking );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the smoker that has tobacco   </span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">   wait(matches_paper ); <span class="comment">/* picks up matches and paper */</span></span><br><span class="line">   <span class="comment">// roll cigarette and smoke</span></span><br><span class="line">   signal( doneSmoking );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Linux下的代码设计">Linux下的代码设计</h2><p><a href="https://blog.csdn.net/Elford/article/details/121279024">参考</a></p><p>①关系分析：供应者与三个抽烟者分别是同步关系。由于抽烟者无法同时满足两个或以上的抽烟者，三个抽烟者对抽烟这个动作互斥（或由三个抽烟者轮流抽烟得知）。</p><p>②整体思路：一共设计六个文件，<code>ipc.h</code>和<code>ipc.c</code>设计信号量机制实现的底层逻辑，例如消息队列、P操作、V操作等。设计四个进程，供应者作为生产者向三个抽烟者提供材料。</p><p>③信号量设置：信号量offer1、offer2、offer3分别表示烟草和纸组合，烟草和胶水组合，胶水和纸组合。信号量finish表示抽烟完成信号。它们之间的协同关系如下图：</p><p><img src="3.png" alt=""></p><p>同时还要设置一个互斥<a href="https://so.csdn.net/so/search?q=%E4%BF%A1%E5%8F%B7%E9%87%8F&amp;spm=1001.2101.3001.7020">信号量</a>，保证4个进程互斥访问缓冲区，但该互斥信号量不是必须的，因为本例中缓冲区大小只为1。</p><h2 id="代码">代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ipc.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFSZ 256</span></span><br><span class="line"><span class="comment">//建立或获取 ipc 的一组函数的原型说明</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_ipc_id</span><span class="params">(<span class="keyword">char</span> *proc_file,<span class="keyword">key_t</span> key)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">set_shm</span><span class="params">(<span class="keyword">key_t</span> shm_key,<span class="keyword">int</span> shm_num,<span class="keyword">int</span> shm_flag)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">set_msq</span><span class="params">(<span class="keyword">key_t</span> msq_key,<span class="keyword">int</span> msq_flag)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">set_sem</span><span class="params">(<span class="keyword">key_t</span> sem_key,<span class="keyword">int</span> sem_val,<span class="keyword">int</span> sem_flag)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> sem_id)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> sem_id)</span></span>;</span><br><span class="line"><span class="comment">/*信号灯控制用的共同体*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> <span class="title">semuns</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">&#125; Sem_uns;</span><br><span class="line"><span class="comment">/* 消息结构体*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">msgbuf</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> mtype;</span><br><span class="line">    <span class="keyword">char</span> mtext[<span class="number">1</span>];</span><br><span class="line">&#125; Msg_buf;</span><br><span class="line"><span class="comment">//生产消费者共享缓冲区即其有关的变量</span></span><br><span class="line"><span class="keyword">key_t</span> buff_key;</span><br><span class="line"><span class="keyword">int</span> buff_num;</span><br><span class="line"><span class="keyword">char</span> *buff_ptr;</span><br><span class="line"><span class="comment">//生产者放产品位置的共享指针</span></span><br><span class="line"><span class="keyword">key_t</span> pput_key;</span><br><span class="line"><span class="keyword">int</span> pput_num;</span><br><span class="line"><span class="keyword">int</span> *pput_ptr;</span><br><span class="line"><span class="comment">//消费者取产品位置的共享指针</span></span><br><span class="line"><span class="keyword">key_t</span> cget_key;</span><br><span class="line"><span class="keyword">int</span> cget_num;</span><br><span class="line"><span class="keyword">int</span> *cget_ptr;</span><br><span class="line"><span class="comment">//生产者和消费者有关的信号量</span></span><br><span class="line"><span class="keyword">key_t</span> offer1_key;</span><br><span class="line"><span class="keyword">key_t</span> offer2_key;</span><br><span class="line"><span class="keyword">key_t</span> offer3_key;</span><br><span class="line"><span class="keyword">key_t</span> finish_key;</span><br><span class="line"><span class="keyword">key_t</span> mutex_key;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> offer1;</span><br><span class="line"><span class="keyword">int</span> offer2;</span><br><span class="line"><span class="keyword">int</span> offer3;</span><br><span class="line"><span class="keyword">int</span> finish;</span><br><span class="line"><span class="keyword">int</span> mutex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sem_val;</span><br><span class="line"><span class="keyword">int</span> sem_flg;</span><br><span class="line"><span class="keyword">int</span> shm_flg;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ipc.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ipc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从/proc/sysvipc/文件系统中获取IPC中3个对象的id号</span></span><br><span class="line"><span class="comment">// key是要获取的对象的id号</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_ipc_id</span><span class="params">(<span class="keyword">char</span> *proc_file, <span class="keyword">key_t</span> key)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *pf;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">char</span> line[BUFSZ], colum[BUFSZ];</span><br><span class="line">    <span class="keyword">if</span>((pf = fopen(proc_file,<span class="string">&quot;r&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;Proc file not open&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从文件中读取一行并储存在line[]中</span></span><br><span class="line">    fgets(line, BUFSZ, pf);    </span><br><span class="line">    <span class="keyword">while</span>(!feof(pf))</span><br><span class="line">    &#123;</span><br><span class="line">        i = j = <span class="number">0</span>;</span><br><span class="line">        fgets(line, BUFSZ,pf);</span><br><span class="line">        <span class="keyword">while</span>(line[i] == <span class="string">&#x27; &#x27;</span>) </span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">while</span>(line[i] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            colum[j++] = line[i++];</span><br><span class="line">        colum[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="comment">// 找不到对应的key，就继续读</span></span><br><span class="line">        <span class="keyword">if</span>(atoi(colum) != key)    </span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// 找到了对应的key，读出紧挨着的id</span></span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(line[i] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">while</span>(line[i] !=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            colum[j++] = line[i++];</span><br><span class="line">        colum[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        i = atoi(colum);</span><br><span class="line">        fclose(pf);</span><br><span class="line">        <span class="comment">// 返回id值</span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(pf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义信号量sem_id上的down操作(P操作)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> sem_id)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">buf</span>;</span></span><br><span class="line">    <span class="comment">// 对索引值为0的信号量定义P操作</span></span><br><span class="line">    buf.sem_num = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 调用sem_op后，信号量的值-1</span></span><br><span class="line">    buf.sem_op = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// 若P操作后信号量&lt;=0，进程等待</span></span><br><span class="line">    buf.sem_flg = SEM_UNDO;</span><br><span class="line">    <span class="comment">// 系统调用执行定义的P操作</span></span><br><span class="line">    <span class="keyword">if</span>((semop(sem_id,&amp;buf,<span class="number">1</span>)) &lt; <span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;P error &quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义信号量sem_id上的up操作(V操作)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> sem_id)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">buf</span>;</span></span><br><span class="line">    buf.sem_op = <span class="number">1</span>;</span><br><span class="line">    buf.sem_num = <span class="number">0</span>;</span><br><span class="line">    buf.sem_flg = SEM_UNDO;</span><br><span class="line">    <span class="keyword">if</span>((semop(sem_id,&amp;buf,<span class="number">1</span>)) &lt; <span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;V error &quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把sem_key对应的信号量赋值为sem_val，权限位为sem_flag</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">set_sem</span><span class="params">(<span class="keyword">key_t</span> sem_key, <span class="keyword">int</span> sem_val, <span class="keyword">int</span> sem_flg)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sem_id;  </span><br><span class="line">    <span class="comment">// 保存信号量状态的结构体</span></span><br><span class="line">    Sem_uns sem_arg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试由 sem_key 标识的信号量数组是否已经建立</span></span><br><span class="line">    <span class="keyword">if</span>((sem_id = get_ipc_id(<span class="string">&quot;/proc/sysvipc/sem&quot;</span>, sem_key)) &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 新建1个信号量,键值为sem_key，权限位为sem_flag，标号返回到sem_id</span></span><br><span class="line">        <span class="keyword">if</span>((sem_id = semget(sem_key, <span class="number">1</span>, sem_flg)) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot;semaphore create error&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置信号量的初值</span></span><br><span class="line">        sem_arg.val = sem_val;</span><br><span class="line">        <span class="comment">// 在sem_id标识的信号量数组的第0个信号量上执行SETVAL操作，arg保存信号量状态的联合体</span></span><br><span class="line">        <span class="comment">// SETVAL为设置信号量集中的一个单独的信号量的值</span></span><br><span class="line">        <span class="keyword">if</span>(semctl(sem_id, <span class="number">0</span>, SETVAL, sem_arg) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot;semaphore set error&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> sem_id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把shm_key对应的缓冲区开辟空间shm_num，权限位为shm_flag</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">set_shm</span><span class="params">(<span class="keyword">key_t</span> shm_key, <span class="keyword">int</span> shm_num, <span class="keyword">int</span> shm_flg)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, shm_id;</span><br><span class="line">    <span class="comment">// 指向共享缓冲区的指针</span></span><br><span class="line">    <span class="keyword">char</span>* shm_buf;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试由 shm_key 标识的共享内存区是否已经建立</span></span><br><span class="line">    <span class="keyword">if</span>((shm_id = get_ipc_id(<span class="string">&quot;/proc/sysvipc/shm&quot;</span>, shm_key)) &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// shmget 新建 一个长度为 shm_num 字节的共享内存,其标号返回到 shm_id</span></span><br><span class="line">        <span class="keyword">if</span>((shm_id = shmget(shm_key, shm_num, shm_flg)) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot;shareMemory set error&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// shmat 将由 shm_id 标识的共享内存附加给指针shm_buf，即映射到调用进程的地址空间上</span></span><br><span class="line">        <span class="keyword">if</span>((shm_buf = (<span class="keyword">char</span>*)shmat(shm_id, <span class="number">0</span>, <span class="number">0</span>)) &lt; (<span class="keyword">char</span> *)<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot;get shareMemory error&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 初始化内存为 0</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; shm_num; i++) </span><br><span class="line">            shm_buf[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//shm_key 标识的共享内存区已经建立,将由 shm_id 标识的共享内存附加给指 针 shm_buf</span></span><br><span class="line">    <span class="keyword">if</span>((shm_buf = (<span class="keyword">char</span>*)shmat(shm_id, <span class="number">0</span>, <span class="number">0</span>)) &lt; (<span class="keyword">char</span>*)<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;get shareMemory error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> shm_buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建消息队列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">set_msq</span><span class="params">(<span class="keyword">key_t</span> msq_key,<span class="keyword">int</span> msq_flg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> msq_id;</span><br><span class="line">    <span class="comment">//测试由 msq_key 标识的消息队列是否已经建立</span></span><br><span class="line">    <span class="keyword">if</span>((msq_id = get_ipc_id(<span class="string">&quot;/proc/sysvipc/msg&quot;</span>, msq_key)) &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//msgget 新建一个消息队列,其标号返回到 msq_id</span></span><br><span class="line">        <span class="keyword">if</span>((msq_id = msgget(msq_key,msq_flg)) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot;messageQueue set error&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> msq_id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// producer.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ipc.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rate;</span><br><span class="line">    <span class="comment">// 可在在命令行第一参数指定一个进程睡眠秒数，以调解进程执行速度，不指定则为1秒</span></span><br><span class="line">    <span class="keyword">if</span>(argv[<span class="number">1</span>] != <span class="literal">NULL</span>)</span><br><span class="line">        rate = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        rate = <span class="number">1</span>;   </span><br><span class="line">    <span class="comment">// 共享内存使用的变量</span></span><br><span class="line">    buff_key = <span class="number">101</span>; <span class="comment">// 缓冲区键值</span></span><br><span class="line">    buff_num = <span class="number">1</span>;   <span class="comment">// 缓冲区长度</span></span><br><span class="line">    pput_key = <span class="number">102</span>; <span class="comment">// 生产者放产品指针的键值</span></span><br><span class="line">    pput_num = <span class="number">1</span>;   <span class="comment">// 指针数</span></span><br><span class="line">    <span class="comment">// 0644 = 110100100，生产者可读可写，抽烟者只可读</span></span><br><span class="line">    shm_flg = IPC_CREAT | <span class="number">0644</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取缓冲区使用的共享内存, buff_ptr指向缓冲区首地址</span></span><br><span class="line">    buff_ptr = (<span class="keyword">char</span>*)set_shm(buff_key, buff_num, shm_flg);</span><br><span class="line">    <span class="comment">// 获取消费者取产品位置指针pput_ptr</span></span><br><span class="line">    pput_ptr = (<span class="keyword">int</span>*)set_shm(pput_key, pput_num, shm_flg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 信号量键值设置</span></span><br><span class="line">    offer1_key = <span class="number">201</span>;</span><br><span class="line">    offer2_key = <span class="number">202</span>;</span><br><span class="line">    offer3_key = <span class="number">203</span>;</span><br><span class="line">    finish_key = <span class="number">204</span>;</span><br><span class="line">    mutex_key = <span class="number">205</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问权限设置</span></span><br><span class="line">    sem_flg = IPC_CREAT | <span class="number">0644</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步信号量设置</span></span><br><span class="line">    sem_val = <span class="number">0</span>;</span><br><span class="line">    offer1 = set_sem(offer1_key, sem_val, sem_flg);</span><br><span class="line">    offer2 = set_sem(offer2_key, sem_val, sem_flg);</span><br><span class="line">    offer3 = set_sem(offer3_key, sem_val, sem_flg);</span><br><span class="line">    finish = set_sem(finish_key, sem_val, sem_flg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 互斥信号量设置</span></span><br><span class="line">    sem_val = <span class="number">1</span>;</span><br><span class="line">    mutex = set_sem(mutex_key, sem_val, sem_flg);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">3</span>;</span><br><span class="line">        buff_ptr[*pput_ptr] = i + <span class="number">1</span>;</span><br><span class="line">        sleep(rate);</span><br><span class="line">        down(mutex);        <span class="comment">// 互斥访问缓冲区</span></span><br><span class="line">    *pput_ptr = (*pput_ptr + <span class="number">1</span>) % buff_num;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d put offer1 - tobacco and paper into buffer[%d]\n&quot;</span>, getpid(), *pput_ptr);</span><br><span class="line">            up(offer1);     <span class="comment">// 将组合1放到桌上</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d put offer2 - glue and tobacco into buffer[%d]\n&quot;</span>, getpid(), *pput_ptr);</span><br><span class="line">            up(offer2);     <span class="comment">// 将组合2放到桌上</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d put offer3 - glue and paper into buffer[%d]\n&quot;</span>, getpid(), *pput_ptr);</span><br><span class="line">            up(offer3);     <span class="comment">// 将组合3放到桌上</span></span><br><span class="line">        &#125;</span><br><span class="line">        up(mutex);        <span class="comment">// 互斥访问缓冲区</span></span><br><span class="line"></span><br><span class="line">        down(finish);         <span class="comment">// 前V后P</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// consumer_C.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ipc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rate;</span><br><span class="line">    <span class="comment">// 可在在命令行第一参数指定一个进程睡眠秒数，以调解进程执行速度</span></span><br><span class="line">    <span class="keyword">if</span>(argv[<span class="number">1</span>] != <span class="literal">NULL</span>)</span><br><span class="line">        rate = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        rate = <span class="number">3</span>; <span class="comment">// 不指定为 3 秒</span></span><br><span class="line">        <span class="comment">//共享内存 使用的变量</span></span><br><span class="line">    buff_key = <span class="number">101</span>; <span class="comment">// 缓冲区键值</span></span><br><span class="line">    buff_num = <span class="number">1</span>;   <span class="comment">// 缓冲区长度</span></span><br><span class="line">    cget_key = <span class="number">103</span>; <span class="comment">// 抽烟者取产品指针的键值</span></span><br><span class="line">    cget_num = <span class="number">1</span>;   <span class="comment">// 指针数</span></span><br><span class="line">    shm_flg = IPC_CREAT | <span class="number">0644</span>;</span><br><span class="line">    <span class="comment">// 获取缓冲区使用的共享内存，buff_ptr 指向缓冲区首地址</span></span><br><span class="line">    buff_ptr = (<span class="keyword">char</span>*)set_shm(buff_key, buff_num, shm_flg);</span><br><span class="line">    <span class="comment">// 获取抽烟者取产品指针，cget_ptr 指向索引地址</span></span><br><span class="line">    cget_ptr = (<span class="keyword">int</span>*)set_shm(cget_key, cget_num, shm_flg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 信号量键值设置</span></span><br><span class="line">    offer1_key = <span class="number">201</span>;</span><br><span class="line">    offer2_key = <span class="number">202</span>;</span><br><span class="line">    offer3_key = <span class="number">203</span>;</span><br><span class="line">    finish_key = <span class="number">204</span>;</span><br><span class="line">    mutex_key = <span class="number">205</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问权限设置</span></span><br><span class="line">    sem_flg = IPC_CREAT | <span class="number">0644</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步信号量设置</span></span><br><span class="line">    sem_val = <span class="number">0</span>;</span><br><span class="line">    offer3 = set_sem(offer3_key, sem_val, sem_flg);</span><br><span class="line">    finish = set_sem(finish_key, sem_val, sem_flg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 互斥信号量设置</span></span><br><span class="line">    sem_val = <span class="number">1</span>;</span><br><span class="line">    mutex = set_sem(mutex_key, sem_val, sem_flg);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sleep(rate);</span><br><span class="line">        down(offer3);</span><br><span class="line"></span><br><span class="line">        down(mutex);</span><br><span class="line">        *cget_ptr = (*cget_ptr + <span class="number">1</span>) % buff_num;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d smoker get glue and paper offer%d from buffer[%d]\n&quot;</span>, getpid(), buff_ptr[*cget_ptr], *cget_ptr);</span><br><span class="line">        up(mutex);</span><br><span class="line">        </span><br><span class="line">        up(finish);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// consumer_B.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ipc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rate;</span><br><span class="line">    <span class="comment">// 可在在命令行第一参数指定一个进程睡眠秒数，以调解进程执行速度</span></span><br><span class="line">    <span class="keyword">if</span>(argv[<span class="number">1</span>] != <span class="literal">NULL</span>)</span><br><span class="line">        rate = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        rate = <span class="number">3</span>; <span class="comment">// 不指定为 3 秒</span></span><br><span class="line">        <span class="comment">//共享内存 使用的变量</span></span><br><span class="line">    buff_key = <span class="number">101</span>; <span class="comment">// 缓冲区键值</span></span><br><span class="line">    buff_num = <span class="number">1</span>;   <span class="comment">// 缓冲区长度</span></span><br><span class="line">    cget_key = <span class="number">103</span>; <span class="comment">// 抽烟者取产品指针的键值</span></span><br><span class="line">    cget_num = <span class="number">1</span>;   <span class="comment">// 指针数</span></span><br><span class="line">    shm_flg = IPC_CREAT | <span class="number">0644</span>;</span><br><span class="line">    <span class="comment">// 获取缓冲区使用的共享内存，buff_ptr 指向缓冲区首地址</span></span><br><span class="line">    buff_ptr = (<span class="keyword">char</span>*)set_shm(buff_key, buff_num, shm_flg);</span><br><span class="line">    <span class="comment">// 获取抽烟者取产品指针，cget_ptr 指向索引地址</span></span><br><span class="line">    cget_ptr = (<span class="keyword">int</span>*)set_shm(cget_key, cget_num, shm_flg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 信号量键值设置</span></span><br><span class="line">    offer1_key = <span class="number">201</span>;</span><br><span class="line">    offer2_key = <span class="number">202</span>;</span><br><span class="line">    offer3_key = <span class="number">203</span>;</span><br><span class="line">    finish_key = <span class="number">204</span>;</span><br><span class="line">    mutex_key = <span class="number">205</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问权限设置</span></span><br><span class="line">    sem_flg = IPC_CREAT | <span class="number">0644</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步信号量设置</span></span><br><span class="line">    sem_val = <span class="number">0</span>;</span><br><span class="line">    offer2 = set_sem(offer2_key, sem_val, sem_flg);</span><br><span class="line">    finish = set_sem(finish_key, sem_val, sem_flg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 互斥信号量设置</span></span><br><span class="line">    sem_val = <span class="number">1</span>;</span><br><span class="line">    mutex = set_sem(mutex_key, sem_val, sem_flg);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sleep(rate);</span><br><span class="line">        down(offer2);</span><br><span class="line"></span><br><span class="line">        down(mutex);</span><br><span class="line">        *cget_ptr = (*cget_ptr + <span class="number">1</span>) % buff_num;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d smoker get glue and tobacco offer%d from buffer[%d]\n&quot;</span>, getpid(), buff_ptr[*cget_ptr], *cget_ptr);</span><br><span class="line">        up(mutex);</span><br><span class="line">        </span><br><span class="line">        up(finish);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// consumer_A.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ipc.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rate;</span><br><span class="line">    <span class="keyword">if</span>(argv[<span class="number">1</span>] != <span class="literal">NULL</span>)</span><br><span class="line">        rate = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        rate = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">//共享内存 使用的变量</span></span><br><span class="line">    buff_key = <span class="number">101</span>; <span class="comment">// 缓冲区键值</span></span><br><span class="line">    buff_num = <span class="number">1</span>;   <span class="comment">// 缓冲区长度</span></span><br><span class="line">    cget_key = <span class="number">103</span>; <span class="comment">// 抽烟者取产品指针的键值</span></span><br><span class="line">    cget_num = <span class="number">1</span>;   <span class="comment">// 指针数</span></span><br><span class="line">    shm_flg = IPC_CREAT | <span class="number">0644</span>;</span><br><span class="line">    <span class="comment">// 获取缓冲区使用的共享内存，buff_ptr 指向缓冲区首地址</span></span><br><span class="line">    buff_ptr = (<span class="keyword">char</span>*)set_shm(buff_key, buff_num, shm_flg);</span><br><span class="line">    <span class="comment">// 获取抽烟者取产品指针，cget_ptr 指向索引地址</span></span><br><span class="line">    cget_ptr = (<span class="keyword">int</span>*)set_shm(cget_key, cget_num, shm_flg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 信号量键值设置</span></span><br><span class="line">    offer1_key = <span class="number">201</span>;</span><br><span class="line">    offer2_key = <span class="number">202</span>;</span><br><span class="line">    offer3_key = <span class="number">203</span>;</span><br><span class="line">    finish_key = <span class="number">204</span>;</span><br><span class="line">    mutex_key = <span class="number">205</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问权限设置</span></span><br><span class="line">    sem_flg = IPC_CREAT | <span class="number">0644</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步信号量设置</span></span><br><span class="line">    sem_val = <span class="number">0</span>;</span><br><span class="line">    offer1 = set_sem(offer1_key, sem_val, sem_flg);</span><br><span class="line">    finish = set_sem(finish_key, sem_val, sem_flg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 互斥信号量设置</span></span><br><span class="line">    sem_val = <span class="number">1</span>;</span><br><span class="line">    mutex = set_sem(mutex_key, sem_val, sem_flg);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sleep(rate);</span><br><span class="line">        down(offer1);</span><br><span class="line"></span><br><span class="line">        down(mutex);</span><br><span class="line">        *cget_ptr = (*cget_ptr + <span class="number">1</span>) % buff_num;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d smoker get tobacco and paper offer%d from buffer[%d]\n&quot;</span>, getpid(), buff_ptr[*cget_ptr], *cget_ptr);</span><br><span class="line">        up(mutex);</span><br><span class="line">        </span><br><span class="line">        up(finish);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">hdrs = ipc.h</span><br><span class="line">opts = -g -c </span><br><span class="line"></span><br><span class="line">p_src = producer.c ipc.c</span><br><span class="line">p_obj = producer.o ipc.o</span><br><span class="line">c_T_src = consumer_tobacco.c ipc.c</span><br><span class="line">c_T_obj = consumer_tobacco.o ipc.o</span><br><span class="line">c_P_src = consumer_paper.c ipc.c</span><br><span class="line">c_P_obj = consumer_paper.o ipc.o</span><br><span class="line">c_G_src = consumer_glue.c ipc.c</span><br><span class="line">c_G_obj = consumer_glue.o ipc.o</span><br><span class="line"></span><br><span class="line"><span class="section">all: producer consumer_tobacco consumer_paper consumer_glue</span></span><br><span class="line"></span><br><span class="line"><span class="section">producer: <span class="variable">$(p_obj)</span></span></span><br><span class="line">gcc <span class="variable">$(p_obj)</span> -o producer</span><br><span class="line"><span class="section">producer.o: <span class="variable">$(p_src)</span> <span class="variable">$(hdrs)</span></span></span><br><span class="line">gcc <span class="variable">$(opts)</span> <span class="variable">$(p_src)</span></span><br><span class="line"></span><br><span class="line"><span class="section">consumer_tobacco: <span class="variable">$(c_T_obj)</span></span></span><br><span class="line">gcc <span class="variable">$(c_T_obj)</span> -o consumer_tobacco</span><br><span class="line"><span class="section">consumer_tobacco.o: <span class="variable">$(c_T_src)</span> <span class="variable">$(hdrs)</span></span></span><br><span class="line">gcc <span class="variable">$(opts)</span> <span class="variable">$(c_T_src)</span></span><br><span class="line"></span><br><span class="line"><span class="section">consumer_paper: <span class="variable">$(c_P_obj)</span></span></span><br><span class="line">gcc <span class="variable">$(c_P_obj)</span> -o consumer_paper</span><br><span class="line"><span class="section">consumer_paper.o: <span class="variable">$(c_P_src)</span> <span class="variable">$(hdrs)</span></span></span><br><span class="line">gcc <span class="variable">$(opts)</span> <span class="variable">$(c_P_src)</span></span><br><span class="line"></span><br><span class="line"><span class="section">consumer_glue: <span class="variable">$(c_G_obj)</span></span></span><br><span class="line">gcc <span class="variable">$(c_G_obj)</span> -o consumer_glue</span><br><span class="line"><span class="section">consumer_glue.o: <span class="variable">$(c_G_src)</span> <span class="variable">$(hdrs)</span></span></span><br><span class="line">gcc <span class="variable">$(opts)</span> <span class="variable">$(c_G_src)</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean: </span></span><br><span class="line">rm producer consumer_tobacco consumer_paper consumer_glue *.o</span><br></pre></td></tr></table></figure><h2 id="一些问题">一些问题</h2><ul><li>由于该程序会修改文件<code>/proc/sysvipc/sem</code>中的记录，且运行完后不会删除，因此如果多次对文件进行修改，并<code>make</code>后执行，可能使用到一个错误的信号量id，对该信号量的操作不会反映到程序中，程序会直接跳过对信号量的P操作和V操作。解决方法是重启虚拟机。</li></ul><p>比如，就会这样：</p><img src="4.png" style="zoom:70%;" /><ul><li><code>finish</code>同步信号量的设置可以为1或0，如果是1，则应该在<code>while</code>循环开始处调用P操作，这样第一遍循环可以顺利执行，阻塞在第二次循坏的开始处；如果是0，则阻塞在<code>while</code>循坏的尾部。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统实验三-进程调度</title>
      <link href="/2022/04/12/os-%E5%AE%9E%E9%AA%8C%E4%B8%89/"/>
      <url>/2022/04/12/os-%E5%AE%9E%E9%AA%8C%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h1>进程调度</h1><h2 id="两个信号">两个信号</h2><p><code>SIGTSTP</code></p><p>停止进程的运行, 但该信号可以被处理和忽略. 用户键入SUSP字符时(通常是<code>Ctrl-Z</code>)发出这个信号</p><p><code>SIGINT</code></p><p>程序终止(interrupt)信号, 在用户键入INTR字符(通常是<code>Ctrl-C</code>)时发出，用于通知前台进程组终止进程。</p><h2 id="系统调用">系统调用</h2><h3 id="getpid-系统调用"><code>getpid()</code>系统调用</h3><p><code>getpid()</code>系统调用语法:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">getpid</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">getppid</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p><code>getpid</code>返回当前进程的进程号，<code>getppid</code>返回当前进程父进程的进程号</p><h3 id="进程控制有关的系统调用">进程控制有关的系统调用</h3><p>可以通过信号向一个进程发送消息以控制进程的行为。信号是由中断或异常事件引发的，如：键盘中断、定时器中断、非法内存引用等。信号的名字都以SIG 开头，例如SIGTERM、SIGHUP。可以使用<code>kill -l</code> 命令查看系统当前的信号集合。</p><p>信号可在任何时间发生，接收信号的进程可以对接收到的信号采取3种处理措施之一：</p><ul><li><p>忽略这个信号</p></li><li><p>执行系统默认的处理</p></li><li><p>捕捉这个信号做自定义的处理</p></li></ul><p>信号从产生到被处理所经过的过程：</p><p>产生(<code>generate</code>)-&gt;挂起(<code>pending</code>)-&gt;派送(<code>deliver</code>)-&gt;部署(<code>disposition</code>)或忽略(<code>igore</code>)</p><p>一个信号集合是一个C语言的<code>sigset_t</code>数据类型的对象，<code>sigset_t</code>数据类型定义在<code>&lt;signal.h&gt;</code>中。被一个进程忽略的所有信号的集合称为一个信号掩码(<code>mask</code>)。</p><p>从程序中向一个进程发送信号有两种方法：调用 <code>shell</code>的<code>kill</code>命令，调用<code>kill</code>系统调用函数。<code>kill</code>能够发送除杀死一个进程(<code>SIGKILL</code>、<code>SIGTERM</code>、<code>SIGQUIT</code>)之外的其他信号，例如键盘中断(<code>Ctrl+C</code>)信号<code>SIGINT</code>，进程暂停(<code>Ctrl+Z</code>)信号<code>SIGTSTP</code>等等。</p><p>调用<code>pause()</code> 函数会令调用进程的执行挂起直到一个任意信号到来后再继续运行。</p><p>调用<code>sleep()</code> 函数会令调用进程的执行挂起睡眠指定的秒数或一个它可以响应的信号到来后继续执行。</p><p>每个进程都能使用signal 函数定义自己的信号处理函数，捕捉并自行处理接收的除<code>SIGSTOP</code>和<code>SIGKILL</code>之外的信号。以下是有关的系统调用的语法说明。</p><h4 id="kill系统调用语法："><code>kill</code>系统调用语法：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kill</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">int</span> sig)</span></span>;</span><br></pre></td></tr></table></figure><p><code>pid</code>： 接收信号的进程号</p><p><code>signal</code>： 要发送的信号</p><p><code>kill</code>发送成功返回接收者的进程号，失败返回-1。</p><h4 id="pause-系统调用语法："><code>pause</code> 系统调用语法：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">＃include &lt;unistd.h&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pause</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p><code>pause</code> 挂起调用它的进程直到有任何信号到达。调用进程不自定义处理方法，则进行信号的默认处理。只有进程自定义了信号处理方法捕获并处理了一个信号后，<code>pause</code> 才会返回调进程。<code>pause</code> 总是返回<code>-1</code>,并设置系统变量<code>errno</code>为<code>EINTR</code>。</p><h4 id="sleep系统调用语法："><code>sleep</code>系统调用语法：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sleep</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> seconds)</span></span>;</span><br></pre></td></tr></table></figure><p><code>seconds</code> 指定进程睡眠的秒数，如果指定的秒数到，<code>sleep</code>返回0。</p><h4 id="signal系统调用语法"><code>signal</code>系统调用语法:</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*<span class="keyword">sighandler_t</span>)</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">sighandler_t</span> <span class="title">signal</span><span class="params">(<span class="keyword">int</span> signum, <span class="keyword">sighandler_t</span> handler)</span></span>;</span><br></pre></td></tr></table></figure><p><code>signum</code>： 要捕捉的信号</p><p><code>handler</code>： 进程中自定义的信号处理函数名</p><p><code>signal</code> 调用成功会返回信号处理函数的返回值，不成功返回<code>-1</code>,并设置系统变量<code>errno</code>为<code>SIG_ERR</code>。</p><h2 id="另外">另外</h2><p>c语言请记得用<code>while(1)</code>代替<code>while(true)</code></p><h2 id="代码">代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*<span class="keyword">sighandler_t</span>)</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sigint</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pri = <span class="number">0</span>;</span><br><span class="line">    pri = getpriority(PRIO_PROCESS, <span class="number">0</span>); <span class="comment">// 获取当前进程的优先级</span></span><br><span class="line">    <span class="keyword">if</span> (pri &gt;= <span class="number">-20</span> &amp;&amp; pri &lt; <span class="number">19</span>)</span><br><span class="line">        pri += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;将进程%d优先级+1\n&quot;</span>, getpid());</span><br><span class="line">    setpriority(PRIO_PROCESS, getpid(), pri);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sigtstp</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pri  = <span class="number">0</span>;</span><br><span class="line">    pri = getpriority(PRIO_PROCESS, <span class="number">0</span>); <span class="comment">//　获取当前进程的优先级</span></span><br><span class="line">    <span class="keyword">if</span> (pri &gt; <span class="number">-20</span> &amp;&amp; pri &lt;= <span class="number">19</span>)</span><br><span class="line">        pri -= <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;将进程%d优先级-1\n&quot;</span>, getpid());</span><br><span class="line">    setpriority(PRIO_PROCESS, getpid(), pri);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pidParent, pidChild;</span><br><span class="line"></span><br><span class="line">pidParent = getpid();</span><br><span class="line">pidChild = fork();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pidChild &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;子进程创建失败！\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (pidChild &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    signal(SIGINT, (<span class="keyword">sighandler_t</span>)sigint);</span><br><span class="line">    signal(SIGTSTP, (<span class="keyword">sighandler_t</span>)sigtstp); </span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;父进程进程号为%d，策略为%d，优先级为%d\n&quot;</span>, pidParent, sched_getscheduler(pidParent), getpriority(PRIO_PROCESS, <span class="number">0</span>));</span><br><span class="line">      kill(pidChild, SIGCONT);</span><br><span class="line">sleep(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    signal(SIGINT, (<span class="keyword">sighandler_t</span>)sigint);</span><br><span class="line">    signal(SIGTSTP, (<span class="keyword">sighandler_t</span>)sigtstp); </span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;子进程进程号为%d，策略为%d，优先级为%d\n&quot;</span>, getpid(), sched_getscheduler(getpid()), getpriority(PRIO_PROCESS, <span class="number">0</span>));</span><br><span class="line">      kill(pidParent, SIGCONT);</span><br><span class="line">      sleep(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学线：MVP与MVVM引入</title>
      <link href="/2022/04/12/%E5%AD%A6%E7%BA%BF%EF%BC%9Aintroduction-of-MVP-and-MVVM/"/>
      <url>/2022/04/12/%E5%AD%A6%E7%BA%BF%EF%BC%9Aintroduction-of-MVP-and-MVVM/</url>
      
        <content type="html"><![CDATA[<h1><code>MVP</code></h1><h2 id="为什么不用MVC">为什么不用<code>MVC</code></h2><p>我们先来定义什么是好的软件架构：</p><blockquote><ol><li>软件架构上具有明确的分工，各个模块的功能职责平衡分配，且明确。</li><li>可测试性，通常良好的软件架构都具备良好的可测试性。</li><li>良好的易用性，维护成本低。</li></ol></blockquote><p><code>MVC</code>一个很大的问题在于所有的逻辑都在<code>Controller</code>层，不可避免的会造成<code>Controller</code>层非常复杂，如果项目越来越大，<code>Controller</code>层的代码会更加臃肿，维护起来也非常麻烦。除此之外：</p><p><strong>视图与控制器间的过于紧密的连接</strong></p><blockquote><p>视图与控制器是相互分离，但却是联系紧密的部件，视图没有控制器的存在，其应用是很有限的，反之亦然，这样就妨碍了他们的独立重用。</p></blockquote><p><strong>视图对模型数据的低效率访问</strong></p><blockquote><p>依据模型操作接口的不同，视图可能需要多次调用才能获得足够的显示数据。对未变化数据的不必要的频繁访问，也将损害操作性能。</p></blockquote><p><strong>不太友好的单元测试</strong></p><blockquote><p>特别是App上做单元测试的时候很多东西依赖于系统框架，没法脱离用户接口来测试这些逻辑单元。</p></blockquote><p>等等。</p><h2 id="MVP-Basic"><code>MVP Basic</code></h2><p><code>MVP</code> 架构模式是 <code>MVC</code> 的一个变种，很多框架都自称遵循 <code>MVC</code> 架构模式，但是它们实际上却实现了 <code>MVP</code> 模式；<code>MVC</code> 与 <code>MVP</code> 之间的区别其实并不明显，<strong>两者之间最大的区别就是 <code>MVP</code> 中使用 <code>Presenter</code> 对视图和模型进行了解耦，它们彼此都对对方一无所知，沟通都通过 <code>Presenter</code> 进行</strong>。在 <code>MVP</code> 中，<code>Presenter</code> 可以理解为松散的控制器，其中包含了视图的 UI 业务逻辑，所有从视图发出的事件，都会通过代理给 <code>Presenter</code> 进行处理；同时，<code>Presenter</code> 也通过视图暴露的接口与其进行通信。</p><img src="1.png" style="zoom:20%;" /><p>在<code>MVC</code>中，视图<code>View</code>的逻辑会在<code>Fragment</code>或者<code>Activity</code>处理，而且<code>Model</code>层的业务也是在<code>Fragment</code>或者<code>Activity</code>中处理，这样会导致一个问题，<code>Fragment</code>或者<code>Activity</code>中代码臃肿，难以维护，其实正是这个原因，<code>MVP</code>架构在<code>Android</code>开发中呼声一直很高。</p><p>在<code>MVP</code>中，虽然视图<code>View</code>还是在<code>Fragment</code>或者<code>Activity</code>中处理，但是<code>Model</code>层的业务被放到了<code>Presenter</code>层，类似于增加了一层职责部门，<code>Fragment</code>或者<code>Activity</code>有一部分职责转接给了<code>Presenter</code>，<strong>所有<code>View</code>层操作都是通过<code>Presenter</code>传递给<code>Model</code>，这样有效减轻了<code>Fragment</code>或者<code>Activity</code>的负担，<code>View</code>与<code>Model</code>不直接交互，而是通过与<code>Presenter</code>来完成交互，这样可以修改视图而不影响模型<code>Model</code>，达到解耦的目的</strong>。</p><p><code>Android</code>开发中，有时候某个界面的视图很复杂，并且界面中各模块使用的接口也不同，这种场景则可以显示出<code>MVP</code>架构的优势了。假设当前界面只需要一个接口数据就可以满足，添加了一层<code>Presenter</code>可能在架构上有些多余，但是一旦服务器接口有变动，为了减轻服务端压力，现将接口拆分，本来请求一个接口可以满足需要，现在可能需要请求两个甚至多个接口，这就是所谓的<code>Model</code>层有变动，但是视图层<code>View</code>不变。既然<code>View</code>层所需要的数据格式是特定的，那么就可以根据具体业务需要，在<code>Presenter</code>将拆分的接口重新组合为原视图层需要的数据格式，然后传递给<code>View</code>，这样<code>View</code>层相当于没有做任何变化，很好的解耦了<code>View</code>和<code>Model</code>。</p><h2 id="常见的-MVP-架构模式">常见的 <code>MVP</code> 架构模式</h2><p>目前常见的 <code>MVP</code> 架构模式其实都是它的变种：<a href="https://www.martinfowler.com/eaaDev/PassiveScreen.html">Passive View</a> 和 <a href="https://www.martinfowler.com/eaaDev/SupervisingPresenter.html">Supervising Controller</a>，接下来的内容也是围绕这两种变种进行展开的。</p><h3 id="被动视图-Passive-View">被动视图(<code>Passive View</code>)</h3><p><code>MVP</code> 的第一个主要变种就是被动视图（<code>Passive View</code>）；顾名思义，<strong>在该变种的架构模式中，视图层是被动的，它本身不会改变自己的任何的状态，所有的状态都是通过 Presenter 来间接改变的</strong>。</p><img src="2.png" style="zoom:20%;" /><p>被动的视图层就像前端中的 HTML 和 CSS 代码，只负责展示视图的结构和内容，本身不具有任何的逻辑：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;post-header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;post-title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/mvx-controller.html&quot;</span>&gt;</span>谈谈 MVX 中的 Controller<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;post-excerpt&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>在前两篇文章中，我们已经对 iOS 中的 Model 层以及 View 层进行了分析，划分出了它们的具体职责，其中 Model 层除了负责数据的持久存储、缓存工作，还要负责所有 HTTP... <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;read-more&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/mvx-controller.html&quot;</span>&gt;</span><span class="symbol">&amp;raquo;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;post-meta&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;author-thumb&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/assets/images/draven.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Author image&quot;</span> <span class="attr">nopin</span>=<span class="string">&quot;nopin&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;/author/draveness&#x27;</span>&gt;</span>Draveness<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">time</span> <span class="attr">class</span>=<span class="string">&quot;post-date&quot;</span> <span class="attr">datetime</span>=<span class="string">&quot;2017-06-23&quot;</span>&gt;</span>23 Jun 2017<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="依赖关系">依赖关系</h4><p>视图成为了完全被动的并且不再根据模型来更新视图本身的内容，也就是说，不同于 <code>MVC</code> 中的依赖关系；在被动视图中，视图层对于模型层没有任何的依赖：</p><img src="8.png" alt="Essential-Dependencies-in-Passive-Vie" style="zoom:100%;" /><p>因为视图层不依赖与其他任何层级也就最大化了视图层的可测试性，同时也将视图层和模型层进行了合理的分离，两者不再相互依赖。</p><h4 id="通信方式">通信方式</h4><p>被动视图的示意图中一共有四条线，用于表示 <code>Model</code>、<code>View</code> 和 <code>Presenter</code> 之间的通信：</p><img src="9.png" alt="Passive-View-with-Tags" style="zoom:100%;" /><ol><li>当视图接收到来自用户的事件时，会将事件转交给 <code>Presenter</code> 进行处理；</li><li>被动的视图向外界暴露接口，当需要更新视图时 <code>Presenter</code> 通过视图暴露的接口更新视图的内容；</li><li><code>Presenter</code> 负责对模型进行操作和更新，在需要时取出其中存储的信息；</li><li>当模型层改变时，可以将改变的信息发送给<strong>观察者</strong> <code>Presenter</code>；</li></ol><p>在 <code>MVP</code> 的变种被动视图中，模型的操作以及视图的更新都仅通过 <code>Presenter</code> 作为中间人进行。</p><h3 id="监督控制器-Supervising-Controller">监督控制器(<code>Supervising Controller</code>)</h3><p>与被动视图中状态同步都需要<strong>显式</strong>的操作不同，监督控制器（<code>Supervising Controller</code>）就将部分需要显式同步的操作变成了隐式的：</p><img src="10.png" alt="Supervising-Controller" style="zoom:100%;" /><p>在监督控制器中，视图层接管了一部分视图逻辑，主要内容就是同步<strong>简单的</strong>视图和模型的状态；而监督控制器就需要负责响应用户的输入以及一部分更加复杂的视图、模型状态同步工作。</p><p>对于用户输入的处理，监督控制器的做法与标准 <code>MVP</code> 中的 <code>Presenter</code> 完全相同；但是对于视图、模型的同步工作，监督控制器会尽可能地将所有简单的属性<strong>以数据绑定的形式声明在视图层中</strong>，类似于<code> Vue</code> 中双向绑定的简化版本：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>剩下的无法通过上述方式直接绑定的属性就需要通过监督控制器来操作和更新了。</p><h4 id="通信方式-2">通信方式</h4><p>监督控制器中的视图和模型层之间增加了两者之间的耦合，也就增加了整个架构的复杂性：</p><img src="11.png" alt="Supervising-Controller-With-Tag" style="zoom:100%;" /><p>视图和监督控制器、模型与监督控制器的关系与被动视图中两者与 <code>Presenter</code> 的关系几乎相同，视图和模型之间新增的依赖就是数据绑定的产物；视图通过声明式的语法与模型中的简单属性进行绑定，当模型发生改变时，会通知其观察者视图作出相应的更新。</p><p>通过这种方式能够减轻监督控制器的负担，减少其中简单的代码，将一部分逻辑交由视图进行处理；这样也就导致了视图同时可以被 <code>Presenter</code> 和数据绑定两种方式更新，相比于被动视图，监督控制器的方式也降低了视图的可测试性和封装性。</p><h3 id="占主导地位的视图">占主导地位的视图</h3><p>无论是在被动视图还是监督控制器版本的 <code>MVP</code> 架构模式中，视图层在整个架构中都是占主导地位的：</p><img src="12.png"  style="zoom:100%;" /><p>在 <code>MVC</code> 中，控制器负责<strong>以不同的视图响应客户端请求的不同动作</strong>；然而，不同于 <code>MVC</code> 模式，<code>MVP</code> 中视图将所有的动作交给 <code>Presenter</code> 进行处理；<code>MVC</code> 中的所有的动作都对应着一个控制器的方法调用，<code>Web</code> 应用中的每一个动作都是对某一个 <code>URL</code> 进行的操作，控制器根据访问的路由和方法（<code>GET</code> 等）对数据进行操作，最终选择正确的视图进行返回。</p><p><code>MVC</code> 中控制器返回的视图没有直接绑定到模型上，它仅仅被控制器渲染并且是完全无状态的，其中不包含任何的逻辑，但是 <code>MVP</code> 中的视图<strong>必须要将对应的事件代理给 <code>Presenter</code> 执行</strong>，否则事件就无法被响应。</p><h3 id="MVP存在的弊端">MVP存在的弊端</h3><ul><li><code>Presenter</code>（以下简称<code>P</code>）层与<code>View</code>（以下简称<code>V</code>）层是通过接口进行交互的，接口粒度不好控制。粒度太小，就会存在大量接口的情况，使代码太过碎版化；粒度太大，解耦效果不好。同时对于UI的输入和数据的变化，需要手动调用<code>V</code>层或者<code>P</code>层相关的接口，相对来说缺乏自动性、监听性。如果数据的变化能自动响应到UI、UI的输入能自动更新到数据，那该多好！</li><li><code>MVP</code>是以UI为驱动的模型，更新UI都需要保证能获取到控件的引用，同时更新UI的时候要考虑当前是否是UI线程，也要考虑<code>Activity</code>的生命周期（是否已经销毁等）。</li><li><code>MVP</code>是以UI和事件为驱动的传统模型，数据都是被动地通过UI控件做展示，但是由于数据的时变性，我们更希望数据能转被动为主动，希望数据能更有活性，由数据来驱动UI。</li><li><code>V</code>层与<code>P</code>层还是有一定的耦合度。一旦<code>V</code>层某个UI元素更改，那么对应的接口就必须得改，数据如何映射到UI上、事件监听接口这些都需要转变，牵一发而动全身。如果这一层也能解耦就更好了。</li><li>复杂的业务同时也可能会导致<code>P</code>层太大，代码臃肿的问题依然不能解决。</li></ul><h1><code>MVVM</code></h1><p>在谷歌没有引出<code>MVVM</code>这种架构模式的时候，大多数开发者都是从传统的<code>MVC</code>过度到<code>MVP</code>的，的确<code>MVP</code>相对<code>MVC</code>来说的确有了很大的改进，但是随着项目业务逻辑的复杂化，你会发现<code>MVP</code>其实也是非常难以维护，开发成本也是越来越高的，<code>P</code>层庞大的<code>code</code>会随着业务的一点点的增多而变得非常臃肿，庞大。后来，<code>Google</code> 为 <code>Android </code>又开了一扇窗在<code>Android</code>中引入了<code>MVVM</code>这种设计。<code>MVVM</code>是谷歌提出的一种<code>Android</code> 架构模式，结合了 <code>Data Binding</code> 和一些生命周期组件 <code>LiveData</code> 和 <code>ViewModel</code> 等。<code>Android</code> 官方把这种设计的架构模式封装成了一系列类的集合，其核心思想为<code>MVVM</code>，基于此扩展成为<code>Android</code>系统量身定做的架构模式，名为： <code>Architecture Components</code>（架构组件），大大的提高了开发的效率，方便了开发者对于代码的维护，同时这种组件化，开发过程中实现了更高级的业务分离方式。</p><img src="3.png" style="zoom:100%;" /><p>通过上图，你可以发现，<code>MVC -&gt; MVP -&gt; MVVM</code> 这几个软件设计模式是一步步演化发展的，<code>MVVM</code> 是从 <code>MVP</code> 的进一步发展与规范，<code>MVP</code> 隔离了 <code>M</code> 与 <code>V</code> 的直接联系后，靠 <code>Presenter</code> 来中转，所以使用 <code>MVP</code> 时 <code>P</code> 是直接调用 <code>View</code> 的接口来实现对视图的操作的，这个 <code>View</code> 接口使的<code>M</code> 与 <code>V</code>是隔离了，方便测试了，但代码还不够优雅简洁啊，所以 <code>MVVM</code> 就弥补了这些缺陷。在 <code>MVVM</code> 中就出现的 <code>Data Binding</code> 这个概念，意思就是 <code>View</code> 接口的实现方法可以不写了，通过 <code>Binding</code> 来实现。</p><p>（整个过程其实要涉及很多<code>Jetpack</code>、<code>liveData</code>、<code>DataBinding</code>等东西，挖个坑，以后讲）</p><p><code>MVVM</code>的目标和思想与<code>MVP</code>类似，利用数据绑定(<code>Data Binding</code>)、依赖属性(<code>Dependency Property</code>)、命令(<code>Command</code>)、路由事件(<code>Routed Event</code>)等新特性，打造了一个更加灵活高效的架构。<code>viewModel</code>可以理解为桥梁，通过<code>viewModel</code> 将 <code>View</code>和<code>Model</code>双向绑定，数据的变化可以直接作用在<code>View</code>上，就是<code>MVVM</code>。</p><p><strong><code>ViewModel</code>基本原理是：维护一个与配置无关的对象，该对象可存储 <code>Controller(Activity or Fragment)</code>中需要的任何数据，其生命周期与宿主 <code>Controller</code> 的生命周期保持一致，不因 <code>Controller</code> 的重建而失效（注意：<code>Controller</code> 的重建仍然在 <code>Controller</code> 生命周期内，并不会产生一个新的生命周期，即<code>Controller</code> 的 <code>onDestroy</code> 并不会调用）</strong></p><p>这意味着无论是转屏还是系统字体变化等因配置变化产生的 <code>Controller</code> 重建都不会回收 <code>ViewModel</code> 中维护的数据，重建的 <code>Controller</code> 仍然可以从同一个 <code>ViewModel</code> 中通过获取数据恢复状态。</p><h2 id="ViewModel-的构造过程"><code>ViewModel</code> 的构造过程</h2><p>我们用一个结构图来剖析 <code>ViewModel</code> 的构造过程：</p><img src="4.png" style="zoom:80%;" /><p>如图所示：</p><p>所有已经实例化的 <code>ViewModel</code> 都缓存在一个叫做 <code>ViewModelStore</code> 的封装对象中，其实质是一个 <code>HashMap</code>;<br><code>ViewModelStore</code> 与具体的 <code>Controller</code> 绑定，并与宿主 <code>Controller</code> 俱生俱灭，所以这就解释了为何 <code>ViewModel</code> 与宿主 <code>Controller</code> 的生命周期是一样长了，因为缓存它的 <code>ViewModelStore</code> 与宿主 <code>Controller</code> 寿命相等；</p><p>获取 <code>ViewModel</code> 实例的过程委托给了一个叫做 <code>ViewModelProvider</code> 的工具类，它包含一个创建 <code>ViewModel </code>的工厂类 <code>Factory</code> 和一个对 <code>ViewModelStore</code> 的引用；</p><p>总的构造过程为：先从 <code>ViewModelStore</code> 中获取缓存的 <code>ViewModel</code>，若没有缓存过则用 <code>Facotry</code> 实例化一个新的 <code>ViewModel</code> 并缓存，具体的过程分为 4 步，具体可参考图示。</p><h2 id="ViewModel-与配置无关的原理"><code>ViewModel</code> 与配置无关的原理</h2><p>上一节我们说到，<code>ViewModel</code> 之所以能够与宿主 <code>Controller</code> 保持生命周期一致，是因为存储它的 <code>ViewModelStore</code> 与宿主 <code>Controller</code> 生命周期一致。那么为什么 <code>ViewModelStore</code> 能够保持和 <code>Controller</code> 生命周期一致呢？</p><p>这里我们需要先理清 <code>FragmentActivity</code> 和其寄生的 <code>Fragment</code> 的 <code>ViewModelStore</code> 之间的关系：</p><img src="5.png" alt="ViewModelStore 树" style="zoom:80%;" /><p>如图所示：</p><p>每个 <code>ViewModelStore</code> 依附于其宿主 <code>Controller</code>，所以各个 <code>Controller</code> 的 <code>ViewModelStore</code> 组成一个树状的引用关系；</p><p>处于顶层的 <code>ViewModelStore</code> 依附于 <code>FragmentActivity</code>，它除了保存用户级的 <code>ViewModel</code> 以外，还保存其儿子 <code>Fragment</code> 的 <code>FragmentManagerViewModel</code>；</p><p><code>FragmentManagerViewModel</code> 主要维护两个对象：所属 <code>Fragment</code> 的 <code>ViewModelStore</code> 和其儿子 <code>Fragment</code> 的 <code>FragmentManagerViewModel</code> 的引用，注意图中的红色部分，所有二级及以下的子孙 <code>Fragment</code> 都共用同一个父节点的 <code>Child FragmentManagerModel</code>，这样当父 <code>Fragment</code> 销毁的时候方便一次性清除其所有子 <code>Fragment</code> 共用的 <code>FragmentManagerViewModel</code>；</p><p>但是二级及以下的子孙 <code>Fragment</code> 的 <code>ViewModelStore</code> 都是独立的，一个 <code>Fragment</code> 自身的 <code>ViewModel</code> 变化应该不影响其兄弟节点的 <code>ViewModel</code>，所以可以推导出，它们共同的 <code>FragmentManagerViewModel</code> 应该是维护了一个保存各个子 <code>Fragment</code> 的 <code>ViewModelStore</code> 的容器，大家如果细看 <code>FragmentManagerViewModel</code> 的源代码，实际上就是这么做的。</p><p>所以，我们看到，处于顶层的 <code>FragmentActivity</code> 的 <code>ViewModelStore</code> 是一个超级 <code>Store</code>，它引用了所有的 <code>ViewModels</code>，包括自身的数据、所有子孙 <code>Fragment</code> 的 <code>ViewModels</code>，只要各子孙 <code>Fragment</code> 不清除自有 <code>ViewModelStore</code>，则所有的数据都维护在这棵 <code>ViewModelStore</code> 树中。</p><p>那么在配置发生变化的时候，<code>ViewModelStore</code> 树如何保持不变呢？</p><h2 id="系统级的配置无关支持">系统级的配置无关支持</h2><p>将 <code>ViewModelStore</code> 作为配置无关数据进行保持，在 <code>FragmentActivity</code> 中是这么做的：</p><img src="6.png"  style="zoom:80%;" /><p>这样，在顶层源头上就保证了所有 <code>Controller</code> 的 <code>ViewModels</code> 不会在发送配置变化的时候由于 <code>Controller</code> 重建而被销毁。</p><p>另外在 <code>Fragment</code> 层中，必须区分 <code>Fragment</code> 实例销毁时到底是因为调用了 <code>onDestroy</code> 还是配置发生了变化，如果是前者则必须清理自身持有的 <code>ViewModelStore</code>，如果是后者则不能清理：</p><img src="7.png" style="zoom:80%;" /><p>如图所示，也说明了 <code>Fragment</code> 的 <code>ViewModel</code> 生命周期与该 <code>Fragment</code> 生命周期是一致的。</p><h1>代码案例</h1><p>项目中不同分支提供了同一app的不同架构实现：</p><p><a href="https://github.com/android/architecture-samples">https://github.com/android/architecture-samples</a></p><h1>参考</h1><blockquote><p><a href="https://www.jianshu.com/p/4b754ea48a40">https://www.jianshu.com/p/4b754ea48a40</a></p><p><a href="https://stackoverflow.com/questions/2056/what-are-mvp-and-mvc-and-what-is-the-difference">What are MVP and MVC and what is the difference? · Stack Overflow</a></p><p><a href="https://blog.csdn.net/ljx1400052550/article/details/108357488">https://blog.csdn.net/ljx1400052550/article/details/108357488</a></p><p><a href="https://tech.meituan.com/2016/11/11/android-mvvm.html">https://tech.meituan.com/2016/11/11/android-mvvm.html</a></p><p><a href="https://blog.51cto.com/u_15127678/3949546">https://blog.51cto.com/u_15127678/3949546</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学线培训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学线培训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统实验二-管道通信</title>
      <link href="/2022/03/30/os-%E5%AE%9E%E9%AA%8C%E4%BA%8C/"/>
      <url>/2022/03/30/os-%E5%AE%9E%E9%AA%8C%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h1>管道</h1><h2 id="创建匿名管道">创建匿名管道</h2><p>实际管道的创建调用的是系统调用<code>pipe()</code>，该函数建了一个管道 <code>pipe</code>，返回了两个文件描述符，这表示管道的两端，一个是管道的读取端描述符 <code>fd[0]</code>，另一个是管道的写入端描述符 <code>fd[1]</code>，<code>fd[2]</code>为管道标号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pipe</span><span class="params">(<span class="keyword">int</span> fd[<span class="number">2</span>])</span></span></span><br></pre></td></tr></table></figure><p>如果对于 <code>fd[1]</code>写入，调用的是 <code>write()</code>，向 <code>pipe_buffer</code> 里面写入数据；如果对于 <code>fd[0]</code>的读入，调用的是 <code>read()</code>，也就是从 <code>pipe_buffer</code> 里面读取数据。至此，我们在一个进程内创建了管道，但是尚未实现进程间通信。</p><p>要注意，<strong>在管道中没有数据的情况下，对管道的读操作会阻塞，直到管道内有数据为止</strong>。这就是为什么示例实验中的父子进程之间的执行是交替的。</p><p>当然写操作也不会再所有情况下都不阻塞。这里我们要先来了解一下管道的内核实现。管道实际上就是内核控制的一个内存缓冲区，既然是缓冲区，就有容量上限。我们把管道一次最多可以缓存的数据量大小叫做PIPESIZE。内核在处理管道数据的时候，底层也要调用类似read和write这样的方法进行数据拷贝，这种内核操作每次可以操作的数据量也是有限的，一般的操作长度为一个page，即默认为4k字节。我们把每次可以操作的数据量长度叫做PIPEBUF。POSIX标准中，对PIPEBUF有长度限制，要求其最小长度不得低于512字节。PIPEBUF的作用是，内核在处理管道的时候，如果每次读写操作的数据长度不大于PIPEBUF时，保证其操作是原子的。而PIPESIZE的影响是，大于其长度的写操作会被阻塞，直到当前管道中的数据被读取为止。</p><h2 id="匿名管道通信">匿名管道通信</h2><p>匿名管道实现<code>A|B</code>进程间的通信的原理如下：</p><ul><li>利用<code>fork</code>创建子进程，复制<code>file_struct</code>会同样复制<code>fd</code>输入输出数组，但是<code>fd</code>指向的文件仅有一份，即两个进程间可以通过<code>fd</code>数组实现对同一个管道文件的跨进程读写操作</li><li>禁用父进程的读，禁用子进程的写，即从父进程写入从子进程读出，从而实现了单向管道，避免了混乱</li><li>对于<code>A|B</code>来说，<code>shell</code>首先创建子进程<code>A</code>，接着创建子进程<code>B</code>，由于二者均从<code>shell</code>创建，因此共用<code>fd</code>数组。<code>shell</code>关闭读写，A开写B开读，从而实现了<code>A</code> 和<code>B</code>之间的通信。</li></ul><img src="os-实验二/1.png" style="zoom:22%;" /><p>接着我们需要调用<code>dup2()</code>实现输入输出和管道两端的关联，该函数会将<code>fd</code>赋值给<code>fd2</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Duplicate FD to FD2, closing the old FD2 and making FD2 be</span></span><br><span class="line"><span class="comment">   open the same file as FD is.  Return FD2 or -1.  */</span></span><br><span class="line"><span class="keyword">int</span> __dup2 (<span class="keyword">int</span> fd, <span class="keyword">int</span> fd2)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fd &lt; <span class="number">0</span> || fd2 &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (fd == fd2)</span><br><span class="line">    <span class="comment">/* No way to check that they are valid.  */</span></span><br><span class="line">    <span class="keyword">return</span> fd2;</span><br><span class="line">  __set_errno (ENOSYS);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>files_struct</code> 里面，有这样一个表，下标是 <code>fd</code>，内容指向一个打开的文件 <code>struct file</code>。在这个表里面，前三项是定下来的，其中第零项 <code>STDIN_FILENO</code> 表示标准输入，第一项 <code>STDOUT_FILENO</code> 表示标准输出，第三项 <code>STDERR_FILENO</code> 表示错误输出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">files_struct</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> __<span class="title">rcu</span> * <span class="title">fd_array</span>[<span class="title">NR_OPEN_DEFAULT</span>];</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在 A 进程写入端通过<code>dup2(fd[1],STDOUT_FILENO)</code>将 <code>STDOUT_FILENO</code>（也即第一项）不再指向标准输出，而是指向创建的管道文件，那么以后往标准输出写入的任何东西，都会写入管道文件。</li><li>在 B 进程中读取端通过<code>dup2(fd[0],STDIN_FILENO)</code>将 <code>STDIN_FILENO</code> 也即第零项不再指向标准输入，而是指向创建的管道文件，那么以后从标准输入读取的任何东西，都来自于管道文件。</li></ul><p>至此，我们将 <code>A|B</code> 的功能完成。</p><img src="os-实验二/2.png" style="zoom:22%;" /><p>示例实验与上面的过程略有不同（没有上面那么麻烦），因为不会涉及shell进程，所以是直接在父子进程中进行消息传递，而不是创建两个子进程。</p><h2 id="独立实验">独立实验</h2><p>与示例实验思路相近，使用了两个管道。不同的是，两个管道都是由子进程向父进程发送数据。所以子进程直接关闭读，父进程直接关闭写。</p><p>出现的一些问题：不能在父进程中并列地进行进程创建，或者说，不能在父进程中同时声明子进程的创建，这会导致第二个子进程会被第一个子进程再创建一遍。所以第二个子进程的创建应该在第一个子进程内进行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pid1; </span><br><span class="line">    <span class="keyword">int</span> pid2; </span><br><span class="line">    <span class="keyword">int</span> pipe1[<span class="number">2</span>]; <span class="comment">//存放第一个无名管道标号</span></span><br><span class="line">    <span class="keyword">int</span> pipe2[<span class="number">2</span>]; <span class="comment">//存放第二个无名管道标号</span></span><br><span class="line">    <span class="keyword">int</span> x,y; </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;输入x:\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">        <span class="keyword">while</span>(x&lt;<span class="number">1</span>)&#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;输入非法，重新输入x:\n&quot;</span>);</span><br><span class="line">          <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;输入y:\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;y);</span><br><span class="line">        <span class="keyword">while</span>(y&lt;<span class="number">1</span>)&#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;输入非法，重新输入y:\n&quot;</span>);</span><br><span class="line">          <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;y);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pipe(pipe1) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;pipe not create&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pipe(pipe2) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;pipe not create&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((pid1 = fork()) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;process not create&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (pid1 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        pid2 = fork();</span><br><span class="line">        <span class="keyword">if</span> (pid2 &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            perror(<span class="string">&quot;process not create&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (pid2 &gt; <span class="number">0</span>)&#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;子进程创建成功！\n&quot;</span>); </span><br><span class="line">        &#125;     </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (pid1 == <span class="number">0</span>) &#123;<span class="comment">//f(x)</span></span><br><span class="line">        close(pipe1[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child %d 读入x: %d\n&quot;</span>, getpid(), x);</span><br><span class="line">        <span class="keyword">if</span>(x &gt; <span class="number">1</span>)&#123;</span><br><span class="line">          <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i&lt;=x;i++)&#123;</span><br><span class="line">            a = a * i;</span><br><span class="line">          &#125;</span><br><span class="line">          x = a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;f(x) = %d\n&quot;</span>,x);</span><br><span class="line">        write(pipe1[<span class="number">1</span>], &amp;x, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">      </span><br><span class="line">        close(pipe1[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (pid2 == <span class="number">0</span>) &#123;<span class="comment">//f(y)</span></span><br><span class="line">        close(pipe2[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child %d 读入y: %d\n&quot;</span>, getpid(), y);</span><br><span class="line">        <span class="keyword">if</span>(y&gt;<span class="number">2</span>)&#123;</span><br><span class="line">          <span class="keyword">int</span> a = <span class="number">1</span>,b = <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i&lt;y;i++)&#123;</span><br><span class="line">            b = b + a;</span><br><span class="line">            a = b - a;</span><br><span class="line">          &#125;</span><br><span class="line">          y = b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;f(y) = %d\n&quot;</span>,y);</span><br><span class="line">        write(pipe2[<span class="number">1</span>], &amp;y, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"></span><br><span class="line">        close(pipe2[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//f(x,y)</span></span><br><span class="line">        close(pipe1[<span class="number">1</span>]);</span><br><span class="line">        close(pipe2[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        read(pipe1[<span class="number">0</span>], &amp;a, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">        read(pipe2[<span class="number">0</span>], &amp;b, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Parent %d 计算完成: %d\n&quot;</span>, getpid(), a+b);</span><br><span class="line">        close(pipe1[<span class="number">0</span>]);</span><br><span class="line">        close(pipe2[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鉴权技术</title>
      <link href="/2022/03/21/%E9%89%B4%E6%9D%83%E6%8A%80%E6%9C%AF/"/>
      <url>/2022/03/21/%E9%89%B4%E6%9D%83%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1>鉴权技术</h1><h2 id="从状态说起">从状态说起</h2><p><strong>HTTP 无状态</strong></p><p>我们知道，HTTP 是无状态的。也就是说，HTTP 请求方和响应方间无法维护状态，都是一次性的，它不知道前后的请求都发生了什么。</p><p>但有的场景下，我们需要维护状态。最典型的，一个用户登陆微博，发布、关注、评论，都应是在登录后的用户状态下的。</p><p><strong>标记</strong></p><p>那解决办法是什么呢？标记。</p><blockquote><p>在学校或公司，入学入职那一天起，会录入你的身份、账户信息，然后给你发个卡，今后在园区内，你的门禁、打卡、消费都只需要刷这张卡。</p></blockquote><p><strong>前端存储</strong></p><p>这就涉及到一发、一存、一带，发好办，登陆接口直接返回给前端，存储就需要前端想办法了。</p><blockquote><p>前提是，你要把卡带在身上。</p></blockquote><p>前端的存储方式有很多。</p><ul><li>最矬的，挂到全局变量上，但这是个「体验卡」，一次刷新页面就没了</li><li>高端点的，存到 cookie、localStorage 等里，这属于「会员卡」，无论怎么刷新，只要浏览器没清掉或者过期，就一直拿着这个状态。</li></ul><p>前端存储这里不展开了。</p><p>有地方存了，请求的时候就可以拼到参数里带给接口了。</p><h2 id="HTTP-Basic-Authentication">HTTP Basic Authentication</h2><blockquote><p>这种授权方式是<strong>浏览器遵守http协议实现的基本授权方式</strong>。HTTP协议进行通信的过程中，HTTP协议定义了基本认证认证允许HTTP服务器对客户端进行用户身份证的方法。</p></blockquote><p>1、客户端向服务器请求数据此时，此时客户端尚未被验证。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /index.html HTTP/1.0</span><br><span class="line">Host:www.google.com</span><br></pre></td></tr></table></figure><p>2、服务器向客户端发送验证请求代码<strong>401</strong>,（**WWW-Authenticate: Basic realm=”<a href="http://google.com">google.com</a>”**这句话是关键，如果没有客户端不会弹出用户名和密码输入界面）服务器返回的数据大抵如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.0 401 Unauthorised</span><br><span class="line">Server: SokEvo/1.0</span><br><span class="line">WWW-Authenticate: Basic realm=”google.com”</span><br><span class="line">Content-Type: text/html</span><br></pre></td></tr></table></figure><p>3、当符合http1.0或1.1规范的客户端（WEB浏览器如IE，FIREFOX）<strong>收到401返回值</strong>时，将<strong>自动弹出一个登录窗口</strong>，要求用户输入用户名和密码。</p><p><img src="https://gitee.com/skyyemperor/pic/raw/master/2021/04/Snip_04-17_10-27-12.png" alt=""></p><p>4、用户输入用户名和密码后，将用户名及密码以BASE64编码，并将密文放入前一条请求信息中，则客户端发送的第一条请求信息则变成如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /index.html HTTP/1.0</span><br><span class="line">Host:www.google.com</span><br><span class="line">Authorization: Basic dXNlcjE6cGFzcw==</span><br></pre></td></tr></table></figure><blockquote><p>注：dXNlcjE6cGFzcw==表示加密后的用户名及密码（用户名:密码 然后通过base64编码，编码过程是浏览器默认的行为，不需要我们人为加密，我们只需要输入用户名密码即可）</p></blockquote><p>5、服务器收到上述请求信息后，将Authorization字段后的用户信息取出、解密，将解密后的用户名及密码与用户数据库进行比较验证。</p><ul><li>若用户名及密码正确，服务器则根据请求，将所请求资源发送给客户端</li><li>若用户名及密码不正确，服务器则会返回401，表示认证失败</li></ul><p><strong>缺点</strong>：</p><ul><li>base64加密是可逆的，不安全</li></ul><h2 id="session-cookie">session-cookie</h2><blockquote><p>利用服务器端的session（会话）和浏览器端的cookie来实现前后端的认证。</p></blockquote><p>1、服务器在接受客户端<strong>首次访问</strong>时<strong>在服务器端创建session</strong>，然后保存session(我们可以将session保存在内存中，也可以保存在redis中，推荐使用后者)，然后给这个session生成一个唯一的标识字符串,然后在响应头中种下这个唯一标识字符串。<br>2、<strong>浏览器</strong>中收到请求响应的时候会解析响应头，然后将<strong>sid保存在本地cookie</strong>中。浏览器在下次请求时，请求头中会带上该域名下的cookie信息(其中就包括sid)。<br>3、<strong>服务器</strong>在接受客户端请求时会去<strong>解析请求头cookie中的sid</strong>，根据这个sid去找服务器端保存的该客户端的session，判断该请求是否合法。</p><p>典型的 session 登陆/验证流程：</p><p><img src="1.png" alt=""></p><p><strong>缺点</strong>：</p><ul><li>cookie依赖于浏览器</li><li>cookie容易被窃取(例XSS攻击)</li><li>随着认证用户的增多，服务端的开销会明显增大</li></ul><h2 id="Token">Token</h2><p>1、客户端使用用户名跟密码请求登录</p><p>2、服务端收到请求，去验证用户名与密码</p><p>3、验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端</p><p>4、客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里</p><p>5、客户端每次向服务端请求资源的时候需要带着服务端签发的 Token</p><p>6、服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据</p><p><img src="2.png" alt=""></p><h3 id="refresh-token">refresh token</h3><p>token，作为权限守护者，最重要的就是「安全」。</p><p>业务接口用来鉴权的 token，我们称之为 access token。越是权限敏感的业务，我们越希望 access token 有效期足够短，以避免被盗用。但过短的有效期会造成 access token 经常过期，过期后怎么办呢？</p><p>一种办法是，让用户重新登录获取新 token，显然不够友好，要知道有的 access token 过期时间可能只有几分钟。</p><p>另外一种办法是，再来一个 token，一个专门生成 access token 的 token，我们称为 refresh token。</p><ul><li>access token 用来访问业务接口，由于有效期足够短，盗用风险小，也可以使请求方式更宽松灵活</li><li>refresh token 用来获取 access token，有效期可以长一些，通过独立服务和严格的请求方式增加安全性；由于不常验证，也可以如前面的 session 一样处理</li></ul><p>有了 refresh token 后，几种情况的请求流程变成这样：</p><p><img src="3.png" alt=""></p><p>如果 refresh token 也过期了，就只能重新登录了。</p><h3 id="session-和-token">session 和 token</h3><p>session 和 token 都是边界很模糊的概念，就像前面说的，refresh token 也可能以 session 的形式组织维护。</p><p>狭义上，我们通常认为 session 是「种在 cookie 上、数据存在服务端」的认证方案，token 是「客户端存哪都行、数据存在 token 里」的认证方案。对 session 和 token 的对比本质上是「客户端存 cookie / 存别地儿」、「服务端存数据 / 不存数据」的对比。</p><h2 id="JWT实现">JWT实现</h2><h3 id="JWT长什么样？">JWT长什么样？</h3><p>JWT是由三段信息构成的，将这三段信息文本用<code>.</code>链接一起就构成了Jwt字符串。就像这样:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9<span class="selector-class">.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</span><span class="selector-class">.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span></span><br></pre></td></tr></table></figure><h3 id="JWT的构成">JWT的构成</h3><p>第一部分我们称它为<strong>头部（header)</strong>,第二部分我们称其为<strong>载荷（payload</strong>, 类似于飞机上承载的物品)，第三部分是<strong>签证（signature)</strong>。</p><p>🌳<strong>header</strong></p><p>jwt的头部承载两部分信息：</p><ul><li>声明类型，这里是jwt</li><li>声明加密的算法 通常直接使用 HMAC SHA256</li></ul><p>完整的头部就像下面这样的JSON：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将头部进行base64加密（该加密是可以对称解密的),构成了第一部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span><br></pre></td></tr></table></figure><p>🌳<strong>payload</strong></p><p>载荷就是存放有效信息的地方。这个名字像是特指飞机上承载的货品，这些有效信息包含三个部分</p><ul><li>标准中注册的声明</li><li>公共的声明</li><li>私有的声明</li></ul><p><strong>标准中注册的声明</strong> (建议但不强制使用) ：</p><ul><li><strong>iss</strong>: jwt签发者</li><li><strong>sub</strong>: jwt所面向的用户</li><li><strong>aud</strong>: 接收jwt的一方</li><li><strong>exp</strong>: jwt的过期时间，这个过期时间必须要大于签发时间</li><li><strong>nbf</strong>: 定义在什么时间之前，该jwt都是不可用的.</li><li><strong>iat</strong>: jwt的签发时间</li><li><strong>jti</strong>: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</li></ul><p><strong>公共的声明</strong> ：<br>公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.</p><p><strong>私有的声明</strong> ：<br>私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。</p><p>定义一个payload:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;userId&quot;</span>: <span class="number">34</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将其进行base64加密，得到Jwt的第二部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwidXNlcklkIjozNH0=</span><br></pre></td></tr></table></figure><p>🌳<strong>signature</strong></p><p>jwt的第三部分是一个签证信息，这个签证信息由三部分组成：</p><ul><li>header (base64后的)</li><li>payload (base64后的)</li><li>secret</li></ul><p>这个部分需要base64加密后的header和base64加密后的payload使用<code>.</code>连接组成的字符串，然后通过header中声明的加密方式进行加盐<code>secret</code>组合加密，然后就构成了jwt的第三部分。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="keyword">var</span> encodedString = base64UrlEncode(header) + <span class="string">&#x27;.&#x27;</span> + base64UrlEncode(payload);</span><br><span class="line"></span><br><span class="line"><span class="comment">//TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span></span><br><span class="line"><span class="keyword">var</span> signature = HMACSHA256(encodedString, <span class="string">&#x27;secret&#x27;</span>);</span><br></pre></td></tr></table></figure><p>将这三部分用<code>.</code>连接成一个完整的字符串,构成了最终的jwt:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></pre></td></tr></table></figure><blockquote><p>注意：secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。</p></blockquote><p><strong>优点</strong></p><ul><li>因为json的通用性，所以JWT是可以进行跨语言支持的，像JAVA,JavaScript,NodeJS,PHP等很多语言都可以使用。</li><li>因为有了payload部分，所以JWT可以在自身存储一些其他业务逻辑所必要的非敏感信息。</li><li>便于传输，jwt的构成非常简单，字节占用很小，所以它是非常便于传输的。</li><li>它不需要在服务端保存会话信息, 所以它易于应用的扩展</li></ul><p><strong>安全相关</strong></p><ul><li>不应该在jwt的payload部分存放敏感信息，因为该部分是客户端可解密的部分。</li><li>保护好secret私钥，该私钥非常重要。</li><li>如果可以，请使用https协议</li></ul><h2 id="自定义实现">自定义实现</h2><p>1、客户端发来用户名和密码，服务端验证之后，会从数据库得到一个userId(用户的唯一标识)</p><p>2、服务端根据这个userId来生成TOKEN，组装一个字符串 <code>date()+&quot;system-token-&quot;+userId</code>，将这段字符串用md5加密作为token；token有效期不能过长，但是不能让用户频繁登录，所以可以使用refresh_token用来刷新token，组装一个字符串 <code>date()+&quot;system-refresh_token-&quot;+userId</code>，将这段字符串用md5加密作为token。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1618632535180system-token-34  -&gt;  0b80013ba2b117e62336a14f2b040dc4</span><br><span class="line">1618632535182system-refresh_token-34  -&gt;  0b4b264d76c934d6ef85323187086afe</span><br></pre></td></tr></table></figure><p>3、将token和userId作为一个键值存到redis数据库，将refresh_tokentoken和userId作为一个键值存到redis数据库，同时设置一个过期时间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">token:0b80013ba2b117e62336a14f2b040dc4 : 34  -&gt;  redis          <span class="comment"># token过期时间2小时</span></span><br><span class="line">refresh_token:0b4b264d76c934d6ef85323187086afe : 34  -&gt;  redis  <span class="comment"># refresh_token过期时间一个月</span></span><br></pre></td></tr></table></figure><p>4、若用户密码正确，就将token和refresh_token发送给客户端</p><p>5、接下来，就可以愉快地玩耍了。客户端在需要鉴权的接口上，使用请求头带上这个token。</p><p>6、服务端接收到这个token，可以在redis中查询这个token对应的userId</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis.get(<span class="string">&quot;token:0b80013ba2b117e62336a14f2b040dc4&quot;</span>)  -&gt;  34</span><br></pre></td></tr></table></figure><p>7、若token过期，服务端在redis查询的值为空，就返回一个<code>token失效的状态码</code>，客户端利用refresh_token来获取新的token，避免用户重复登录。</p><h2 id="JWT详细使用">JWT详细使用</h2><h3 id="引入依赖">引入依赖</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--引入JWT--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.auth0&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;java-jwt&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.10</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="生成token">生成token</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Calendar instance = Calendar.getInstance();</span><br><span class="line">        instance.add(Calendar.SECOND,<span class="number">20</span>);</span><br><span class="line">        String token = JWT.create()</span><br><span class="line">                .withHeader(map) <span class="comment">//可以不设定，就是使用默认的</span></span><br><span class="line">                .withClaim(<span class="string">&quot;userId&quot;</span>,<span class="number">20</span>)<span class="comment">//payload  //自定义用户名</span></span><br><span class="line">                .withClaim(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">                .withExpiresAt(instance.getTime()) <span class="comment">//指定令牌过期时间</span></span><br><span class="line">                .sign(Algorithm.HMAC256(<span class="string">&quot;fdahuifeuw78921&quot;</span>));<span class="comment">//签名</span></span><br></pre></td></tr></table></figure><h3 id="根据令牌和签名解析数据">根据令牌和签名解析数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JWTVerifier jwtVerifier = JWT.require(Algorithm.HMAC256(<span class="string">&quot;fdahuif921&quot;</span>)).build();</span><br><span class="line">        DecodedJWT decodedJWT = jwtVerifier.verify(token);</span><br><span class="line">        decodedJWT.getClaim(<span class="string">&quot;userId&quot;</span>).asInt();<span class="comment">//获取负载里面对应的内容</span></span><br><span class="line">        decodedJWT.getClaim(<span class="string">&quot;username&quot;</span>).asString();</span><br><span class="line">        decodedJWT.getExpiresAt();<span class="comment">//获取过期时间</span></span><br></pre></td></tr></table></figure><h3 id="常见异常信息">常见异常信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SignatureVerificationException <span class="comment">//签名不一致异常</span></span><br><span class="line">TokenExpiredException <span class="comment">//令牌过期异常</span></span><br><span class="line">AlgorithmMismatchException <span class="comment">//算法不匹配异常</span></span><br><span class="line">InvalidClaimException <span class="comment">//失效的payload异常（传给客户端后，token被改动，验证不一致）</span></span><br></pre></td></tr></table></figure><h2 id="封装工具类">封装工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String SIGNATURE = <span class="string">&quot;token!@#$%^7890&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map //传入payload</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getToken</span><span class="params">(Map&lt;String,String&gt; map)</span></span>&#123;</span><br><span class="line">        JWTCreator.Builder builder = JWT.create();</span><br><span class="line">        map.forEach((k,v)-&gt;&#123;</span><br><span class="line">            builder.withClaim(k,v);</span><br><span class="line">        &#125;);</span><br><span class="line">        Calendar instance = Calendar.getInstance();</span><br><span class="line">        instance.add(Calendar.SECOND,<span class="number">7</span>);</span><br><span class="line">        builder.withExpiresAt(instance.getTime());</span><br><span class="line">        <span class="keyword">return</span> builder.sign(Algorithm.HMAC256(SIGNATURE)).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">verify</span><span class="params">(String token)</span></span>&#123;</span><br><span class="line">        JWT.require(Algorithm.HMAC256(SIGNATURE)).build().verify(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取token中payload</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DecodedJWT <span class="title">getToken</span><span class="params">(String token)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JWT.require(Algorithm.HMAC256(SIGNATURE)).build().verify(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringBoot整合JWT">SpringBoot整合JWT</h2><h3 id="登录时生成token">登录时生成token</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//controller层接收数据，生成token，并响应</span></span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    User userDB = userService.login(user);</span><br><span class="line">    Map&lt;String,String&gt; payload = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    payload.put(<span class="string">&quot;id&quot;</span>,userDB.getId());</span><br><span class="line">    payload.put(<span class="string">&quot;name&quot;</span>,userDB.getName());</span><br><span class="line">    <span class="comment">//生成JWT令牌</span></span><br><span class="line">    String token = JWTUtils.getToken(payload);</span><br><span class="line">    map.put(<span class="string">&quot;state&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;认证成功&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;token&quot;</span>,token);<span class="comment">//响应token</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    map.put(<span class="string">&quot;state&quot;</span>,<span class="string">&quot;false&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>,e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="声明一个token拦截器类">声明一个token拦截器类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liup.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.AlgorithmMismatchException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.SignatureVerificationException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.TokenExpiredException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.office.utils.JWTUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JWT验证拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//令牌建议是放在请求头中，获取请求头中令牌</span></span><br><span class="line">        String token = request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            JWTUtils.verify(token);<span class="comment">//验证令牌</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//放行请求</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureVerificationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;无效签名&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TokenExpiredException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;token过期&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlgorithmMismatchException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;token算法不一致&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;token失效&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(<span class="string">&quot;state&quot;</span>,<span class="keyword">false</span>);<span class="comment">//设置状态</span></span><br><span class="line">        <span class="comment">//将map转化成json，response使用的是Jackson</span></span><br><span class="line">        String json = <span class="keyword">new</span> ObjectMapper().writeValueAsString(map);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().print(json);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置拦截器">配置拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.office.interceptor.JWTInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> JWTInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/user/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="OAuth">OAuth</h2><blockquote><p>OAuth（开放授权）是一个<strong>开放标准</strong>，<strong>允许用户授权第三方网站访问他们存储在另外的服务提供者上的信息，而不需要将用户名和密码提供给第三方网站或分享他们数据的所有内容</strong>，为了保护用户数据的安全和隐私，第三方网站访问用户数据前都需要显式的向用户征求授权。</p><p>我们常见的提供OAuth认证服务的厂商有支付宝，QQ,微信。</p></blockquote><p><strong>OAuth 2.0 规定了四种获得令牌的流程。</strong></p><ul><li>授权码（authorization-code）</li><li>隐藏式（implicit）</li><li>密码式（password）：</li><li>客户端凭证（client credentials）</li></ul><blockquote><p>注意，不管哪一种授权方式，第三方应用申请令牌之前，都必须先到系统备案，说明自己的身份，然后会拿到两个身份识别码：客户端 ID（client ID）和客户端密钥（client secret）。这是为了防止令牌被滥用，没有备案过的第三方应用，是不会拿到令牌的。</p></blockquote><ul><li><p><strong>授权码方式</strong></p><blockquote><p><strong>授权码（authorization code）方式，指的是第三方应用先申请一个授权码，然后再用该码获取令牌。</strong></p></blockquote><p>这里以码云(<a href="http://gitee.com">gitee.com</a>)的QQ登录为例(<a href="https://wiki.connect.qq.com/%E4%BD%BF%E7%94%A8authorization_code%E8%8E%B7%E5%8F%96access_token">QQ官方文档</a>)：</p><p><strong>1、登录 <a href="https://connect.qq.com/devuser.html#/">QQ 互联平台</a>，注册成为开发者，注册一个应用</strong></p><p><strong>2、获取Authorization Code</strong></p><p>请求地址： <a href="https://graph.qq.com/oauth2.0/authorize">https://graph.qq.com/oauth2.0/authorize</a></p><p><img src="https://gitee.com/skyyemperor/pic/raw/master/2021/04/Snip_04-17_13-15-48.png" alt=""></p><p>如果用户成功登录并授权，则会跳转到指定的回调地址，并在redirect_uri地址后带上Authorization Code和原始的state值。如 <a href="http://graph.qq.com/demo/index.jsp?code=9A5F************************06AF&amp;state=test">http://graph.qq.com/demo/index.jsp?code=9A5F************************06AF&amp;state=test</a><br>注意：此code会在10分钟内过期。</p><p><strong>3、通过Authorization Code获取Access Token(后端请求)</strong></p><p><img src="https://gitee.com/skyyemperor/pic/raw/master/2021/04/Snip_04-17_13-17-30.png" alt=""></p><p><strong>4、之后即可通过Access Token获取QQ的用户信息</strong></p></li><li><p><strong>隐藏式</strong></p><p>有些 Web 应用是纯前端应用，没有后端。这时就不能用上面的方式了，必须将令牌储存在前端。<strong>允许直接向前端颁发令牌。这种方式没有授权码这个中间步骤，所以称为（授权码）“隐藏式”（implicit）。</strong></p></li><li><p><strong>密码式</strong></p><p><strong>如果你高度信任某个应用，RFC 6749 也允许用户把用户名和密码，直接告诉该应用。该应用就使用你的密码，申请令牌，这种方式称为&quot;密码式&quot;（password）。</strong></p></li><li><p><strong>凭证式</strong></p><p><strong>适用于没有前端的命令行应用，即在命令行下请求令牌。</strong></p></li></ul><blockquote><p>参考https://blog.csdn.net/wang839305939/article/details/78713124</p><p><a href="http://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html">http://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html</a></p><p><a href="https://blog.csdn.net/Top_L398/article/details/109361680?utm_source=app&amp;app_version=5.2.1&amp;code=app_1562916241&amp;uLinkId=usr1mkqgl919blen">https://blog.csdn.net/Top_L398/article/details/109361680?utm_source=app&amp;app_version=5.2.1&amp;code=app_1562916241&amp;uLinkId=usr1mkqgl919blen</a></p><p><a href="https://juejin.cn/post/6898630134530752520">https://juejin.cn/post/6898630134530752520</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学线培训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学线培训 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot入门指南与junit单元测试</title>
      <link href="/2022/03/17/%E5%AD%A6%E7%BA%BF%E5%9F%B9%E8%AE%AD-junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/03/17/%E5%AD%A6%E7%BA%BF%E5%9F%B9%E8%AE%AD-junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1>SpringBoot入门指南</h1><h2 id="基本结构认知">基本结构认知</h2><p>首先，你要对基本的结构有一定的认识：</p><img src="5.png" style="zoom:37%;" /><p>除此之外，还有对象集合<code>bean</code>（或者<code>entity</code>、<code>pojo</code>），配置文件集合<code>config</code>，如果你使用<code>MyBatis</code>，你会用到映射集合<code>mapper</code>。</p><h2 id="spring认知">spring认知</h2><p><a href="https://www.bilibili.com/video/BV1WE411d7Dv?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1WE411d7Dv?spm_id_from=333.999.0.0</a>   可以考虑作为知识补充</p><p>其次，<code>springBoot</code>会涉及一些基本的<code>spring</code>原理，你至少需要对<code>spring</code>的这两方面有一定的认识：</p><h3 id="IoC容器"><code>IoC</code>容器</h3><p>传统的应用程序中，控制权在程序本身，程序的控制流程完全由开发者控制。但在<code>IoC</code>模式下，控制权发生了反转，即从应用程序转移到了<code>IoC</code>容器，<strong>组件不再由应用程序自己创建和配置，而是由<code>IoC</code>容器负责</strong>，这样，应用程序只需要直接使用已经创建好并且配置好的组件。为了能让组件在<code>IoC</code>容器中被 “装配” 出来，需要某种 “<strong>注入</strong>” 机制，例如，<code>BookService</code>自己并不会创建<code>DataSource</code>，而是等待外部通过<code>setDataSource()</code>方法来<strong>注入</strong>一个<code>DataSource</code>。</p><p>这种<strong>控制反转、依赖注入的思想</strong>会让你更快地理解<code>SpringBoot</code>的<code>@Autowired</code>或者<code>@Resource</code></p><h3 id="IOC简介"><code>IOC</code>简介</h3><h4 id="IoC是什么"><code>IoC</code>是什么</h4><p><code>Ioc</code>—<code>Inversion of Control</code>，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，<code>Ioc</code>意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好<code>Ioc</code>呢？理解好<code>Ioc</code>的关键是要明确 “<strong>谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了</strong>”，那我们来深入分析一下：</p><p>●<strong>谁控制谁，控制什么</strong>：传统<code>Java SE</code>程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而<code>IoC</code>是有专门一个容器来创建这些对象，即由<code>Ioc</code>容器来控制对象的创建；<strong>谁控制谁？当然是<code>IoC</code> 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）</strong>。</p><p>●<strong>为何是反转，哪些方面反转了</strong>：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？<strong>依赖对象的获取被反转</strong>了。</p><p>用图例说明一下，传统程序设计如图，都是主动去创建相关对象然后再组合起来：</p><img src="12.png" style="zoom:100%;" /><p>当有了<code>IoC/DI</code>的容器后，在客户端类中不再主动去创建这些对象了，如图所示:</p><img src="13.png" style="zoom:100%;" /><h4 id="IoC能做什么"><code> IoC</code>能做什么</h4><p><strong><code>IoC</code>不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序</strong>。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了<code>IoC</code>容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。</p><p>其实<code>IoC</code>对编程带来的最大改变不是从代码上，而是从思想上，发生了 “主从换位” 的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在<code>IoC/DI</code>思想中，应用程序就变成被动的了，被动的等待<code>IoC</code>容器来创建并注入它所需要的资源了。</p><p><code>IoC</code>很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由<code>IoC</code>容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。</p><h4 id="IoC和DI"><code> IoC</code>和<code>DI</code></h4><p><code>DI</code>—<code>Dependency Injection</code>，即 “<strong>依赖注入</strong>” ：是组件之间依赖关系由容器在运行期决定，形象的说，即<strong>由容器动态的将某个依赖关系注入到组件之中</strong>。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。</p><p>理解<code>DI</code>的关键是：<strong>“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么</strong>”，那我们来深入分析一下：</p><p>●<strong>谁依赖于谁</strong>：当然是某个<strong>容器管理对象依赖于<code>IoC</code>容器</strong>；“被注入对象的对象” 依赖于 “依赖对象”；</p><p>●<strong>为什么需要依赖</strong>：容器管理对象需要<code>IoC</code>容器来提供对象需要的外部资源；</p><p>●<strong>谁注入谁</strong>：很明显是<code>IoC</code>容器注入某个对象，也就是注入“依赖对象”；</p><p><strong>●注入了什么</strong>：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。</p><p><code>IoC</code>和<code>DI</code>由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对<code>IoC</code> 而言，<strong>“依赖注入” 明确描述了 “被注入对象依赖<code>IoC</code>容器配置依赖对象”。</strong></p><hr><h3 id="AOP"><code>AOP</code></h3><p><code>AOP</code>是<code>Aspect Oriented Programming</code>，即面向切面编程。</p><p>那什么是<code>AOP</code>？</p><p>我们先回顾一下<code>OOP</code>：<code>Object Oriented Programming</code>，<code>OOP</code>作为面向对象编程的模式，获得了巨大的成功，<code>OOP</code>的主要功能是数据封装、继承和多态。</p><p>而<code>AOP</code>是一种新的编程方式，它和<code>OOP</code>不同，<strong><code>OOP</code>把系统看作多个对象的交互，<code>AOP</code>把系统分解为不同的关注点，或者称之为切面（<code>Aspect</code>）</strong>。</p><p><code>AOP</code>技术看上去比较神秘，但实际上，<strong>它本质就是一个动态代理</strong>，让我们把一些常用功能如权限检查、日志、事务等，从每个业务方法中剥离出来。</p><p>比如，银行有一些业务，但这些业务首先要验证用户身份，我们可能每个业务都要先写一份验证身份的代码，也就是说，每个业务流程都要验证身份，但有没有想过可以把这个验证用户的代码是提取出来，不放到主流程里去呢？</p><p>这就是AOP的作用了，有了AOP，你写代码时不要把这个验证用户步骤写进去，即完全不考虑验证用户，你写完之后，在另我一个地方，写好验证用户的代码，然后告诉Spring你要把这段代码加到哪几个地方，Spring就会帮你加过去，而不要你自己Copy过去，这里还是两个地方，如果你有多个控制流呢，这个写代码的方法可以大大减少你的时间。</p><p>你可以把它当块板子，这块板子插入一些控制流程，这块板子就可以当成是AOP中的一个切面。所以AOP的本质是在一系列纵向的控制流程中，把那些相同的子流程提取成一个横向的面，如图</p><img src="14.png" style="zoom:100%;" /><p>不过AOP的目的不是这样，这只是一个“副作用”，<strong>真正目的是，你写代码的时候，事先只需考虑主流程，而不用考虑那些不重要的流程</strong>，举一个通用的例子，经常在debug的时候要打log吧，你也可以写好主要代码之后，把打log的代码写到另一个单独的地方，然后命令AOP把你的代码加过去，注意AOP不会把代码加到源文件里，但是它会正确的影响最终的机器代码。</p><h1><code>springboot</code>基本认知与常用注解</h1><p><code>SpringBoot</code>基于注解进行开发。</p><p>推荐<code>MyBatis</code>而不是<code>JPA</code>或者<code>Hibernate</code>。</p><h2 id="结构相关">结构相关</h2><h3 id="Component">@Component</h3><p><code>@Component</code>注解用于标注一个普通的组件类，它没有明确的业务范围，只是通知Spring被此注解的类需要被纳入到Spring Bean容器中并进行管理。</p><h3 id="Controller">@Controller</h3><p><code>@Controller</code>是<code>@Component</code>注解的一个延伸，<a href="http://mp.weixin.qq.com/s?__biz=Mzg2MjEwMjI1Mg==&amp;mid=2247488534&amp;idx=1&amp;sn=109a9ecbc8784fb71b5b92809d04449a&amp;chksm=ce0da395f97a2a83513f039a1b9f47ccd12701cdffac8bb0f3b24bbab13033338b6f9898a518&amp;scene=21#wechat_redirect">Spring</a>会自动扫描并配置被该注解标注的类。此注解用于标注Spring MVC的控制器。</p><h3 id="RestController">@RestController</h3><p><code>@RestController</code>是在Spring 4.0开始引入的，这是一个特定的控制器注解。此注解相当于<code>@Controller</code>和<code>@ResponseBody</code>的快捷方式。当使用此注解时，不需要再在方法上使用<code>@ResponseBody</code>注解</p><img src="6.png" style="zoom:47%;" /><h3 id="Service">@Service</h3><p><code>@Service</code>注解是<code>@Component</code>的一个延伸（特例），它用于标注业务逻辑类。与<code>@Component</code>注解一样，被此注解标注的类，会自动被Spring所管理。</p><img src="7.png" style="zoom:47%;" /><h3 id="Repository">@Repository</h3><p><code>@Repository</code>注解也是<code>@Component</code>注解的延伸，与<code>@Component</code>注解一样，被此注解标注的类会被Spring自动管理起来，<code>@Repository</code>注解用于标注DAO层的数据持久化类。</p><img src="8.webp" style="zoom:67%;" /><h3 id="Mapper">@Mapper</h3><p>你可以使用此注解替代<code>@Repository</code>，区别在于：</p><ul><li><code>@Mapper</code>不需要配置扫描地址，通过<a href="https://so.csdn.net/so/search?q=xml&amp;spm=1001.2101.3001.7020">xml</a>里面的namespace里面的接口地址，生成了Bean后注入到<code>Service</code>层中。</li><li><code>@Repository</code>需要在Spring中配置扫描地址，然后生成Dao层的Bean才能被注入到<code>Service</code>层中：如下，在启动类中配置扫描地址：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>   <span class="comment">//添加启动类注解</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.anson.dao&quot;)</span>  <span class="comment">//配置mapper扫描地址</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">application</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SpringApplication.run(application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者，你不想写xml，可以这样，但不推荐：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zwn.learndemo.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span>  </span>&#123;</span><br><span class="line">    <span class="meta">@Select(value = &quot;SELECT * FROM user WHERE account = #&#123;account&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">getUserByAccount</span><span class="params">(<span class="meta">@Param(&quot;account&quot;)</span>String account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;INSERT INTO user (account, password,username) VALUES (#&#123;account&#125;, #&#123;password&#125;, #&#123;username&#125;)&quot;)</span></span><br><span class="line">    <span class="function">Integer <span class="title">addUser</span><span class="params">(<span class="meta">@Param(&quot;account&quot;)</span>String account, <span class="meta">@Param(&quot;password&quot;)</span>String password, <span class="meta">@Param(&quot;username&quot;)</span> String username)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;UPDATE user SET password = #&#123;newPwd&#125; WHERE account = #&#123;account&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changePassword</span><span class="params">(<span class="meta">@Param(&quot;account&quot;)</span>String account, <span class="meta">@Param(&quot;newPwd&quot;)</span>String newPwd)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为xml是可以写动态sql的，参见：<a href="https://zwn2001.github.io/2021/11/06/web%E8%B8%A9%E5%9D%91%E6%B1%87%E6%80%BB/">https://zwn2001.github.io/2021/11/06/web踩坑汇总/</a></p><h2 id="请求相关">请求相关</h2><h3 id="ResponseBody">@ResponseBody</h3><p><code>@ResponseBody</code>会<strong>自动将控制器中方法的返回值写入到HTTP响应中</strong>。特别的，<code>@ResponseBody</code>注解只能用在被<code>@Controller</code>注解标记的类中。</p><h3 id="RequestBody">@RequestBody</h3><p><code>@RequestBody</code><strong>在处理请求方法的参数列表中使用</strong>，它<strong>可以将请求主体中的参数绑定（反序列化）到一个对象中</strong>，请求主体参数是通过<code>HttpMessageConverter</code>传递的，根据请求主体中的参数名与对象的属性名进行匹配并绑定值。此外，还可以通过<code>@Valid</code>注解对请求主体中的参数进行校验。</p><img src="9.png" style="zoom:47%;" /><h3 id="RequestParam">@RequestParam</h3><p>获取请求参数的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/User&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(<span class="meta">@RequestParam(&quot;uid&quot;)</span>Integer id, Model model)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id:&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然你不写<code>@RequestParam</code>或者<code>@RequestBody</code>也不会有什么大问题。</p><h3 id="RequestMapping">@RequestMapping</h3><p><code>@RequestMapping</code>注解的主要用途是<strong>将Web请求与请求处理类中的方法进行映射</strong>。Spring MVC和Spring WebFlux都通过<strong>RquestMappingHandlerMapping</strong>和<strong>RequestMappingHndlerAdapter</strong>两个类来提供对<code>@RequestMapping</code>注解的支持。</p><p><code>@RequestMapping</code>注解<strong>对请求处理类中的请求处理方法进行标注</strong>；<code>@RequestMapping</code>注解拥有以下的六个配置属性：</p><ul><li>value:映射的请求URL或者其别名</li><li>method:兼容HTTP的方法名</li><li>params:根据HTTP参数的存在、缺省或值对请求进行过滤</li><li>header:根据HTTP Header的存在、缺省或值对请求进行过滤</li><li>consume:设定在HTTP请求正文中允许使用的媒体类型</li><li>product:在HTTP响应体中允许使用的媒体类型</li></ul><p>提示：在使用<code>@RequestMapping</code>之前，请求处理类还需要使用<code>@Controller</code>或<code>@RestController</code>进行标记</p><img src="10.png" style="zoom:47%;" /><p>你可以简单地认为是对<code>BaseUrl</code>的追加以使得服务器知道如何对请求进行处理。</p><h3 id="GetMapping">@GetMapping</h3><p><code>@GetMapping</code>注解用于处理HTTP GET请求，并将请求映射到具体的处理方法中。具体来说，<code>@GetMapping</code>是一个组合注解，它相当于是<code>@RequestMapping(method=RequestMethod.GET)</code>的快捷方式。</p><h3 id="PostMapping">@PostMapping</h3><p><code>@PostMapping</code>注解用于处理HTTP POST请求，并将请求映射到具体的处理方法中。<code>@PostMapping</code>与<code>@GetMapping</code>一样，也是一个组合注解，它相当于是<code>@RequestMapping(method=HttpMethod.POST)</code>的快捷方式。</p><h3 id="PutMapping">@PutMapping</h3><p><code>@PutMapping</code>注解用于处理HTTP PUT请求，并将请求映射到具体的处理方法中，<code>@PutMapping</code>是一个组合注解，相当于是<code>@RequestMapping(method=HttpMethod.PUT)</code>的快捷方式。</p><h3 id="DeleteMapping">@DeleteMapping</h3><p><code>@DeleteMapping</code>注解用于处理HTTP DELETE请求，并将请求映射到删除方法中。<code>@DeleteMapping</code>是一个组合注解，它相当于是<code>@RequestMapping(method=HttpMethod.DELETE)</code>的快捷方式。</p><h2 id="注：RESTful-Api">注：RESTful Api</h2><h3 id="什么是API">什么是API</h3><p><strong>应用程序接口</strong>（英语：<strong>a</strong>pplication <strong>p</strong>rogramming <strong>i</strong>nterface），缩写为<strong>API</strong>，是一种<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97">计算</a><a href="https://zh.wikipedia.org/wiki/%E6%8E%A5%E5%8F%A3">接口</a>，<strong>它定义多个<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6">软件</a><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E4%BB%8B">中介</a>之间的<a href="https://zh.wikipedia.org/w/index.php?title=%E4%BA%A4%E4%BA%92&amp;action=edit&amp;redlink=1">交互</a>，以及可以进行的<a href="https://zh.wikipedia.org/w/index.php?title=%E8%B0%83%E7%94%A8&amp;action=edit&amp;redlink=1">调用</a>（call）或<a href="https://zh.wikipedia.org/w/index.php?title=%E8%AF%B7%E6%B1%82&amp;action=edit&amp;redlink=1">请求</a>（request）的种类，如何进行调用或发出请求，应使用的数据格式，应遵循的惯例等</strong>。它还可以提供<a href="https://zh.wikipedia.org/w/index.php?title=%E6%89%A9%E5%B1%95%E6%9C%BA%E5%88%B6&amp;action=edit&amp;redlink=1">扩展机制</a>，以便用户可以通过各种方式对现有功能进行不同程度的扩展。一个API可以是完全定制的，针对某个组件的，也可以是基于行业标准设计的以确保互操作性。通过<a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1">信息隐藏</a>，API实现了<a href="https://zh.wikipedia.org/wiki/%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B">模块化编程</a>，从而允许用户实现独立地使用接口。（维基百科）</p><p>或者你可以参考<a href="https://www.zhihu.com/question/38594466">知乎</a></p><h3 id="RESTful-Api">RESTful Api</h3><p>在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的&quot;集合&quot;（collection），所以API中的名词也应该使用复数。</p><p>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p><blockquote><ul><li><a href="https://api.example.com/zoos">https://api.example.com/zoos</a></li><li><a href="https://api.example.com/animals">https://api.example.com/animals</a></li><li><a href="https://api.example.com/employees">https://api.example.com/employees</a></li></ul></blockquote><p>对于资源的具体操作类型，由HTTP动词表示。</p><p>常用的HTTP动词有下面五个（括号里是对应的SQL命令）。</p><blockquote><ul><li>GET（SELECT）：从服务器取出资源（一项或多项）。</li><li>POST（CREATE）：在服务器新建一个资源。</li><li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li><li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li><li>DELETE（DELETE）：从服务器删除资源。</li></ul></blockquote><p>有人讲要在url里加版本号，我觉得大可不必。</p><p>还有人要求严格遵守RESTFul api，我觉得也大可不必，我只用<code>get</code>和<code>post</code>也一样完成任务。</p><h3 id="状态码">状态码</h3><h2 id="HTTP-状态码分类">HTTP 状态码分类</h2><p>HTTP 状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型。响应分为五类：</p><p>信息响应(100–199)，成功响应(200–299)，重定向(300–399)，客户端错误(400–499)，服务器错误 (500–599)：</p><table><thead><tr><th style="text-align:left">分类</th><th style="text-align:left">分类描述</th></tr></thead><tbody><tr><td style="text-align:left">1**</td><td style="text-align:left">信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td style="text-align:left">2**</td><td style="text-align:left">成功，操作被成功接收并处理</td></tr><tr><td style="text-align:left">3**</td><td style="text-align:left">重定向，需要进一步的操作以完成请求</td></tr><tr><td style="text-align:left">4**</td><td style="text-align:left">客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td style="text-align:left">5**</td><td style="text-align:left">服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><p>可以参考<a href="https://www.runoob.com/http/http-status-codes.html">菜鸟教程</a></p><h2 id="JPA注解（如果用到，还是列出来）">JPA注解（如果用到，还是列出来）</h2><p><code>@Entity</code>：<code>@Table(name=“”)</code>：表明这是一个实体类。这两个注解一般一块使用，但是如果表名和实体类名相同的话，<code>@Table</code>可以省略。</p><p><code>@MappedSuperClass</code>：用在确定是父类的<code>entity</code>上，父类的属性子类可以继承。</p><p><code>@NoRepositoryBean</code>：一般用作父类的<code>repository</code>，有这个注解，spring不会去实例化该<code>repository</code>。</p><p><code>@Column</code>：如果字段名与列名相同，则可以省略。</p><p><code>@Id</code>：表示该属性为主键。</p><p><code>@GeneratedValue(strategy = GenerationType.SEQUENCE,generator = “repair_seq”)</code>：表示主键生成策略是<code>sequence</code>(可以为Auto、IDENTITY、native等，Auto表示可在多个数据库间切换)，指定<code>sequence</code>的名字是<code>repair_seq</code>。</p><p><code>@SequenceGeneretor(name = “repair_seq”, sequenceName = “seq_repair”, allocationSize = 1)</code>：name为<code>sequence</code>的名称，<code>sequenceName</code>为数据库的<code>sequence</code>名称，两个名称可以一致。</p><p><code>@Transient</code>：表示该属性并非一个到数据库表的字段的映射，ORM框架将忽略该属性。</p><p><code>@JsonIgnore</code>：作用是json序列化时将Java bean中的一些属性忽略掉，序列化和反序列化都受影响。</p><p><code>@JoinColumn(name=“loginId”)</code>:一对一：本表中指向另一个表的外键。一对多：另一个表指向本表的外键。</p><p><code>@OneToOne、@OneToMany、@ManyToOne</code>：对应<code>hibernate</code>配置文件中的一对一，一对多，多对一。</p><h2 id="其他">其他</h2><h3 id="AutoWired">@AutoWired</h3><p>在Spring Boot应用启动时，Spring容器会自动装载一个<code>org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor</code>处理器，当容器扫扫描到<code>@Autowired</code>注解时，就会在IoC容器就会找相应类型的Bean，并且实现注入。</p><h3 id="Resource">@Resource</h3><p>可以认为，跟上面是一个东西。</p><p>实际上:</p><ul><li><p><code>@Autowired</code>是Spring提供的，默认按照<strong>byType</strong> 注入，也就是按bean的<strong>类型</strong>来传入。如果需要指定名字，那么需要使<code>@Qualifier(“这是bean的名字”)</code>。</p></li><li><p><code>@Resource</code>默认按 <strong>byName</strong> 自动注入，是<a href="https://so.csdn.net/so/search?q=J2EE&amp;spm=1001.2101.3001.7020">J2EE</a>提供的。</p></li><li><p><code>@Resource</code>有两个中重要的属性：<code>name</code>和<code>type</code> 。Spring将<code>@Resource</code>注解的<code>name</code>属性解析为bean的名字，而<code>type</code>属性则解析为<code>bean</code>的类型。所以如果使用<code>name</code>属性，则使用<strong>byName的自动注入策略</strong>，而使用<code>type</code>属性时则使用<strong>byType自动注入策略</strong>。如果既不指定name也不指定type属性，这时将通过<strong>反射机制使用byName自动注入策略</strong>。</p></li></ul><h4 id="Resource装配顺序">@Resource装配顺序</h4><p>(1) 如果同时指定了<code>name</code>和<code>type</code>，则从Spring上下文中找到唯一匹配的<code>bean</code>进行装配，找不到则抛出异常;<br>(2) 如果指定了<code>name</code>，则从上下文中查找名称（<code>id</code>）匹配的<code>bean</code>进行装配，找不到则抛出异常;<br>(3) 如果指定了<code>type</code>，则从上下文中找到类型匹配的唯一<code>bean</code>进行装配，找不到或者找到多个，都会抛出异常;<br>(4) 如果既没有指定<code>name</code>，又没有指定<code>type</code>，则自动按照<code>byName</code>方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配；</p><h3 id="Data">@Data</h3><p>这个注解来自<code>import lombok.Data;</code></p><p>需要引入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>这个注解可以大大简化你的<code>Bean</code></p><h4 id="另">另</h4><p><code>lombok</code>的其他注解</p><p><code>@Data</code> ： 注在类上，提供类的<code>get</code>、<code>set</code>、<code>equals</code>、<code>hashCode</code>、<code>toString</code>方法<br><code>@AllArgsConstructor </code>： 注在类上，提供类的全参构造<br><code>@NoArgsConstructor</code> ： 注在类上，提供类的无参构造<br><code>@Setter</code> ： 注在属性上，提供 <code>set</code> 方法<br><code>@Getter</code>： 注在属性上，提供 <code>get</code> 方法<br><code>@EqualsAndHashCode</code> ：注在类上，提供对应的 <code>equals</code> 和 <code>hashCode</code> 方法</p><h1>现有代码分析</h1><p>这里是个人对lxq老师的<code>java-server</code>的一些分析与评价。</p><p>首先，这个项目样例比较全。这是优点，也是缺点。</p><p>优点在于，项目给出了完整的后端架构与很多知识样例，比如多线程（<code>Thread</code>文件夹）、<code>socket</code>（<code>socket</code>文件夹）、java IO（<code>stream</code>文件夹），也给了大家很多学习的样例。</p><p>但同样的，所有的知识混合在同一个项目里，导致我们在初次打开这个项目时容易一头雾水，难以分辨各个文件夹的功能，无形中拔高了学习成本。</p><p>其次，有一些技术已经开始过时或者有更好的替代方案。比如<code>socket</code>，（我想不太明白为什么还要在<code>springboot</code>里放<code>socket</code>），比如<code>JPA</code>与<code>hibernate</code>，<code>mybatis</code>在很多<code>springboot</code>项目中都广泛地取代了<code>JPA</code>，甚至其他更为前沿的<code>Druid</code>、<code>Radis</code>，虽然<code>JPA</code>的入门成本低，但在功能上还是受限，而且<code>Hibernate</code>的缺点就是学习门槛不低，要精通门槛更高，而且怎么设计O/R映射（O/R映射层是持久层的一个特例，它的数据模型是对象模型（<code>Object</code>），存储模型是关系模型（<code>Relational</code>）），在性能和对象模型之间如何权衡取得平衡，以及怎样用好<code>Hibernate</code>方面需要你的经验和能力都很强才行。</p><p>而且我不喜欢<code>hibernate</code>的一个很大的原因就是，你需要额外的去学习<code>hibernate</code>的注解，并且这些注解是直接加到你的实体类中的，这打破了实体类的纯粹性而将模型（对象）与数据持久层耦合在一起，同时限制了两者的灵活性。（当然，个人意见，见仁见智，而且<code>hibernate</code>性能确实优于<code>mybatis</code>）</p><p>牢骚发完，我删除了一些用不到的demo，简化后的项目结构如下（只要是没删的文件夹，里面的内容都不动）：</p><img src="11.png" style="zoom:77%;" /><p>这样看起来就更贴近一个springboot项目了。</p><hr><h1>单元测试</h1><h2 id="基本操作">基本操作</h2><p>依赖添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--单元测试--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>那么，如果我现在有这样的<code>Controller</code>，我想对所有方法进行单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">login</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String,Object&gt; params)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.login((String)params.get(<span class="string">&quot;id&quot;</span>),(String)params.get(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user/changePassword&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">changePassword</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String,Object&gt; params)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.changePassword((String)params.get(<span class="string">&quot;role&quot;</span>),(String)params.get(<span class="string">&quot;id&quot;</span>),</span><br><span class="line">                (String)params.get(<span class="string">&quot;newPassword&quot;</span>),(String)params.get(<span class="string">&quot;oldPassword&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user/resetPassword&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">resetPassword</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String,Object&gt; params)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.resetPassword((String)params.get(<span class="string">&quot;sid&quot;</span>),(String)params.get(<span class="string">&quot;mail&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/confirmReset&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">confirmReset</span><span class="params">(<span class="meta">@RequestParam</span> String sid, <span class="meta">@RequestParam</span> String token)</span></span>&#123;</span><br><span class="line">        System.out.println(sid+<span class="string">&quot;--&quot;</span>+token);</span><br><span class="line">        <span class="keyword">return</span> userService.confirmReset( sid, token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>右键单击类名，选择<code>Go to</code>，选择<code>Test</code>，选择<code>Create new test</code>，</p><img src="1.png" style="zoom:67%;" /><p>会弹出这样的窗口，你可以选择你要测试的方法，然后ok即可：</p><img src="2.png" style="zoom:67%;" /><p>然后测试类就会被自动创建，你可以在<code>test/java/packageName/folderName</code>目录下找到他。</p><p>首先我们在类名前加入注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br></pre></td></tr></table></figure><p>这两个注解来自包：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br></pre></td></tr></table></figure><p>然后我们自动注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span> UserController controller;</span><br></pre></td></tr></table></figure><p>就可以写测试代码了。</p><p>我们直接使用注入的<code>controller</code>进行方法调用，并使用<code>Assertions</code>的方法测试相应方法，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map parm = <span class="keyword">new</span> HashMap();</span><br><span class="line">    parm.put(<span class="string">&quot;id&quot;</span>,<span class="number">1037</span>);</span><br><span class="line">    parm.put(<span class="string">&quot;password&quot;</span>,<span class="number">123456</span>);</span><br><span class="line">    Assertions.assertNotNull(controller.login(parm));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击这个方法左边的运行符号就可以进行测试，如果不通过就会有报错：</p><img src="3.png" style="zoom:30%;" /><p>如果通过，会自动<code>exit 0</code>：</p><img src="4.png" style="zoom:30%;" /><p>当然你也可以点击测试类旁边的运行符号运行所有测试方法。</p><h2 id="其他操作">其他操作</h2><h3 id="条件测试">条件测试</h3><p>在运行测试的时候，有些时候，我们需要排出某些<code>@Test</code>方法，不要让它运行，这时，我们就可以给它标记一个<code>@Disabled</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Disabled</span><br><span class="line">@Test</span><br><span class="line">void testBug101() &#123;</span><br><span class="line">    // 这个测试不会运行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么我们不直接注释掉<code>@Test</code>，而是要加一个<code>@Disabled</code>？这是因为注释掉<code>@Test</code>，JUnit就不知道这是个测试方法，而加上<code>@Disabled</code>，JUnit仍然识别出这是个测试方法，只是暂时不运行。它会在测试结果中显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tests run: 68, Failures: 2, Errors: 0, Skipped: 5</span><br></pre></td></tr></table></figure><p>类似<code>@Disabled</code>这种注解就称为条件测试，JUnit根据不同的条件注解，决定是否运行当前的<code>@Test</code>方法。</p><h3 id="异常测试">异常测试</h3><p>如果你想捕获运行时抛出的异常，你可以：`</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Assertions.assertThrows(NullPointerException.class,()-&gt;&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>更具体地：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Assertions.assertThrows(NullPointerException.class,<span class="keyword">new</span> Executable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Factorial.fact(-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="参数化测试">参数化测试</h3><p>如果待测试的输入和输出是一组数据： 可以把测试数据组织起来 用不同的测试数据调用相同的测试方法</p><p>参数化测试和普通测试稍微不同的地方在于，一个测试方法需要接收至少一个参数，然后，传入一组参数反复运行。</p><p>JUnit提供了一个<code>@ParameterizedTest</code>注解，用来进行参数化测试。</p><p>假设我们想对<code>Math.abs()</code>进行测试，先用一组正数进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@ValueSource(ints = &#123; 0, 1, 5, 100 &#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testAbs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    assertEquals(x, Math.abs(x));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再用一组负数进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@ValueSource(ints = &#123; -1, -5, -100 &#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testAbsNegative</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    Assertions.assertEquals(-x, Math.abs(x));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到参数化测试的注解是<code>@ParameterizedTest</code>，而不是普通的<code>@Test</code>。</p><p>实际的测试场景往往没有这么简单。假设我们自己编写了一个<code>StringUtils.capitalize()</code>方法，它会把字符串的第一个字母变为大写，后续字母变为小写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">capitalize</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Character.toUpperCase(s.charAt(<span class="number">0</span>)) + s.substring(<span class="number">1</span>).toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要用参数化测试的方法来测试，我们不但要给出输入，还要给出预期输出。因此，测试方法至少需要接收两个参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testCapitalize</span><span class="params">(String input, String result)</span> </span>&#123;</span><br><span class="line">    Assertions.assertEquals(result, StringUtils.capitalize(input));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在问题来了：参数如何传入？</p><p>最简单的方法是通过<code>@MethodSource</code>注解，它允许我们编写一个同名的静态方法来提供测试参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@MethodSource</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testCapitalize</span><span class="params">(String input, String result)</span> </span>&#123;</span><br><span class="line">    Assertions.assertEquals(result, StringUtils.capitalize(input));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> List&lt;Arguments&gt; <span class="title">testCapitalize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> List.of( <span class="comment">// arguments:</span></span><br><span class="line">            Arguments.arguments(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;Abc&quot;</span>), <span class="comment">//</span></span><br><span class="line">            Arguments.arguments(<span class="string">&quot;APPLE&quot;</span>, <span class="string">&quot;Apple&quot;</span>), <span class="comment">//</span></span><br><span class="line">            Arguments.arguments(<span class="string">&quot;gooD&quot;</span>, <span class="string">&quot;Good&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码很容易理解：静态方法<code>testCapitalize()</code>返回了一组测试参数，每个参数都包含两个<code>String</code>，正好作为测试方法的两个参数传入。</p><h2 id="PS">PS.</h2><h3 id="一">一</h3><p>如果你要初始化对象，不必在每个测试方法中都写上初始化代码，而是通过<code>@BeforeEach</code>来初始化，通过<code>@AfterEach</code>来清理资源。标记为<code>@BeforeEach</code>和<code>@AfterEach</code>的方法，它们会在运行每个<code>@Test</code>方法前后自动运行。</p><h3 id="二">二</h3><p>我们使用断言的时候尽量不要去断言<code>Double</code>对象。对于双精度数，绝对有必要使用增量进行比较，以避免浮点舍入的问题。</p><h3 id="三、常用断言">三、常用断言</h3><h4 id="assertEquals"><code>assertEquals</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assertEquals(Object expected, Object actual)</span><br><span class="line">assertEquals(String message, Object expected, Object actual)</span><br></pre></td></tr></table></figure><ul><li><code>String message</code>： 可选参数，将在发生错误时报告这个消息</li><li><code>Object expected</code>： 期望值，一般为用户指定的内容</li><li><code>Object actual</code>： 被测试的代码实际返回的结果</li></ul><p>当<code>expected</code>（期望值）和<code>actual</code>（实际值）为<code>float</code> 或者 <code>double</code> 类型时，还可以有另一个参数 <code>delta</code>：</p><p>例：<code> assertEquals(String message, float expected, float actual, float delta)</code></p><p>delta 这个参数为误差参数，表示如果 <code>expected</code> 和 <code>actual</code> 之间的差值在 <code>delta</code> 范围之内则认为该断言的结果是正确的。</p><h4 id="assertTrue-与-assertFalse"><code>assertTrue</code> 与 <code>assertFalse</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assertTrue(<span class="keyword">boolean</span> condition)</span><br><span class="line">assertTrue(String message, <span class="keyword">boolean</span> condition)</span><br></pre></td></tr></table></figure><ul><li><code>String message</code>： 可选参数，将在发生错误时报告这个消息</li><li><code>boolean condition</code>：待验证的 <code>Boolean</code> 类型值</li></ul><p><code>assertTrue</code> 该断言用来验证给定的布尔型值是否为真，如果结果为假，则验证失败；<br>相反，<code>assertFalse</code> 用来验证给定的布尔型值是否为假，如果结果为真，则验证失败。</p><h4 id="assertNull-与-assertNotNull"><code>assertNull</code> 与 <code>assertNotNull</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assertNull(Object object)</span><br><span class="line">assertNull(String message, Object object)</span><br></pre></td></tr></table></figure><ul><li><code>String message</code>： 可选参数，将会在发生错误时报告这个消息</li><li><code>Object object</code>： 待验证是否为 <code>Null</code> 的对象</li></ul><p><code>assertNull</code> 该断言用来验证给定的对象是否为 <code>Null</code> ,如果给定对象为 非<code>Null</code>，则验证失败。<br>相反，<code>assertNotNull</code> 用来验证给定的对象是否为 非<code>Null</code>，如果为 <code>Null</code>，则验证失败。</p><h4 id="assertSame-与-assertNotSame"><code>assertSame</code> 与 <code>assertNotSame</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assertSame(Object expected, Object actual)</span><br><span class="line">assertSame(String message, Object expected, Object actual)</span><br></pre></td></tr></table></figure><ul><li><code>String message</code>： 可选参数，将会在发生错误时报告这个消息</li><li><code>Object expected</code>：期望值</li><li><code>Object actual</code>：被测试代码返回的实际值</li></ul><p><code>assertSame</code> 该断言用来验证<code> expected</code> 和 <code>actual</code> 的引用是否为同一个对象的引用，如果不是同一引用，则验证失败。相反，<code>assertNotSame</code> 用来验证 <code>expected</code> 和 <code>actual</code> 的引用是否为不同对象的引用，如果为同一对象引用，则验证失败。</p><h1>参考</h1><blockquote><p><a href="https://www.liaoxuefeng.com/">https://www.liaoxuefeng.com/</a></p><p><a href="https://blog.csdn.net/sinat_34241861/article/details/107306986">https://blog.csdn.net/sinat_34241861/article/details/107306986</a></p><p><a href="https://zhuanlan.zhihu.com/p/36840573">https://zhuanlan.zhihu.com/p/36840573</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学线培训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学线培训 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora白嫖教程</title>
      <link href="/2022/03/15/Typora-for-free/"/>
      <url>/2022/03/15/Typora-for-free/</url>
      
        <content type="html"><![CDATA[<p>致谢： <a href="https://space.bilibili.com/265524138">落虾与孤鹜齐飞</a></p><p><a href="https://www.bilibili.com/video/BV11a41187zh?spm_id_from=333.999.0.0">视频教程 - by 落虾与孤鹜齐飞</a></p><p><a href="https://zwn2001.github.io/2022/03/15/Typora-for-free/typora%E7%99%BD%E5%AB%961.1.5_by%E8%90%BD%E8%99%BE%E4%B8%8E%E5%AD%A4%E9%B9%9C%E9%BD%90%E9%A3%9E.zip">破解文件下载 - made by 落虾与孤鹜齐飞</a></p><p><a href="https://www.cnblogs.com/LiuDanK/articles/15638323.html">他的博客教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 实用知识(杂谈) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载与汇总 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓原生-服务</title>
      <link href="/2022/03/11/%E5%AE%89%E5%8D%93%E5%8E%9F%E7%94%9F-%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/03/11/%E5%AE%89%E5%8D%93%E5%8E%9F%E7%94%9F-%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1>基本概念</h1><h2 id="为啥要有服务">为啥要有服务</h2><p>举这样一个例子，我们使用音乐播放器的桌面小组件开始播放音乐，但你检查后台程序并没有启动音乐app，这其实就是一个服务，而且是后台服务。</p><p>官网对服务定义如下：</p><blockquote><p><code>Service</code> 是一种可在后台执行长时间运行操作而不提供界面的应用组件。<strong>服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行</strong>。此外，组件可通过绑定到服务与之进行交互，甚至是执行进程间通信 (IPC)。例如，服务可在后台处理网络事务、播放音乐，执行文件 I/O 或与内容提供程序进行交互。</p></blockquote><h2 id="生命周期相关">生命周期相关</h2><p>服务基本上包含两种状态</p><table><thead><tr><th style="text-align:left">状态</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">Started</td><td style="text-align:left">Android的应用程序组件，如活动，通过<code>startService()</code>启动了服务，则服务是Started状态。一旦启动，服务可以在后台无限期运行，即使启动它的组件已经被销毁。</td></tr><tr><td style="text-align:left">Bound</td><td style="text-align:left">当Android的应用程序组件通过<code>bindService()</code>绑定了服务，则服务是Bound状态。Bound状态的服务提供了一个客户服务器接口来允许组件与服务进行交互，如发送请求，获取结果，甚至通过IPC来进行跨进程通信。</td></tr></tbody></table><p>服务拥有生命周期方法，可以实现监控服务状态的变化，可以在合适的阶段执行工作。下面的左图展示了当服务通过<code>startService()</code>被创建时的生命周期，右图则显示了当服务通过<code>bindService()</code>被创建时的生命周期：</p><p><img src="0.jpg" alt="生命周期"></p><p>要创建服务，你需要创建一个继承自Service基类或者它的已知子类的Java类。Service基类定义了不同的回调方法和多数重要方法。你不需要实现所有的回调方法。虽然如此，理解所有的方法还是非常重要的。实现这些回调能确保你的应用以用户期望的方式实现。</p><table><thead><tr><th style="text-align:left">回调</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">onStartCommand()</td><td style="text-align:left">其他组件(如活动)通过调用startService()来请求启动服务时，系统调用该方法。如果你实现该方法，你有责任在工作完成时通过stopSelf()或者stopService()方法来停止服务。</td></tr><tr><td style="text-align:left">onBind</td><td style="text-align:left">当其他组件想要通过bindService()来绑定服务时，系统调用该方法。如果你实现该方法，你需要返回IBinder对象来提供一个接口，以便客户来与服务通信。你必须实现该方法，如果你不允许绑定，则直接返回null。</td></tr><tr><td style="text-align:left">onUnbind()</td><td style="text-align:left">当客户中断所有服务发布的特殊接口时，系统调用该方法。</td></tr><tr><td style="text-align:left">onRebind()</td><td style="text-align:left">当新的客户端与服务连接，且此前它已经通过onUnbind(Intent)通知断开连接时，系统调用该方法。</td></tr><tr><td style="text-align:left">onCreate()</td><td style="text-align:left">当服务通过onStartCommand()和onBind()被第一次创建的时候，系统调用该方法。该调用要求执行一次性安装。</td></tr><tr><td style="text-align:left">onDestroy()</td><td style="text-align:left">当服务不再有用或者被销毁时，系统调用该方法。你的服务需要实现该方法来清理任何资源，如线程，已注册的监听器，接收器等。</td></tr></tbody></table><p>至于文档，官网写的非常详细，并没有太多可讲之处。</p><p>可以直接参考<a href="https://developer.android.com/guide/components/services?hl=zh-cn">官网</a>。（本来想保存一份html，但会导致博客渲染出错，所以还是要科学上网）</p>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动 </tag>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓原生-广播</title>
      <link href="/2022/03/11/%E5%AE%89%E5%8D%93%E5%8E%9F%E7%94%9F-%E5%B9%BF%E6%92%AD/"/>
      <url>/2022/03/11/%E5%AE%89%E5%8D%93%E5%8E%9F%E7%94%9F-%E5%B9%BF%E6%92%AD/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><ul><li>我们上学时都有过这样的经历，当我们在火车站列车候车室中等待时，每当有某次列车开始检票或者进站上车时，就会播放通知来告知在候车室等待的人们该消息。</li><li>为了便于进行系统级别的消息通知，Android引入了一套类似的广播机制，然而比上述情景要灵活得多。此文将对<strong>Android广播机制</strong>的方方面面做出详尽的介绍。</li></ul><hr><h1>Android广播机制简介</h1><p>前面我们提到，Android的广播机制更加的灵活，这是因为Android允许每个应用只对自己感兴趣的广播进行注册，这样该程序就只会收到自己所关心的广播内容。<br>Android广播分为两个方面：<strong>广播发送者</strong>和<strong>广播接收者</strong>，通常情况下，<code>BroadcastReceiver</code>指的就是<strong>广播接收者</strong>（<strong>广播接收器</strong>）。</p><p><strong>广播机制最大的特点就是发送方并不关心接收方是否接到数据，也不关心接收方是如何处理数据的</strong>。</p><blockquote><p>前半句，有点类似于UDP</p></blockquote><p>Android中广播的是操作系统中产生的各种各样的事件。例如，收到一条短信就会产生一个收到短信息的事件。而Android操作系统一旦内部产生了这些事件，就会向所有的广播接收器对象来广播这些事件。</p><p><strong>BraodcastReceiver(广播接收器)是为了实现系统广播而提供的一种组件，并且广播事件处理机制是系统级别的</strong>。比如，我们可以发出一种广播来测试是否收到短信，这时候就可以定义一个BraodcastReceiver来接受广播，当收到短信时提示用户。我们既可以用Intent来启动一个组件，也可以用sendBroadcast()方法发起一个系统级别的事件广播来传递消息。</p><p>我们也可以在自己的应用程序中开发BroadcastReceiver，然后把广播接收器这个类或者对象注册到Android操作系统上去，让操作系统知道现在有这样一个广播接收器正在等待接收Android操作系统的广播，即在自己的应用程序中实现BroadcastReceiver来监听和响应广播的Intent。</p><p><strong>当有广播事件产生时，Android操作系统首先告诉注册到其上面的广播接收器产生了一个怎么样的事件，每个接收器首先判断是不是我这个接收器需要的事件，如果是它所需要的事件，再进行相应的处理</strong>。</p><p>例子，我们把骚扰电话的黑名单放到数据库中去，当接到电话时会产生一个接电话事件，事先在Android操作系统中注册一个BroadcastReceiver的对象，当产生事件的时候，会通知我们的广播接收器对象，接收器对象接收到消息之后，就会到数据库里面去取所有黑名单电话和接到的这个电话号码进行比较，如果匹配就直接挂掉。</p><h2 id="应用场景">应用场景</h2><ul><li>同一应用具有多个进程的不同组件之间的消息通信</li><li>不同应用间的组件之间的消息通信</li><li>与Android系统在特定情况下的通信<ul><li>如：系统开机，网络变化等</li></ul></li></ul><blockquote><p>以上只说明适合广播机制的应用场景，还有一些场景理论上可以使用，但是实际开发没有人这么做：</p><ul><li>同一应用内同一组件的消息通信：显然扩展变量的作用域、接口回调、<code>Handler-Message</code>等方式都能更简单的实现。</li><li>同一应用内的不同组件之间的消息通信(单个进程)：对于简单的的情况，依靠接口的回调方式就可解决；而较为复杂的情况，更推荐直接使用<code>EventBus</code>等。</li></ul></blockquote><h2 id="实现原理">实现原理</h2><h3 id="设计模式与模型">设计模式与模型</h3><p>Android中的广播使用了<strong>观察者模式</strong>，模型为<strong>基于消息的发布/订阅事件模型</strong>。</p><blockquote><p>从设计模式上讲，广播的发送者和接收者极大程度的<strong>解耦</strong>，使得系统方便集成，容易扩展</p></blockquote><h4 id="模型成员：">模型成员：</h4><ul><li>消息发布者(广播发布者)</li><li>消息订阅者(广播接收者)</li><li>消息中心(AMS，Activity Manager Service)</li></ul><blockquote><p>此处我们扩展一下，观察者模式和发布订阅模式的关系</p><ul><li><strong>发布订阅模式属于广义上的观察者模式</strong><br>前者时最常用的一种观察者模式的实现，且从<strong>解耦</strong>和<strong>重用</strong>角度上看更优于典型的观察者模式</li><li>发布订阅模式加入消息中心，实现发布者和订阅者的解耦：<ul><li>在观察者模式中，观察者需要直接订阅目标事件，在目标发出内容改变的事件后，直接接收事件并作出响应。</li><li>在发布订阅模式中，多了一个消息中心，一方面从发布者接收事件，另一方面向订阅者发布事件，订阅者需要从消息中心订阅事件。以此避免发布者和订阅者之间产生依赖关系。</li></ul></li></ul></blockquote><h3 id="实现流程">实现流程</h3><ol><li>广播接收者<code>BroadcastReceiver</code>通过<code>Binder</code>机制向AMS(<code>Activity Manager Service</code>)进行<strong>注册</strong>；</li><li>广播发送者通过**<code>binder</code>机制**向AMS发送广播；</li><li>AMS查找符合相应条件（<code>IntentFilter</code>/<code>Permission</code>等）的<code>BroadcastReceiver</code></li><li>AMS将广播发送到上述符合条件的<code>BroadcastReceiver</code>相应的<strong>消息循环队列</strong>中</li><li><code>BroadcastReceiver</code>通过消息循环执行拿到此广播，<strong>回调</strong><code>BroadcastReceiver</code>中的<code>onReceive()</code>方法。</li></ol><blockquote><p>广播发送者和广播接收者的执行是<strong>异步</strong>的，发出去的广播不会关心有无接收者接收，也不确定接收者到底是何时才能接收到。</p></blockquote><hr><h2 id="广播的类型">广播的类型</h2><p>主要分为一下四类：</p><ol><li><code>Normal Broadcast</code>(普通广播)：通常调用<code>sendBroadcast(Intent)(Intent, String)</code>方法发送</li><li><code>System Broadcast</code>(系统广播)：发生各种事件时，系统自动发送</li><li><code>Ordered Broadcast</code>(有序广播)：调用<code>sendOrderedBroadcast(Intent, String)</code>方法发送</li><li><code>Local Broadcast</code>(本地广播)：调用<code>LocalBroadcastManager.sendBroadcast(intent)</code>方法发送</li><li><code>Sticky Broadcast</code>(粘性广播)：已弃用(API 21)</li></ol><h4 id="1-Normal-Broadcast-普通广播">1. Normal Broadcast(普通广播)</h4><p>开发者自定义的<code>intent</code>，以<code>Context.sendBroadcast()</code>，<code>Context.sendBroadcastAsUser()</code>等方法发送该<code>intent</code>。</p><ul><li>发送示例如下：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> <span class="built_in">Intent</span>();</span><br><span class="line">intent.<span class="built_in">setAction</span>(BROADCAST_ACTION);</span><br><span class="line"><span class="comment">//最普通的发送方式</span></span><br><span class="line"><span class="built_in">sendBroadcast</span>(intent);</span><br><span class="line"><span class="comment">//附带权限的发送方式，声明此权限的BroadcastReceiver才能接收此广播</span></span><br><span class="line"><span class="built_in">sendBroadcast</span>(intent,RECEIVER_PREMISSION);</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下两种不常见，是因为只有预装在系统映像中的程序才能使用，否则无法使用</span></span><br><span class="line"><span class="comment">//指明接收人的发送方式</span></span><br><span class="line"><span class="built_in">sendBroadcastAsUser</span>(intent,USER_HANDLER);</span><br><span class="line"><span class="comment">//指明接收人以及对应权限的发送方式</span></span><br><span class="line"><span class="built_in">sendBroadcastAsUser</span>(intent,USER_HANDLER,RECEIVER_PREMISSION);</span><br></pre></td></tr></table></figure><ul><li>若被注册了的<code>BroadCastReceiver</code>注册的<code>intentFilter</code>的<code>action</code>与上述匹配，则会接收此广播，且顺序是无序的。如果发送时有相应的权限要求，则<code>BroadCastReceiver</code>只有拥有相应的权限才能接受。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;.MyBroadcastReceiver&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:permission</span>=<span class="string">&quot;RECEIVER_PREMISSION&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;BROADCAST_ACTION&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-System-Broadcast-系统广播">2. System Broadcast(系统广播)</h4><blockquote><p>文末提供详细系统广播清单，不包含使用说明（位于SDK下boradcast_action.txt ），请自行查找<a href="https://developer.android.com/reference/packages.html">Google官方文档</a></p></blockquote><ul><li>Android系统中内置了多个系统广播，只要涉及到手机的基本操作，基本上都会发出相应的系统广播。</li><li>每个系统广播都具有特定的<code>intent-filter</code>，其中主要包括具体的<code>action</code>，系统广播发出后，将被相应的<code>BroadcastReceiver</code>接收。系统广播在系统内部当特定事件发生时，有系统自动发出。</li></ul><h4 id="3-Ordered-Broadcast-有序广播">3. Ordered Broadcast(有序广播))</h4><ul><li>发送出去的广播被<code>BroadcastReceiver</code>按照先后循序接收。</li></ul><blockquote><p>有序广播的有序广播中的“有序”是针对广播接收者而言的</p></blockquote><ul><li>发送方式：<ul><li>定义过程与普通广播一样，调用<code>sendOrderedBroadcast()</code>，同样也有对应的<code>sendOrderedBroadcastAsUser()</code>方法，只不过同样针对于预装在系统映像的应用。</li></ul></li><li>特点<ol><li>按顺序接收</li><li>允许优先级高的<code>BroadcastReceiver</code>截断广播。</li><li>允许优先级高的<code>BroadcastReceiver</code>修改广播</li></ol></li><li>接受顺序<ul><li><code>priority</code>值不同：由大到小排序</li><li><code>priority</code>值相同：动态注册优于静态注册</li></ul></li></ul><h4 id="4-Local-Broadcast-本地广播">4. Local Broadcast(本地广播)</h4><ul><li>可以理解成一种局部广播的形式，广播的发送者和接收者都同属于一个App</li><li>相比于全局广播，本地广播优势体现在：<ul><li>安全性更高；</li><li>更加高效。</li></ul></li><li>引入原因：<ul><li>其他App可能会针对性的发出与当前App <code>intent-filter</code>相匹配的广播，由此导致当前App不断接收到广播并处理；</li><li>其他App可以注册与当前App一致的<code>intent-filter</code>用于接收广播，获取广播具体信息。</li></ul></li><li>解决方案<ol><li>全局广播<strong>限制为局部广播</strong>(本质仍为一个全局广播)</li><li>使用本地广播</li></ol></li><li>方案1的具体实现：<ul><li>对于同一App内部发送和接收广播，将<code>exported</code>属性人为设置成<code>false</code>，使得非本App内部发出的此广播不被接收；</li><li>在广播发送和接收时，都增加上相应的<code>permission</code>，用于权限验证；</li><li>发送广播时，指定特定广播接收器所在的包名，具体是通过<code>intent.setPackage(packageName)</code>指定在，这样此广播将只会发送到此包中的App内与之相匹配的有效广播接收器中。</li></ul></li><li>方案2的具体实现：<br>使用封装好的<code>LocalBroadcastManager</code>类。<br>使用方式上与通常的全局广播几乎相同，只是注册/取消注册广播接收器和发送广播时将主调<code>context</code>变成了<code>LocalBroadcastManager</code>的单一实例。</li></ul><blockquote><p>对于<code>LocalBroadcastManager</code>方式发送的应用内广播，只能通过<code>LocalBroadcastManager</code>动态注册的<code>ContextReceiver</code>才有可能接收到（静态注册或其他方式动态注册的<code>ContextReceiver</code>是接收不到的）</p></blockquote><p>代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例化MyBroadcastReceiver</span></span><br><span class="line">mBroadcastReceiver = <span class="keyword">new</span> MyBroadcastReceiver();</span><br><span class="line"><span class="comment">//实例化IntentFilter</span></span><br><span class="line">IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到LocalBroadcastManager实例</span></span><br><span class="line">LocalBroadcastManager localBroadcastManager = LocalBroadcastManager.getInstance(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置接收广播的类型</span></span><br><span class="line">intentFilter.addAction(BROADCAST_ACTION);</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态注册</span></span><br><span class="line">localBroadcastManager.registerReceiver(mBroadcastReceiver, intentFilter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消注册</span></span><br><span class="line">localBroadcastManager.unregisterReceiver(mBroadcastReceiver);</span><br></pre></td></tr></table></figure><h1>BroadcastReceiver</h1><h2 id="自定义BroadcastReceiver">自定义BroadcastReceiver</h2><ul><li>继承基类<code>BroadcaseReceiver</code></li><li>实现抽象方法<code>onReceive(context, intent)</code></li></ul><blockquote><ul><li>收到广播后，会自动回调<code>onReceive(..)</code>方法</li><li>通常，<code>onReceive(..)</code>方法会涉及到与其他组件的交互，如发送<code>Notification</code>，启动<code>service</code>等</li><li>默认情况，<code>BroadcaseReceiver</code>运行在UI线程，因此，<code>onReceive(..)</code>方法不能执行耗时操作，否则<code>ANR</code></li></ul></blockquote><ul><li>简单的自定义Demo：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承BroadcastReceiver基类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;MyBroadcastReceiver&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">&quot;Action: &quot;</span> + intent.getAction() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;URI: &quot;</span> + intent.toUri(Intent.URI_INTENT_SCHEME).toString() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        String log = sb.toString();</span><br><span class="line">        Log.d(TAG, log);</span><br><span class="line">        Toast.makeText(context, log, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BroadcastReceiver注册类型">BroadcastReceiver注册类型</h2><h3 id="1-静态注册">1. 静态注册</h3><ul><li>在<code>AndroidManifest.xml</code>文件中通过<code>&lt;receiver&gt;</code>进行注册</li><li>规则及实例说明：</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;receiver</span><br><span class="line">    <span class="comment">//BroadcastReceiver子类的类名</span></span><br><span class="line">    <span class="attr">android</span>:name=<span class="string">&quot;string&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否使用该BroadcastReceiver</span></span><br><span class="line">    <span class="attr">android</span>:enabled=[<span class="string">&quot;true&quot;</span> | <span class="string">&quot;false&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">//此broadcastReceiver能否接收其他App的发出的广播</span></span><br><span class="line">    <span class="comment">//其默认值是由receiver中有无intent-filter决定的，如果有intent-filter，默认值为true，否则为false</span></span><br><span class="line">    <span class="attr">android</span>:exported=[<span class="string">&quot;true&quot;</span> | <span class="string">&quot;false&quot;</span>]</span><br><span class="line">  </span><br><span class="line">    <span class="attr">android</span>:icon=<span class="string">&quot;drawable resource&quot;</span></span><br><span class="line">    <span class="attr">android</span>:label=<span class="string">&quot;string resource&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//具有相应权限的广播发送方发送的广播才能被此broadcastReceiver所接收</span></span><br><span class="line">    <span class="attr">android</span>:permission=<span class="string">&quot;string&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//broadcastReceiver运行所处的进程。</span></span><br><span class="line">    <span class="comment">//默认为app的进程，可以指定独立的进程</span></span><br><span class="line">    <span class="comment">//Android四大基本组件都可以通过此属性指定自己的独立进程</span></span><br><span class="line">    <span class="attr">android</span>:process=<span class="string">&quot;string&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定此广播接收器将用于接收特定的广播类型</span></span><br><span class="line">    <span class="comment">//本例中给出的时系统开机后自身发出的广播</span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.BOOT_COMPLETED&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span></span><br><span class="line">&lt;/receiver&gt;</span><br></pre></td></tr></table></figure><p>以上述静态方法注册的<code>MyBroadcastReceiver</code>，在<code>app</code>首次启动时，系统或自动实例化<code>MyBroadcastReceiver</code>，并注册到系统中。</p><h3 id="2-动态注册">2. 动态注册</h3><ul><li>在代码中调用<code>Context.registerReceiver()</code>，</li><li>典型写法示例如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BROADCAST_ACTION = <span class="string">&quot;com.example.whd_alive&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> BroadcastReceiver mBroadcastReceiver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">//实例化MyBroadcastReceiver </span></span><br><span class="line">        mBroadcastReceiver = <span class="keyword">new</span> MyBroadcastReceiver();</span><br><span class="line">        <span class="comment">//实例化IntentFilter</span></span><br><span class="line">        IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置接收广播的类型</span></span><br><span class="line">        intentFilter.addAction(BROADCAST_ACTION);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//动态注册</span></span><br><span class="line">        registerReceiver(mBroadcastReceiver, intentFilter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁广播</span></span><br><span class="line">    <span class="comment">//当此Activity实例化时，会动态将MyBroadcastReceiver注册到系统中</span></span><br><span class="line">    <span class="comment">//当此Activity销毁时，动态注册的MyBroadcastReceiver将不再接收到相应的广播</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        unregisterReceiver(mBroadcastReceiver);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：Android中所有与观察者模式有关的设计中，一旦涉及到register，必定在相应的时机需要unregister。因此，上例在<code>onDestroy()</code>回调需要<code>unregisterReceiver(mBroadcastReceiver)</code>。</p></blockquote><h1>广播处理机制</h1><p><img src="0.jpg" alt=""></p><ol><li>当发送串行广播(<code>ordered=true</code>)的情况下：<ul><li>静态注册的广播接收者(<code>receivers</code>)，采用串行处理；</li><li>动态注册的广播接收者(<code>registeredReceivers</code>)，采用串行处理；</li></ul></li><li>当发送并行广播(<code>ordered=false</code>)的情况下：<ul><li>静态注册的广播接收者(<code>receivers</code>)，依然采用串行处理；</li><li>动态注册的广播接收者(<code>registeredReceivers</code>)，采用并行处理；</li></ul></li></ol><p>简单来说，静态注册的<code>receivers</code>始终采用串行方式来处理（<code>processNextBroadcast</code>）； 动态注册的<code>registeredReceivers</code>处理方式是串行还是并行方式, 取决于广播的发送方式(<code>processNextBroadcast</code>)。</p><p>静态注册的广播往往其所在进程还没有创建，而进程创建相对比较耗费系统资源的操作，所以 让静态注册的广播串行化，能防止出现瞬间启动大量进程的喷井效应。</p><p>**ANR时机：**只有串行广播才需要考虑超时，因为接收者是串行处理的，前一个<code>receiver</code>处理慢，会影响后一个receiver；并行广播 通过一个循环一次性向所有的<code>receiver</code>分发广播事件，所以不存在彼此影响的问题，则没有广播超时；</p><ul><li>串行广播超时情况1：某个广播总处理时间 &gt; 2* receiver总个数 * mTimeoutPeriod, 其中<code>mTimeoutPeriod</code>，前台队列默认为10s，后台队列默认为60s;</li><li>串行广播超时情况2：某个receiver的执行时间超过<code>mTimeoutPeriod</code>；</li></ul><p><strong>不同注册方式的广播接收器回调onReceive(context, intent)中的context具体类型</strong>：</p><ul><li>静态注册(全局+本地)：<ul><li>回调<code>onReceive(context, intent)</code>中的<code>context</code>具体指的是<code>ReceiverRestrictedContext</code></li></ul></li><li>全局动态注册：<ul><li>回调<code>onReceive(context, intent)</code>中的<code>context</code>具体指的是<code>Activity Context</code>；</li></ul></li><li>LocalBroadcastManager动态注册<ul><li>回调<code>onReceive(context, intent)</code>中的<code>context</code>具体指的是<code>Application Context</code>。</li></ul></li></ul><hr><h1>Android 7.0以后的新特性</h1><p>以上我们讨论了老生常谈的内容，下面我们谈一谈Android 7.0以后的新变化</p><ul><li>Android 7.0起，系统不再发送以下系统广播：<ul><li><code>ACTION_NEW_PICTURE</code></li><li><code>ACTION_NEW_VIDEO</code></li></ul></li><li>针对Android 7.0 (API级别24)和更高版本的应用程序必须通过<code>registerReceiver()</code>注册以下广播。在<code>AndroidManifest</code>中声明<code>&lt;receiver&gt;</code>起作用。<ul><li><code>CONNECTIVITY_ACTION</code></li></ul></li><li>Android 8.0起，应用无法在<code>Manifest</code>中注册大部分隐式系统广播(即，并非专门针对此应用的广播)，此意也是在于降低随Android同时运行的应用增多，发生性能变差的几率。</li></ul><hr><h1>出于安全考虑的广播使用最佳实践</h1><ul><li>如不需要向应用程序之外的组件发送广播，则可以使用支持库<code>Support Library</code>中<code>LocalBroadcastManager</code>发送和接收本地广播。</li><li><strong>如果许多应用程序清单中注册接收相同的广播，它会导致系统启动大量的应用程序，从而对设备性能和用户体验产生重大影响</strong>。为了避免这种情况，请使用动态注册而不是<code>Manifest</code>声明。有时，Android系统本身会强制使用上下文注册的接收器。例如，<code>CONNECTIVITY_ACTION</code>广播只允许动态注册。</li><li><code>onReceive(Context, Intent)</code>运行在UI线程，不要进行耗时操作<ul><li>如耗时操作必不可少，生成子线程。<br><strong>具体做法是在 onReceive() 中开启一个 service，将耗时操作置于 service 中（子线程）</strong></li></ul></li><li>不要使用隐含的意图传播敏感信息。这些信息可以被任何注册的应用程序读取。<ul><li>解决方案 ： <code>permission</code> /  <code>setPackage(String)</code> / <code>LocalBroadcastManager</code>.</li></ul></li><li>当注册一个<code>BroadcastReceiver</code>，任何应用程序都可以发送潜在的恶意广播到你的应用的<code>BroadcastReceiver</code>。<ul><li>解决方案 ： <code>permission</code> /  <code>android:exported = &quot;false&quot;</code> / <code>LocalBroadcastManager</code>.</li></ul></li><li>广播操作的命名空间是全局的。确保操作名称和其他字符串都是在您自己的名称空间中编写的，否则您可能会无意中与其他应用程序发生冲突。</li><li>不要从<code>BroadcastReceiver</code>开始活动，这么做会导致用户体验很差，特别是如果有不止一个<code>BroadcastReceiver</code>。相反，<u>考虑使用<code>Notification</code></u>。</li><li>在Android 中如果要发送一个广播必须使用sendBroadCast 向系统发送对其感兴趣的广播接收器中。</li><li>使用广播必须要有一个intent 对象必设置其action动作对象</li><li>使用广播必须在配置文件中显式的指明该广播对象</li><li>每次接收广播都会重新生成一个接收广播的对象</li><li>在BroadCast 中尽量不要处理太多逻辑问题，建议复杂的逻辑交给Activity 或者 Service 去处理</li><li>如果在AndroidManifest.xml中注册，当应用程序关闭的时候，也会接收到广播。在应用程序中注册就不产生这种情况了。</li></ul><h1>参考</h1><blockquote><p><a href="https://www.jianshu.com/p/e236a2669797">https://www.jianshu.com/p/e236a2669797</a></p><p><a href="https://developer.aliyun.com/article/13367">https://developer.aliyun.com/article/13367</a></p><p><a href="https://blog.csdn.net/q376794191/article/details/85292952">https://blog.csdn.net/q376794191/article/details/85292952</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动 </tag>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动互联网开发-WIFI-DIRECT</title>
      <link href="/2022/03/10/%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91%E5%BC%80%E5%8F%91-WIFI-DIRECT/"/>
      <url>/2022/03/10/%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91%E5%BC%80%E5%8F%91-WIFI-DIRECT/</url>
      
        <content type="html"><![CDATA[<h1>技术介绍</h1><p>2010年10月，Wi-Fi Alliance（wi-fi联盟）发布Wi-Fi Direct白皮书，白皮书中介绍了有关于这种技术的基本信息、这种技术的特点和这种技术的功能，</p><p>Wi-Fi Direct标准是指允许无线网络中的设备无需通过无线路由器即可相互连接。与蓝牙技术类似，这种标准允许无线设备以点对点形式互连，而且在传输速度与传输距离方面则比蓝牙有大幅提升。</p><h2 id="WIFI-Direct有什么好处？（特点）">WIFI Direct有什么好处？（特点）</h2><p>1、无线网络中的设备<strong>无需通过无线路由器即可相互连接</strong>；<br>2、<strong>支持一对一直连，也可以实现多台设备同时连接</strong>；<br>3、支持所有的Wi-Fi设备，从11a/b/g至11n，<strong>不同标准的Wi-Fi设备之间也可以直接互联</strong>；<br>4、移动性与便携性：Wi-Fi Direct设备能够随时随地实现互相连接。由于不需要Wi-Fi路由器或接入点，因此<strong>Wi-Fi</strong>设备可以在任何地点实现连接。<br>5、即时可用性：用户将得以利用带回家的第一部Wi-Fi Direct认证设备建立直接连接。例如，一部新购买的Wi-Fi Direct笔记本可以与用户已有的传统Wi-Fi设备创建直接连接。<br>6、易用性：Wi-Fi Direct设备发现（Device Discovery）与服务发现（Service Discovery）功能帮助用户确定可用的设备与服务，然后建立连接。例如，如果用户想要打印文件，他们可以通过上述服务连接到哪个Wi-Fi网络拥有打印机。<br>7、简单而安全的连接：Wi-Fi Direct设备采用Wi-Fi Protected Setup™简化了在设备之间创建安全连接的过程。用户可以按下任一设备上的按钮，也可以输入PIN码（即设备显示的PIN码），轻松创建安全连接。</p><p>也可以这么理解：Wi-Fi Direct技术是Wi-Fi产业链向蓝牙技术发起的挑战，它试图完全取代蓝牙。</p><h1>报错与解决</h1><blockquote><p>The minCompileSdk (31) specified in a dependency’s AAR metadata (META-INF/com/android/build/gradle/aar-metadata.properties) is greater than this module’s compileSdkVersion (android-30).<br>Dependency: androidx.appcompat:appcompat:1.6.0-alpha01.</p></blockquote><p>但我看了一眼我依赖用的是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&#x27;androidx.appcompat:appcompat:1.3.0&#x27;</span></span><br></pre></td></tr></table></figure><p>有点不明所以但将编译版本还是改成了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compileSdkVersion <span class="number">31</span></span><br></pre></td></tr></table></figure><p>然后要对所有使用<code>&lt;intent-filter&gt;</code>的activity加<code>android:exported=&quot;true&quot;</code>(Manifest里)</p><blockquote><p>应该是<code>android-31</code>新加的特性</p></blockquote><h1>技术要点</h1><h2 id="原生">原生</h2><p>这里用了一个很久以前写的练手项目，翻出来的时候只剩源码和注释了。当初开发时借鉴了一个开源项目，因为注释齐全就一直留着，现在来补充一些文档。</p><h3 id="主要的技术点">主要的技术点</h3><ul><li>广播机制的理解与监听</li><li>聊天界面的构建（UI问题，easy，不过多分析，做好状态管理就好，尤其是异步）</li><li>service</li><li>数据传输</li></ul><h3 id="逻辑流程">逻辑流程</h3><p><img src="0.png" alt="逻辑流程"></p><h3 id="广播机制">广播机制</h3><p><a href="https://zwn2001.github.io/2022/03/11/%E5%AE%89%E5%8D%93%E5%8E%9F%E7%94%9F-%E5%B9%BF%E6%92%AD/">我的博客：广播</a></p><p>在本项目中我们只需要接收广播，或者说，我们更侧重于<code>receiver</code>。</p><p>一方面，我们要设置对哪些广播进行监听，或者说，如何对所有广播进行过滤。</p><p>另一方面，我们要实现我们的监听后的主体功能，也就是如何重写<code>onReceive</code>。</p><h4 id="过滤">过滤</h4><p>过滤器会在注册广播接收器时用到，所以我们将其作为广播接收器类的静态成员即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IntentFilter <span class="title">getIntentFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">    intentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);</span><br><span class="line">    intentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);</span><br><span class="line">    intentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);</span><br><span class="line">    intentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);</span><br><span class="line">    <span class="keyword">return</span> intentFilter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然还有其他事件可以监听。</p><h4 id="监听">监听</h4><p>​        针对我们过滤器的监听内容，我们分别定义各自的处理函数即可。</p><p>​        这里要注意的是，我们需要将获取到的信息通知到<code>WifiP2pManager</code>，那么在广播接收器的类中，我们需要<code>WifiP2pManager</code>对象作为参数，这个对象需要先于<code>WifiBroadcastReceiver</code>完成初始化，在<code>WifiBroadcastReceiver</code>对象销毁后由java垃圾处理机制自行回收。</p><p>​        同时，重写<code>WifiP2pManager.ChannelListener</code>接口，对channel进行监听。</p><p>​        <code>WifiP2pManager</code>对象并没有完全执行操作的能力，相反得，他正是通过在操作（函数）中绑定相应的监听器来达到监听并处理结果的功能。</p><p>​        项目中只用了<code>ChannelListener</code>和<code>ActionListener</code>，还有其他没有使用到的监听器，分别对应不同的功能。通过分监听器的方式完成操作轻量化与解耦。</p><p>​        至于为啥没有重写<code>ActionListener</code>接口，因为这个监听器本身就是用于判断操作返回值，或者说，判断函数是否成功的。</p><h3 id="UI要点">UI要点</h3><p>聊天界面的图片加载使用的是<a href="https://muyangmin.github.io/glide-docs-cn/"><code>Glide</code></a>。界面整体是一个<code>RecyclerView</code>，如果你问为啥不用<code>LIstView</code>，那我只能拿他的性能跟你侃一会儿了，这点《第一行代码》中也有提到，不再赘述。</p><h4 id="LayoutInflater"><code>LayoutInflater</code></h4><p>聊天界面的信息都是使用<code>LayoutInflater</code>进行布局加载然后调用对应的<code>Holder</code>进行UI渲染的。</p><p><code>LayoutInflater</code>使用的方法：<br><code>LayoutInflater.inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot)</code>。<br>可以看到，它总共需要三个参数，分别为：</p><ul><li>resource：布局资源文件，也就是我们将要根据它来创建新的视图。</li><li>root：根布局。可以设置为<code>Null</code>。如果为<code>Null</code>，<strong>那新布局（第一个参数）的根布局参数（注意：是新视图的根布局）就不会被设置成任何布局参数，只有等添加到父布局时候，重新赋给这个根布局新的布局参数，并且第三个参数将毫无作用</strong>。我们在第三个参数讲解第二个参数在非Null情况。</li><li>attachToRoot：<strong>是否将新的布局添加到根布局（root)，记住这个参数只有在第二个参数非Null的情况才生效</strong>。如果此参数为<code>false</code>，那么新的视图不会被添加进根布局，只会将新的视图根布局的布局参数转换成<code>root</code>的根布局参数。如果此参数为<code>true</code>，那么除了将新的视图根布局的布局参数转换成<code>root</code>的根布局参数，<code>LayoutInflater</code>还会调用<code>root.addView(temp, params)</code>方法，将新的视图添加进根布局。</li></ul><p>再深究就涉及到太多安卓<code>View</code>的原理了，故点到为止。但我觉得，基本的视图树的概念还是要有的。</p><h4 id="异步与状态管理">异步与状态管理</h4><p><a href="https://zwn2001.github.io/2021/10/27/%E7%BD%91%E7%BB%9C%E7%9A%84%E5%BC%82%E6%AD%A5/">我的博客：异步与状态管理</a></p><h3 id="service">service</h3><p>​        要细说服务可太有的说了。。。给一份参考吧：<a href="https://zwn2001.github.io/2022/03/11/%E5%AE%89%E5%8D%93%E5%8E%9F%E7%94%9F-%E6%9C%8D%E5%8A%A1/">我的博客：service</a></p><p>​        在该程序中，必然存在一台设备担任服务器的角色，那么服务器的功能实现则需要使用服务在后台完成。</p><p>​        程序中的服务主要完成两项任务，首先是启动socket服务器并运行服务线程的代码，其次是运行消息更新的线程代码，即每秒向前台activity发送消息更新的请求，在聊天界面初始化用户身份后，如果是服务端，则绑定一个相关的服务。</p><h3 id="数据分发-以文件分发为例">数据分发 - 以文件分发为例</h3><p>每个聊天数据都会被封装成<code>messageBean</code>对象，用于记录数据类型、时间、内容。</p><p>所有数据其实都可以作为文件进行分发，尤其是语音。</p><p>首先，要约定传输的数据格式：二进制传输，文件类型（int） + 数据长度（二进制长度）+ 二进制数据流。</p><p>这里要注意，首先传输的是<code>messageBean</code>的数据，编码方式为<code>GsonUtil.toJsonStr(messageBean).getBytes()</code>，然后传递文件内容，这里使用<code>byte[] buffer = new byte[1024];</code>这样的缓冲字节数组对文件进行读取与传输。</p><h2 id="Flutter">Flutter</h2><p>​        Flutter对WiFi直连的实现是来自<a href="https://pub.flutter-io.cn/packages/flutter_p2p_plus"><code>flutter_p2p_plus: ^1.0.2</code></a>，本质上其实是通过<code>PlatformChannel</code>对原生函数进行的封装。</p><p>​       相较于原生的整个开发，flutter封装了广播的监听器以及WiFi的事件监听器并预留了接口，并对<code>WiFiP2pManager</code>及其<code>channel</code>进行了封装，简化了整个操作流程。（虽然这给调试带来了一些困难）。</p><p>​       flutter的注册监听事件的逻辑是，向一个List中add你想要监听事件的监听器（与处理函数），调用<code>FlutterP2pPlus.register()</code>通过<code>Platformchannel</code>对原生进行操作（更准确地说，<code>methodChannel</code>)，同样地，程序要在<code>initState</code>时完成注册并<code>addObserver</code>，<code>dispose</code>时解绑所有监听器释放资源并<code>removeObserver</code>，这两个<code>Observer</code>方法是通过当前类继承<code>WidgetsBindingObserver</code>实现的。</p><p>​        当然我也很好奇这个类里面都定义了什么。于是我看了一下这两个方法的源码（时间有限，只能先看这些）。</p><p>源码的文档是这样写的：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="built_in">List</span>&lt;WidgetsBindingObserver&gt; _observers = &lt;WidgetsBindingObserver&gt;[];</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="markdown">Registers the given object as a binding observer. Binding</span></span></span><br><span class="line"><span class="comment">/// <span class="markdown">observers are notified when various application events occur,</span></span></span><br><span class="line"><span class="comment">/// <span class="markdown">for example when the system locale changes. Generally, one</span></span></span><br><span class="line"><span class="comment">/// <span class="markdown">widget in the widget tree registers itself as a binding</span></span></span><br><span class="line"><span class="comment">/// <span class="markdown">observer, and converts the system state into inherited widgets.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="markdown">For example, the [WidgetsApp] widget registers as a binding</span></span></span><br><span class="line"><span class="comment">/// <span class="markdown">observer and passes the screen size to a [MediaQuery] widget</span></span></span><br><span class="line"><span class="comment">/// <span class="markdown">each time it is built, which enables other widgets to use the</span></span></span><br><span class="line"><span class="comment">/// <span class="markdown">[MediaQuery.of] static method and (implicitly) the</span></span></span><br><span class="line"><span class="comment">/// <span class="markdown">[InheritedWidget] mechanism to be notified whenever the screen</span></span></span><br><span class="line"><span class="comment">/// <span class="markdown">size changes (e.g. whenever the screen rotates).</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="markdown">See also:</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="markdown"><span class="bullet"> *</span> [removeObserver], to release the resources reserved by this method.</span></span></span><br><span class="line"><span class="comment">/// <span class="markdown"><span class="bullet"> *</span> [WidgetsBindingObserver], which has an example of using this method.</span></span></span><br><span class="line"><span class="keyword">void</span> addObserver(WidgetsBindingObserver observer) =&gt; _observers.add(observer);</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="markdown">Unregisters the given observer. This should be used sparingly as</span></span></span><br><span class="line"><span class="comment">/// <span class="markdown">it is relatively expensive (O(N) in the number of registered</span></span></span><br><span class="line"><span class="comment">/// <span class="markdown">observers).</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="markdown">See also:</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="markdown"><span class="bullet"> *</span> [addObserver], for the method that adds observers in the first place.</span></span></span><br><span class="line"><span class="comment">/// <span class="markdown"><span class="bullet"> *</span> [WidgetsBindingObserver], which has an example of using this method.</span></span></span><br><span class="line"><span class="built_in">bool</span> removeObserver(WidgetsBindingObserver observer) =&gt; _observers.remove(observer);</span><br></pre></td></tr></table></figure><p>​        可以看到其实这两个函数只是对一个泛型为<code>WidgetsBindingObserver</code>的<code>List</code>进行操作，那么这个类又对这个List做了什么操作呢？</p><p>​        事实上，这个类通过<code>mixin WidgetsBinding on BindingBase, ServicesBinding, SchedulerBinding, GestureBinding, RendererBinding, SemanticsBinding </code>将<code>List</code>中的<code>widget layer</code>与<code>flutter engine</code>进行连通。</p><p>​        此时就不得不来一张flutter架构图：</p><p><img src="1.png" alt=""></p><p>​        Layer作为绘制产物的持有者，主要功能是可以在不同的frame之间复用绘制产物（如果没有发生变化）与划分绘制边界，缩小重绘范围，跟<code>engine</code>有什么关系呢？</p><p>​        如果注意到这一句，你可能会有答案：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which enables other widgets to use the[MediaQuery.of] <span class="keyword">static</span> method and (implicitly) the [InheritedWidget] mechanism to be notified whenever the screen size changes .</span><br></pre></td></tr></table></figure><p>​        说白了，状态管理。</p><p>（<a href="https://www.sunmoonblog.com/2019/12/23/dart-mixin/"><code>dart</code>关键字，<code>mixin</code> 与 <code>on</code></a> ）</p><h1>参考</h1><blockquote><p><a href="https://zhuanlan.zhihu.com/p/300975829">WIFI Direct是什么？有什么好处？</a></p><p><a href="https://www.jianshu.com/p/2a70861fd0fa">LayoutInflater</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>opencv_basic</title>
      <link href="/2022/02/26/opencv-basic/"/>
      <url>/2022/02/26/opencv-basic/</url>
      
        <content type="html"><![CDATA[<h1>图像基本操作</h1><h2 id="读取图像">读取图像</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">retval =cv2.imread (filename[,flags])</span><br></pre></td></tr></table></figure><img src="imread.png" style="zoom: 80%;" /><p>可以使用相对路径，如：</p><img src="51.png" style="zoom: 70%;" /><p>也可以使用绝对路径。</p><h2 id="显示图像">显示图像</h2><img src="imshow.png" style="zoom: 100%;" /><p>在显示图像中，还涉及其他函数</p><img src="waitkey.png" style="zoom: 80%;" /><img src="destroyWindow.png" style="zoom: 80%;" /><p>以下的很多例子里都会见到这几个函数</p><h2 id="保存图像">保存图像</h2><img src="imwrite.png" style="zoom: 80%;" /><h1>图像处理基础</h1><h2 id="基本图像">基本图像</h2><h3 id="二值图">二值图</h3><p>仅包含黑色和白色，用01进行表示。</p><h3 id="灰度图">灰度图</h3><p><strong>可以在读取时将参数设为0，即为灰度图</strong></p><p>​        通常， 计算机会将灰度处理为256个灰度级， 用数值区间[0,255]来表示。 其中， 数值”255”表示纯白色， 数值”0”表示纯黑色， 其余的数值表示从纯白到纯黑之间不同级别的灰度。用于表示256个灰度级的数值0~255, 正好可以用一个字节(8位二进制值）来表示。 <strong>所以灰度图一定是单通道的</strong></p><h3 id="彩图（以RGB色彩空间为例）">彩图（以RGB色彩空间为例）</h3><p><strong>读取时参数为1，或者省略</strong></p><p>​       在 RGB 色彩空间中， 存在 R (red, 红色）通道、 G (green, 绿色）通道和 B (blue, 蓝色）通<br>道， 共三个通道。 每个色彩通道值的范围都在[0,255]之间 ， 我们用这三个色彩通道的组合表示颜色。<br>以比较通俗的方式来解释就是， 有三个油漆桶， 分别装了红色、 绿色、 蓝色的油漆， 我们分别从每个油漆桶中取容星为0~255个单位的不等星的油漆， 将三种油漆混合就可以调配出一种新的颜色。三种油漆经过不同的组合， 共可以调配出所有常见的256x256x256=16 777 216种颜色。</p><p>​       通常用一个三维数组来表示一幅RGB色彩空间的彩色图像。一般情况下 ， 在RGB色彩空间中， 图像通道的顺序是R➔G➔B, 即第1个通道是R通道 ， 第2个通道是G通道， 第3个通道是B通道。 <strong>需要特别注意的是， 在OpenCV中， 通道的顺序是B➔G➔R</strong>。</p><h2 id="像素处理">像素处理</h2><p>​        需要说明的是 ， 在OpenCV中， 最小的数据类型是无符号的8位数。 因此 ， 在OpenCV中实际上并没有二值图像这种数据类型， 二值图像经常是通过处理得到的 ， 然后使用0表示黑色， 使用255表示白色。</p><p>​        可以将二值图像理解为特殊的灰度图像， 这里仅以灰度图像为例讨论像素的读取和修改。 通过2.1节的分析可知， 可以将图像理解为一个矩阵，在面向Python的OpenCV(Open CV for Python)中，<strong>图像就是 Numpy 库中的数组</strong>。 一个 OpenCV 灰度图像是一个二维数组， 可以使用表达式访间其中的像素值。 例如， 可以使用image[0,0]访间图像image第0行第0列位置上的像素点。 第0行第0列位于图像的左上角 ， 其中第1个索引表示第0行， 第2个索引表示第0列。</p><p>​         同样地，彩图就是三维数组，分别是BGR三个二维数组。（RGB色彩空间）。</p><img src="0.png" style="zoom: 80%;" /><p>这部分建议多学numpy。</p><h2 id="通道操作（基于RGB）">通道操作（基于RGB）</h2><h3 id="通道拆分">通道拆分</h3><h4 id="通过索引拆分-numpy">通过索引拆分(numpy)</h4><p>如下语句分别从中提取了B通道、 G通道、 R通道。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b=img[: ,: ,O]</span><br><span class="line">g=img[: ,: ,<span class="number">1</span>]</span><br><span class="line">r=img[: ,: ,<span class="number">2</span>] </span><br></pre></td></tr></table></figure><h4 id="通过函数拆分">通过函数拆分</h4><p>函数<code>cv2.split()</code>能够拆分图像的通道。 例如， 可以使用如下语句拆分彩色BGR图像img, 得到B通道图像b、 G通道图像g和R通道图像r。</p><p><code>b,g,r=cv2.split (img) </code></p><p>上述语句与如下语句是等价的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b = cv2.split (a) [<span class="number">0</span>]</span><br><span class="line">g = cv2.split (a) [<span class="number">1</span>]</span><br><span class="line">r = cv2.split (a) [<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h3 id="通道合并">通道合并</h3><p>通道合并是通道拆分的逆过程， 通过合并通道可以将三个通道的灰度图像构成一幅彩色图像。 函数cv2.merge(）可以实现图像通道的合并， 例如有B通道图像b、 G通道图像g和R通道图像r, 使用函数<code>cv2.merge()</code>可以将这三个通道合并为一幅BGR的三通道彩色图像。 其实现的语句为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bgr=cv2.merge ([b,g,r]) </span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    src = cv2.imread(<span class="string">&quot;image\\0.png&quot;</span>)</span><br><span class="line">    b, g, r = cv2.split(src)</span><br><span class="line">    bgr = cv2.merge([b, g, r])</span><br><span class="line">    cv2.imshow(<span class="string">&quot;dst&quot;</span>,bgr)</span><br><span class="line">    cv2.waitKey()</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="图像属性">图像属性</h2><p>在图像处理过程中， 经常需要获取图像的属性， 例如图像的大小。</p><ul><li><p>shape: 如果是彩色图像， 则返回包含行数 列数 通道数的数组；如果是二值图像或者灰度图像， 则仅返回行数和列数。 通过该属性的返回值是否包含通道数， 可以判断一幅图像是灰度图像（或二值图像）还是彩色图像。</p></li><li><p>size：返回图像的像素数目。 其值为行x列x通道数”， 灰度图像或者二值图像的通道数为1。</p></li></ul><h1>图像运算</h1><h2 id="加法">加法</h2><h3 id="加号运算符">加号运算符</h3><img src="1.png" style="zoom: 80%;" /><h3 id="add-函数"><code>add()</code>函数</h3><img src="2.png" style="zoom: 80%;" /><img src="3.png" style="zoom: 80%;" /><h3 id="加权和">加权和</h3><img src="4.png" style="zoom: 80%;" /><h2 id="按位逻辑">按位逻辑</h2><h3 id="按位与">按位与</h3><img src="5.png" style="zoom: 80%;" /><p>任何数与0都是0，与255则不变，都是二进制的按位与</p><h3 id="按位或与按位非、按位异或">按位或与按位非、按位异或</h3><p>与按位与类似。</p><p>按位或：<code>dst = cv2.bitwise_or(src[,mask])</code></p><p>按位非：<code>dst = cv2.bitwise_not(src[,mask])</code></p><p>按位异或：<code>dst = cv2.bitwise_xor(src[,mask])</code></p><h3 id="掩模">掩模</h3><img src="6.png" style="zoom: 80%;" /><p>可以理解为结果在返回前与掩模进行了按位与。</p><h2 id="图像与数值的运算">图像与数值的运算</h2><img src="7.png" style="zoom: 80%;" /><h2 id="位平面分解与其应用">位平面分解与其应用</h2><img src="8.png" style="zoom: 80%;" /><p>例子：</p><img src="9.png" style="zoom: 80%;" /><h3 id="应用：加解密与数字水印">应用：加解密与数字水印</h3><p>加解密是使用密钥图像对原图进行位运算，数字水印是在最低位平面嵌入信息，因为这样对原图影响最小。</p><p>这里仅介绍了原始载体图像为灰度图像的情况，在实际中可以根据需要在多个通道内嵌入相同的水印（提高鲁棒性，即使部分水印丢失，也能提取出完整水印信息），或在各个不同的通道内嵌入不同的水印（提高嵌入容量）。在彩色图像的多个通道内嵌入水印的方法，与在灰度图像内嵌入水印的方法相同。</p><h1>色彩空间</h1><p>RGB是常见的色彩表示方法，但对于人眼来讲，很难直观地将一种色彩的RGB区分开来，并且在计算机处理色彩时，也有很多其他的颜色表现形式，这就形成了色彩空间。</p><h2 id="色彩空间举例">色彩空间举例</h2><p>1）RGB颜色空间</p><p>RGB（红绿蓝）是依据人眼识别的颜色定义出的空间，可表示大部分颜色。但在科学研究一般不采用RGB颜色空间，因为它的细节难以进行数字化的调整。它将色调，亮度，饱和度三个量放在一起表示，很难分开。它是最通用的面向硬件的彩色模型。该模型用于彩色监视器和一大类彩色视频摄像。</p><img src="rgb_color_space.jpg" alt="rgb_color_space" style="zoom:50%;" /><p>2）CMY/CMYK颜色空间</p><p>CMY是工业印刷采用的颜色空间。它与RGB对应。简单的类比RGB来源于是物体发光，而CMY是依据<a href="https://link.zhihu.com/?target=http%3A//baike.baidu.com/item/%E5%8F%8D%E5%B0%84%E5%85%89">反射光</a>得到的。具体应用如打印机：一般采用四色墨盒，即CMY加黑色墨盒</p><p>3）HSV/HSB颜色空间</p><p>HSV颜色空间是为了更好的数字化处理颜色而提出来的。有许多种HSX颜色空间，其中的X可能是V,也可能是I，依据具体使用而X含义不同。H是色调，S是饱和度，I是强度。HSB（Hue, Saturation, Brightness）颜色模型，这个颜色模型和HSL颜色模型同样都是用户台式机图形程序的颜色表示， 用六角形锥体表示自己的颜色模型。</p><p><img src="hsv_color_space.jpg" alt="hsv_color_space"></p><img src="11.png" style="zoom: 80%;" /><p>4）HSI/HSL颜色空间</p><p>HSI颜色空间是为了更好的数字化处理颜色而提出来的。有许多种HSX颜色空间，其中的X可能是V,也可能是I，依据具体使用而X含义不同。H是色调，S是饱和度，I是强度。HSL（Hue, Saturation, Lightness）颜色模型，这个颜色模型都是用户台式机图形程序的颜色表示， 用六角形锥体表示自己的颜色模型。</p><img src="hsi_color_space.jpg" alt="hsi_color_space" style="zoom:67%;" /><p>5）Lab颜色空间</p><p><a href="https://link.zhihu.com/?target=http%3A//baike.baidu.com/item/Lab%E9%A2%9C%E8%89%B2%E6%A8%A1%E5%9E%8B">Lab颜色模型</a>是由CIE（<a href="https://link.zhihu.com/?target=http%3A//baike.baidu.com/item/%E5%9B%BD%E9%99%85%E7%85%A7%E6%98%8E%E5%A7%94%E5%91%98%E4%BC%9A">国际照明委员会</a>）制定的一种色彩模式。自然界中任何一点色都可以在Lab空间中表达出来，它的<a href="https://link.zhihu.com/?target=http%3A//baike.baidu.com/item/%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4">色彩空间</a>比RGB空间还要大。另外，这种模式是以数字化方式来描述人的视觉感应， 与设备无关，所以它弥补了RGB和CMYK模式必须依赖于设备色彩特性的不足。由于Lab的色彩空间要比RGB模式和CMYK模式的色彩空间大。这就意味着RGB以及CMYK所能描述的色彩信息在Lab空间中都能 得以影射。<a href="https://link.zhihu.com/?target=http%3A//baike.baidu.com/item/Lab%E9%A2%9C%E8%89%B2%E6%A8%A1%E5%9E%8B">Lab颜色模型</a>取坐标Lab，其中L亮度；a的正数代表红色，负端代表绿色；b的正数代表黄色， 负端代表兰色(a,b)有L=116f(y)-16, a=500[f(x/0.982)-f(y)], b=200[f(y)-f(z/1.183 )]；其中： f(x)=7.787x+0.138, x&lt;0.008856; f(x)=(x)1/3,x&gt;0.008856</p><img src="lab_color_space.jpg" alt="lab_color_space" style="zoom:50%;" /><p>6）YUV/YCbCr颜色空间</p><p>YUV是通过亮度-色差来描述颜色的颜色空间。</p><p>亮度信号经常被称作Y，色度信号是由两个互相独立的信号组成。视<a href="https://link.zhihu.com/?target=http%3A//baike.baidu.com/item/%E9%A2%9C%E8%89%B2%E7%B3%BB%E7%BB%9F">颜色系统</a>和格式不同，两种色度信号经常被称作UV或PbPr或CbCr。这些都是由不同的编码格式所产生的，但是实际上，他们的概念基本相同。在DVD中，色度信号被存储成Cb和Cr（C代表颜色，b代表蓝色，r代表红色）。</p><p>YCbCr：</p><img src="10.png" style="zoom: 80%;" /><h2 id="色彩空间转换">色彩空间转换</h2><img src="12.png" style="zoom: 80%;" /><img src="13.png" style="zoom: 80%;" /><img src="14.png" style="zoom: 80%;" /><img src="15.png" style="zoom: 80%;" /><p>等等</p><h2 id="alpha通道">alpha通道</h2><p>在RGB色彩空间三个通道的基础上 ，还可以加上一个A通道，也叫alpha通道，表示透明度。这种4 个通道的色彩空间被称为RGBA色彩空间，PNG图像是一种典型的4通道图像。alpha 通道的赋值范围是[0,1]， 或者[0,255]， 表示从透明到不透明。</p><h1>几何变换</h1><p>略</p><h1>阈值处理</h1><p>阈值处理是指剔除图像内像素值高于一定值或者低于一定值的像素点。</p><h2 id="阈值化处理">阈值化处理</h2><img src="16.png" style="zoom: 80%;" /><img src="17.png" style="zoom: 80%;" /><p>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    src = cv2.imread(<span class="string">&quot;image\\0.png&quot;</span>,-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    cv2.imshow(<span class="string">&quot;src&quot;</span>,src)</span><br><span class="line">    ret,dst = cv2.threshold(src,<span class="number">127</span>,<span class="number">255</span>,cv2.THRESH_BINARY)</span><br><span class="line">    cv2.imshow(<span class="string">&quot;dst&quot;</span>,dst)</span><br><span class="line"></span><br><span class="line">    cv2.waitKey()</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="52.png" style="zoom: 60%;" /><p>或者，修改相应参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ret,dst = cv2.threshold(src,<span class="number">70</span>,<span class="number">150</span>,cv2.THRESH_BINARY)</span><br></pre></td></tr></table></figure><img src="53.png" style="zoom: 40%;" /><p>反二值化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ret,dst = cv2.threshold(src,<span class="number">127</span>,<span class="number">255</span>,cv2.THRESH_BINARY_INV)</span><br></pre></td></tr></table></figure><img src="54.png" style="zoom: 60%;" /><h2 id="自适应阈值处理">自适应阈值处理</h2><p>对于色彩均衡的图像，直接使用一个阈值就能完成对图像的阈值化处理。 但是，有时图像的色彩是不均衡的，此时如果只使用一个阈值，就无法得到清晰有效的阈值分割结果图像。</p><p>在进行阈值处理时，自适应阈值处理的方式通过计算每个像素点周围临近区域的加权平均值获得阈值，并使用该闯值对当前像素点进行处理。<strong>与普通的阈值处理方法相比，自适应阈值处理能够更好地处理明暗差异较大的图像</strong>。</p><p><u><strong>处理的图像必须是八位单通道图像 ！！</strong></u></p><img src="18.png" style="zoom: 80%;" /><img src="19.png" style="zoom: 80%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    src = cv2.imread(<span class="string">&quot;image\\0.png&quot;</span>,<span class="number">0</span>)</span><br><span class="line">    dst = cv2.adaptiveThreshold(src, <span class="number">255</span>, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">    cv2.imshow(<span class="string">&quot;dst&quot;</span>, dst)</span><br><span class="line"></span><br><span class="line">    cv2.waitKey()</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="55.png" style="zoom: 60%;" /><h2 id="最优阈值函数">最优阈值函数</h2><p>实际处理的图像往往是很复杂的， 不太可能像上述img那样 ， 一眼就观察出最合适的阈值。 如果一个个去尝试， 工作量无疑是巨大的。Otsu方法能够根据当前图像给出最佳的类间分割阈值。 简而言之， <strong>Otsu方法会遍历所有可能阈值， 从而找到最佳的阈值。</strong></p><p>在 OpenCV 中， 通过在函数<code> cv2.threshold ()</code>中对参数<code> type</code> 的类型多传递 一个参数 “cv2.THRESH_ OTSU” ， 即可实现Otsu方式的阈值分割。需要说明的是， <strong>在使用Otsu方法时， 要把阈值设为0。此时的函数<code>cv2.threshold()</code>会自动寻找最优阈值， 并将该阈值返回</strong>。</p><p><u><strong>处理的图像必须是八位单通道图像 ！！</strong></u></p><img src="20.png" style="zoom: 80%;" /><ul><li>设定的阈值为0。</li><li>返回值t是Otsu方法计算得到并使用的最优阈值。</li><li>需要注意，如果采用普通的阈值分割，返回的闯值就是设定的阈值。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    src = cv2.imread(<span class="string">&quot;image\\0.png&quot;</span>,<span class="number">0</span>)</span><br><span class="line">    t,dst = cv2.threshold(src, <span class="number">0</span>,<span class="number">255</span>, cv2.THRESH_BINARY+cv2.THRESH_OTSU)</span><br><span class="line">    cv2.imshow(<span class="string">&quot;dst&quot;</span>, dst)</span><br><span class="line"></span><br><span class="line">    cv2.waitKey()</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="56.png" style="zoom: 60%;" /><h1>图像平滑处理（滤波）</h1><p>如果针对图像内的每一个像素点都进行上述平滑处理， 就能够对整幅图像完成平滑处理， 有效地去除图像内的噪声信息。<strong>图像平滑处理的基本原理是， 将噪声所在像素点的像素值处理为其周围临近像素点的值的近似值</strong>。</p><h2 id="均值滤波">均值滤波</h2><h3 id="原理">原理</h3><p>均值滤波是指用当前像素点周围N·N个像素值的均值来代替当前像素值。在进行均值滤波时，首先要考虑需要对周围多少个像素点<strong>取平均值</strong>。通常情况下，我们会以当前像素点为中心， 对行数和列数相等的一块区域内的所有像素点的像素值求平均。针对边缘像素点， 可以只取图像内存在的周围邻域点的像素值均值。</p><p>以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>5</mn><mo>×</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">5\times5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>均值滤波为例，相当于：</p><img src="21.png" style="zoom: 80%;" /><h3 id="函数">函数</h3><img src="22.png" style="zoom: 80%;" /><img src="23.png" style="zoom: 80%;" /><p>卷积核小，滤波效果差，卷积核大，图片失真严重（类似高斯模糊），类似于近视的感觉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    src = cv2.imread(<span class="string">&quot;image\\0.png&quot;</span>,<span class="number">0</span>)</span><br><span class="line">    cv2.imshow(<span class="string">&quot;src&quot;</span>, src)</span><br><span class="line">    dst=cv2.blur(src,(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line">    cv2.imshow(<span class="string">&quot;dst&quot;</span>, dst)</span><br><span class="line"></span><br><span class="line">    cv2.waitKey()</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="57.png" style="zoom: 60%;" /><h2 id="方框滤波">方框滤波</h2><h3 id="原理-2">原理</h3><p>方框滤波中，可以自由选择是否对均值滤波的结果进行归一化， 即可以自由选择滤波结果是邻域像素值之和的平均值，还是邻域像素值之和。</p><h3 id="函数-2">函数</h3><img src="24.png" style="zoom: 80%;" /><p>当 normalize=0时， 因为不进行归一化处理， 因此滤波得到的值很可能超过当前像素值范围的最大值， 从而被截断为最大值。 这样， 就会得到一幅纯白色的图像。</p><h2 id="高斯滤波">高斯滤波</h2><h3 id="原理-3">原理</h3><p>在进行均值滤波和方框滤波时，其邻域内每个像素的权重是相等的。在高斯滤波中，<strong>会将中心点的权重值加大， 远离中心点的权重值减小，在此基础上计算邻域内各个像素值不同权重的和</strong>。</p><p>例如：</p><img src="25.png" style="zoom: 80%;" /><h3 id="函数-3">函数</h3><img src="26.png" style="zoom: 80%;" /><p><strong><u>滤波核必须是奇数！！</u></strong></p><p>在该函数中， <code>sigmaY</code>和<code>borderType</code>是可选参数。 <code>sigmaX</code>是必选参数， 但是可以将该参数设置为0, 让函数自己去计算<code>sigmaX</code>的具体值。<br>官方文档建议显式地指定<code>ksize</code>、 <code>sigmaX</code>和<code>sigmaY三</code>个参数的值， 以避免将来函数修改后可能造成的语法错误。 <strong>当然， 在实际处理中， 可以显式指定<code>sigmaX</code>和 <code>sigmaY</code>为默认值0</strong>。因此， 函数<code>cv2.GaussianBlur()</code>的常用形式为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dst = cv2.GaussianBlur (src,ksize,<span class="number">0</span>,<span class="number">0</span>) </span><br></pre></td></tr></table></figure><p>效果略好于方框滤波</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    src = cv2.imread(<span class="string">&quot;image\\0.png&quot;</span>)</span><br><span class="line">    cv2.imshow(<span class="string">&quot;src&quot;</span>, src)</span><br><span class="line">    dst = cv2.GaussianBlur(src, (<span class="number">9</span>, <span class="number">9</span>), <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    cv2.imshow(<span class="string">&quot;dst&quot;</span>, dst)</span><br><span class="line"></span><br><span class="line">    cv2.waitKey()</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="58.png" style="zoom: 60%;" /><h2 id="中值滤波">中值滤波</h2><h3 id="原理-4">原理</h3><p>中值滤波会取当前像素点及其周围临近像素点（一共有奇数个像素点）的像素值，将这些像素值排序，然后<strong>将位于中间位置的像素值</strong>作为当前像素点的像素值。(取中位数)</p><h3 id="函数-4">函数</h3><img src="27.png" style="zoom: 80%;" /><h2 id="双边滤波">双边滤波</h2><h3 id="原理-5">原理</h3><p>前述滤波方式基本都只考虑了空间的权重信息， 这种情况计算起来比较方便， 但是在边缘信息的处理上存在较大的问题。在均值滤波、 方框滤波、 高斯滤波中， 都会计算边缘上各个像素点的加权平均值， 从而模糊边缘息。</p><p>双边滤波在计算某一个像素点的新值时， 不仅考虑距离信息（距离越远，权重越小），还考虑色彩信息（色彩差别越大，权重越小）。双边滤波综合考虑距离和色彩的权重结果，既能够有效地去除噪声，又能够较好地保护边缘信息。</p><p>在双边滤波中，<strong>当处在边缘时，与当前点色彩相近的像素点（颜色距离很近）会被给予较大的权重值；而与当前色彩差别较大的像素点（颜色距离很远）会被给予较小的权重值（极端情况下权重可能为0, 直接忽略该点）</strong>，这样就保护了边缘信息。</p><h3 id="函数-5">函数</h3><img src="28.png" style="zoom: 80%;" /><p>双边滤波对边缘的保护很好，但对噪声的处理不是很好。</p><h2 id="2D卷积">2D卷积</h2><img src="29.png" style="zoom: 80%;" /><h1>形态学操作</h1><p>这一部分是以后很多操作的基础，以后很多操作或多或少都跟形态学有关系。</p><h2 id="腐蚀">腐蚀</h2><h3 id="原理-6">原理</h3><p>腐蚀能够将图像的边界点消除，使图像沿着边界向内收缩，也可以将小于指定结构体元素的部分去除。<strong>腐蚀用来“收缩“或者“细化”二值图像中的前景，借此实现去除噪声、元素分割等功能</strong>。在腐蚀过程中，通常使用一个<strong>结构元</strong>来逐个像素地扫描要被腐蚀的图像，并根据结构元和被腐蚀图像的关系来确定腐蚀结果。</p><p>需要注意的是，腐蚀操作等形态学操作是<strong>逐个像素</strong>地来决定值的，每次判定的点都是与结构元中心点所对应的点。图8-3中的两幅图像表示结构元与前景色的两种不同关系。根据这两种不同的关系来决定，腐蚀结果图像中的结构元中心点所对应位置像素点的像素值。</p><img src="30.png" style="zoom: 80%;" /><h3 id="函数-6">函数</h3><img src="31.png" style="zoom: 80%;" /><img src="32.png" style="zoom: 80%;" /><p>例如：</p><img src=".png" style="zoom: 80%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    src = cv2.imread(<span class="string">&quot;image\\0.png&quot;</span>,-<span class="number">1</span>)</span><br><span class="line">    cv2.imshow(<span class="string">&quot;src&quot;</span>, src)</span><br><span class="line">    kernel = np.ones((<span class="number">5</span>,<span class="number">5</span>),np.uint8)</span><br><span class="line">    dst = cv2.erode(src, kernel)</span><br><span class="line">    cv2.imshow(<span class="string">&quot;dst&quot;</span>, dst)</span><br><span class="line">    cv2.waitKey()</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="59.png" style="zoom: 60%;" /><h2 id="膨胀">膨胀</h2><h3 id="原理-7">原理</h3><p>与腐蚀相反，同样地，处理思路也与其相反。</p><ul><li>如果结构元中任意一点处千前景图像中，就将膨胀结果图像中对应像素点处理为前景色。</li><li>如果结构元完全处千背景图像外，就将膨胀结果图像中对应像素点处理为背景色。</li></ul><h3 id="函数-7">函数</h3><img src="34.png" style="zoom: 80%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    src = cv2.imread(<span class="string">&quot;image\\0.png&quot;</span>,-<span class="number">1</span>)</span><br><span class="line">    cv2.imshow(<span class="string">&quot;src&quot;</span>, src)</span><br><span class="line">    kernel = np.ones((<span class="number">5</span>,<span class="number">5</span>),np.uint8)</span><br><span class="line">    dst = cv2.dilate(src, kernel)</span><br><span class="line">    cv2.imshow(<span class="string">&quot;dst&quot;</span>, dst)</span><br><span class="line">    cv2.waitKey()</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="60.png" style="zoom: 60%;" /><h2 id="通用形态学函数">通用形态学函数</h2><h3 id="函数-8">函数</h3><img src="35.png" style="zoom: 80%;" /><ul><li><p>开运算进行的操作是先将图像腐蚀，再对腐蚀的结果进行膨胀。开运算可以用千去噪、计数等。（计数：可以利用开运算将连接在一起的不同区域划分开）</p></li><li><p>闭运算是先膨胀、 后腐蚀的运算， 它有助于关闭前景物体内部的小孔， 或去除物体上的小黑点，还可以将不同的前景图像进行连接。</p></li><li><p>形态学梯度运算是用图像的膨胀图像减腐蚀图像的操作， 该操作可以获取原始图像中前景图像的边缘。</p></li><li><p>礼帽运算是用原始图像减去其开运算图像的操作。 礼帽运算能够获取图像的噪声信息，或者得到比原始图像的边缘更亮的边缘信息。</p></li><li><p>黑帽运算是用闭运算图像减去原始图像的操作。黑帽运算能够获取图像内部的小孔，或前景色中的小黑点， 或者得到比原始图像的边缘更暗的边缘部分。</p></li></ul><h2 id="核函数">核函数</h2><img src="36.png" style="zoom: 80%;" /><img src="37.png" style="zoom: 80%;" /><h1>图像梯度</h1><p>图像梯度计算的是图像变化的速度。对千图像的边缘部分，其灰度值变化较大，梯度值也较大；相反，对于图像中比较平滑的部分， 其灰度值变化较小，相应的梯度值也较小。一般情况下，<strong>图像梯度计算的是图像的边缘信息</strong>。</p><img src="38.png" style="zoom: 80%;" /><p>原书对此做了很详细的讲解，可以直接参考。</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzUyNzY5OTE5Mw==&amp;mid=2247488231&amp;idx=2&amp;sn=490533849bd36d6e9c70d7d2560936b8&amp;chksm=fa7acf71cd0d4667266a339339b834b1ae6fde2ae002e8d0a16c10deb37aebe2bfd605f20058&amp;scene=178&amp;cur_album_id=1343718009222905856#rd">以下参考</a></p><h2 id="Roberts-算子"><strong>Roberts 算子</strong></h2><p>Roberts 算子，又称罗伯茨算子，是一种最简单的算子，是一种利用局部差分算子寻找边缘的算子。他采用对角线方向相邻两象素之差近似梯度幅值检测边缘。<strong>检测垂直边缘的效果好于斜向边缘，定位精度高，对噪声敏感，无法抑制噪声的影响</strong>。</p><p>1963年， Roberts 提出了这种寻找边缘的算子。 Roberts 边缘算子是一个 2x2 的模版，采用的是对角方向相邻的两个像素之差。</p><p><strong>Roberts 算子的模板分为水平方向和垂直方向，如下所示，从其模板可以看出， Roberts 算子能较好的增强正负 45 度的图像边缘</strong>。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mi>d</mi><mi>x</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.1600em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(2)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">dx= \left[\begin{matrix}  -1 &amp; 0 \\ 0 &amp; 1 \\ \end{matrix} \right] \tag{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span><span class="tag"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">2</span></span><span class="mord">)</span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mi>d</mi><mi>y</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.1600em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(2)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">dy = \left[\begin{matrix}  0 &amp; -1 \\ 1 &amp; 0 \\ \end{matrix} \right] \tag{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span><span class="tag"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">2</span></span><span class="mord">)</span></span></span></span></span></span></p><p>Roberts 算子在水平方向和垂直方向的计算公式如下：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>x</mi></msub><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d_x(i,j)=f(i+1,j+1)-f(i,j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>y</mi></msub><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d_y(i,j)=f(i,j+1)-f(i+1,j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span></p><p>Roberts 算子像素的最终计算公式如下：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>=</mo><msqrt><mrow><msub><mi>d</mi><mi>x</mi></msub><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><msub><mi>d</mi><mi>y</mi></msub><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></msqrt><mrow></mrow></mrow><annotation encoding="application/x-tex">S=\sqrt{d_x(i,j)^2+d_y(i,j)^2}{}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.32305399999999995em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.916946em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.8769460000000002em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.32305399999999995em;"><span></span></span></span></span></span><span class="mord"></span></span></span></span></p><p>实现 Roberts 算子，我们主要通过 OpenCV 中的 <code>filter2D()</code> 这个函数，这个函数的主要功能是通过卷积核实现对图像的卷积运算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter2D</span>(<span class="params">src, ddepth, kernel, dst=<span class="literal">None</span>, anchor=<span class="literal">None</span>, delta=<span class="literal">None</span>, borderType=<span class="literal">None</span></span>)</span></span><br></pre></td></tr></table></figure><ul><li>src: 输入图像</li><li>ddepth: 目标图像所需的深度</li><li>kernel: 卷积核</li></ul><p>接下来开始写代码，首先是图像的读取，并把这个图像转化成灰度图像，这个没啥好说的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">img = cv.imread(<span class="string">&#x27;maliao.jpg&#x27;</span>, cv.COLOR_BGR2GRAY)</span><br><span class="line">rgb_img = cv.cvtColor(img, cv.COLOR_BGR2RGB)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 灰度化处理图像</span></span><br><span class="line">grayImage = cv.cvtColor(img, cv.COLOR_BGR2GRAY)</span><br></pre></td></tr></table></figure><p>然后是使用 Numpy 构建卷积核，并对灰度图像在 x 和 y 的方向上做一次卷积运算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Roberts 算子</span></span><br><span class="line">kernelx = np.array([[-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>]], dtype=<span class="built_in">int</span>)</span><br><span class="line">kernely = np.array([[<span class="number">0</span>, -<span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>]], dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">x = cv.filter2D(grayImage, cv.CV_16S, kernelx)</span><br><span class="line">y = cv.filter2D(grayImage, cv.CV_16S, kernely)</span><br></pre></td></tr></table></figure><p>注意：在进行了 Roberts 算子处理之后，还需要调用convertScaleAbs()函数计算绝对值，并将图像转换为8位图进行显示，然后才能进行图像融合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转 uint8 ,图像融合</span></span><br><span class="line">absX = cv.convertScaleAbs(x)</span><br><span class="line">absY = cv.convertScaleAbs(y)</span><br><span class="line">Roberts = cv.addWeighted(absX, <span class="number">0.5</span>, absY, <span class="number">0.5</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>最后是通过 pyplot 将图像显示出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">titles = [<span class="string">&#x27;原始图像&#x27;</span>, <span class="string">&#x27;Roberts算子&#x27;</span>]</span><br><span class="line">images = [rgb_img, Roberts]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, i + <span class="number">1</span>), plt.imshow(images[i], <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.title(titles[i])</span><br><span class="line">    plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>最终结果如下：</p><img src="39.png" style="zoom: 80%;" /><h2 id="Prewitt-算子"><strong>Prewitt 算子</strong></h2><p>Prewitt 算子是一种一阶微分算子的边缘检测，利用像素点上下、左右邻点的灰度差，在边缘处达到极值检测边缘，去掉部分伪边缘，对噪声具有平滑作用。</p><p>由于 Prewitt 算子采用 3 * 3 模板对区域内的像素值进行计算，而 Robert 算子的模板为 2 * 2 ，故 Prewitt 算子的边缘检测结果在水平方向和垂直方向均比 Robert 算子更加明显。<strong>Prewitt算子适合用来识别噪声较多、灰度渐变的图像</strong>。</p><p>Prewitt 算子的模版如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mi>d</mi><mi>x</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.1600em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(3)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">dx =  \left[\begin{matrix}1 &amp; 0 &amp; -1 \\1 &amp; 0 &amp; -1 \\ 1 &amp; 0 &amp; -1\end{matrix}\right] \tag{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-3.3970000000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span style="height:0.016em;width:0.667em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='0.016em' style='width:0.667em' viewBox='0 0 667 16' preserveAspectRatio='xMinYMin'><path d='M319 0 H403 V16 H319z M319 0 H403 V16 H319z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-3.3970000000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span style="height:0.016em;width:0.667em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='0.016em' style='width:0.667em' viewBox='0 0 667 16' preserveAspectRatio='xMinYMin'><path d='M263 0 H347 V16 H263z M263 0 H347 V16 H263z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">3</span></span><span class="mord">)</span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mi>d</mi><mi>y</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.1600em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(3)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">dy =  \left[\begin{matrix}-1 &amp; -1 &amp; -1 \\0 &amp; 0 &amp; 0 \\ 1 &amp; 1 &amp; 1\end{matrix}\right] \tag{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-3.3970000000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span style="height:0.016em;width:0.667em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='0.016em' style='width:0.667em' viewBox='0 0 667 16' preserveAspectRatio='xMinYMin'><path d='M319 0 H403 V16 H319z M319 0 H403 V16 H319z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-3.3970000000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span style="height:0.016em;width:0.667em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='0.016em' style='width:0.667em' viewBox='0 0 667 16' preserveAspectRatio='xMinYMin'><path d='M263 0 H347 V16 H263z M263 0 H347 V16 H263z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">3</span></span><span class="mord">)</span></span></span></span></span></span></p><p>在代码实现上， Prewitt 算子的实现过程与 Roberts 算子比较相似，我就不多介绍，直接贴代码了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">img = cv.imread(<span class="string">&#x27;maliao.jpg&#x27;</span>, cv.COLOR_BGR2GRAY)</span><br><span class="line">rgb_img = cv.cvtColor(img, cv.COLOR_BGR2RGB)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 灰度化处理图像</span></span><br><span class="line">grayImage = cv.cvtColor(img, cv.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prewitt 算子</span></span><br><span class="line">kernelx = np.array([[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>]],dtype=<span class="built_in">int</span>)</span><br><span class="line">kernely = np.array([[-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],[-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],[-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]],dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">x = cv.filter2D(grayImage, cv.CV_16S, kernelx)</span><br><span class="line">y = cv.filter2D(grayImage, cv.CV_16S, kernely)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转 uint8 ,图像融合</span></span><br><span class="line">absX = cv.convertScaleAbs(x)</span><br><span class="line">absY = cv.convertScaleAbs(y)</span><br><span class="line">Prewitt = cv.addWeighted(absX, <span class="number">0.5</span>, absY, <span class="number">0.5</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">titles = [<span class="string">&#x27;原始图像&#x27;</span>, <span class="string">&#x27;Prewitt 算子&#x27;</span>]</span><br><span class="line">images = [rgb_img, Prewitt]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, i + <span class="number">1</span>), plt.imshow(images[i], <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.title(titles[i])</span><br><span class="line">    plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="40.png" style="zoom: 80%;" /><p>从结果上来看， Prewitt 算子图像锐化提取的边缘轮廓，其效果图的边缘检测结果比 Robert 算子更加明显。</p><h2 id="Sobel-算子"><strong>Sobel 算子</strong></h2><p>Sobel 算子的中文名称是索贝尔算子，是一种用于边缘检测的离散微分算子，它结合了高斯平滑和微分求导。</p><p><strong>Sobel 算子在 Prewitt 算子的基础上增加了权重的概念，认为相邻点的距离远近对当前像素点的影响是不同的，距离越近的像素点对应当前像素的影响越大，从而实现图像锐化并突出边缘轮廓</strong>。</p><p>算法模版如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mi>d</mi><mi>x</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.1600em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>2</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(3)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">dx =  \left[\begin{matrix}1 &amp; 0 &amp; -1 \\2 &amp; 0 &amp; -2 \\ 1 &amp; 0 &amp; -1\end{matrix}\right] \tag{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-3.3970000000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span style="height:0.016em;width:0.667em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='0.016em' style='width:0.667em' viewBox='0 0 667 16' preserveAspectRatio='xMinYMin'><path d='M319 0 H403 V16 H319z M319 0 H403 V16 H319z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">2</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-3.3970000000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span style="height:0.016em;width:0.667em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='0.016em' style='width:0.667em' viewBox='0 0 667 16' preserveAspectRatio='xMinYMin'><path d='M263 0 H347 V16 H263z M263 0 H347 V16 H263z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">3</span></span><span class="mord">)</span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mi>d</mi><mi>y</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.1600em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>2</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(3)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">dy =  \left[\begin{matrix}-1 &amp; -2 &amp; -1 \\0 &amp; 0 &amp; 0 \\ 1 &amp; 2 &amp; 1\end{matrix}\right] \tag{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-3.3970000000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span style="height:0.016em;width:0.667em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='0.016em' style='width:0.667em' viewBox='0 0 667 16' preserveAspectRatio='xMinYMin'><path d='M319 0 H403 V16 H319z M319 0 H403 V16 H319z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">2</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-3.3970000000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span style="height:0.016em;width:0.667em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='0.016em' style='width:0.667em' viewBox='0 0 667 16' preserveAspectRatio='xMinYMin'><path d='M263 0 H347 V16 H263z M263 0 H347 V16 H263z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">3</span></span><span class="mord">)</span></span></span></span></span></span></p><p>Sobel 算子根据像素点上下、左右邻点灰度加权差，在边缘处达到极值这一现象检测边缘。对噪声具有平滑作用，提供较为精确的边缘方向信息。因为 Sobel 算子结合了高斯平滑和微分求导（分化），因此结果会具有更多的抗噪性，当对精度要求不是很高时， Sobel 算子是一种较为常用的边缘检测方法。</p><p>Sobel 算子近似梯度的大小的计算公式如下：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mo>=</mo><msqrt><mrow><msubsup><mi>d</mi><mi>x</mi><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>d</mi><mi>y</mi><mn>2</mn></msubsup></mrow></msqrt><mrow></mrow></mrow><annotation encoding="application/x-tex">G=\sqrt{d_x^2+d_y^2}{}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.84em;vertical-align:-0.6765000000000001em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1635em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7401079999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.1235em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.8800000000000001em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.8800000000000001em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6765000000000001em;"><span></span></span></span></span></span><span class="mord"></span></span></span></span></p><p>梯度方向的计算公式如下：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mo>=</mo><msup><mrow><mi>tan</mi><mo>⁡</mo></mrow><mrow><mo>−</mo><mn>1</mn></mrow></msup><mrow><mo stretchy="false">(</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>d</mi><mi>y</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac></mstyle><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex">\theta=\tan^{-1}{(\dfrac{dy}{dx})}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mop"><span class="mop">tan</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8190879999999999em;"><span style="top:-3.06798em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></span></p><p>如果以上的角度 θ 等于零，即代表图像该处拥有纵向边缘，左方较右方暗。</p><p>在 Python 中，为我们提供了 <code>Sobel()</code> 函数进行运算，整体处理过程和前面的类似，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">img = cv.imread(<span class="string">&#x27;maliao.jpg&#x27;</span>, cv.COLOR_BGR2GRAY)</span><br><span class="line">rgb_img = cv.cvtColor(img, cv.COLOR_BGR2RGB)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 灰度化处理图像</span></span><br><span class="line">grayImage = cv.cvtColor(img, cv.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sobel 算子</span></span><br><span class="line">x = cv.Sobel(grayImage, cv.CV_16S, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">y = cv.Sobel(grayImage, cv.CV_16S, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转 uint8 ,图像融合</span></span><br><span class="line">absX = cv.convertScaleAbs(x)</span><br><span class="line">absY = cv.convertScaleAbs(y)</span><br><span class="line">Sobel = cv.addWeighted(absX, <span class="number">0.5</span>, absY, <span class="number">0.5</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">titles = [<span class="string">&#x27;原始图像&#x27;</span>, <span class="string">&#x27;Sobel 算子&#x27;</span>]</span><br><span class="line">images = [rgb_img, Sobel]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, i + <span class="number">1</span>), plt.imshow(images[i], <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.title(titles[i])</span><br><span class="line">    plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="41.png" style="zoom: 80%;" /><h2 id="Laplacian-算子"><strong>Laplacian 算子</strong></h2><p>拉普拉斯（ Laplacian ）算子是 n 维欧几里德空间中的一个二阶微分算子，常用于图像增强领域和边缘提取。</p><p><strong>Laplacian 算子的核心思想：判断图像中心像素灰度值与它周围其他像素的灰度值，如果中心像素的灰度更高，则提升中心像素的灰度；反之降低中心像素的灰度，从而实现图像锐化操作</strong>。</p><p>在实现过程中， Laplacian 算子通过对邻域中心像素的四方向或八方向求梯度，再将梯度相加起来判断中心像素灰度与邻域内其他像素灰度的关系，最后通过梯度运算的结果对像素灰度进行调整。</p><p>Laplacian 算子分为四邻域和八邻域，四邻域是对邻域中心像素的四方向求梯度，八邻域是对八方向求梯度。</p><p>四邻域模板如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mi>H</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.1600em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(3)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">H =  \left[\begin{matrix}0 &amp; -1 &amp; 0 \\-1 &amp; 4 &amp; -1 \\ 0 &amp; -1 &amp; 0\end{matrix}\right] \tag{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-3.3970000000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span style="height:0.016em;width:0.667em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='0.016em' style='width:0.667em' viewBox='0 0 667 16' preserveAspectRatio='xMinYMin'><path d='M319 0 H403 V16 H319z M319 0 H403 V16 H319z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-3.3970000000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span style="height:0.016em;width:0.667em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='0.016em' style='width:0.667em' viewBox='0 0 667 16' preserveAspectRatio='xMinYMin'><path d='M263 0 H347 V16 H263z M263 0 H347 V16 H263z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">3</span></span><span class="mord">)</span></span></span></span></span></span></p><p>八邻域模板如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mi>H</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.1600em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(3)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">H =  \left[\begin{matrix}-1 &amp; -1 &amp; -1 \\-1 &amp; 4 &amp; -1 \\ -1 &amp; -1 &amp; -1\end{matrix}\right] \tag{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-3.3970000000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span style="height:0.016em;width:0.667em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='0.016em' style='width:0.667em' viewBox='0 0 667 16' preserveAspectRatio='xMinYMin'><path d='M319 0 H403 V16 H319z M319 0 H403 V16 H319z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-3.3970000000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span style="height:0.016em;width:0.667em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='0.016em' style='width:0.667em' viewBox='0 0 667 16' preserveAspectRatio='xMinYMin'><path d='M263 0 H347 V16 H263z M263 0 H347 V16 H263z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">3</span></span><span class="mord">)</span></span></span></span></span></span></p><p>通过模板可以发现，当邻域内像素灰度相同时，模板的卷积运算结果为0；当中心像素灰度高于邻域内其他像素的平均灰度时，模板的卷积运算结果为正数；当中心像素的灰度低于邻域内其他像素的平均灰度时，模板的卷积为负数。对卷积运算的结果用适当的衰弱因子处理并加在原中心像素上，就可以实现图像的锐化处理。</p><p>在 OpenCV 中， Laplacian 算子被封装在 <code>Laplacian()</code> 函数中，其主要是利用Sobel算子的运算，通过加上 Sobel 算子运算出的图像 x 方向和 y 方向上的导数，得到输入图像的图像锐化结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">img = cv.imread(<span class="string">&#x27;maliao.jpg&#x27;</span>, cv.COLOR_BGR2GRAY)</span><br><span class="line">rgb_img = cv.cvtColor(img, cv.COLOR_BGR2RGB)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 灰度化处理图像</span></span><br><span class="line">grayImage = cv.cvtColor(img, cv.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Laplacian</span></span><br><span class="line">dst = cv.Laplacian(grayImage, cv.CV_16S, ksize = <span class="number">3</span>)</span><br><span class="line">Laplacian = cv.convertScaleAbs(dst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">titles = [<span class="string">&#x27;原始图像&#x27;</span>, <span class="string">&#x27;Laplacian 算子&#x27;</span>]</span><br><span class="line">images = [rgb_img, Laplacian]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, i + <span class="number">1</span>), plt.imshow(images[i], <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.title(titles[i])</span><br><span class="line">    plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="42.png" style="zoom: 80%;" /><h2 id="最后"><strong>最后</strong></h2><p><strong>边缘检测算法主要是基于图像强度的一阶和二阶导数，但导数通常对噪声很敏感，因此需要采用滤波器来过滤噪声，并调用图像增强或阈值化算法进行处理，最后再进行边缘检测</strong>。</p><p>最后我先使用高斯滤波去噪之后，再进行边缘检测：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">img = cv.imread(<span class="string">&#x27;maliao.jpg&#x27;</span>)</span><br><span class="line">rgb_img = cv.cvtColor(img, cv.COLOR_BGR2RGB)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 灰度化处理图像</span></span><br><span class="line">gray_image = cv.cvtColor(img, cv.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 高斯滤波</span></span><br><span class="line">gaussian_blur = cv.GaussianBlur(gray_image, (<span class="number">3</span>, <span class="number">3</span>), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Roberts 算子</span></span><br><span class="line">kernelx = np.array([[-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>]], dtype = <span class="built_in">int</span>)</span><br><span class="line">kernely = np.array([[<span class="number">0</span>, -<span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>]], dtype = <span class="built_in">int</span>)</span><br><span class="line">x = cv.filter2D(gaussian_blur, cv.CV_16S, kernelx)</span><br><span class="line">y = cv.filter2D(gaussian_blur, cv.CV_16S, kernely)</span><br><span class="line">absX = cv.convertScaleAbs(x)</span><br><span class="line">absY = cv.convertScaleAbs(y)</span><br><span class="line">Roberts = cv.addWeighted(absX, <span class="number">0.5</span>, absY, <span class="number">0.5</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prewitt 算子</span></span><br><span class="line">kernelx = np.array([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>]], dtype=<span class="built_in">int</span>)</span><br><span class="line">kernely = np.array([[-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]], dtype=<span class="built_in">int</span>)</span><br><span class="line">x = cv.filter2D(gaussian_blur, cv.CV_16S, kernelx)</span><br><span class="line">y = cv.filter2D(gaussian_blur, cv.CV_16S, kernely)</span><br><span class="line">absX = cv.convertScaleAbs(x)</span><br><span class="line">absY = cv.convertScaleAbs(y)</span><br><span class="line">Prewitt = cv.addWeighted(absX, <span class="number">0.5</span>, absY, <span class="number">0.5</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sobel 算子</span></span><br><span class="line">x = cv.Sobel(gaussian_blur, cv.CV_16S, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">y = cv.Sobel(gaussian_blur, cv.CV_16S, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">absX = cv.convertScaleAbs(x)</span><br><span class="line">absY = cv.convertScaleAbs(y)</span><br><span class="line">Sobel = cv.addWeighted(absX, <span class="number">0.5</span>, absY, <span class="number">0.5</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉普拉斯算法</span></span><br><span class="line">dst = cv.Laplacian(gaussian_blur, cv.CV_16S, ksize = <span class="number">3</span>)</span><br><span class="line">Laplacian = cv.convertScaleAbs(dst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示图像</span></span><br><span class="line">titles = [<span class="string">&#x27;Source Image&#x27;</span>, <span class="string">&#x27;Gaussian Image&#x27;</span>, <span class="string">&#x27;Roberts Image&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;Prewitt Image&#x27;</span>,<span class="string">&#x27;Sobel Image&#x27;</span>, <span class="string">&#x27;Laplacian Image&#x27;</span>]</span><br><span class="line">images = [rgb_img, gaussian_blur, Roberts, Prewitt, Sobel, Laplacian]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> np.arange(<span class="number">6</span>):</span><br><span class="line">   plt.subplot(<span class="number">2</span>, <span class="number">3</span>, i+<span class="number">1</span>), plt.imshow(images[i], <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">   plt.title(titles[i])</span><br><span class="line">   plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="43.png" style="zoom: 80%;" /><h1>canny边缘检测</h1><img src="44.png" style="zoom: 100%;" /><h2 id="非极大抑制">非极大抑制</h2><img src="45.png" style="zoom: 100%;" /><img src="46.png" style="zoom: 100%;" /><h2 id="双阈值确定边缘">双阈值确定边缘</h2><img src="47.png" style="zoom: 100%;" /><h2 id="函数-9">函数</h2><p>以上几步操作都封装好了，可以直接调用。</p><img src="48.png" style="zoom: 100%;" /><p>样例：threshold两个值较小时精度较高</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    src = cv2.imread(<span class="string">&quot;image\\0.png&quot;</span>, -<span class="number">1</span>)</span><br><span class="line">    cv2.imshow(<span class="string">&quot;src&quot;</span>, src)</span><br><span class="line">    dst1 = cv2.Canny(src,<span class="number">128</span>,<span class="number">255</span>)</span><br><span class="line">    cv2.imshow(<span class="string">&quot;dst1&quot;</span>, dst1)</span><br><span class="line">    dst = cv2.Canny(src, <span class="number">32</span>, <span class="number">128</span>)</span><br><span class="line">    cv2.imshow(<span class="string">&quot;dst2&quot;</span>, dst)</span><br><span class="line">    cv2.waitKey()</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="61.png" style="zoom: 60%;" /><h1>图像金字塔</h1><p>图像金字塔是图像多尺度表达的一种，是一种以多分辨率来解释图像的有效但概念简单的结构。一幅图像的金字塔是一系列以金字塔形状排列的分辨率逐步降低，且来源于同一张原始图的图像集合。其通过梯次向下采样获得，直到达到某个终止条件才停止采样。我们将一层一层的图像比喻成金字塔，层级越高，则图像越小，分辨率越低。</p><h2 id="高斯金字塔">高斯金字塔</h2><p>高斯金字塔是由底部的最大分辨率图像逐次向下采样得到的一系列图像。最下面的图像分辨率最高，越往上图像分辨率越低。</p><p><strong>这个过程实际上就是一个重复高斯平滑并重新对图像采样的过程</strong>。</p><ol><li>对于原始图像先进行一次高斯平滑处理，使用高斯核（<code>5 * 5</code>）进行一次卷积处理。下面是 <code>5 * 5</code> 的高斯核。</li></ol><img src="49.png" style="zoom: 100%;" /><ol><li>接下来是对图像进行采样，这一步会去除图像中的偶数行和奇数列，从而得到一张图像。</li><li>再然后是重复上面两步，直到得到最终的目标图像为止。</li></ol><p>从上面的步骤可以看出，再每次循环中，得到的结果图像只有原图像的 1/4 大小（横纵向均做隔行采样）。</p><blockquote><p>注意：向下采样会逐渐丢失图像信息，属于非线性的处理，此过程不可逆，属于有损处理。</p></blockquote><p>高斯金字塔向上采样：</p><ol><li>将图像在每个方向扩大为原来的两倍，新增的行和列以 0 填充。</li><li>使用高斯核（<code>5 * 5</code>）对得到的图像进行一次高斯平滑处理，获得 「新增像素」的近似值。</li></ol><blockquote><p>注意：此过程与向下采样的过程一样，属于非线性处理，无法逆转，属于有损处理。</p></blockquote><p>此过程得到的图像为放大后的图像，与原图相比会比较模糊，因为在缩放的过程中丢失了一些图像信息，如果想在缩小和放大整个过程中减少信息的丢失。</p><p>如果在缩放过程中想要减少图像信息的丢失，这就引出了第二个图像金字塔 —— 「拉普拉斯金字塔」 。</p><h2 id="拉普拉斯金字塔">拉普拉斯金字塔</h2><p>拉普拉斯金字塔可以认为是残差金字塔，用来存储下采样后图片与原始图片的差异。</p><p>上面我们介绍了基于高斯金字塔，一个原始图像 <code>Gi</code> ，先进行向下采样得到 <code>G(i-1)</code> ，再对 <code>G(i-1)</code> 进行向上采样得到 <code>Up(Down(Gi))</code> ，最终得到的 <code>Up(Down(Gi))</code> 与原始的 <code>Gi</code> 是存在差异的。</p><p>这是因为向下采样丢失的信息并不能由向上采样来进行恢复，高斯金字塔是一种有损的采样方式。</p><p>如果我们想要完全恢复原始图像，那么我们在进行采样的时候就需要保留差异信息。</p><p>这就是拉普拉斯金字塔的核心思想，<strong>每次向下采样后，将再次向上采样，得到向上采样的 <code>Up(Down(Gi))</code> 后，记录 <code>Up(Down(Gi))</code> 与 <code>Gi</code> 的差异信息</strong>。</p><img src="50.png" style="zoom: 100%;" /><h2 id="函数-10">函数</h2><p>OpenCV 为向上采样和向下采样提供了两个函数：<code>pyrDown()</code> 和 <code>pyrUp()</code> 。</p><p><code>pyrDown()</code> 的原函数如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def pyrDown(src, dst=None, dstsize=None, borderType=None)</span><br></pre></td></tr></table></figure><ul><li>src: 表示输入图像。</li><li>dst: 表示输出图像，它与src类型、大小相同。</li><li>dstsize: 表示降采样之后的目标图像的大小。</li><li>borderType: 表示表示图像边界的处理方式。</li></ul><blockquote><p>注意：dstsize 参数是有默认值的，调用函数的时候不指定第三个参数，那么这个值是按照 Size((src.cols+1)/2, (src.rows+1)/2) 计算的。而且不管如何指定这个参数，一定必须保证满足以下关系式：|dstsize.width * 2 - src.cols| ≤ 2;  |dstsize.height * 2 - src.rows| ≤ 2。也就是说降采样的意思其实是把图像的尺寸缩减一半，行和列同时缩减一半。</p></blockquote><p><code>pyrUp()</code> 的原函数如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def pyrUp(src, dst=None, dstsize=None, borderType=None)</span><br></pre></td></tr></table></figure><ul><li>src: 表示输入图像。</li><li>dst: 表示输出图像，它与src类型、大小相同。</li><li>dstsize: 表示降采样之后的目标图像的大小。</li><li>borderType: 表示表示图像边界的处理方式。</li></ul><p>参数释义和上面的 <code>pyrDown()</code> 保持一致。</p><p>下面是高斯金字塔和拉普拉斯金字塔的代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line"><span class="comment">#高斯金字塔</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gaussian_pyramid</span>(<span class="params">image</span>):</span></span><br><span class="line">    level = <span class="number">3</span><span class="comment">#设置金字塔的层数为3</span></span><br><span class="line">    temp = image.copy()  <span class="comment">#拷贝图像</span></span><br><span class="line">    gaussian_images = []  <span class="comment">#建立一个空列表</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(level):</span><br><span class="line">        dst = cv.pyrDown(temp)   <span class="comment">#先对图像进行高斯平滑，然后再进行降采样（将图像尺寸行和列方向缩减一半）</span></span><br><span class="line">        gaussian_images.append(dst)  <span class="comment">#在列表末尾添加新的对象</span></span><br><span class="line">        cv.imshow(<span class="string">&quot;gaussian&quot;</span>+<span class="built_in">str</span>(i), dst)</span><br><span class="line">        temp = dst.copy()</span><br><span class="line">    <span class="keyword">return</span> gaussian_images</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#拉普拉斯金字塔</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">laplacian_pyramid</span>(<span class="params">image</span>):</span></span><br><span class="line">    gaussian_images = gaussian_pyramid(image)    <span class="comment">#做拉普拉斯金字塔必须用到高斯金字塔的结果</span></span><br><span class="line">    level = <span class="built_in">len</span>(gaussian_images)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(level-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> (i-<span class="number">1</span>) &lt; <span class="number">0</span>:</span><br><span class="line">            expand = cv.pyrUp(gaussian_images[i], dstsize = image.shape[:<span class="number">2</span>])</span><br><span class="line">            laplacian = cv.subtract(image, expand)</span><br><span class="line">            <span class="comment"># 展示差值图像</span></span><br><span class="line">            cv.imshow(<span class="string">&quot;laplacian_down_&quot;</span>+<span class="built_in">str</span>(i), laplacian)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            expand = cv.pyrUp(gaussian_images[i], dstsize = gaussian_images[i-<span class="number">1</span>].shape[:<span class="number">2</span>])</span><br><span class="line">            laplacian = cv.subtract(gaussian_images[i-<span class="number">1</span>], expand)</span><br><span class="line">            <span class="comment"># 展示差值图像</span></span><br><span class="line">            cv.imshow(<span class="string">&quot;laplacian_down_&quot;</span>+<span class="built_in">str</span>(i), laplacian)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">src = cv.imread(<span class="string">&#x27;maliao.jpg&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(src.shape)</span><br><span class="line"><span class="comment"># 先将图像转化成正方形，否则会报错</span></span><br><span class="line">input_image = cv.resize(src, (<span class="number">560</span>, <span class="number">560</span>))</span><br><span class="line"><span class="comment"># 设置为 WINDOW_NORMAL 可以任意缩放</span></span><br><span class="line">cv.namedWindow(<span class="string">&#x27;input_image&#x27;</span>, cv.WINDOW_AUTOSIZE)</span><br><span class="line">cv.imshow(<span class="string">&#x27;input_image&#x27;</span>, src)</span><br><span class="line">laplacian_pyramid(src)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h1>图像轮廓</h1><p>边缘检测虽然能够检测出边缘，但边缘是不连续的，检测到的边缘并不是一个整体。<strong>图像轮廓是指将边缘连接起来形成的一个整体， 用千后续的计算</strong>。<br>OpenCV提供了查找图像轮廓的函数<code>cv2.findContours()</code>，该函数能够查找图像内的轮廓信息，而函数<code>cv2.drawContours()</code> 能够将轮廓绘制出来。<br>图像轮廓是图像中非常重要的一个特征信息，通过对图像轮廓的操作，我们能够获取目标图像的大小 、位置 、方向等信息。</p><h2 id="查找与绘制">查找与绘制</h2><p>一个轮廓对应着<strong>一系列的点</strong>，这些点以某种方式表示图像中的一条曲线。在 OpenCV 中，函数<code>cv2.findContours()</code>用于查找图像的轮廓，并能够根据参数返回特定表示方式的轮廓（曲线）。函数<code>cv2.drawContours()</code>能够将查找到的轮廓绘制到图像上，该函数可以根据参数在图像上绘制不同样式（实心／空心点， 以及线条的不同粗细、颜色等）的轮廓，可以绘制全部轮廓也可以仅绘制指定的轮廓。</p><h3 id="查找轮廓">查找轮廓</h3><p>在 OpenCV 中，轮廓提取函数 <code>findContours()</code> 实现的是 1985 年由一名叫做 <code>Satoshi Suzuki</code> 的人发表的一篇论文中的算法，如下：</p><blockquote><p>Satoshi Suzuki and others. Topological structural analysis of digitized binary images by border following. Computer Vision, Graphics, and Image Processing, 30(1):32–46, 1985.</p></blockquote><p>对原理感兴趣的同学可以去搜搜看，不是很难理解。</p><p>先看一个示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">&quot;black.png&quot;</span>)</span><br><span class="line">gray_img = cv.cvtColor(img, cv.COLOR_BGR2GRAY)</span><br><span class="line"><span class="comment"># 降噪</span></span><br><span class="line">ret, thresh = cv.threshold(gray_img, <span class="number">127</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment"># 寻找轮廓</span></span><br><span class="line">contours, hierarchy = cv.findContours(thresh, cv.RETR_TREE, cv.CHAIN_APPROX_NONE)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(contours[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><p>查找轮廓使用的函数为 <code>findContours()</code> ，它的原型函数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">contours, hierarchy=cv2.findContours(image, mode, method[, contours[, hierarchy[, offset ]]])  </span><br></pre></td></tr></table></figure><ul><li>contours：返回的图像轮廓，是个List，contours[i]是第i个轮廓，contours[i][j]是第i个轮廓的第j个点</li><li>hierarchy：图像的拓扑信息（图像层次）</li><li>image：源图像。</li><li>mode：表示轮廓检索模式。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cv2.RETR_EXTERNAL 表示只检测外轮廓。</span><br><span class="line">cv2.RETR_LIST 检测的轮廓不建立等级关系。</span><br><span class="line">cv2.RETR_CCOMP 建立两个等级的轮廓，上面的一层为外边界，里面的一层为内孔的边界信息。如果内孔内还有一个连通物体，这个物体的边界也在顶层。</span><br><span class="line">cv2.RETR_TREE 建立一个等级树结构的轮廓。</span><br></pre></td></tr></table></figure><ul><li>method：表示轮廓近似方法。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cv2.CHAIN_APPROX_NONE 存储所有的轮廓点。</span><br><span class="line">cv2.CHAIN_APPROX_SIMPLE 压缩水平方向，垂直方向，对角线方向的元素，只保留该方向的终点坐标，例如一个矩形轮廓只需4个点来保存轮廓信息。</span><br></pre></td></tr></table></figure><p>这里可以使用 <code>print(len(contours[0]))</code> 函数将包含的点的数量打印出来，比如在上面的示例中，使用参数 <code>cv2.CHAIN_APPROX_NONE</code> 轮廓点有 1382 个，而使用参数 <code>cv2.CHAIN_APPROX_SIMPLE</code> 则轮廓点只有 4 个。</p><img src="62.png" style="zoom: 100%;" /><h3 id="绘制轮廓">绘制轮廓</h3><p>绘制轮廓使用到的 OpenCV 为我们提供的 <code>drawContours()</code> 这个函数，下面是它的三个简单的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># To draw all the contours in an image:</span><br><span class="line">cv2.drawContours(img, contours, -1, (0,255,0), 3)</span><br><span class="line"># To draw an individual contour, say 4th contour:</span><br><span class="line">cv2.drawContours(img, contours, 3, (0,255,0), 3)</span><br><span class="line"># But most of the time, below method will be useful:</span><br><span class="line">cnt = contours[4]</span><br><span class="line">cv2.drawContours(img, [cnt], 0, (0,255,0), 3)</span><br></pre></td></tr></table></figure><p><code>drawContours()</code> 函数中有五个参数：</p><ul><li>第一个参数是源图像。</li><li>第二个参数是应该包含轮廓的列表。</li><li>第三个参数是列表索引，用来选择要绘制的轮廓，为-1时表示绘制所有轮廓。</li><li>第四个参数是轮廓颜色。</li><li>第五个参数是轮廓线的宽度，为 -1 时表示填充。</li></ul><p>我们接着前面的示例把使用 <code>findContours()</code> 找出来的轮廓绘制出来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import cv2 as cv</span><br><span class="line"></span><br><span class="line">img = cv.imread(&quot;black.png&quot;)</span><br><span class="line">gray_img = cv.cvtColor(img, cv.COLOR_BGR2GRAY)</span><br><span class="line">cv.imshow(&quot;img&quot;, img)</span><br><span class="line"># 降噪</span><br><span class="line">ret, thresh = cv.threshold(gray_img, 127, 255, 0)</span><br><span class="line"># 寻找轮廓</span><br><span class="line">contours, hierarchy = cv.findContours(gray_img, cv.RETR_TREE, cv.CHAIN_APPROX_NONE)</span><br><span class="line"></span><br><span class="line">print(len(contours[0]))</span><br><span class="line"></span><br><span class="line"># 绘制绿色轮廓</span><br><span class="line">cv.drawContours(img, contours, -1, (0,255,0), 3)</span><br><span class="line"></span><br><span class="line">cv.imshow(&quot;draw&quot;, img)</span><br><span class="line"></span><br><span class="line">cv.waitKey(0)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="63.png" style="zoom: 100%;" /><h3 id="使用：提取前景">使用：提取前景</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    src = cv2.imread(<span class="string">&quot;image\\0.png&quot;</span>)</span><br><span class="line">    cv2.imshow(<span class="string">&quot;src&quot;</span>, src)</span><br><span class="line">    grey = cv2.cvtColor(src, cv2.COLOR_BGR2GRAY)  <span class="comment"># 灰度图</span></span><br><span class="line">    ret, binary = cv2.threshold(grey, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY)  <span class="comment"># 二值化</span></span><br><span class="line">    counters, hierarchy = cv2.findContours(binary, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)  <span class="comment"># 获取轮廓</span></span><br><span class="line">    mask = np.zeros(src.shape, np.uint8)  <span class="comment"># 按照原图大小创建掩模</span></span><br><span class="line">    mask = cv2.drawContours(mask, counters, -<span class="number">1</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), -<span class="number">1</span>)  <span class="comment"># 给掩模赋值为前景图的实心轮廓</span></span><br><span class="line">    cv2.imshow(<span class="string">&quot;mask&quot;</span>, mask)</span><br><span class="line">    loc = cv2.bitwise_and(src, mask)</span><br><span class="line">    cv2.imshow(<span class="string">&quot;result&quot;</span>, loc)</span><br><span class="line">    cv2.waitKey()</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="64.png" style="zoom: 100%;" /><p><strong>以上的代码只针对样例图像，并不普适</strong></p><h2 id="矩特征">矩特征</h2><h3 id="矩的计算：moments">矩的计算：<code>moments()</code></h3><p><code>moments()</code> 函数会将计算得到的矩以字典形式返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">&quot;number.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">gray_img = cv.cvtColor(img, cv.COLOR_BGR2GRAY)</span><br><span class="line"><span class="comment"># 降噪</span></span><br><span class="line">ret, thresh = cv.threshold(gray_img, <span class="number">127</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment"># 寻找轮廓</span></span><br><span class="line">contours, hierarchy = cv.findContours(gray_img, cv.RETR_TREE, cv.CHAIN_APPROX_NONE)</span><br><span class="line"></span><br><span class="line">cnt = contours[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 获取图像矩</span></span><br><span class="line">M = cv.moments(cnt)</span><br><span class="line"><span class="built_in">print</span>(M)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 质心</span></span><br><span class="line">cx = <span class="built_in">int</span>(M[<span class="string">&#x27;m10&#x27;</span>] / M[<span class="string">&#x27;m00&#x27;</span>])</span><br><span class="line">cy = <span class="built_in">int</span>(M[<span class="string">&#x27;m01&#x27;</span>] / M[<span class="string">&#x27;m00&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;质心为：[<span class="subst">&#123;cx&#125;</span>, <span class="subst">&#123;cy&#125;</span>]&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这时，我们取得了这个图像的矩，矩 M 中包含了很多轮廓的特征信息，除了示例中展示的质心的计算，还有如 M[‘m00’] 表示轮廓面积。</p><img src="65.png" style="zoom: 100%;" /><p>​        在位置发生变化时，虽然轮廓的面积、周长等特征不变，但是更高阶的特征会随着位置的变化而发生变化。在很多情况下，我们希望比较不同位置的两个对象的一致性。解决这一问题的方法是引入<strong>中心矩</strong>。中心矩通过城去均值而获取平移不变性，因而能够比较不同位置的两个对象是否一致。很明显，<strong>中心矩具有的平移不变性，使它能够忽略两个对象的位置关系，帮助我们比较不同位置上两个对象的一致性</strong>。</p><p>​        除了考虑平移不变性外，我们还会考虑经过缩放后大小不一致的对象的一致性。也就是说，我们希望图像在缩放前后能够拥有一个稳定的特征值。也就是说 ，让图像在缩放前后具有同样的特征值。显然，中心矩不具有这个属性。例如，两个形状一致、大小不一的对象，其中心矩是有差异的。</p><p>​        <strong>归一化中心矩通过除以物体总尺寸而获得缩放不变性</strong>。它通过上述计算提取对象的归一化中心矩属性值，该属性值不仅具有平移不变性， 还具有缩放不变性。在OpenCV中， 函数<code>cv2.moments()</code>会同时计算上述空间矩、中心矩和归一化中心矩。</p><h3 id="Hu矩">Hu矩</h3><p>​        Hu矩是归一化中心矩的线性组合。Hu矩在图像旋转、缩放 、平移等操作后，仍能保持矩的不变性，所以经常会使用Hu距来识别图像的特征。<br>​        在OpenCV中，使用函数<code>cv2.HuMoments() </code>可以得到Hu距。该函数使用<code>cv2.moments()</code>函 数的返回值作为参数，返回7个Hu矩值。</p><p>​        函数cv2.HuMoments(）的语法格式为：<br><code>hu=cv2.HuMoments (m) </code><br>​         式中返回值hu, 表示返回的Hu矩值；参数m, 是由函数<code>cv2.moments()</code>计算得到矩特征值。</p><img src="66.png" style="zoom: 100%;" /><p>最后一个参数直接置0即可。</p><h2 id="轮廓拟合">轮廓拟合</h2><h3 id="正矩形和最小矩形">正矩形和最小矩形</h3><p>轮廓外接矩形分为正矩形和最小矩形。使用 <code>cv2.boundingRect(cnt)</code> 来获取轮廓的外接正矩形，它不考虑物体的旋转，所以该矩形的面积一般不会最小；使用 <code>cv.minAreaRect(cnt)</code> 可以获取轮廓的外接最小矩形。</p><img src="67.png" style="zoom: 100%;" /><p>两者的区别如上图，绿线代表的是外接正矩形，红线代表的是外接最小矩形，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">&quot;number.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">gray_img = cv.cvtColor(img, cv.COLOR_BGR2GRAY)</span><br><span class="line"><span class="comment"># 降噪</span></span><br><span class="line">ret, thresh = cv.threshold(gray_img, <span class="number">127</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment"># 寻找轮廓</span></span><br><span class="line">contours, hierarchy = cv.findContours(gray_img, cv.RETR_TREE, cv.CHAIN_APPROX_NONE)</span><br><span class="line"></span><br><span class="line">cnt = contours[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 外接正矩形</span></span><br><span class="line">x, y, w, h = cv.boundingRect(cnt)</span><br><span class="line">cv.rectangle(img, (x, y), (x + w, y + h), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 外接最小矩形</span></span><br><span class="line">min_rect = cv.minAreaRect(cnt)</span><br><span class="line"><span class="built_in">print</span>(min_rect)</span><br><span class="line"></span><br><span class="line">box = cv.boxPoints(min_rect)</span><br><span class="line">box = np.int0(box)</span><br><span class="line">cv.drawContours(img, [box], <span class="number">0</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">cv.imshow(<span class="string">&quot;draw&quot;</span>, img)</span><br><span class="line"></span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><code>boundingRect(cnt)</code> 函数的返回值包含四个值，矩形框左上角的坐标 (x, y) 、宽度 w 和高度 h 。</p><p><code>minAreaRect(cnt)</code> 函数的返回值中还包含旋转信息，返回值信息为包括中心点坐标 (x,y)，宽高 (w, h) 和旋转角度。</p><p>参数<code>cnt</code>可以是灰度图或者轮廓。</p><h3 id="最小包围圆">最小包围圆</h3><p><code>center,radius = cv2.minEnclosingCircle(points)</code></p><ul><li>center是最小包围圆的中心</li><li>radius是半径</li><li>points是轮廓</li></ul><h3 id="最优拟合椭圆">最优拟合椭圆</h3><p><code>retval = cv2.fitEllipse(points)</code></p><p>众所周知每个椭圆都有相应的外接矩形，返回值<code>retval</code>包含外接矩形的质心、宽、高、旋转角度等参数信息。</p><h3 id="最优拟合直线">最优拟合直线</h3><img src="68.png" style="zoom: 100%;" /><h3 id="最小外包三角形">最小外包三角形</h3><p><code>retval,triangle = cv2.minEnclosingTriangle(points)</code></p><ul><li>retval：最小外包三角形的面积</li><li>triangle：最小外包三角形的三个顶点的集合</li></ul><h3 id="轮廓近似（逼近多边形）">轮廓近似（逼近多边形）</h3><p>根据我们指定的精度，它可以将轮廓形状近似为顶点数量较少的其他形状。它是由 Douglas-Peucker 算法实现的。</p><p>OpenCV 提供的函数是 <code>approxPolyDP(cnt, epsilon, close)</code></p><ul><li><p>第一个参数是轮廓。</p></li><li><p>第二个参数 epsilon 用于轮廓近似的精度，表示原始轮廓与其近似轮廓的最大距离，值越小，近似轮廓越拟合原轮廓。</p></li><li><p>第三个参数指定近似轮廓是否是闭合的，布尔类型。</p></li></ul><p>具体用法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import cv2 as cv</span><br><span class="line"></span><br><span class="line">img = cv.imread(&quot;number.png&quot;)</span><br><span class="line"></span><br><span class="line">gray_img = cv.cvtColor(img, cv.COLOR_BGR2GRAY)</span><br><span class="line"># 降噪</span><br><span class="line">ret, thresh = cv.threshold(gray_img, 127, 255, 0)</span><br><span class="line"># 寻找轮廓</span><br><span class="line">contours, hierarchy = cv.findContours(gray_img, cv.RETR_TREE, cv.CHAIN_APPROX_NONE)</span><br><span class="line"></span><br><span class="line">cnt = contours[0]</span><br><span class="line"></span><br><span class="line"># 计算 epsilon ，按照周长百分比进行计算，分别取周长 1% 和 10%</span><br><span class="line">epsilon_1 = 0.1 * cv.arcLength(cnt, True)</span><br><span class="line">epsilon_2 = 0.01 * cv.arcLength(cnt, True)</span><br><span class="line"></span><br><span class="line"># 进行多边形逼近</span><br><span class="line">approx_1 = cv.approxPolyDP(cnt, epsilon_1, True)</span><br><span class="line">approx_2 = cv.approxPolyDP(cnt, epsilon_2, True)</span><br><span class="line"></span><br><span class="line"># 画出多边形</span><br><span class="line">image_1 = cv.cvtColor(gray_img, cv.COLOR_GRAY2BGR)</span><br><span class="line">image_2 = cv.cvtColor(gray_img, cv.COLOR_GRAY2BGR)</span><br><span class="line"></span><br><span class="line">cv.polylines(image_1, [approx_1], True, (0, 0, 255), 2)</span><br><span class="line">cv.polylines(image_2, [approx_2], True, (0, 0, 255), 2)</span><br><span class="line">#这里的绘制函数会在后面讲到</span><br><span class="line">#可以用drawContours()代替</span><br><span class="line"></span><br><span class="line">cv.imshow(&quot;image_1&quot;, image_1)</span><br><span class="line">cv.imshow(&quot;image_2&quot;, image_2)</span><br><span class="line">cv.waitKey(0)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="69.png" style="zoom: 100%;" /><p>第一张图是 epsilon 为原始轮廓周长的 10% 时的近似轮廓，第二张图中绿线就是 epsilon 为原始轮廓周长的 1% 时的近似轮廓。</p><p><strong>现在使用的图像都是仅有一个轮廓的图像，处理的轮廓都是contours[0]。如果处理的原图像中有多个轮廓，则需要注意控制轮廓的索引，即 contours[i]中的 i 值，使其指向特定的轮廓</strong>。</p><h3 id="凸包">凸包</h3><p>凸包外观看起来与轮廓逼近相似，只不过它是物体最外层的「凸」多边形。</p><p>如下图，红色的部分为手掌的凸包，双箭头部分表示凸缺陷(Convexity Defects)，凸缺陷常用来进行手势识别等。</p><img src="70.png" style="zoom: 100%;" /><p>函数：</p><p><code>hull = cv2.convexHull(points[,clockwise[,returnPoints]])</code></p><ul><li>clockwise:布尔型值。 该值为True时，凸包角点将按顺时针方向排列；该值为False时， 则以逆时针方向排列凸包角点。</li><li>returnPoints:布尔型值。 默认值是True, 函数返回凸包角点的x/y轴坐标；当为 False时函数返回轮廓中凸包角点的索引。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import cv2 as cv</span><br><span class="line"></span><br><span class="line">img = cv.imread(&quot;number.png&quot;)</span><br><span class="line">gray_img = cv.cvtColor(img, cv.COLOR_BGR2GRAY)</span><br><span class="line"># 降噪</span><br><span class="line">ret, thresh = cv.threshold(gray_img, 127, 255, 0)</span><br><span class="line"># 寻找轮廓</span><br><span class="line">contours, hierarchy = cv.findContours(gray_img, cv.RETR_TREE, cv.CHAIN_APPROX_NONE)</span><br><span class="line">cnt = contours[0]</span><br><span class="line"># 绘制轮廓</span><br><span class="line">image = cv.cvtColor(gray_img, cv.COLOR_GRAY2BGR)</span><br><span class="line">cv.drawContours(image, contours, -1, (0, 0 , 255), 2)</span><br><span class="line"></span><br><span class="line"># 寻找凸包，得到凸包的角点</span><br><span class="line">hull = cv.convexHull(cnt)</span><br><span class="line"></span><br><span class="line"># 绘制凸包</span><br><span class="line">cv.polylines(image, [hull], True, (0, 255, 0), 2)</span><br><span class="line"></span><br><span class="line">cv.imshow(&quot;image&quot;, image)</span><br><span class="line">cv.waitKey(0)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="71.png" style="zoom: 100%;" /><p>还有一个函数，是可以用来判断图形是否凸形的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(cv.isContourConvex(hull)) # True</span><br></pre></td></tr></table></figure><p>它的返回值是 True 或者 False 。</p><h4 id="凸缺陷">凸缺陷</h4><p><code>convexityDefects = cv2.convexityDefects(contour,convexhull)</code></p><img src="72.png" style="zoom: 100%;" /><h2 id="形状场景算法比较轮廓">形状场景算法比较轮廓</h2><p>作为归一化中心矩的替代算法。</p><h3 id="计算形状场景距离">计算形状场景距离</h3><p>​        OpenCV提供了使用“距离”作为形状比较的度量标准。 这是因为形状之间的差异值和距离有相似之处， 比如二者都只能是零或者正数， 又比如当两个形状一模一样时距离值和差值都等于零。</p><p>​        OpenCV提供了函数<code>cv2.createShapeContextDistanceExtractor () </code>， 用于计算形状场景距离。其使用的”形状上下文算法”在计算距离时， 在每个点上附加一个“形状上下文“描述符， 让每个点都能够捕获剩余点相对于它的分布特征， 从而提供全局鉴别特征。</p><p>​        有关该函数的更多理论知识， 可以参考学者 Belongie 等人 2002 年在IEEE Transactions on Pattern Analysis &amp; Machine Intelligence上发表的论文Shape Matching and Object Recognition Using Shape Contexts。</p><p>函数<code>cv2.createShapeContextDistanceExtractor() </code>的语法格式为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">retval = cv2.createShapeContextDistanceExtractor ( </span><br><span class="line">[,nAngularBins[, </span><br><span class="line">nRadialBins[, </span><br><span class="line">innerRadius[, </span><br><span class="line">outerRadius[, </span><br><span class="line">iterations[, </span><br><span class="line">comparer[, </span><br><span class="line">transf armer]]]]]]])</span><br></pre></td></tr></table></figure><p>式中的返回值为<code>retval</code>, 返回结果是<code>ShapeDistanceExtractor</code>类型的变量<br>该结果可以通过函数<code>cv2.ShapeDistanceExtractor.computeDistance()</code>计算两个不同形状之间的距离。 此函数的语法格式为：</p><p><code>d = cv2.ShapeDistanceExtractor.computeDistance (contour1,contour2)</code> 式中， coutour1和coutour2是不同的轮廓。<br>函数<code>cv2.createShapeContextDistanceExtractor() </code>的参数都是可选参数：</p><ul><li><p><code>nAngularBins</code>: 为形状匹配中使用的形状上下文描述符建立的角容器的数星。</p></li><li><p><code>nRadialBins</code>: 为形状匹配中使用的形状上下文描述符建立的径向容器的数星。</p></li><li><p><code>innerRadius</code>：形状上下文描述符的内半径。</p></li><li><p><code>outerRadius</code>：形状上下文描述符的外半径。</p></li><li><p><code>iterations</code>: 迭代次数。</p></li><li><p><code>comparer</code>：直方图代价提取算子。 该函数使用了直方图代价提取仿函数， 可以直接采用直方图代价提取仿函数的算子作为参数。</p></li><li><p><code>transformer</code>: 形状变换参数。</p></li></ul><h3 id="计算Hausdorff距离">计算Hausdorff距离</h3><img src="73.png" style="zoom: 100%;" /><h1>直方图处理</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzUyNzY5OTE5Mw==&amp;mid=2247490728&amp;idx=1&amp;sn=7d891e12db0fb896702c58bd7c4f05e8&amp;chksm=fa7ac13ecd0d4828f46613a645df8706dba72b83e07e46b3f68fa4ecffec0b7bdef8c86c73fc&amp;scene=178&amp;cur_album_id=1343718009222905856#rd">参考</a></p><p>图像灰度直方图是什么鬼？直方图是都是由横纵坐标组成的，而图像直方图的横坐标 X 轴上表示的是像素点的灰度值（不总是从 0 到 255 的范围），在纵坐标 Y 轴上表示的相应像素数。所以，直方图是可以对整幅图的灰度分布进行整体了解的图示，通过直方图我们可以对图像的对比度、亮度和灰度分布等有一个直观了解。从统计的角度讲，直方图是图像内灰度值的统计特性与图像灰度值之间的函数。</p><img src="74.png" style="zoom: 100%;" /><p>上面这张图来自官方网站，在这张图中，我们可以得到如下信息：</p><ul><li>左侧区域显示图像中较暗像素的数量（左侧的灰度级更趋近于 0 ）。</li><li>右侧区域则显示明亮像素的数量（右侧的灰度级更趋近于 255）。</li><li>暗区域多于亮区域，而中间调的数量（中间值的像素值，例如127附近）则非常少。</li></ul><h2 id="直方图的绘制">直方图的绘制</h2><p>我们需要了解一些与直方图有关的术语。</p><p><strong>BINS</strong>：如果我们不需要分别找到所有像素值的像素数，而是找到像素值间隔中的像素数怎么办？ 例如，您需要找到介于0到15之间的像素数，然后找到16到31之间，…，240到255之间的像素数。只需要16个值即可表示直方图。这就是在OpenCV教程中有关直方图的示例中显示的内容。</p><p>因此，我们要做的就是将整个直方图分成16个子部分，每个子部分的值就是其中所有像素数的总和。 每个子部分都称为“ BIN”。在第一种情况下，bin的数量为256个（每个像素一个），而在第二种情况下，bin的数量仅为16个。BINS由OpenCV文档中的<code>histSize</code>术语表示。</p><p><strong>DIMS</strong>：这是我们为其收集数据的参数的数量。在这种情况下，我们仅收集关于强度值的一件事的数据。所以这里是1。</p><p><strong>RANGE</strong>：这是您要测量的强度值的范围。通常，它是<code>[0,256]</code>，即所有强度值。</p><h3 id="使用-Matplotlib-绘图">使用 Matplotlib 绘图</h3><p>Matplotlib 带有一个强大的直方图绘图功能：<code>matplotlib.pyplot.hist()</code> ，这个方法可以直接找到直方图进行绘制。</p><p>在看示例代码之前，有两个参数需要先介绍下：</p><ul><li>数据源：数据源必须是一维数组，通常需要通过函数 <code>ravel()</code> 拉直图像，而函数 <code>ravel()</code> 的作用是将多维数组降为一维数组。</li><li>像素级：一般是 256 ，表示 [0, 255] 。</li></ul><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">&quot;maliao.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">cv.imshow(<span class="string">&quot;img&quot;</span>, img)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br><span class="line"></span><br><span class="line">plt.hist(img.ravel(), <span class="number">256</span>, [<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>输出结果：</p><img src="75.png" style="zoom: 70%;" /><p>当然，我们除了可以绘制灰度直方图以外，还可以绘制出 <code>r,g,b</code> 不同通道的直方图，可以看下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">&quot;tiankong.jpg&quot;</span>)</span><br><span class="line">color = (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cv.imshow(<span class="string">&quot;img&quot;</span>, img)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, col <span class="keyword">in</span> <span class="built_in">enumerate</span>(color):</span><br><span class="line">    histr = cv.calcHist([img], [i], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">    plt.plot(histr, color = col)</span><br><span class="line">    plt.xlim([<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="76.png" style="zoom: 60%;" /><h3 id="使用opencv绘制">使用opencv绘制</h3><p>略</p><h2 id="直方图均衡化">直方图均衡化</h2><p>一副效果好的图像通常在直方图上的分布比较均匀，直方图均衡化就是用来改善图像的全局亮度和对比度。</p><img src="78.png" style="zoom: 100%;" /><p>函数<code>    resultImg= cv.equalizeHist(src)</code>，src必须是单通道图像，所以：</p><ul><li>灰度图均衡，直接使用 <code>equalizeHist()</code> 函数。</li><li>彩色图均衡，分别在不同的通道均衡后合并。</li></ul><p>示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    img = cv.imread(<span class="string">&quot;image\\0.png&quot;</span>)</span><br><span class="line">    gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 灰度图均衡化</span></span><br><span class="line">    equ = cv.equalizeHist(gray)</span><br><span class="line">    <span class="comment"># 竖直拼接原图和均衡图</span></span><br><span class="line">    result1 = np.vstack((gray, equ))</span><br><span class="line">    cv.imshow(<span class="string">&quot;grey&quot;</span>,result1)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 彩色图像均衡化,需要分解通道 对每一个通道均衡化</span></span><br><span class="line">    (b, g, r) = cv.split(img)</span><br><span class="line">    bH = cv.equalizeHist(b)</span><br><span class="line">    gH = cv.equalizeHist(g)</span><br><span class="line">    rH = cv.equalizeHist(r)</span><br><span class="line">    <span class="comment"># 合并每一个通道</span></span><br><span class="line">    equ2 = cv.merge((bH, gH, rH))</span><br><span class="line">    <span class="comment"># 竖直拼接原图和均衡图</span></span><br><span class="line">    result2 = np.vstack((img, equ2))</span><br><span class="line">    cv.imshow(<span class="string">&quot;rgb&quot;</span>,result2)</span><br><span class="line"></span><br><span class="line">    cv.waitKey()</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="77.png" style="zoom: 50%;" /><h3 id="原理-8">原理</h3><p>直方图均衡化的算法主要包括两个步骤：</p><p>(1)计算累计直方图。<br>(2)对累计直方图进行区间转换</p><p>在此基础上， 再利用人眼视觉达到直方图均衡化的目的。</p><img src="79.png" style="zoom: 70%;" /><img src="80.png" style="zoom: 73%;" /><img src="81.png" style="zoom: 70%;" /><h2 id="自适应直方图均衡化">自适应直方图均衡化</h2><p>是指在每一个小区域内（默认 8×8 ）进行直方图均衡化。当然，如果有噪点的话，噪点会被放大，需要对小区域内的对比度进行了限制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    img = cv.imread(<span class="string">&quot;image\\0.png&quot;</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 全局直方图均衡</span></span><br><span class="line">    equ = cv.equalizeHist(img)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自适应直方图均衡</span></span><br><span class="line">    clahe = cv.createCLAHE(clipLimit=<span class="number">2.0</span>, tileGridSize=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line">    cl1 = clahe.apply(img)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 水平拼接三张图像</span></span><br><span class="line">    result = np.vstack((img, equ, cl1))</span><br><span class="line">    cv.imshow(<span class="string">&quot;result&quot;</span>,result)</span><br><span class="line"></span><br><span class="line">    cv.waitKey()</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="82.png" style="zoom: 60%;" /><h2 id="二维直方图">二维直方图</h2><p>对于一维直方图，我们从BGR转换为灰度，绘制的是灰度的比例关系（占比关系），对于二维直方图，我们需要将图像从BGR转换为HSV。我们计算并绘制的一维直方图，之所以称为一维，是因为我们仅考虑一个特征，即像素的灰度强度值。 但是在二维直方图中，我们要考虑两个特征。 通常，它用于颜色直方图，其中两个特征是每个<strong>像素的色相和饱和度值</strong>。</p><p>对于二维直方图，其参数将进行如下修改：</p><ul><li><strong>channel = [0,1]</strong>，因为我们需要同时处理H和S平面。</li><li><strong>bins = [180,256]</strong>，对于H平面为180，对于S平面为256。</li><li><strong>range = [0,180,0,256]</strong> ，色相值介于0和180之间，饱和度介于0和256之间。</li></ul><p>也就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line">img = cv.imread(<span class="string">&#x27;home.jpg&#x27;</span>)</span><br><span class="line">hsv = cv.cvtColor(img,cv.COLOR_BGR2HSV)</span><br><span class="line">hist = cv.calcHist([hsv], [<span class="number">0</span>, <span class="number">1</span>], <span class="literal">None</span>, [<span class="number">180</span>, <span class="number">256</span>], [<span class="number">0</span>, <span class="number">180</span>, <span class="number">0</span>, <span class="number">256</span>])</span><br></pre></td></tr></table></figure><p>X轴显示S值，Y轴显示色相。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    img = cv.imread(<span class="string">&quot;image\\2.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">    hsv = cv.cvtColor(img, cv.COLOR_BGR2HSV)</span><br><span class="line">    hist = cv.calcHist([hsv], [<span class="number">0</span>, <span class="number">1</span>], <span class="literal">None</span>, [<span class="number">180</span>, <span class="number">256</span>], [<span class="number">0</span>, <span class="number">180</span>, <span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">    plt.imshow(hist, interpolation=<span class="string">&#x27;nearest&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    cv.waitKey()</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="83.png" style="zoom: 70%;" /><h2 id="直方图反投影">直方图反投影</h2><h3 id="理论">理论</h3><p>这是由<strong>Michael J. Swain</strong>和<strong>Dana H. Ballard</strong>在他们的论文《<strong>通过颜色直方图索引</strong>》中提出的。</p><p><strong>用简单的话说是什么意思</strong>？<strong>它用于图像分割或在图像中查找感兴趣的对象</strong>。简而言之，它创建的图像大小与输入图像相同（但只有一个通道），其中每个像素对应于该像素属于我们物体的概率。用更简单的话来说，与其余部分相比，输出图像将在可能有对象的区域具有更多的白色值。好吧，这是一个直观的解释。（我无法使其更简单）。直方图反投影与camshift算法等配合使用。</p><p><strong>我们该怎么做呢</strong>？我们创建一个图像的直方图，其中包含我们感兴趣的对象（在我们的示例中是背景，离开播放器等）。对象应尽可能填充图像以获得更好的效果。而且颜色直方图比灰度直方图更可取，因为对象的颜色对比灰度强度是定义对象的好方法。然后，我们将该直方图“反投影”到需要找到对象的测试图像上，换句话说，我们计算出属于背景的每个像素的概率并将其显示出来。在适当的阈值下产生的输出使我们仅获得背景。</p><h3 id="Numpy中的算法">Numpy中的算法</h3><ol><li>首先，我们需要计算我们要查找的对象（使其为“ M”）和要搜索的图像（使其为“ I”）的颜色直方图。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#roi是我们需要找到的对象或对象区域</span></span><br><span class="line">roi = cv.imread(<span class="string">&#x27;rose_red.png&#x27;</span>)</span><br><span class="line">hsv = cv.cvtColor(roi,cv.COLOR_BGR2HSV)</span><br><span class="line"><span class="comment">#目标是我们搜索的图像</span></span><br><span class="line">target = cv.imread(<span class="string">&#x27;rose.png&#x27;</span>)</span><br><span class="line">hsvt = cv.cvtColor(target,cv.COLOR_BGR2HSV)</span><br><span class="line"><span class="comment"># 使用calcHist查找直方图。也可以使用np.histogram2d完成</span></span><br><span class="line">M = cv.calcHist([hsv],[<span class="number">0</span>, <span class="number">1</span>], <span class="literal">None</span>, [<span class="number">180</span>, <span class="number">256</span>], [<span class="number">0</span>, <span class="number">180</span>, <span class="number">0</span>, <span class="number">256</span>] )</span><br><span class="line">I = cv.calcHist([hsvt],[<span class="number">0</span>, <span class="number">1</span>], <span class="literal">None</span>, [<span class="number">180</span>, <span class="number">256</span>], [<span class="number">0</span>, <span class="number">180</span>, <span class="number">0</span>, <span class="number">256</span>] )</span><br></pre></td></tr></table></figure><ol><li>求出比值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>M</mi><mi>I</mi></mfrac></mstyle></mrow><annotation encoding="application/x-tex">R = \dfrac{M}{I}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。然后反向投影R，<strong>即使用R作为调色板，并以每个像素作为其对应的目标概率创建一个新图像</strong>。即<code>B(x,y) = R[h(x,y),s(x,y)]</code> 其中h是色调，s是像素在(x，y)的饱和度。之后，应用条件<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">[</mo><mi>B</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">B(x,y)=min[B(x,y),1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">min</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">h,s,v = cv.split(hsvt)</span><br><span class="line">B = R[h.ravel(),s.ravel()]</span><br><span class="line">B = np.minimum(B,<span class="number">1</span>)</span><br><span class="line">B = B.reshape(hsvt.shape[:<span class="number">2</span>])</span><br></pre></td></tr></table></figure><ol><li>现在对圆盘应用卷积，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo>=</mo><mi>D</mi><mo>∗</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">B=D*B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>，其中D是圆盘内核。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">disc = cv.getStructuringElement(cv.MORPH_ELLIPSE,(<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line">cv.filter2D(B,-<span class="number">1</span>,disc,B)</span><br><span class="line">B = np.uint8(B)</span><br><span class="line">cv.normalize(B,B,<span class="number">0</span>,<span class="number">255</span>,cv.NORM_MINMAX)</span><br></pre></td></tr></table></figure><ol><li>现在最大强度的位置给了我们物体的位置。如果我们期望图像中有一个区域，则对合适的值进行阈值处理将获得不错的结果。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ret,thresh = cv.threshold(B,<span class="number">50</span>,<span class="number">255</span>,<span class="number">0</span>) </span><br></pre></td></tr></table></figure><p>比如，我通过一个天空的图像片段查找图像中所有的天空：（图中红框是我提供的ROI）</p><img src="84.png" style="zoom: 40%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#查找样例</span></span><br><span class="line">    roi = cv.imread(<span class="string">&quot;image\\1-1.png&quot;</span>)</span><br><span class="line">    hsv = cv.cvtColor(roi, cv.COLOR_BGR2HSV)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#全图</span></span><br><span class="line">    target = cv.imread(<span class="string">&quot;image\\1.png&quot;</span>)</span><br><span class="line">    hsvt = cv.cvtColor(target, cv.COLOR_BGR2HSV)</span><br><span class="line">    M = cv.calcHist([hsv], [<span class="number">0</span>, <span class="number">1</span>], <span class="literal">None</span>, [<span class="number">180</span>, <span class="number">256</span>], [<span class="number">0</span>, <span class="number">180</span>, <span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">    I = cv.calcHist([hsvt], [<span class="number">0</span>, <span class="number">1</span>], <span class="literal">None</span>, [<span class="number">180</span>, <span class="number">256</span>], [<span class="number">0</span>, <span class="number">180</span>, <span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">    R = M/I</span><br><span class="line">    </span><br><span class="line">    h, s, v = cv.split(hsvt)</span><br><span class="line">    B = R[h.ravel(), s.ravel()]</span><br><span class="line">    B = np.minimum(B, <span class="number">1</span>)</span><br><span class="line">    B = B.reshape(hsvt.shape[:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    disc = cv.getStructuringElement(cv.MORPH_ELLIPSE, (<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">    cv.filter2D(B, -<span class="number">1</span>, disc, B)</span><br><span class="line">    B = np.uint8(B)</span><br><span class="line">    cv.normalize(B, B, <span class="number">0</span>, <span class="number">255</span>, cv.NORM_MINMAX)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#阈值处理</span></span><br><span class="line">    ret, thresh = cv.threshold(B, <span class="number">50</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#构造掩模</span></span><br><span class="line">    thresh = cv.merge((thresh, thresh, thresh))</span><br><span class="line">    res = cv.bitwise_and(target, thresh)</span><br><span class="line">    res = np.vstack((target, thresh, res))</span><br><span class="line">    cv.imshow(<span class="string">&quot;result&quot;</span>,res)</span><br><span class="line">    </span><br><span class="line">    cv.waitKey()</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="OpenCV的反投影">OpenCV的反投影</h3><p>OpenCV提供了一个内建的函数<strong>cv.calcBackProject</strong>()。它的参数几乎与<strong>cv.calchist</strong>()函数相同。它的一个参数是直方图，也就是物体的直方图，我们必须找到它。另外，在传递给backproject函数之前，应该对对象直方图进行归一化。它返回概率图像。然后我们用圆盘内核对图像进行卷积并应用阈值。下面是我的代码和结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    roi = cv.imread(<span class="string">&quot;image\\1-1.png&quot;</span>)</span><br><span class="line">    hsv = cv.cvtColor(roi, cv.COLOR_BGR2HSV)</span><br><span class="line"></span><br><span class="line">    target = cv.imread(<span class="string">&quot;image\\1.png&quot;</span>)</span><br><span class="line">    hsvt = cv.cvtColor(target, cv.COLOR_BGR2HSV)</span><br><span class="line">    <span class="comment"># 计算对象的直方图</span></span><br><span class="line">    roihist = cv.calcHist([hsv], [<span class="number">0</span>, <span class="number">1</span>], <span class="literal">None</span>, [<span class="number">180</span>, <span class="number">256</span>], [<span class="number">0</span>, <span class="number">180</span>, <span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">    <span class="comment"># 直方图归一化并利用反传算法</span></span><br><span class="line">    cv.normalize(roihist, roihist, <span class="number">0</span>, <span class="number">255</span>, cv.NORM_MINMAX)</span><br><span class="line">    dst = cv.calcBackProject([hsvt], [<span class="number">0</span>, <span class="number">1</span>], roihist, [<span class="number">0</span>, <span class="number">180</span>, <span class="number">0</span>, <span class="number">256</span>], <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 用圆盘进行卷积</span></span><br><span class="line">    disc = cv.getStructuringElement(cv.MORPH_ELLIPSE, (<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">    cv.filter2D(dst, -<span class="number">1</span>, disc, dst)</span><br><span class="line">    <span class="comment"># 应用阈值作与操作</span></span><br><span class="line">    ret, thresh = cv.threshold(dst, <span class="number">50</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">    thresh = cv.merge((thresh, thresh, thresh))</span><br><span class="line">    res = cv.bitwise_and(target, thresh)</span><br><span class="line">    res = np.vstack((target, thresh, res))</span><br><span class="line">    cv.imshow(<span class="string">&quot;result&quot;</span>,res)</span><br><span class="line"></span><br><span class="line">    cv.waitKey()</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="85.png" style="zoom: 40%;" /><h2 id="补充：pyplot-subplot">补充：pyplot.subplot()</h2><p>模块 <code>matplotlib.pyplot</code> 提供了函数<code>matplotlib.pyplot.subplot()</code>用来向当前窗口内添加一个子窗口对象。 该函数的语法格式为：</p><p><code>matplotlib. pyplot.subplot (nrows,ncols,index)</code></p><p>式中：</p><ul><li>nrows为行数。</li><li>ncols为列数。</li><li>index为窗口序号。</li></ul><p>例如，subplot(2,3,4)表示在当前的两行三列的窗口的第4个位置上，添加1个子窗口</p><img src="86.png" style="zoom: 80%;" /><h1>傅里叶变换</h1><h2 id="原理-9">原理</h2><p>​        图像处理一般分为<strong>空间域</strong>处理和<strong>频率域</strong>处理。</p><p>​        <strong>空间域处理是直接对图像内的像素进行处理</strong>。 空间域处理主要划分为灰度变换和空间滤波两种形式。 灰度变换是对图像内的单个像素进行处理， 比如调节对比度和处理闯值等。空间滤波涉及图像质星的改变， 例如图像平滑处理。 空间域处理的计算简单方便，运算速度更快。<br>​        <strong>频率域处理是先将图像变换到频率域， 然后在频率域对图像进行处理， 最后再通过反变换将图像从频率域变换到空间域</strong>。 傅里叶变换是应用最广泛的一种频域变换， 它能够将图像从空间域变换到频率域， 而逆傅里叶变换能够将频率域信息变换到空间域内。 傅里叶变换在图像处理领域内有着非常重要的作用。</p><p>​        在图像处理过程中，<strong>傅里叶变换就是将图像分解为正弦分量和余弦分量两部分，即将图像从空间域转换到频率域（以下简称频域）</strong>。数字图像经过傅里叶变换后，得到的频域值是复数。因此，显示傅里叶变换的结果需要使用实数图像 (real image) 加虚数图像 (complex image)或者幅度图像(magnitude image) 加相位图像 (phase image) 的形式。</p><p>​        因为幅度图像包含了原图像中我们所需要的大部分信息，所以在图像处理过程中，通常仅使用幅度图像。当然，如果希望先在频域内对图像进行处理，再通过逆傅里叶变换得到修改后的空域图像，就必须同时保留幅度图像和相位图像。</p><p>​        对图像进行傅里叶变换后，我们会得到图像中的低频和高频信息。<strong>低频信息对应图像内变化缓慢的灰度分量。 高频信息对应图像内变化越来越快的灰度分量，是由灰度的尖锐过渡造成的</strong>。例如，在一幅大草原的图像中有一头狮子，低频信息就对应着广袤的颜色趋于一致的草原等细节信息，而高频信息则对应着狮子的轮廓等各种边缘及噪声信息。</p><p>​        对于不同频段的信息，滤波器能够允许一定频率的分量通过或者拒绝其通过，按照其作用方式可以划分为低通滤波器和高通滤波器。</p><ul><li><p><strong>允许低频信号通过的滤波器称为低通滤波器</strong>。低通滤波器使高频信号衰减而对低频信号放行，会使图像变模糊。</p></li><li><p><strong>允许高频信号通过的滤波器称为高通滤波器</strong>。高通滤波器使低频信号衰减而让高频信号通过，将增强图像中尖锐的细节， 但是会导致图像的对比度降低。</p></li></ul><p>傅里叶变换可以将图像的高频信号和低频信号分离。那么就可以对傅里叶变换得到的高频信号和低频信号分别进行处理，例如高通滤波或者低通滤波。在对图像的高频或低频信号进行处理后，再进行逆傅里叶变换返回空域，就完成了对图像的频域处理。通过对图像的频域处理，可以实现图像增强、图像去噪、边缘检测、特征提取、压缩和加密等操作。</p><h3 id="PS-什么是时域（空间域），什么是频域">PS.什么是时域（空间域），什么是频域</h3><p>从我们出生，我们看到的世界都以时间贯穿，股票的走势、人的身高、汽车的轨迹都会随着时间发生改变。这种以时间作为参照来观察动态世界的方法我们称其为时域分析。而我们也想当然的认为，世间万物都在随着时间不停的改变，并且永远不会静止下来。但如果我告诉你，用另一种方法来观察世界的话，你会发现<strong>世界是永恒不变的</strong>，你会不会觉得我疯了？我没有疯，这个静止的世界就叫做<strong>频域</strong>。</p><p>先举一个<strong>公式上并非很恰当</strong>，但意义上再贴切不过的例子：</p><p>在你的理解中，一段音乐是什么呢？是其在时域内的表现</p><img src="88.png" style="zoom: 100%;" /><p>这是我们对音乐最普遍的理解，一个随着时间变化的震动。但我相信对于乐器小能手们来说，音乐更直观的理解是这样的：是其在频域内的表现</p><img src="89.png" style="zoom: 100%;" /><p>在时域，我们观察到钢琴的琴弦一会上一会下的摆动，就如同一支股票的走势；而在频域，只有那一个永恒的音符。</p><img src="87.png" style="zoom: 80%;" /><p>从信号的角度来讲，时间方向是时域，因为信号是随时间变化的。但从图像的角度讲，这个方向应该称作空间的方向，也就是空间域，因为图像在空间的不同位置的表示是不一样的。</p><blockquote><p>But what does frequency spectrum means in case of images?</p></blockquote><p>The “mathematical equations” are important, so don’t skip them entirely. But the 2d FFT has an intuitive interpretation, too. For illustration, I’ve calculated the inverse FFT of a few sample images:</p><p>“数学方程式”很重要，所以不要完全跳过它们。但是2d FFT 也有一个直观的解释。为了说明，我已经计算了一些样本图像的反 FFT:</p><img src="93.png" style="zoom: 80%;" /><p>As you can see, only one pixel is set in the frequency domain. The result in the image domain (I’ve only displayed the real part) is a “rotated cosine pattern” (the imaginary part would be the corresponding sine).</p><p>If I set a different pixel in the frequency domain (at the left border):</p><p>正如你所看到的，只有一个像素是设置在频率域。图像域中的结果(我只显示了实部)是一个“旋转余弦图案”(虚部将是对应的正弦)。</p><p>如果我在频率域(左边框)设置不同的像素:</p><img src="94.png" style="zoom: 80%;" /><p>I get a different 2d frequency pattern.</p><p>If I set more than one pixel in the frequency domain:</p><p>我得到了一个不同的二维频率模式。</p><p>如果我在频率域设置多于一个像素:</p><img src="95.png" style="zoom: 80%;" /><p>you get the sum of two cosines.</p><p>So like a 1d wave, that can be represented as a sum of sines and cosines, any 2d image can be represented (loosely speaking) as a sum of “rotated sines and cosines”, as shown above.</p><blockquote><p>when we take fft of a image in opencv, we get weird picture. What does this image denote?</p></blockquote><p>It denotes the amplitudes and frequencies of the sines/cosines that, when added up, will give you the original image.</p><blockquote><p>And what is its application?</p></blockquote><p>There are really too many to name them all. Correlation and convolution can be calculated very efficiently using an FFT, but that’s more of an optimization, you don’t “look” at the FFT result for that. It’s used for image compression, because the high frequency components are usually just noise.</p><p>你会得到两个余弦的和。</p><p>就像一维波，可以表示为正弦和余弦的和，任何二维图像都可以表示为“旋转正弦和余弦”的和，如上所示。</p><p>当我们在 opencv 中对一幅图像进行傅立叶变换时，我们得到了一幅奇怪的图像，这幅图像代表了什么？</p><p>它表示正弦/余弦的振幅和频率，加起来就是原始图像。</p><p>它的应用是什么？</p><p>实在是太多了，无法一一列举。使用 FFT，相关性和卷积可以非常有效地计算，但这是一个更优化，FFT的结果并不以此为目的。因为高频部分通常只是噪音，所以它被用于图像压缩。</p><h2 id="Numpy中的傅里叶变换">Numpy中的傅里叶变换</h2><p>首先，我们将看到如何使用Numpy查找傅立叶变换。Numpy具有FFT软件包来执行此操作。<strong>np.fft.fft2</strong>()为我们提供了频率转换，它将是一个复杂的数组。它的第一个参数是输入图像，即灰度图像。第二个参数是可选的，它决定输出数组的大小。如果它大于输入图像的大小，则在计算FFT之前用零填充输入图像。如果小于输入图像，将裁切输入图像。如果未传递任何参数，则输出数组的大小将与输入的大小相同。</p><p>现在，一旦获得结果，零频率分量（DC分量）将位于左上角。如果要使其居中，则需要在两个方向上将结果都移动<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>N</mi><mn>2</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{N}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。只需通过函数<strong>np.fft.fftshift</strong>()即可完成。（它更容易分析）。找到频率变换后，就可以找到幅度谱。</p><p>那么，对于这张图，<strong>越靠近中心，频率越低</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    img = cv.imread(<span class="string">&quot;image\\1.png&quot;</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    f = np.fft.fft2(img)</span><br><span class="line">    fshift = np.fft.fftshift(f)</span><br><span class="line">    <span class="comment">#对图像进行傅里叶变换后，得到的是一个复数数组。为了显示为图像，需要将它们的值调整到[0,255]的灰度空间内</span></span><br><span class="line">    magnitude_spectrum = <span class="number">20</span> * np.log(np.<span class="built_in">abs</span>(fshift))</span><br><span class="line">    plt.subplot(<span class="number">121</span>), plt.imshow(img, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;Input Image&#x27;</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.subplot(<span class="number">122</span>), plt.imshow(magnitude_spectrum, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;Magnitude Spectrum&#x27;</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    cv.waitKey()</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="90.png" style="zoom: 80%;" /><h3 id="高通滤波">高通滤波</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    img = cv.imread(<span class="string">&quot;image\\1.png&quot;</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    f = np.fft.fft2(img)</span><br><span class="line">    fshift = np.fft.fftshift(f)</span><br><span class="line">    rows, cols = img.shape</span><br><span class="line">    crow, ccol = <span class="built_in">int</span>(rows / <span class="number">2</span>), <span class="built_in">int</span>(cols / <span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 中间30*30的像素置为0</span></span><br><span class="line">    fshift[crow - <span class="number">30</span>:crow + <span class="number">30</span>, ccol - <span class="number">30</span>:ccol + <span class="number">30</span>] = <span class="number">0</span></span><br><span class="line">    ishift = np.fft.ifft2(fshift)</span><br><span class="line">    iimg = np.<span class="built_in">abs</span>(ishift)</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">121</span>), plt.imshow(img, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;Input Image&#x27;</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.subplot(<span class="number">122</span>), plt.imshow(iimg, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;iimg&#x27;</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    cv.waitKey()</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="91.png" style="zoom: 80%;" /><p>但这样的高通滤波在图像中会显示出一些波纹状结构，称为<strong>振铃效应</strong>。这是由我们用于遮罩的矩形窗口引起的。此掩码转换为正弦形状，从而导致此问题。因此，矩形窗口不用于过滤。更好的选择是高斯窗口。</p><h2 id="OpenCV中的傅里叶变换">OpenCV中的傅里叶变换</h2><p>OpenCV为此提供了<strong>cv.dft</strong>()和<strong>cv.idft</strong>()函数。它返回与前一个相同的结果，但是有两个通道。第一个通道是结果的实部，第二个通道是结果的虚部。输入图像首先应转换为<code>np.float32</code>。我们来看看怎么做。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    img = cv.imread(<span class="string">&quot;image\\1.png&quot;</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    dft = cv.dft(np.float32(img), flags=cv.DFT_COMPLEX_OUTPUT)</span><br><span class="line">    dft_shift = np.fft.fftshift(dft)</span><br><span class="line">    magnitude_spectrum = <span class="number">20</span> * np.log(cv.magnitude(dft_shift[:, :, <span class="number">0</span>], dft_shift[:, :, <span class="number">1</span>]))</span><br><span class="line">    plt.subplot(<span class="number">121</span>), plt.imshow(img, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;Input Image&#x27;</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.subplot(<span class="number">122</span>), plt.imshow(magnitude_spectrum, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;Magnitude Spectrum&#x27;</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    cv.waitKey()</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="低通滤波">低通滤波</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    img = cv.imread(<span class="string">&quot;image\\1.png&quot;</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    dft = cv.dft(np.float32(img), flags=cv.DFT_COMPLEX_OUTPUT)</span><br><span class="line">    dft_shift = np.fft.fftshift(dft)</span><br><span class="line">    magnitude_spectrum = <span class="number">20</span> * np.log(cv.magnitude(dft_shift[:, :, <span class="number">0</span>], dft_shift[:, :, <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    rows, cols = img.shape</span><br><span class="line">    crow, ccol = <span class="built_in">int</span>(rows / <span class="number">2</span>), <span class="built_in">int</span>(cols / <span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 首先创建一个掩码，中心正方形为1，其余全为零</span></span><br><span class="line">    mask = np.zeros((rows, cols, <span class="number">2</span>), np.uint8)</span><br><span class="line">    mask[crow - <span class="number">30</span>:crow + <span class="number">30</span>, ccol - <span class="number">30</span>:ccol + <span class="number">30</span>] = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 应用掩码和逆DFT</span></span><br><span class="line">    fshift = dft_shift * mask</span><br><span class="line">    f_ishift = np.fft.ifftshift(fshift)</span><br><span class="line">    img_back = cv.idft(f_ishift)</span><br><span class="line">    img_back = cv.magnitude(img_back[:, :, <span class="number">0</span>], img_back[:, :, <span class="number">1</span>])</span><br><span class="line">    plt.subplot(<span class="number">121</span>), plt.imshow(img, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;Input Image&#x27;</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.subplot(<span class="number">122</span>), plt.imshow(img_back, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;Magnitude Spectrum&#x27;</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    cv.waitKey()</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="92.png" style="zoom: 80%;" /><h3 id="踩坑">踩坑</h3><p>滤波时，<code>  crow, ccol = int(rows / 2), int(cols / 2)</code>而不能用<code>  crow, ccol = rows / 2, cols / 2</code>，后者会报错<code>slice indices must be integers or None or have an __index__ method</code>，因为除法返回的是浮点值，不能直接用于二维数组索引。</p><p>或者将<code>/</code>改为<code>//</code>。</p><h2 id="DFT的性能优化">DFT的性能优化</h2><p>对于某些数组尺寸，DFT的计算性能较好。当数组大小为2的幂时，速度最快。对于大小为2、3和5的乘积的数组，也可以非常有效地进行处理。因此，如果您担心代码的性能，可以在找到DFT之前将数组的大小修改为任何最佳大小(通过填充零)。对于OpenCV，您必须手动填充零。但是对于Numpy，您指定FFT计算的新大小，它将自动为您填充零。</p><p>那么如何找到最优的大小呢?OpenCV为此提供了一个函数，<strong>cv.getOptimalDFTSize</strong>()。它同时适用于<strong>cv.dft</strong>()和<strong>np.fft.fft2</strong>()。让我们使用IPython魔术命令timeit来检查它们的性能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">16</span>]: img = cv.imread(<span class="string">&#x27;messi5.jpg&#x27;</span>,<span class="number">0</span>)</span><br><span class="line">In [<span class="number">17</span>]: rows,cols = img.shape</span><br><span class="line">In [<span class="number">18</span>]: <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(rows,cols))</span><br><span class="line"><span class="number">342</span> <span class="number">548</span></span><br><span class="line">In [<span class="number">19</span>]: nrows = cv.getOptimalDFTSize(rows)</span><br><span class="line">In [<span class="number">20</span>]: ncols = cv.getOptimalDFTSize(cols)</span><br><span class="line">In [<span class="number">21</span>]: <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(nrows,ncols))</span><br><span class="line"><span class="number">360</span> <span class="number">576</span></span><br></pre></td></tr></table></figure><p>参见，将大小<code>(342,548)</code>修改为<code>(360，576)</code>。现在让我们用零填充（对于OpenCV），并找到其DFT计算性能。您可以通过创建一个新的零数组并将数据复制到其中来完成此操作，或者使用<strong>cv.copyMakeBorder</strong>()。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nimg = np.zeros((nrows,ncols))</span><br><span class="line">nimg[:rows,:cols] = img</span><br></pre></td></tr></table></figure><p>或者:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">right = ncols - cols</span><br><span class="line">bottom = nrows - rows</span><br><span class="line">bordertype = cv.BORDER_CONSTANT ＃只是为了避免PDF文件中的行中断</span><br><span class="line">nimg = cv.copyMakeBorder(img,<span class="number">0</span>,bottom,<span class="number">0</span>,right,bordertype, value = <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>现在，我们计算Numpy函数的DFT性能比较：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">22</span>]: %timeit fft1 = np.fft.fft2(img)</span><br><span class="line"><span class="number">10</span> loops, best of <span class="number">3</span>: <span class="number">40.9</span> ms per loop</span><br><span class="line">In [<span class="number">23</span>]: %timeit fft2 = np.fft.fft2(img,[nrows,ncols])</span><br><span class="line"><span class="number">100</span> loops, best of <span class="number">3</span>: <span class="number">10.4</span> ms per loop</span><br></pre></td></tr></table></figure><p>它显示了4倍的加速。现在，我们将尝试使用OpenCV函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">24</span>]: %timeit dft1= cv.dft(np.float32(img),flags=cv.DFT_COMPLEX_OUTPUT)</span><br><span class="line"><span class="number">100</span> loops, best of <span class="number">3</span>: <span class="number">13.5</span> ms per loop</span><br><span class="line">In [<span class="number">27</span>]: %timeit dft2= cv.dft(np.float32(nimg),flags=cv.DFT_COMPLEX_OUTPUT)</span><br><span class="line"><span class="number">100</span> loops, best of <span class="number">3</span>: <span class="number">3.11</span> ms per loop</span><br></pre></td></tr></table></figure><p>它还显示了4倍的加速。您还可以看到OpenCV函数比Numpy函数快3倍左右。也可以对逆FFT进行测试，这留给您练习。</p><h1>模板匹配</h1><p>模板匹配是一种用于在较大图像中搜索和查找模板图像位置的方法。为此，OpenCV带有一个函数<code>cv.matchTemplate()</code>。 它只是将模板图像滑动到输入图像上（就像在2D卷积中一样），然后在模板图像下比较模板和输入图像的拼图。 OpenCV中实现了几种比较方法。（您可以检查文档以了解更多详细信息）。<strong>它返回一个灰度图像，其中每个像素表示该像素的邻域与模板匹配的程度</strong>。</p><blockquote><p><strong>注意</strong> 如果使用<strong>cv.TM_SQDIFF</strong>作为比较方法，则最小值提供最佳匹配。</p></blockquote><h2 id="函数-11">函数</h2><p>在OpenCV内， 模板匹配是使用函数cv2.matchTemplate(）实现的。 该函数的语法格式为：<code>result=cv2.matchTemplate (image,templ,method[,mask]) </code><br>其中：</p><ul><li>image为原始图像， 必须是8位或者32位的浮点型图像。</li><li>templ为模板图像。 <strong>它的尺寸必须小于或等于原始图像， 并且与原始图像具有同样的类型</strong>。</li><li>method为匹配方法。 该参数通过 <code>TemplateMatchModes</code>实现， 有6种可能的值。</li></ul><img src="96.png" style="zoom: 80%;" /><ul><li>mask 为模板图像掩模。它必须和模板图像 tempi 具有相同的类型和大小。通常情况下该值使用默认值即可。当前，该参数仅支持TM_SQDIFF和TM_CCORR_NORMED两个值。</li></ul><p>如果输入图像的大小为<code>(WxH)</code>，而模板图像的大小为<code>(wxh)</code>，<strong>则输出图像的大小将为<code>(W - w + 1，H - h + 1)</code></strong>。</p><p>这是因为，在进行模板匹配时， 模板在原始图像内遍历。 在水平方向上：</p><ul><li><p>遍历的起始坐标是原始图像左数第1个像素值（序号从1开始）。</p></li><li><p>最后一次比较是当模板图像位于原始图像的最右侧时， 此时其左上角像素点所在的位置是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi><mo>−</mo><mi>w</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">W-w+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p></li></ul><p>因此， 返回值result在水平方向上的大小是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi><mo>−</mo><mi>w</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">W-w+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>（水平方向上的比较次数）。竖直方向同理。</p><hr><p>得到结果后，可以使用<code>cv.minMaxLoc()</code>函数查找最大/最小值在哪。将其作为矩形的左上角，并以<code>(w，h)</code>作为矩形的宽度和高度。该矩形是您模板的区域。</p><p>这里需要注意的是 ， <strong>函数<code>cv2.matchTemplate()</code>通过参数method来决定使用不同的查找方法。对千不同的查找方法， 返回值result具有不同的含义</strong>。 例如：</p><ul><li><p>method的值为<code>cv2.TM_SQDIFF</code>和<code>cv2.TM_SQDIFF_NORMED</code>时 ， result值为0表示匹配度最小，值越大 ， 表示匹配度越差。</p></li><li><p>method 的值为 <code>cv2.TM_CCORR </code>、<code>cv2.TM_CCORR_NORMED</code>、<code>cv2.TM_CCOEFF </code>和<code>cv2.TM_CCOEFF _NORMED</code>时， result的值越小表示匹配度越差， 值越大表示匹配度越好。</p></li></ul><p>从上述分析可以看出 ， 查找方法不同， 结果的判定方式也不同。 <strong>在查找最佳匹配时 ， 首先要确定使用的是何种method, 然后再确定到底是查找最大值， 还是查找最小值</strong>。</p><p>查找最值（极值）与最值所在的位置， 可以使用<code> cv2.minMaxLoc()</code> 函数实现。 该函数语法格式如下：</p><p><code>minVal,maxVal,minLoc,maxLoc=cv2.minMaxLoc (src[,mask])</code></p><p>其中：</p><ul><li><code>src</code>为<strong>单通道数组</strong>。</li><li><code>minVal</code>为返回的最小值， 如果没有最小值， 则可以是NULL（空值）。</li><li><code>maxVal</code>为返回的最大值， 如果没有最小值， 则可以是NULL。</li><li><code>minLoc</code>为最大值的位置， 如果没有最大值， 则可以是NULL。</li><li><code>maxLoc</code>为最大值的位置， 如果没有最大值， 则可以是NULL。</li></ul><h2 id="单模板匹配">单模板匹配</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    img = cv.imread(<span class="string">&quot;image\\0.png&quot;</span>, <span class="number">0</span>)</span><br><span class="line">    img2 = img.copy()</span><br><span class="line">    target = cv.imread(<span class="string">&#x27;image\\target-0.png&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">    w, h = target.shape[::-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 列表中所有的6种比较方法</span></span><br><span class="line">    methods = [<span class="string">&#x27;cv.TM_CCOEFF&#x27;</span>, <span class="string">&#x27;cv.TM_CCOEFF_NORMED&#x27;</span>, <span class="string">&#x27;cv.TM_CCORR&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;cv.TM_CCORR_NORMED&#x27;</span>, <span class="string">&#x27;cv.TM_SQDIFF&#x27;</span>, <span class="string">&#x27;cv.TM_SQDIFF_NORMED&#x27;</span>]</span><br><span class="line">    l = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> meth <span class="keyword">in</span> methods:</span><br><span class="line">        img = img2.copy()</span><br><span class="line">        method = <span class="built_in">eval</span>(meth)</span><br><span class="line">        <span class="comment"># 应用模板匹配</span></span><br><span class="line">        res = cv.matchTemplate(img, target, method)</span><br><span class="line">        min_val, max_val, min_loc, max_loc = cv.minMaxLoc(res)</span><br><span class="line">        <span class="comment"># 如果方法是TM_SQDIFF或TM_SQDIFF_NORMED，则取最小值</span></span><br><span class="line">        <span class="keyword">if</span> method <span class="keyword">in</span> [cv.TM_SQDIFF, cv.TM_SQDIFF_NORMED]:</span><br><span class="line">            top_left = min_loc</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            top_left = max_loc</span><br><span class="line">        bottom_right = (top_left[<span class="number">0</span>] + w, top_left[<span class="number">1</span>] + h)</span><br><span class="line">        cv.rectangle(img, top_left, bottom_right, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">        plt.subplot(<span class="number">6</span>, <span class="number">2</span>, l), plt.imshow(res, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">        plt.title(<span class="string">&#x27;Matching Result&#x27;</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line">        plt.subplot(<span class="number">6</span>, <span class="number">2</span>, l + <span class="number">1</span>), plt.imshow(img, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">        plt.title(meth), plt.xticks([]), plt.yticks([])</span><br><span class="line">        l = l + <span class="number">2</span></span><br><span class="line">   </span><br><span class="line">    plt.show()</span><br><span class="line">    cv.waitKey()</span><br><span class="line">    cv.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但显然，相关系数匹配在这张图片中出了问题，而且其他图片也有类似的问题</p><img src="97.png" style="zoom: 80%;" /><h2 id="多模板匹配">多模板匹配</h2><p>在前面的例子中，我们搜索的子图在整个输入图像内仅出现了一次。但是，有些情况下，要搜索的模板图像很可能在输入图像内出现了多次，这时就需要找出多个匹配结果。而函数<code>cv2.minMaxLoc()</code>仅仅能够找出最值，无法给出所有匹配区域的位置信息。所以，要想匹配多个结果，使用函数<code>cv2.minMaxLoc()</code>是无法实现的需要利用阈值进行处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    img_rgb = cv.imread(<span class="string">&#x27;image\\4.png&#x27;</span>)</span><br><span class="line">    img_gray = cv.cvtColor(img_rgb, cv.COLOR_BGR2GRAY)</span><br><span class="line">    target = cv.imread(<span class="string">&#x27;image\\target-4.png&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">    w, h = target.shape[::-<span class="number">1</span>]</span><br><span class="line">    res = cv.matchTemplate(img_gray, target, cv.TM_CCOEFF_NORMED)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#这里的阈值是自己定的</span></span><br><span class="line">    threshold = <span class="number">0.8</span></span><br><span class="line">    loc = np.where(res &gt;= threshold)</span><br><span class="line">    <span class="comment">#函数zip(）用可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表。</span></span><br><span class="line">    <span class="keyword">for</span> pt <span class="keyword">in</span> <span class="built_in">zip</span>(*loc[::-<span class="number">1</span>]):</span><br><span class="line">        cv.rectangle(img_rgb, pt, (pt[<span class="number">0</span>] + w, pt[<span class="number">1</span>] + h), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">    cv.imwrite(<span class="string">&#x27;res.png&#x27;</span>, img_rgb)</span><br><span class="line"></span><br><span class="line">    cv.waitKey()</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>注意使用函数<code>numpy.where()</code>在函数<code>cv2.matchTemplate()</code>的输出值中查找指定值， 得到的形式&quot;（行号， 列号）＂的位置索引。但是，函数<code>cv2.rectangle()</code>中用于指定顶点的参数所使用的是形式为&quot;（列号， 行号）&quot;的位置索引。所以，在使用函数<code>cv2.rectangle() </code>绘制矩形前 ， 要先将函数<code> numpy.where()</code>得到的位置索引做“行列互换＂。可以使用如下语句实现loc内行列位置的互换：</p><p><code>loc[::-1] </code>，结果如下：</p><img src="98.png" style="zoom: 120%;" /><p>注意到， 本来在函数<code>cv2.rectangle()</code>中设置的边界宽度为2, 但实际上标记出来的宽度远远大于2。这是因为在当前的区域内， 存在多个大于当前指定阈值0.8的情况，所以将它们都做了标记。这样，多个宽度为2的矩形就合在了一起，显得边界比较粗。可以尝试修改阈值，调整宽度，观察不同的演示效果。</p><h1>特征匹配</h1><p>本部分可以认为是上一部分地进阶。</p><p>​        大多数人都会玩拼图游戏。你会得到很多小图像，需要正确组装它们以形成大的真实图像。问题是，你怎么做？将相同的理论投影到计算机程序上，以便计算机可以玩拼图游戏呢？如果计算机可以玩拼图游戏，为什么我们不能给计算机提供很多自然风光的真实图像，并告诉计算机将所有这些图像拼接成一个大图像呢？如果计算机可以将多个自然图像缝合在一起，那么如何给建筑物或任何结构提供大量图片并告诉计算机从中创建3D模型呢？</p><p>​        好了，问题和想象力还在继续。但这全都取决于最基本的问题：你如何玩拼图游戏？你如何将许多被扰的图像片段排列成一个大的单张图像？你如何将许多自然图像拼接到一张图像上？</p><p>​        答案是，我们正在寻找<strong>独特的，易于跟踪和比较的特定模板或特定特征</strong>。如果我们对这种特征进行定义，可能会发现很难用语言来表达它，但是我们知道它们是什么。如果有人要求你指出一项可以在多张图像中进行比较的良好特征，则可以指出其中一项。这就是为什么即使是小孩也可以玩这些游戏的原因。我们在图像中搜索这些特征，找到它们，在其他图像中寻找相同的特征并将它们对齐。仅此而已。（在拼图游戏中，我们更多地研究了不同图像的连续性）。所有这些属性都是我们固有的。</p><p>​        因此，我们的一个基本问题扩展到更多，但变得更加具体。这些特征是什么？（答案对于计算机也应该是可以理解的。）</p><p>​        很难说人类如何发现这些特征。这已经在我们的大脑中进行了编码。但是，如果我们深入研究某些图片并搜索不同的模板，我们会发现一些有趣的东西。例如，看以下的图片：</p><img src="125.png" style="zoom: 80%;" /><p>​        图像非常简单。在图像的顶部，给出了六个小图像块。你的问题是在原始图像中找到这些补丁的确切位置。你可以找到多少正确的结果？</p><p>​        A和B是平坦的表面，它们散布在很多区域上。很难找到这些补丁的确切位置。</p><p>​        C和D更简单。它们是建筑物的边缘。你可以找到一个大概的位置，但是准确的位置仍然很困难。这是因为沿着边缘的每个地方的图案都是相同的。但是，在边缘，情况有所不同。因此，与平坦区域相比，边缘是更好的特征，但不够好（在拼图游戏中比较边缘的连续性很好）。</p><p>​        最后，E和F是建筑物的某些角落。而且很容易找到它们。因为在拐角处，无论将此修补程序移动到何处，它的外观都将有所不同。因此，它们可以被视为很好的特征。因此，现在我们进入更简单（且被广泛使用的图像）以更好地理解。</p><img src="126.png" style="zoom: 80%;" /><p>​        就像上面一样，蓝色补丁是平坦区域，很难找到和跟踪。无论你将蓝色补丁移到何处，它看起来都一样。黑色补丁有一个边缘。如果你沿垂直方向（即沿渐变）移动它，则它会发生变化。沿着边缘（平行于边缘）移动，看起来相同。对于红色补丁，这是一个角落。无论你将补丁移动到何处，它看起来都不同，这意味着它是<strong>唯一的</strong>。因此，基本上，拐点被认为是图像中的良好特征。（不仅是角落，在某些情况下，斑点也被认为是不错的功能）。</p><p>​        因此，现在我们回答了我们的问题，“这些特征是什么？”。但是出现了下一个问题。我们如何找到它们？还是我们如何找到角落？我们以一种直观的方式回答了这一问题，即寻找图像中在其周围所有区域中移动（少量）变化最大的区域。在接下来的章节中，这将被投影到计算机语言中。因此，找到这些图像特征称为特征检测。</p><p>​        我们在图像中找到了特征。找到它之后，你应该能够在其他图像中找到相同的图像。怎么做？我们围绕该特征采取一个区域，我们用自己的语言解释它，例如“上部是蓝天，下部是建筑物的区域，在建筑物上有玻璃等”，而你在另一个建筑物中搜索相同的区域图片。基本上，你是在描述特征。同样，计算机还应该描述特征周围的区域，以便可以在其他图像中找到它。所谓的描述称为<strong>特征描述</strong>。获得特征及其描述后，你可以在所有图像中找到相同的功能并将它们对齐，缝合在一起或进行所需的操作。</p><p>​        因此，在此模块中，我们正在寻找OpenCV中的不同算法来查找功能，对其进行描述，进行匹配等。</p><h2 id="哈里斯角检测">哈里斯角检测</h2><h3 id="原理-10">原理</h3><p>[论文原文](<a href="https://zwn2001.github.io/2022/02/26/opencv-basic/A">https://zwn2001.github.io/2022/02/26/opencv-basic/A</a> Combined Corner and Edge Detector.pdf)</p><p>在上一部分中，我们看到角是图像中各个方向上强度变化很大的区域。<strong>Chris Harris和Mike Stephens在1988年的论文《组合式拐角和边缘检测器</strong>》中做了一次尝试找到这些拐角的尝试，所以现在将其称为哈里斯拐角检测器。他把这个简单的想法变成了数学形式。它基本上找到了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>u</mi><mtext>，</mtext><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(u，v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mord cjk_fallback">，</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>在所有方向上位移的强度差异。表示如下：</p><img src="127.png" style="zoom: 100%;" /><p>可以用如下图来表示：</p><img src="128.png" style="zoom: 100%;" /><h3 id="函数-12">函数</h3><p><code>cv.cornerHarris(img,blockSize,ksize,k)</code></p><p>其参数为：</p><ul><li>img 输入图像，应为<strong>灰度和float32类型</strong>。</li><li>blockSize 是拐角检测考虑的<strong>邻域大小</strong></li><li>ksize 使用的Sobel导数的光圈参数。</li><li>k 等式中的哈里斯检测器自由参数。</li><li>dst 返回值，灰度图像</li></ul><p><code>corners = cv2.cornerSubPix(gray, np.float32(centroids), (5, 5), (-1, -1), criteria)</code><br>具有亚像素精度的角点：有时可能需要以最大的精度找到角点。OpenCV附带了一个函数cv2.cornerSubPix（），它可以进一步细化以亚像素精度检测到的角点。</p><h3 id="样例">样例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    img = cv.imread(<span class="string">&#x27;image\\0.jpg&#x27;</span>)</span><br><span class="line">    gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)</span><br><span class="line">    <span class="comment"># 寻找哈里斯角</span></span><br><span class="line">    gray = np.float32(gray)</span><br><span class="line">    dst = cv.cornerHarris(gray, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0.04</span>)</span><br><span class="line">    dst = cv.dilate(dst, <span class="literal">None</span>)<span class="comment">#膨胀</span></span><br><span class="line">    ret, dst = cv.threshold(dst, <span class="number">0.01</span> * dst.<span class="built_in">max</span>(), <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">    cv.imshow(<span class="string">&quot;dst&quot;</span>, dst)</span><br><span class="line">    dst = np.uint8(dst)</span><br><span class="line">    <span class="comment"># 寻找质心</span></span><br><span class="line">    ret1, labels, stats, centroids = cv.connectedComponentsWithStats(dst)</span><br><span class="line">    <span class="comment"># 定义停止和完善拐角的条件</span></span><br><span class="line">    criteria = (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, <span class="number">100</span>, <span class="number">0.001</span>)</span><br><span class="line">    corners = cv.cornerSubPix(gray, np.float32(centroids), (<span class="number">5</span>, <span class="number">5</span>), (-<span class="number">1</span>, -<span class="number">1</span>), criteria)</span><br><span class="line">    <span class="comment"># 绘制角点和细化的亚像素点</span></span><br><span class="line">    res = np.hstack((centroids, corners))</span><br><span class="line">    res = np.int0(res)</span><br><span class="line">    <span class="comment"># Harris角点用红色像素标记，精细角点用绿色像素标记</span></span><br><span class="line">    img[res[:, <span class="number">1</span>], res[:, <span class="number">0</span>]] = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>]</span><br><span class="line">    img[res[:, <span class="number">3</span>], res[:, <span class="number">2</span>]] = [<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    gray = cv.cvtColor(gray, cv.COLOR_GRAY2BGR)</span><br><span class="line">    gray[res[:, <span class="number">1</span>], res[:, <span class="number">0</span>]] = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>]</span><br><span class="line">    gray[res[:, <span class="number">3</span>], res[:, <span class="number">2</span>]] = [<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>]</span><br><span class="line">    cv.imshow(<span class="string">&quot;gray&quot;</span>, gray)</span><br><span class="line">    cv.imshow(<span class="string">&#x27;cornerSubPix res&#x27;</span>, img)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cv.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="129.png" style="zoom: 100%;" /><h2 id="Shi-tomas拐角检测器和益于跟踪的特征">Shi-tomas拐角检测器和益于跟踪的特征</h2><h3 id="原理-11">原理</h3><p>在上一章中，我们看到了Harris Corner Detector。1994年下半年，J。Shi和C. Tomasi在他们的论文《<strong>有益于跟踪的特征</strong>》中做了一个小修改，与Harris Harris Detector相比，显示了更好的结果。哈里斯角落探测器的计分功能由下式给出：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>=</mo><msub><mi>λ</mi><mn>1</mn></msub><msub><mi>λ</mi><mn>2</mn></msub><mo>−</mo><mi>k</mi><mo stretchy="false">(</mo><msub><mi>λ</mi><mn>1</mn></msub><mo>+</mo><msub><mi>λ</mi><mn>2</mn></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">R=λ_1λ_2−k(λ_1+λ_2)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></p><p>取而代之的是，史托马西提出：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><msub><mi>λ</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>λ</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">R=min(λ_1,λ_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">min</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>如果大于阈值，则将其视为拐角。如果像在Harris Corner Detector中那样在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>λ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>λ</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">λ_1−λ_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>空间中绘制它，则会得到如下图像：</p><img src="130.png" style="zoom: 100%;" /><p>从图中可以看到，只有当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>λ</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">λ_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>λ</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">λ_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>大于最小值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>λ</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">λ_{min}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">min</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>时，才将其视为拐角（绿色区域）。</p><h3 id="样例-2">样例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    img = cv.imread(<span class="string">&#x27;image\\5.png&#x27;</span>)</span><br><span class="line">    gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)</span><br><span class="line">    corners = cv.goodFeaturesToTrack(gray, <span class="number">25</span>, <span class="number">0.01</span>, <span class="number">10</span>)</span><br><span class="line">    corners = np.int0(corners)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> corners:</span><br><span class="line">        x, y = i.ravel()</span><br><span class="line">        cv.circle(img, (x, y), <span class="number">3</span>, <span class="number">255</span>, -<span class="number">1</span>)</span><br><span class="line">    plt.imshow(img), plt.show()</span><br><span class="line"></span><br><span class="line">    cv.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="131.png" style="zoom: 40%;" /><p>此功能更适合跟踪。我们将看到使用它的时机。</p><h2 id="SIFT尺度不变特征变换">SIFT尺度不变特征变换</h2><p>[论文原文](<a href="https://zwn2001.github.io/2022/02/26/opencv-basic/Distinctive">https://zwn2001.github.io/2022/02/26/opencv-basic/Distinctive</a> Image Features from Scale-Invariant Keypoints.pdf)</p><p>在前两章中，我们看到了一些像Harris这样的拐角检测器。它们是旋转不变的，这意味着即使图像旋转了，我们也可以找到相同的角。很明显，因为转角在旋转的图像中也仍然是转角。但是缩放呢？如果缩放图像，则拐角可能不是角。例如，检查下面的简单图像。在同一窗口中放大小窗口中小图像中的拐角时，该角是平坦的。因此，Harris拐角不是尺度不变的。</p><img src="132.png" style="zoom: 120%;" /><p>因此，在2004年，不列颠哥伦比亚大学的D.Lowe在他的论文《尺度不变关键点中的独特图像特征》中提出了一种新算法，即尺度不变特征变换(SIFT)，该算法提取关键点并计算其描述算符。SIFT算法主要包括四个步骤。 我们将一一看到它们。</p><h1>霍夫变换</h1><p>霍夫变换是一种在图像中寻找直线、圆形以及其他简单形状的方法。霍夫变换采用类似于<strong>投票</strong>的方式来获取当前图像内的形状集合，该变换由 Paul Hough（霍夫）于1962年首次提出。最初的霍夫变换只能用于检测直线，经过发展后，霍夫变换不仅能够识别直线，还能识别其他简单的图形结构，常见的有圆、椭圆等。<br>本章主要介绍霍夫直线变换和霍夫圆变换。霍夫直线变换用来在图像内寻找直线，霍夫圆变换用来在图像内寻找圆。在 OpenCV 中，前者可以用函数<code> cv2.HoughLines()</code>和函数<code>cv2.HoughLinesP()</code>实现， 后者可以用函数<code>cv2.HoughCircles()</code>实现。</p><h2 id="霍夫线变换">霍夫线变换</h2><h3 id="原理-12">原理</h3><p>一条直线可由两个点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A=(x_1,y_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">B=(x_2,y_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>确定(笛卡尔坐标)</p><img src="99.png" style="zoom: 120%;" /><p>另一方面，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>k</mi><mi>x</mi><mo>+</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">y = kx + q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>，也可以写成关于（k,q）的函数表达式（霍夫空间）：</p><img src="100.png" style="zoom: 100%;" /><p>对应的变换可以通过图形直观表示：</p><img src="101.png" style="zoom: 100%;" /><p>变换后的空间成为<strong>霍夫空间</strong>。即：<strong>笛卡尔坐标系中一条直线，对应霍夫空间的一个点</strong>。</p><p>反过来同样成立（<strong>霍夫空间的一条直线，对应笛卡尔坐标系的一个点</strong>）：</p><img src="102.png" style="zoom: 100%;" /><p>再来看看A、B两个点，对应霍夫空间的情形：</p><img src="103.png" style="zoom: 100%;" /><p>一步步来，再看一下三个点共线的情况：</p><img src="104.png" style="zoom: 100%;" /><hr><p><strong>根本原理：</strong></p><p><strong>可以看出如果笛卡尔坐标系的点共线，这些点在霍夫空间对应的直线交于一点：这也是必然，共线只有一种取值可能</strong>。那么，<strong>对于笛卡尔空间中的一条直线，直线上所有点在霍夫空间内对应的直线一定交于一点</strong>。霍夫变换的投票策略就类似于阈值处理，在某点相交的直线超过一定数量，则认为笛卡尔空间中存在这样的一条直线。</p><hr><p>如果不止一条直线呢？再看看多个点的情况（有两条直线）：</p><img src="105.png" style="zoom: 100%;" /><p>其实（3，2）与（4，1）也可以组成直线，只不过它有两个点确定，而图中A、B两点是由三条直线汇成，这也是<strong>霍夫变换的后处理的基本方式</strong>：<strong>选择由尽可能多直线汇成的点</strong>。</p><p>看看，霍夫空间：选择由三条交汇直线确定的点（中间图），对应的笛卡尔坐标系的直线（右图）。</p><img src="106.png" style="zoom: 100%;" /><p>到这里问题似乎解决了，已经完成了霍夫变换的求解，但是如果像下图这种情况呢？</p><img src="107.png" style="zoom: 80%;" /><p>k=∞是不方便表示的，而且q怎么取值呢，这样不是办法。因此考虑<strong>将笛卡尔坐标系换为：极坐标表示</strong>。</p><img src="108.png" style="zoom: 80%;" /><p><strong>上图右边公式竟然是错的，极坐标公式如下，自己看的时候要修正下：</strong></p><p><img src="https://www.zhihu.com/equation?tex=xcos%5Ctheta+%2B+y+sin%5Ctheta%3D+%5Crho" alt="[公式]"></p><p>在极坐标系下，其实是一样的：<strong>极坐标的点→霍夫空间的直线，只不过霍夫空间不再是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>k</mi><mo separator="true">,</mo><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(k,q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span>的参数，而是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>ρ</mi><mo separator="true">,</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\rho,\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">ρ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span>的参数</strong>，给出对比图：</p><img src="109.png" style="zoom: 80%;" /><p><strong>如果线在原点下方通过，则它将具有正的ρ且角度小于180。如果线在原点上方，则将角度取为小于180，而不是大于180的角度。ρ取负值。任何垂直线将具有0度，水平线将具有90度</strong>。</p><p>现在，让我们看一下霍夫变换如何处理线条。任何一条线都可以用(ρ，θ)这两个术语表示。因此，首先创建2D数组或累加器（以保存两个参数的值），并将其初始设置为0。让行表示ρ，列表示θ。阵列的大小取决于所需的精度。假设您希望角度的精度为1度，则需要180列。对于ρ，最大距离可能是图像的对角线长度。因此，以一个像素精度为准，行数可以是图像的对角线长度。</p><p>考虑一个<code>100x100</code>的图像，中间有一条水平线。取直线的第一点。您知道它的<code>(x，y)</code>值。现在在线性方程式中，将值θ= 0,1,2，… 180放进去，然后检查得到ρ。对于每对(ρ，θ)，在累加器中对应的(ρ，θ)单元格将值增加1。所以现在在累加器中，单元格(50,90)= 1以及其他一些单元格。</p><p>现在，对行的第二个点。执行与上述相同的操作。递增(ρ，θ)对应的单元格中的值。这次，单元格<code>(50,90)=2</code>。实际上，您正在对(ρ，θ)值进行投票。您对线路上的每个点都继续执行此过程。在每个点上，单元格(50,90)都会增加或投票，而其他单元格可能会或可能不会投票。这样一来，最后，单元格(50,90)的投票数将最高。因此，如果您在累加器中搜索最大票数，则将获得(50,90)值，该值表示该图像中的一条线与原点的距离为50，角度为90度。在下面的动画中很好地显示了该图片(图片提供：Amos Storkey)</p><p>除此以外，也同样可以使用阈值对票数进行处理。</p><img src="111.gif" style="zoom: 140%;" /><p><strong>也就是说我们遍历θ的值，从0-180°，并且同时代入（x,y）的值，求得对应的ρ。</strong></p><p><strong>找到0-180°中，哪个度数下的ρ值相同的数量最多。这反向说明了，在一个ρ和θ组成的函数中，符合的点数最多。</strong></p><h3 id="函数与示例">函数与示例</h3><p>函数cv2.HoughLines() 的语法格式为：<br><code>lines=cv2.HoughLines (image,rho,theta,threshold) </code><br>式中：</p><ul><li><p>image是输入图像 ， 即源图像， <strong>必须是8位的单通道二值图像</strong>。 如果是其他类型的图像， 在进行霍夫变换之前， 需要将其修改为指定格式。</p><ul><li><strong>输入图像应该是二进制图像，因此在应用霍夫变换之前，建议应用阈值二值化或使用Canny边缘检测</strong>。</li></ul></li><li><p>rho为以像素为单位的距离ρ的精度，一般为1。</p></li><li><p>theta为角度θ的精度。 一般情况下， 使用的精度是<code>np.pi/180</code> ， 表示要搜索所有可能的角度。</p></li><li><p>threshold是阈值。 <strong>该值越小， 判定出的直线就越多</strong>。 通过上一节的分析可知，识别直线时，要判定有多少个点位千该直线上。在判定直线是否存在时，对直线所穿过的点的数星进行评估，如果直线所穿过的点的数量小于阈值，则认为这些点恰好（偶然）在算法上构成直线， 但是在源图像中该直线并不存在；如果大于阈值，则认为直线存在。所以，如果阈值较小，就会得到较多的直线；阈值较大，就会得到较少的直线。</p></li><li><p>返回值lines中的每个元素都是一对浮点数，表示检测到的直线的参数，即(ρ，θ)，<code>numpy.ndarray</code>类型。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    img = cv.imread(<span class="string">&#x27;image\\hflines.png&#x27;</span>)</span><br><span class="line">    img2 = img.copy()</span><br><span class="line">    gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)</span><br><span class="line">    edges = cv.Canny(gray, <span class="number">50</span>, <span class="number">150</span>, apertureSize=<span class="number">3</span>)</span><br><span class="line">    lines = cv.HoughLines(edges, <span class="number">1</span>, np.pi / <span class="number">180</span>, <span class="number">200</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        rho, theta = line[<span class="number">0</span>]</span><br><span class="line">        a = np.cos(theta)</span><br><span class="line">        b = np.sin(theta)</span><br><span class="line">        x0 = a * rho</span><br><span class="line">        y0 = b * rho</span><br><span class="line">        x1 = <span class="built_in">int</span>(x0 + <span class="number">1000</span> * (-b))</span><br><span class="line">        y1 = <span class="built_in">int</span>(y0 + <span class="number">1000</span> * (a))</span><br><span class="line">        x2 = <span class="built_in">int</span>(x0 - <span class="number">1000</span> * (-b))</span><br><span class="line">        y2 = <span class="built_in">int</span>(y0 - <span class="number">1000</span> * (a))</span><br><span class="line">        cv.line(img, (x1, y1), (x2, y2), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">    res = np.vstack((img2, img))</span><br><span class="line">    cv.imshow(<span class="string">&quot;res&quot;</span>,res)</span><br><span class="line"></span><br><span class="line">    cv.waitKey()</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="112.png" style="zoom: 60%;" /><p>较粗的直线是因为有多条直线靠近在一起 ， 即检测出了重复的结果。 在一些情况下， 使用霍夫变换可能将图像中有限个点碰巧对齐的非直线关系检测为直线， 而导致误检测， 尤其是一些复杂背景的图像， 误检测会很明显。 此图中该间题虽然并不是特别明显， 但是如果将阈值 threshold的值设置得稍小些， 仍然会出现较多重复的检测结果。</p><h3 id="概率霍夫变换">概率霍夫变换</h3><p>概率霍夫变换对基本霍夫变换算法进行了一些修正，是霍夫变换算法的优化。它没有考虑所有的点。相反，它只需要一个足以进行线检测的随机点子集即可。</p><p>为了更好地判断直线（线段），概率霍夫变换算法还对选取直线的方法作了两点改进：</p><ul><li><p><strong>所接受直线的最小长度</strong>。如果有超过阈值个数的像素点构成了一条直线，但是这条直线很短，那么就不会接受该直线作为判断结果，而认为这条直线仅仅是图像中的若干个像素点恰好随机构成了一种算法上的直线关系而已，实际上原图中并不存在这条直线。</p></li><li><p><strong>接受直线时允许的最大像素点间距</strong>。如果有超过阈值个数的像素点构成了一条直线，但是这组像素点之间的距离都很远，就不会接受该直线作为判断结果，而认为这条直线仅仅是图像中的若干个像素点恰好随机构成了一种算法上的直线关系而已，实际上原始图像中并不存在这条直线。</p></li></ul><p>概率霍夫变换是我们看到的霍夫变换的优化。它没有考虑所有要点。取而代之的是，<strong>它仅采用随机的点子集，足以进行线检测。只是我们必须降低阈值</strong>。</p><h4 id="函数与示例-2">函数与示例</h4><p><code>lines = cv2.HoughLinesP(image, rho, theta, threshold, minLineLength,maxLineGap)</code></p><ul><li><p>image是输入图像，即源图像，必须为8位的单通道二值图像。对千其他类型的图像，在进行霍夫变换之前，需要将其修改为这个指定的格式。</p></li><li><p>rho为以像素为单位的距离ρ的精度，一般为1。</p></li><li><p>theta为角度θ的精度。 一般情况下， 使用的精度是<code>np.pi/180</code> ， 表示要搜索所有可能的角度。</p></li><li><p>threshold是阈值。 <strong>该值越小， 判定出的直线就越多</strong>。</p></li><li><p>minLineLength用来控制接受直线的最小长度，默认为0。</p></li><li><p>maxLineGap用来控制接受共线线段之间的最小间隔，即一条线中两点的最大间隔，默认为0。</p></li><li><p>返回值lines中的每个元素都是一对浮点数，表示检测到的直线的参数，即(ρ，θ)，<code>numpy.ndarray</code>类型。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    img = cv.imread(<span class="string">&#x27;image\\hflines.png&#x27;</span>)</span><br><span class="line">    img2 = img.copy()</span><br><span class="line">    gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)</span><br><span class="line">    edges = cv.Canny(gray, <span class="number">50</span>, <span class="number">150</span>, apertureSize=<span class="number">3</span>)</span><br><span class="line">    lines = cv.HoughLinesP(edges, <span class="number">1</span>, np.pi / <span class="number">180</span>, <span class="number">100</span>, minLineLength=<span class="number">100</span>, maxLineGap=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        x1, y1, x2, y2 = line[<span class="number">0</span>]</span><br><span class="line">        cv.line(img, (x1, y1), (x2, y2), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">    res = np.vstack((img2, img))</span><br><span class="line">    cv.imshow(<span class="string">&quot;res&quot;</span>, res)</span><br><span class="line"></span><br><span class="line">    cv.waitKey()</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="113.png" style="zoom: 60%;" /><p>细心观察可以发现，这里画出来的是线段。</p><h2 id="霍夫圆变换">霍夫圆变换</h2><p>圆在数学上表示为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><msub><mi>x</mi><mrow><mi>c</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi></mrow></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><msub><mi>y</mi><mrow><mi>c</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi></mrow></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>=</mo><msup><mi>r</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">(x−x_{center})^2+(y−y_{center})^2=r^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ce</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">er</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ce</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">er</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mi>c</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi></mrow></msub><mo separator="true">,</mo><msub><mi>y</mi><mrow><mi>c</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_{center},y_{center})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ce</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">er</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ce</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">er</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>是圆的中心，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>是圆的半径。从等式中，我们可以看到我们有3个参数，因此我们需要3D累加器进行霍夫变换，这将非常低效。因此，OpenCV使用更加技巧性的方法，即使用边缘的梯度信息的<strong>Hough梯度方法</strong>。</p><p>这种方法采用的策略是两轮筛选。 <strong>第1轮筛选找出可能存在圆的位置（圆心）；第2轮再根据第1轮的结果筛选出半径大小</strong>。</p><p>与用来决定是否接受直线的两个参数”接受直线的最小长度 (<code>minLineLength</code>) ”和“接受直线时允许的最大像素点间距 (<code>MaxLineGap</code>) ”类似， 霍夫圆变换也有几个用于决定是否接受圆的参数：圆心间的最小距离、 圆的最小半径、 圆的最大半径。</p><h3 id="函数-13">函数</h3><p>在OpenCV中 ， 实现霍夫圆变换的是函数<code>cv2.HoughCircles ()</code>， <strong>该函数将Canny边缘检测和霍夫变换结合</strong>。 其语法格式为：</p><p><code>circles=cv2.HoughCircles (image, method, dp, minDist, param1, param2, minRadius, maxRadius) </code></p><ul><li><p><code>image</code>：输入图像， 即源图像， 类型为<strong>8位的单通道灰度图像</strong>。</p></li><li><p><code>method</code>: 检测方法。 截止到OpenCV 4.0.0-pre版本 ， HOUGH_GRADIENT是唯一可用的参数值。 该参数代表的是霍夫圆检测中两轮检测所使用的方法。</p></li><li><p><code>dp</code> ：<strong>累计器分辨率， 它是一个分割比率， 用来指定图像分辨率与圆心累加器分辨率的比例</strong>。 例如， 如果<code>dp=1</code>, 则输入图像和累加器具有相同的分辨率。</p></li><li><p><code>minDist</code>：<strong>圆心间的最小间距</strong>。 该值被作为阈值使用， 如果存在圆心间距离小于该值的多个圆，则仅有一个会被检测出来。 因此， 如果该值太小， 则会有多个临近的圆被检测出来；如果该值太大， 则可能会在检测时漏掉一些圆。</p></li><li><p><code>param1</code>: 该参数是缺省的 ， 在缺省时默认值为100。 它对应的是Canny边缘检测器的高阈值（<strong>低阈值是高阈值的二分之一</strong>）。</p></li><li><p><code>param2</code>: <strong>圆心位置必须收到的投票数</strong>。 只有在第1轮筛选过程中，投票数超过该值的圆，才有资格进入第2轮的筛选。 因此，该值越大，检测到的圆越少；该值越小，检测到的圆越多。这个参数是缺省的，在缺省时具有默认值100。</p></li><li><p><code>minRadius</code>：<strong>圆半径的最小值，小于该值的圆不会被检测出来</strong>。 该参数是缺省的，在缺省时具有默认值0，此时该参数不起作用。</p></li><li><p><code>maxRadius</code>：<strong>圆半径的最大值，大于该值的圆不会被检测出来</strong>。该参数是缺省的，在缺省时具有默认值0，此时该参数不起作用。</p></li><li><p><code>circles</code>: 返回值，由圆心坐标和半径构成的<code>numpy.ndarray</code>。</p></li></ul><p>​         需要特别注意，在调用函数 <code>cv2.HoughLinesCircles()</code>之前，要对源图像进行平滑操作，以减少图像中的噪声，避免发生误判。</p><h3 id="样例-3">样例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    img = cv.imread(<span class="string">&#x27;image\\6.png&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">    img = cv.medianBlur(img, <span class="number">5</span>)<span class="comment">#中值滤波</span></span><br><span class="line">    cimg = cv.cvtColor(img, cv.COLOR_GRAY2BGR)</span><br><span class="line">    circles = cv.HoughCircles(img, cv.HOUGH_GRADIENT, <span class="number">1</span>, <span class="number">20</span>,</span><br><span class="line">                              param1=<span class="number">50</span>, param2=<span class="number">50</span>, minRadius=<span class="number">0</span>, maxRadius=<span class="number">0</span>)</span><br><span class="line">    circles = np.uint16(np.around(circles))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> circles[<span class="number">0</span>, :]:</span><br><span class="line">        <span class="comment"># 绘制外圆</span></span><br><span class="line">        cv.circle(cimg, (i[<span class="number">0</span>], i[<span class="number">1</span>]), i[<span class="number">2</span>], (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 绘制圆心</span></span><br><span class="line">        cv.circle(cimg, (i[<span class="number">0</span>], i[<span class="number">1</span>]), <span class="number">2</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">3</span>)</span><br><span class="line">    img = cv.cvtColor(img, cv.COLOR_GRAY2BGR)</span><br><span class="line">    res = np.hstack((img, cimg))</span><br><span class="line">    cv.imshow(<span class="string">&#x27;detected circles&#x27;</span>, res)</span><br><span class="line">    cv.imwrite(<span class="string">&#x27;res.png&#x27;</span>, res)</span><br><span class="line">    cv.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="114.png" style="zoom: 100%;" /><img src="116.png" style="zoom: 100%;" /><p>注：不同图像间的检测需要调参，尤其是<code>parm2</code>，第二张图要调成32</p><h1>图像分割与提取</h1><h2 id="分水岭算法">分水岭算法</h2><h3 id="原理-13">原理</h3><p>​           任何灰度图像都可以看作是一个地形表面，其中高强度表示山峰，低强度表示山谷。你开始用不同颜色的水(标签)填充每个孤立的山谷(局部最小值)。随着水位的上升，根据附近的山峰(坡度)，来自不同山谷的水明显会开始合并，颜色也不同。为了避免这种情况，你要<strong>在水融合的地方建造屏障</strong>。你继续填满水，建造障碍，<strong>直到所有的山峰都在水下。然后你创建的屏障将返回你的分割结果</strong>。这就是Watershed背后的“思想”。</p><p>​        但是这种方法会由于图像中的噪声或其他不规则性而产生过度分割的结果。因此OpenCV实现了一个<strong>基于标记的分水岭算法</strong>，你可以指定哪些是要合并的山谷点，哪些不是。这是一个<strong>交互式的图像分割</strong>。我们所做的是给我们知道的对象赋予不同的标签。<strong>用一种颜色(或强度)标记我们确定为前景或对象的区域，用另一种颜色标记我们确定为背景或非对象的区域，最后用<code>0</code>标记我们不确定的区域</strong>。这是我们的标记。然后应用分水岭算法。然后我们的标记将使用我们给出的标签进行更新，对象的边界值将为<code>-1</code>。</p><img src="115.gif" style="zoom: 120%;" /><h3 id="使用">使用</h3><p>直接使用分水岭算法有时效果并不好，这是图像中的噪声、边界相交、模糊等原因导致的。</p><p>我们先从寻找硬币的近似估计开始。因此，我们可以使用Otsu二值化。</p><img src="117.png" style="zoom: 100%;" /><p>现在我们需要去除图像中的任何白点噪声。为此，我们可以使用形态学扩张。要去除对象中的任何小孔，我们可以使用形态学侵蚀（开运算）。对于前景区域，我们可以使用距离变换函数找到。因此，现在我们可以确定，靠近对象中心的区域是前景，而离对象中心很远的区域是背景。<strong>我们不确定的唯一区域是硬币的边界区域</strong>。</p><p>因此，我们需要提取我们可确定为硬币的区域。侵蚀会去除边界像素。因此，无论剩余多少，我们都可以肯定它是硬币。如果物体彼此不接触，那将起作用。但是，由于它们彼此接触，因此另一个好选择是找到距离变换并应用适当的阈值。接下来，<strong>我们需要找到我们确定它们不是硬币的区域。为此，我们扩张了结果。膨胀将对象边界增加到背景。这样，由于边界区域已删除，因此我们可以确保结果中背景中的任何区域实际上都是背景</strong>。参见下图。</p><p><img src="119.png" alt="左侧为前景，右侧是确定的背景"></p><p>剩下的区域是我们不知道的区域，无论是硬币还是背景。分水岭算法应该找到它。这些区域通常位于前景和背景相遇（甚至两个不同的硬币相遇）的硬币边界附近。我们称之为<strong>边界</strong>。可以通过从确定的背景区域中减去确定的前景区域来获得。</p><p><img src="120.png" alt="边界"></p><p>查看结果。在阈值图像中，我们得到了一些硬币区域，我们确定它们是硬币，并且现在已分离它们。（在某些情况下，你可能只对前景分割感兴趣，而不对分离相互接触的对象感兴趣。在那种情况下，你无需使用距离变换，只需侵蚀就足够了。侵蚀只是提取确定前景区域的另一种方法。）</p><p>现在我们可以确定哪些是硬币的区域，哪些是背景。因此，我们创建了标记（它的大小与原始图像的大小相同，但具有int32数据类型），并标记其中的区域。<strong>我们肯定知道的区域（无论是前景还是背景）都标有任何正整数，但是带有不同的整数，而我们不确定的区域则保留为零</strong>。为此，我们使用<code>cv.connectedComponents()</code>。它用0标记图像的背景，然后其他对象用从1开始的整数标记。</p><p>但是我们知道，<strong>如果背景标记为0，则分水岭会将其视为未知区域。所以我们想用不同的整数来标记它。相反，我们将未知定义的未知区域标记为0</strong>。</p><p>现在我们的标记已准备就绪。现在是最后一步的时候了，使用分水岭算法。然后标记图像将被修改。边界区域将标记为-1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    img = cv.imread(<span class="string">&#x27;image\\0.jpg&#x27;</span>)</span><br><span class="line">    gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)</span><br><span class="line">    ret, thresh = cv.threshold(gray, <span class="number">0</span>, <span class="number">255</span>, cv.THRESH_BINARY_INV + cv.THRESH_OTSU)</span><br><span class="line">    <span class="comment"># 噪声去除</span></span><br><span class="line">    kernel = np.ones((<span class="number">3</span>, <span class="number">3</span>), np.uint8)</span><br><span class="line">    <span class="comment">#这里进行了迭代，其实不迭代也还好</span></span><br><span class="line">    opening = cv.morphologyEx(thresh, cv.MORPH_OPEN, kernel, iterations=<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 确定背景区域</span></span><br><span class="line">    sure_bg = cv.dilate(opening, kernel, iterations=<span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 寻找前景区域</span></span><br><span class="line">    dist_transform = cv.distanceTransform(opening, cv.DIST_L2, <span class="number">5</span>)</span><br><span class="line">    ret2, sure_fg = cv.threshold(dist_transform, <span class="number">0.7</span> * dist_transform.<span class="built_in">max</span>(), <span class="number">255</span>, cv.THRESH_BINARY)</span><br><span class="line">    <span class="comment"># 找到未知区域</span></span><br><span class="line">    sure_fg = np.uint8(sure_fg)</span><br><span class="line">    unknown = cv.subtract(sure_bg, sure_fg)</span><br><span class="line">    <span class="comment"># 类别标记</span></span><br><span class="line">    ret3, markers = cv.connectedComponents(sure_fg)</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">131</span>)</span><br><span class="line">    plt.imshow(markers)</span><br><span class="line">    plt.title(<span class="string">&#x27;mark&#x27;</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 为所有的标记加1，保证背景是1而不是0</span></span><br><span class="line">    markers = markers + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 现在让所有的未知区域为0</span></span><br><span class="line">    markers[unknown == <span class="number">255</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">132</span>)</span><br><span class="line">    plt.imshow(markers)</span><br><span class="line">    plt.title(<span class="string">&#x27;mark unknown&#x27;</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line"></span><br><span class="line">    markers = cv.watershed(img, markers)</span><br><span class="line">    img[markers == -<span class="number">1</span>] = [<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    plt.subplot(<span class="number">133</span>)</span><br><span class="line">    plt.imshow(img)</span><br><span class="line">    plt.title(<span class="string">&#x27;watershed result&#x27;</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    cv.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="122.png" style="zoom: 100%;" /><h3 id="距离变换函数distanceTransform">距离变换函数<code>distanceTransform()</code></h3><p>当图像内的各个子图没有连接时， 可以直接使用形态学的腐蚀操作确定前景对象， 但是如果图像内的子图连接在一起时，就很难确定前景对象了。此时，借助于距离变换函数<code>cv2.distanceTransform()</code>可以方便地将<strong>前景对象</strong>提取出来。</p><p><strong>距离变换函数<code>cv2.distanceTransform()</code>计算二值图像内任意点到最近背景点的距离</strong>。一般情况下，该函数计算的是图像内非零值像素点到最近的零值像素点的距离， 即计算二值图像中所有像素点距离其最近的值为0的像素点的距离。 当然， 如果像素点本身的值为0, 则这个距离也为0。</p><p>距离变换函数<code>cv2.distanceTransform()</code>的计算结果反映了各个像素与背景（值为0的像素点）的距离关系。 通常情况下：</p><ul><li><p>如果前景对象的中心（质心）距离值为0的像素点距离较远， 会得到一个较大的值。</p></li><li><p>如果前景对象的边缘距离值为0的像素点较近， 会得到一个较小的值。<br><strong>如果对上述计算结果进行阈值化， 就可以得到图像内子图的中心、 骨架等信息</strong>。 距离变换函数<code>cv2.distanceTransform()</code>可以用于计算对象的中心，还能细化轮廓、获取图像前景等，有多种功能。</p><ul><li><p>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dist_transform = cv.distanceTransform(img, cv.DIST_L2, <span class="number">5</span>)</span><br><span class="line">ret2, sure_fg = cv.threshold(dist_transform, <span class="number">0.7</span> * dist_transform.<span class="built_in">max</span>(), <span class="number">255</span>, cv.THRESH_BINARY)</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>距离变换函数cv2.distanceTransform(）的语法格式为：<br><code>dst=cv2.distanceTransform(src,distanceType,maskSize[,dstType]])</code></p><p>式中：</p><ul><li>src是8位单通道的二值图像。</li><li><code>distanceType</code>为距离类型参数，其具体值和含义如表所示</li></ul><img src="118.png" style="zoom: 100%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    img = cv.imread(<span class="string">&#x27;image\\0.jpg&#x27;</span>)</span><br><span class="line">    gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)</span><br><span class="line">    ret, thresh = cv.threshold(gray, <span class="number">0</span>, <span class="number">255</span>, cv.THRESH_BINARY_INV + cv.THRESH_OTSU)</span><br><span class="line">    kernel = np.ones((<span class="number">3</span>, <span class="number">3</span>), np.uint8)</span><br><span class="line">    opening = cv.morphologyEx(thresh, cv.MORPH_OPEN, kernel, iterations=<span class="number">2</span>)</span><br><span class="line">    sure_bg = cv.dilate(opening, kernel, iterations=<span class="number">3</span>)</span><br><span class="line">    dist_transform = cv.distanceTransform(opening, cv.DIST_L2, <span class="number">5</span>)</span><br><span class="line">    res = np.hstack((gray, dist_transform))</span><br><span class="line">    cv.imwrite(<span class="string">&#x27;res.png&#x27;</span>, res)</span><br><span class="line"></span><br><span class="line">    cv.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><img src="121.png" style="zoom: 80%;" /><h3 id="函数connectedComponents">函数<code>connectedComponents()</code></h3><p>明确了确定前景后，就可以对确定前景图像进行标注了。在OpenCV中，可以使用函数<code>cv2.connectedComponents()</code>进行标注。该函数会将背景标注为0, 将其他的对象使用从1开始的正整数标注。</p><p>函数<code>cv2.connectedComponents()</code>的语法格式为：</p><p><code>retval,labels=cv2.connectedComponents (image)</code></p><p>式中：</p><ul><li>image为<strong>8位单通道</strong>的待标注图像。</li><li>retval为返回的标注的数量。</li><li>labels为标注的结果图像。</li></ul><h2 id="交互式前景提取">交互式前景提取</h2><h3 id="GrabCut算法的具体实施过程"><code>GrabCut</code>算法的具体实施过程</h3><ul><li><p>将前景所在的大致位置使用矩形框标注出来。值得注意的是，<strong>此时矩形框框出的仅仅是前景的大致位置，其中既包含前景又包含背景，所以该区域实际上是未确定区域。但是，该区域以外的区域被认为是 &quot;确定背景”</strong>。</p></li><li><p>根据矩形框外部的 &quot;确定背景“ 数据来区分<strong>矩形框区域内</strong>的前景和背景。</p></li><li><p>用高斯混合模型 (Gaussians Mixture Model,GMM) 对前景和背景建模。GMM会根据用户的输入学习并创建新的像素分布，对未分类的像素（可能是背景也可能是前景），根据其与已知分类像素（前景和背景）的关系进行分类。</p></li><li><p>根据像素分布情况生成一幅图，图中的节点就是各个像素点。除了像素点之外，还有两个节点：<strong>前景节点和背景节点</strong>。<strong>所有的前景像素都和前景节点相连，所有的背景像素都和背景节点相连</strong>。每个像素连接到前景节点或背景节点的边的权重由像素是前景或背景的概率来决定。</p></li><li><p>图中的每个像素除了与前景节点或背景节点相连外，彼此之间还存在着连接。<strong>两个像素连接的边的权重值由它们的相似性决定，两个像素的颜色越接近，边的权重值越大</strong>。</p></li><li><p><strong>完成节点连接后，需要解决的问题变成了一幅连通的图。在该图上根据各自边的权重关系进行切割，将不同的点划分为前景节点和背景节点</strong>。</p></li><li><p>不断重复上述过程， 直至分类收敛为止。</p></li></ul><img src="124.png" style="zoom: 80%;" /><h3 id="函数-14">函数</h3><p>在OpenCV中， 实现交互式前景提取的函数是<code>cv2.grabCut ()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mask,bgdModel,fgdModel=cv2.grabCut(img,mask,rect,bgdModel,fgdModel,iterCount[,mode ])</span><br></pre></td></tr></table></figure><ul><li><p>img为输入图像，要求是<strong>8位3通道</strong>的。</p></li><li><p>mask为掩模图像，要求是<strong>8位单通道</strong>的。该参数用于确定前景区域、背景区域和不确定区域可以设置为4种形式</p><ul><li>cv2.GC_BGD：表示确定背景， 也可以用数值0表示。</li><li>cv2.GC_FGD: 表示确定前景， 也可以用数值1表示。</li><li>cv2.GC_PR_BGD: 表示可能的背景， 也可以用数值2表示。</li><li>cv2.GC_PR_FGD: 表示可能的前景， 也可以用数值3表示。</li></ul></li></ul><p>​        <strong>在最后使用模板提取前景时，会将参数值0和2合并为背景（均当作0处理），将参数值1和3合并为前景（均当作1处理）</strong>。在通常情况下，我们可以使用白色笔刷和黑色笔刷在掩模图像上做标记，再通过转换将其中的白色像素设置为0，黑色像素设置为1。</p><ul><li><p>rect 指包含前景对象的区域，该区域外的部分被认为是“确定背景”。因此，在选取时务必确保让前景包含在rect指定的范围内；否则，rect外的前景部分是不会被提取出来的。只有当参数<code>mode</code>的值被设置为矩形模式<code>cv2.GC_INIT_ WITH_RECT</code>时 ，参数<code>rect</code>才有意义。其格式为<code>(x,y,w,h)</code>，分别表示区域左上角像素的x轴和y轴坐标以及区域的宽度和高度。如果前景位于右下方，又不想判断原始图像的大小，对于w 和h可以直接用一个很大的值。使用掩模模式时，将该值设置为<code>none</code>即可。</p></li><li><p>bgdModel为算法内部使用的数组，只需要创建大小为(1,65)的<code>numpy.float64</code>数组。</p></li><li><p>fgdModel为算法内部使用的数组， 只需要创建大小为(1,65)的<code>numpy.float64</code>数组。</p></li><li><p>iterCount表示迭代的次数。</p></li><li><p>mode表示迭代模式。</p></li></ul><img src="123.png" style="zoom: 100%;" /><h1>参考</h1><blockquote><p>《OpenCV轻松入门面向Python》</p><p><a href="https://docs.opencv.org/4.1.2/d6/d00/tutorial_py_root.html">OpenCV官方文档</a></p><p><a href="https://mp.weixin.qq.com/mp/appmsgalbum?action=getalbum&amp;album_id=1343718009222905856&amp;__biz=MzUyNzY5OTE5Mw==#wechat_redirect">python图像处理</a></p><p><a href="http://daily.zhihu.com/story/3935067">傅里叶变换</a></p><p><a href="http://daily.zhihu.com/story/3935067">频域与时域</a></p><p><a href="https://dsp.stackexchange.com/questions/1637/what-does-frequency-domain-denote-in-case-of-images">什么是图片的频域</a></p><p><a href="https://zhuanlan.zhihu.com/p/203292567">霍夫线变换</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> cv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022_sdu_online_core_member_interview</title>
      <link href="/2022/02/26/2022-sdu-online-core-member-interview/"/>
      <url>/2022/02/26/2022-sdu-online-core-member-interview/</url>
      
        <content type="html"><![CDATA[<h1>问题</h1><h2 id="1">1</h2><p>给定如下类</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Recipe</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> cows;</span><br><span class="line">  <span class="built_in">int</span> trampolines;</span><br><span class="line"></span><br><span class="line">  Recipe(<span class="keyword">this</span>.cows, <span class="keyword">this</span>.trampolines);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">int</span> makeMilkshake() &#123;</span><br><span class="line">    <span class="keyword">return</span> cows + trampolines;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>=&gt;箭头</code>语法将<code>makeMilkshake()</code>转换成命名为<code>milkshake</code>的getter语法。</p><h2 id="2">2</h2><p>给定如下Widget</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> personNextToMe = <span class="string">&#x27;That reminds me about the time when I was ten and our neighbor, her name was Mrs. Mable, and she said...&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Row(children: [</span><br><span class="line">      Icon(Icons.airline_seat_legroom_reduced),</span><br><span class="line">      Text(personNextToMe),</span><br><span class="line">      Icon(Icons.airline_seat_legroom_reduced),</span><br><span class="line">    ]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在一些窄屏设备上，文本溢出了，你会如何修复呐？</p><p><img src="1.webp" alt="text_overflow.png"></p><h2 id="3">3</h2><p><code>hot reload</code>和<code>hot restart</code>的区别是什么？哪个需要重新编译？</p><h2 id="4">4</h2><p>怎么减少Widget的重新构建？</p><h2 id="5">5</h2><p><code>StatelessWidget</code>和<code>StatefulWidget</code>的区别是什么？</p><h2 id="6">6</h2><p>在有状态类中编写一个按钮调用初始化生命周期（initState）方法，会发生什么？</p><h2 id="7（空安全）">7（空安全）</h2><p>当我给变量赋值的时候，想在变量为空的时候才赋值，都有哪几种方法？</p><p>如何直接给变量赋值为null？（空安全下）</p><h2 id="8（空安全）">8（空安全）</h2><p><code>??与??=</code>的区别</p><p>const和final的区别：</p><h2 id="9">9</h2><p>简单说一下在flutter里async和await？</p><h2 id="10">10</h2><p>如何表示整除？</p><p>Dart中var与dynamic的区别</p><h2 id="11（methodChannel）">11（methodChannel）</h2><h2 id="12">12</h2><p>从dio发起一个请求开始，讲讲这个请求的全过程。</p><p>post与get的区别</p><h2 id="13">13</h2><p>有一个从后端返回的长度不定的List，如何构造成ListView</p><h2 id="14">14</h2><p>解释mainAxisSize和mainAxisAlignment</p><h2 id="15">15</h2><p>push被拒绝的原因有哪些。</p><p>merge界面的解释</p><p><img src="2.png" alt="text_overflow.png"></p><h2 id="16">16</h2><p>讲讲MVC</p><h2 id="17">17</h2><p>200</p><p>400</p><p>403</p><p>500</p><p>504</p><h1>答案</h1><h2 id="1-2">1</h2><blockquote><p>如果一个方法只有一行代码，则可以通过使用<code>=&gt;</code>语法返回结果来减少代码行数。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">methodName(parameters) =&gt; statement;</span><br></pre></td></tr></table></figure><p>注意当使用<code>=&gt;</code>的时候，不需要再使用关键词<code>return</code>.<br><code>makeMilkshake()</code>转换后的代码如下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="keyword">get</span> milkshake =&gt; cows + trampolines;</span><br></pre></td></tr></table></figure></blockquote><p>public class Main {<br>public static void main(String[] args) {</p><p>int[] a1 = {1, 2, 3, 4, 5};<br>int[] a2;<br>a2 = a1;<br>for (int i = 0; i &lt; a2.length; i++)    a2[i] = a2[i] + 1;<br>for (int i = 0; i &lt; a1.length; i++)     print(a1[i]);</p><p>}<br>}</p><h2 id="2-2">2</h2><blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Expanded(</span><br><span class="line">  child: Text(</span><br><span class="line">    personNextToMe,</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>使用<code>Expanded</code>widget来包裹<code>Text</code>widget，以告知<code>Row</code>忽略<code>Text</code>widget的固有宽度，并且根据行中剩余的空间来为其分配宽度。</p><p>在<code>Row</code>、<code>Column</code>或者<code>Flex</code>widget中使用超过一个<code>Expandend</code>widget时，会均匀的分配剩余空间。当有多个<code>Expand</code>widget时，可以使用<code>flex</code>属性对优先级进行排序。</p><p>假如你还使用了<code>Text</code>widget的<code>overflow</code>属性，那就太棒了。</p></blockquote><h2 id="3-2">3</h2><blockquote><p><code>hot reload</code>在立刻更新UI的同时保持程序的状态，相比之下<code>hot restart</code>花费更长一点的时间，因为它会在更新UI之前将程序的状态置为初始状态。两者都比完全重新启动（full restart）要快，这需要重新编译应用程序。</p><p>当有重大的更改时，你需要停止并重新运行该程序，在极少数的情况下，你可能还需要在模拟器或者真机上删除应用程序，然后重新安装。</p></blockquote><h2 id="4-2">4</h2><blockquote><p>当state发生改变时，你将重新构建widget，这种正常且理想的状态，因为它允许用户查看反映在UI中的状态更改。但是重新构建那些不需要改变的UI是性能浪费的。</p><p>你可以采取以下措施来减少不必要的Widget重建。</p><ul><li>首先要做的就是将大的Widget树重构成较小的单个的Widget，每一个Widget都有它自己的<code>build</code>方法。</li><li>尽可能的使用<code>const</code>构造函数，这将告知Flutter不需要重建这个widget。</li><li>使stateful widget的子树尽可能的小，如果stateful widget有一个widget子树，那么为这个stateful widget创建一个自定义widget，并为其提供一个<code>child</code>参数。</li></ul></blockquote><h2 id="5-2">5</h2><blockquote><p><code>StatelessWidget</code>是一个不可变的类，充当UI布局中某些部分的蓝图，当某个组件在显示期间不需要改变，或者说没有状态（State），你可以使用它。<br><code>StatefulWidget</code>也是不可变的，但是它和一个<code>State</code>对象关联在一起，该对象允许你每次通过调用<code>setState()</code>时，使用新值重建这个widget，当UI可以动态改变时使用<code>StatefulWidget</code>。</p></blockquote><h2 id="6-2">6</h2><blockquote><p>报错，但不影响布局；会报生命周期创建错误；</p></blockquote><h2 id="7">7</h2><blockquote><p>使用<code>??=</code>来指定当左边为空时才执行等于；</p><p>使用三元运算符判断是否等于空才执行赋值；</p><p>使用<code>if</code>判断语句，为空时才等于；</p></blockquote><h2 id="8">8</h2><blockquote><p><code>AA ?? “999”</code>表示：AA如果为空，则显示999</p><p><code>AA ??= “999”</code>表示：AA如果为空，则给值设置为999</p><p>const 的值在编译期确定，final 的值在运⾏时确定。</p></blockquote><h2 id="9-2">9</h2><blockquote><p>await的出现会把await之前和之后的代码分为两部分，await并不像字面意思所表示的程序运行到这里就阻塞了，而是立刻结束当前函数的执行并返回一个Future，函数内剩余代码通过调度异步执行。</p><p>async是和await搭配使用的，await只在async函数中出现。在async 函数里可以没有await或者有多个await。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String i = <span class="string">&quot;str&quot;</span>;</span><br><span class="line">String i1 = <span class="keyword">new</span> String(“str<span class="string">&quot;);</span></span><br><span class="line"><span class="string">i== i1；</span></span><br><span class="line"><span class="string">String i2 = &quot;</span>str<span class="string">&quot;;</span></span><br><span class="line"><span class="string">i == i2               </span></span><br></pre></td></tr></table></figure><h2 id="10-2">10</h2><blockquote><p>~/</p><p>使用var来声明变量，dart会在编译阶段自动推导出类型。而dynamic不在编译期间做类型检查而是在运行期间做类型校验。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学线培训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学线培训 </tag>
            
            <tag> 移动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter如何监听鼠标-desktop</title>
      <link href="/2022/02/01/flutter%E5%A6%82%E4%BD%95%E7%9B%91%E5%90%AC%E9%BC%A0%E6%A0%87-desktop/"/>
      <url>/2022/02/01/flutter%E5%A6%82%E4%BD%95%E7%9B%91%E5%90%AC%E9%BC%A0%E6%A0%87-desktop/</url>
      
        <content type="html"><![CDATA[<p>以前一直用<code>InkWell</code>的<code>onHover</code>监听鼠标移入移出，但今天突发奇想准备一探究竟，最后翻源码发现了这个：</p><p><code>ink_well.dart</code>1096行</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MouseRegion(</span><br><span class="line">           cursor: effectiveMouseCursor,</span><br><span class="line">           onEnter: _handleMouseEnter,</span><br><span class="line">           onExit: _handleMouseExit,</span><br><span class="line">           child: ···</span><br><span class="line">         ),</span><br></pre></td></tr></table></figure><h2 id="MouseRegion的属性和说明">MouseRegion的属性和说明</h2><blockquote><p>总共6个属性</p></blockquote><table><thead><tr><th>字段</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>onEnter</td><td>PointerEnterEventListener</td><td>鼠标进入区域时的回调</td></tr><tr><td>onExit</td><td>PointerHoverEventListener</td><td>鼠标退出区域时的回调</td></tr><tr><td>onHover</td><td>PointerExitEventListener</td><td>鼠标在区域内移动时的回调</td></tr><tr><td>cursor</td><td>MouseCursor</td><td>鼠标悬停区域时的光标样式</td></tr><tr><td>opaque</td><td>bool</td><td>是否阻止检测鼠标</td></tr><tr><td>child</td><td>Widget</td><td>子组件</td></tr></tbody></table><p>然后就。。。。了然。</p>]]></content>
      
      
      <categories>
          
          <category> flutter-desktop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter-desktop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绘制:霍夫曼树</title>
      <link href="/2022/02/01/%E7%BB%98%E5%88%B6-%E9%9C%8D%E5%A4%AB%E6%9B%BC%E6%A0%91/"/>
      <url>/2022/02/01/%E7%BB%98%E5%88%B6-%E9%9C%8D%E5%A4%AB%E6%9B%BC%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>效果图如下：</p><p><img src="0.gif" alt="每秒15帧（所以看起来有点卡）"></p><h1>思路</h1><p>采用层叠布局，将连接节点的树枝（树枝层）和节点（节点层）依次绘制到界面上，注意这个顺序很重要，要保证节点会遮住树枝的线段这样就不必再对树枝的长度进行额外处理（以避免树枝遮住节点上的数字的情况）。</p><p>缩放可以使用<code>InteractiveViewer</code>直接实现。节点的定位和树枝线段的起始与终止位置由所有节点的信息进行计算得出。</p><h1>解决的问题</h1><p>在此次绘制遇到了如下问题：</p><blockquote><p>面对一个数量不定的数据源（List/Map），如何进行绘制？</p><p>节点的定位和树枝线段的起始与终止位置要如何确定？</p><p>如何在数据量较大导致界面无法容纳时进行缩放？</p></blockquote><p>下面依次解决：</p><h2 id="问题一">问题一</h2><blockquote><p>面对一个数量不定的数据源（List/Map），如何进行绘制？</p></blockquote><p>这个问题其实很简单。</p><p>首先把每个节点封装为组件，然后在初始化霍夫曼树界面时对数据源进行处理，将所有数据装载到节点里，形成一个<code>List&lt;Widget&gt;</code>，作为节点层的<code>stack</code>的<code>children</code>，但这其实会导致另一个问题。</p><p>由于节点层本身就是另一个层叠布局，而初始的节点组件会监听鼠标的移入移出，移入时展示节点卡片。由于层叠布局会令后添加的<code>Widget</code>覆盖在先添加的<code>Widget</code>上方，所以先添加的节点的卡片在出现时会被后添加的节点遮住。</p><p>我使用暴力方案解决了这个问题，即在鼠标移入节点时把相应卡片天加到节点层的<code>Widget</code>的List里，由于是最后添加，所以会被显示在最上层，然后通知进行重绘（<code>GetX</code>），鼠标移出时直接将这个List进行<code>removeLast()</code>即可。</p><h2 id="问题二">问题二</h2><blockquote><p>节点的定位和树枝线段的起始与终止位置要如何确定？</p></blockquote><p>这其实就变成了了一个数学问题。</p><p>我们可以直接利用的数据有：<strong>窗口宽高</strong><code>screenWidth</code> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span> 和<code>screenHeight</code> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span></span></span></span>，<strong>所有节点</strong> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 的层数<code>level</code> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>l</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">l_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和层内编号 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">n_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，节点间的父子关系，<strong>节点大小</strong><code>nodeSize</code> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span></span></span></span> ，<strong>所有叶子节点的相应信息</strong>。</p><p><img src="1.jpg" alt="示意图"></p><p><strong>以节点圆心为基准（其实在绘制时是以圆的外接正方形的左上角顶点为基准，这样只是方便表示，后续在确定节点位置时加上一个常量进行偏移纠正即可）。</strong></p><p>设层间高度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span> ，最底层相邻叶子节点间水平距离为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>，则节点的竖直方向坐标<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>=</mo><mi>d</mi><mi>e</mi><mi>f</mi><mi>a</mi><mi>u</mi><mi>l</mi><mi>t</mi><mi>M</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>i</mi><mi>n</mi><mo>+</mo><mi>l</mi><mo>⋅</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">x_i=defaultMargin+l \cdot M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.10903em;">ltM</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">in</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>，难度在于确定节点的水平坐标<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">y_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><p>定义<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">level</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span> 的层的<strong>中轴系数</strong>为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>l</mi></msub><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><msup><mn>2</mn><mi>l</mi></msup><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">c_l=\dfrac{2^l-1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.212108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.526108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>（不取整），则节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 的<strong>中轴偏移系数</strong>为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub><mo>=</mo><msub><mi>n</mi><mi>i</mi></msub><mo>−</mo><msub><mi>c</mi><mi>l</mi></msub></mrow><annotation encoding="application/x-tex">c_i=n_i-c_l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，</p><p>定义节点与最底层叶子节点之间的落差 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>=</mo><mi>h</mi><mo>−</mo><mi>l</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">d=h-l-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">{</mo><mi>l</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi><mo stretchy="false">}</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h=max\{level\}+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，则节点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>的<strong>中轴偏移量</strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub><mo>=</mo><msub><mi>c</mi><mi>i</mi></msub><mo>⋅</mo><mo stretchy="false">(</mo><mi>s</mi><mo>+</mo><mi>N</mi><mo stretchy="false">)</mo><mo>⋅</mo><msup><mn>2</mn><mi>d</mi></msup></mrow><annotation encoding="application/x-tex">C_i=c_i \cdot (s+N) \cdot 2^d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.59445em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span></span></span>，则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>w</mi><mn>2</mn></mfrac></mstyle><mo>+</mo><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">y_i=\dfrac{w}{2}+C_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>  。</p><p>有了节点坐标的计算策略，树枝线段起始点坐标计算策略与之相同，遍历建立树枝的策略与重建霍夫曼树的思想相同。</p><h2 id="问题三">问题三</h2><blockquote><p>如何在数据量较大导致界面无法容纳时进行缩放？</p></blockquote><p>这个问题也很简单。</p><p>由于层叠布局在<code>InteractiveViewer</code>中无法进行正常缩小，所以在界面初始化时，如果节点过多则会超出屏幕绘制界限，必须在初始化时完成一次对图层的缩放，由于无法直接用<code>Transform</code>组件对层叠布局进行正常缩放，所以必须在计算时加入缩放系数，对节点大小、树枝粗细及相应的偏移量进行缩放，系数由<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span>和满二叉树情况下最底层叶子所占的总宽度的比决定。</p>]]></content>
      
      
      <categories>
          
          <category> 绘制原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> 绘制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter-desktop-basic</title>
      <link href="/2022/01/29/flutter-desktop-basic/"/>
      <url>/2022/01/29/flutter-desktop-basic/</url>
      
        <content type="html"><![CDATA[<h1>一些心得与经验</h1><p>混合开发，不推荐<code>ffi</code>，入门难度大，可读性不高，但是效率高，如果使用<code>methodChannel</code>，入门基本没有难度，可读性较高，效率低于<code>ffi</code>。</p><p>dart是值传递，所以两端间传递的大概率是内存地址。</p><h2 id="我的开发方式">我的开发方式</h2><p>首先创建一个<strong>插件项目</strong>，记得勾选windows平台。</p><ul><li>插件内的<code>example</code>项目是我们的flutter项目，主要用于绘制UI。</li><li>插件项目是win-dart混合开发的dart端代码，也就是<code>methodChannel</code>的dart端。</li><li>插件的<code>windows</code>文件夹下的cpp文件是win-dart混合开发的win端代码，也就是<code>methodChannel</code>的win端。</li><li>插件的<code>windows</code>文件夹下的<code>include</code>文件夹下放置逻辑层代码，可以放置cpp代码与头文件。</li></ul><p>一般都是使用UI层调用逻辑层。同时<code>windows</code>文件夹可以直接使用Clion打开为cpp项目。</p>]]></content>
      
      
      <categories>
          
          <category> flutter-desktop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter&amp;c++混合开发 </tag>
            
            <tag> flutter-desktop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学线培训:winter-flutter:网络、同步与异步</title>
      <link href="/2022/01/26/%E5%AD%A6%E7%BA%BF%E5%9F%B9%E8%AE%AD-winter-flutter-%E7%BD%91%E7%BB%9C%E3%80%81%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5/"/>
      <url>/2022/01/26/%E5%AD%A6%E7%BA%BF%E5%9F%B9%E8%AE%AD-winter-flutter-%E7%BD%91%E7%BB%9C%E3%80%81%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h1>Dio:</h1><h2 id="前言">前言</h2><p>热知识：Dio是国人开发的网络请求库，所以中文文档很完善。</p><p>又：目前最新版本为<code>dio: ^4.0.5-beta1</code>，在其github的develop分支，不过并不建议使用。以下基于master的<code>  dio: ^4.0.3  /  dio: ^4.0.4</code>大致看了一下改变并不大。基本直接搬运github文档，免得有同学上不去github。</p><p>总而言之跟okhttp挺像的。</p><h2 id="添加依赖">添加依赖</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  dio: ^<span class="number">4.0</span><span class="number">.3</span></span><br></pre></td></tr></table></figure><blockquote><p>如果你是dio 3.x 用户，想了解4.0的变更，请参考 <a href="https://github.com/flutterchina/dio/blob/master/migration_to_4.x.md">4.x更新列表</a>!</p></blockquote><h2 id="一个极简的示例">一个极简的示例</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dio/dio.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">void</span> getHttp() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> response = <span class="keyword">await</span> Dio().<span class="keyword">get</span>(<span class="string">&#x27;http://www.google.com&#x27;</span>);</span><br><span class="line">    <span class="built_in">print</span>(response);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">print</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="示例">*示例</h2><p><strong>发起一个 <code>GET</code> 请求 :</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Response response;</span><br><span class="line"><span class="keyword">var</span> dio = Dio();</span><br><span class="line">response = <span class="keyword">await</span> dio.<span class="keyword">get</span>(<span class="string">&#x27;/test?id=12&amp;name=wendu&#x27;</span>);</span><br><span class="line"><span class="built_in">print</span>(response.data.toString());</span><br><span class="line"><span class="comment">// Optionally the request above could also be done as</span></span><br><span class="line">response = <span class="keyword">await</span> dio.<span class="keyword">get</span>(<span class="string">&#x27;/test&#x27;</span>, queryParameters: &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">12</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;wendu&#x27;</span>&#125;);</span><br><span class="line"><span class="built_in">print</span>(response.data.toString());</span><br></pre></td></tr></table></figure><p><strong>发起一个 <code>POST</code> 请求:</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = <span class="keyword">await</span> dio.post(<span class="string">&#x27;/test&#x27;</span>, data: &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">12</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;wendu&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure><p>发起多个并发请求:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = <span class="keyword">await</span> Future.wait([dio.post(<span class="string">&#x27;/info&#x27;</span>), dio.<span class="keyword">get</span>(<span class="string">&#x27;/token&#x27;</span>)]);</span><br></pre></td></tr></table></figure><p>下载文件:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = <span class="keyword">await</span> dio.download(<span class="string">&#x27;https://www.google.com/&#x27;</span>, <span class="string">&#x27;./xx.html&#x27;</span>);</span><br></pre></td></tr></table></figure><p>以流的方式接收响应数据：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Response&lt;ResponseBody&gt; rs;</span><br><span class="line">rs = <span class="keyword">await</span> Dio().<span class="keyword">get</span>&lt;ResponseBody&gt;(url,</span><br><span class="line">  options: Options(responseType: ResponseType.stream),  <span class="comment">//设置接收类型为stream</span></span><br><span class="line">);</span><br><span class="line"><span class="built_in">print</span>(rs.data.stream); <span class="comment">//响应流</span></span><br></pre></td></tr></table></figure><p>以二进制数组的方式接收响应数据：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Response&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; rs </span><br><span class="line">rs = <span class="keyword">await</span> Dio().<span class="keyword">get</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt;(url,</span><br><span class="line"> options: Options(responseType: ResponseType.bytes), <span class="comment">//设置接收类型为二进制数组</span></span><br><span class="line">);</span><br><span class="line"><span class="built_in">print</span>(rs.data); <span class="comment">// 二进制数组</span></span><br></pre></td></tr></table></figure><p><strong>发送 FormData:</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formData = FormData.fromMap(&#123;</span><br><span class="line">  <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;wendux&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> response = <span class="keyword">await</span> dio.post(<span class="string">&#x27;/info&#x27;</span>, data: formData);</span><br></pre></td></tr></table></figure><p><strong>通过FormData上传多个文件:</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formData = FormData.fromMap(&#123;</span><br><span class="line">  <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;wendux&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="string">&#x27;file&#x27;</span>: <span class="keyword">await</span> MultipartFile.fromFile(<span class="string">&#x27;./text.txt&#x27;</span>, filename: <span class="string">&#x27;upload.txt&#x27;</span>),</span><br><span class="line">  <span class="string">&#x27;files&#x27;</span>: [</span><br><span class="line">    <span class="keyword">await</span> MultipartFile.fromFile(<span class="string">&#x27;./text1.txt&#x27;</span>, filename: <span class="string">&#x27;text1.txt&#x27;</span>),</span><br><span class="line">    <span class="keyword">await</span> MultipartFile.fromFile(<span class="string">&#x27;./text2.txt&#x27;</span>, filename: <span class="string">&#x27;text2.txt&#x27;</span>),</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> response = <span class="keyword">await</span> dio.post(<span class="string">&#x27;/info&#x27;</span>, data: formData);</span><br></pre></td></tr></table></figure><p>监听发送(上传)数据进度:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">response = <span class="keyword">await</span> dio.post(</span><br><span class="line">  <span class="string">&#x27;http://www.dtworkroom.com/doris/1/2.0.0/test&#x27;</span>,</span><br><span class="line">  data: &#123;<span class="string">&#x27;aa&#x27;</span>: <span class="string">&#x27;bb&#x27;</span> * <span class="number">22</span>&#125;,</span><br><span class="line">  onSendProgress: (<span class="built_in">int</span> sent, <span class="built_in">int</span> total) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$sent</span> <span class="subst">$total</span>&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>以流的形式提交二进制数据：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; postData = &lt;<span class="built_in">int</span>&gt;[...];</span><br><span class="line"><span class="keyword">await</span> dio.post(</span><br><span class="line">  url,</span><br><span class="line">  data: Stream.fromIterable(postData.map((e) =&gt; [e])), <span class="comment">//创建一个Stream&lt;List&lt;int&gt;&gt;</span></span><br><span class="line">  options: Options(</span><br><span class="line">    headers: &#123;</span><br><span class="line">      Headers.contentLengthHeader: postData.length, <span class="comment">// 设置content-length</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ),</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二进制数据</span></span><br><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; postData = &lt;<span class="built_in">int</span>&gt;[...];</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> dio.post(</span><br><span class="line">  url,</span><br><span class="line">  data: Stream.fromIterable(postData.map((e) =&gt; [e])), <span class="comment">//创建一个Stream&lt;List&lt;int&gt;&gt;</span></span><br><span class="line">  options: Options(</span><br><span class="line">    headers: &#123;</span><br><span class="line">      Headers.contentLengthHeader: postData.length, <span class="comment">// 设置content-length</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>注意：如果要监听提交进度，则必须设置content-length，否则是可选的。</p><h3 id="示例目录">示例目录</h3><p>你可以在这里查看dio的<a href="https://github.com/flutterchina/dio/tree/master/example">全部示例</a>.</p><h2 id="Dio-APIs">Dio APIs</h2><h3 id="创建一个Dio实例，并配置它">创建一个Dio实例，并配置它</h3><blockquote><p>建议在项目中使用Dio单例，这样便可对同一个dio实例发起的所有请求进行一些统一的配置，比如设置公共header、请求基地址、超时时间等；这里有一个在<a href="https://github.com/flutterchina/dio/tree/master/example/flutter_example">Flutter工程中使用Dio单例</a>（定义为top level变量）的示例供开发者参考。</p></blockquote><p>你可以使用默认配置或传递一个可选 <code>BaseOptions</code>参数来创建一个Dio实例 :</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dio = Dio(); <span class="comment">// with default Options</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Set default configs</span></span><br><span class="line">dio.options.baseUrl = <span class="string">&#x27;https://www.xx.com/api&#x27;</span>;</span><br><span class="line">dio.options.connectTimeout = <span class="number">5000</span>; <span class="comment">//5s</span></span><br><span class="line">dio.options.receiveTimeout = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// or new Dio with a BaseOptions instance.</span></span><br><span class="line"><span class="keyword">var</span> options = BaseOptions(</span><br><span class="line">  baseUrl: <span class="string">&#x27;https://www.xx.com/api&#x27;</span>,</span><br><span class="line">  connectTimeout: <span class="number">5000</span>,</span><br><span class="line">  receiveTimeout: <span class="number">3000</span>,</span><br><span class="line">);</span><br><span class="line">Dio dio = Dio(options);</span><br></pre></td></tr></table></figure><p>Dio实例的核心API是 :</p><p><strong>Future request(String path, {data,Map queryParameters, Options options,CancelToken cancelToken, ProgressCallback onSendProgress, ProgressCallback onReceiveProgress)</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">response = <span class="keyword">await</span> dio.request(</span><br><span class="line">  <span class="string">&#x27;/test&#x27;</span>,</span><br><span class="line">  data: &#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">12</span>,<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;xx&#x27;</span>&#125;,</span><br><span class="line">  options: Options(method:<span class="string">&#x27;GET&#x27;</span>),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="请求方法别名">请求方法别名</h3><p>为了方便使用，Dio提供了一些其它的Restful API, 这些API都是<code>request</code>的别名。</p><p><strong>Future get(…)</strong></p><p><strong>Future post(…)</strong></p><p><strong>Future put(…)</strong></p><p><strong>Future delete(…)</strong></p><p><strong>Future head(…)</strong></p><p><strong>Future put(…)</strong></p><p><strong>Future path(…)</strong></p><p><strong>Future download(…)</strong></p><p><strong>Future fetch(RequestOptions)</strong></p><h2 id="请求配置">*请求配置</h2><p><code>BaseOptions</code>描述的是Dio实例发起网络请求的的公共配置，而<code>Options</code>类描述了每一个Http请求的配置信息，每一次请求都可以单独配置，单次请求的<code>Options</code>中的配置信息可以覆盖<code>BaseOptions</code>中的配置，下面是<code>BaseOptions</code>的配置项：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">Http method.</span></span></span><br><span class="line">  <span class="built_in">String</span> method;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">请求基地址,可以包含子路径，如: &quot;https://www.google.com/api/&quot;.</span></span></span><br><span class="line">  <span class="built_in">String</span> baseUrl;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">Http请求头.</span></span></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; headers;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">连接服务器超时时间，单位是毫秒.</span></span></span><br><span class="line">  <span class="built_in">int</span> connectTimeout;</span><br><span class="line">  <span class="comment">/// <span class="markdown">2.x中为接收数据的最长时限.</span></span></span><br><span class="line">  <span class="built_in">int</span> receiveTimeout;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">请求路径，如果 <span class="code">`path`</span> 以 &quot;http(s)&quot;开始, 则 <span class="code">`baseURL`</span> 会被忽略； 否则,</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">将会和baseUrl拼接出完整的的url.</span></span></span><br><span class="line">  <span class="built_in">String</span> path = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">请求的Content-Type，默认值是&quot;application/json; charset=utf-8&quot;.</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">如果您想以&quot;application/x-www-form-urlencoded&quot;格式编码请求数据,</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">可以设置此选项为 <span class="code">`Headers.formUrlEncodedContentType`</span>,  这样[Dio]</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">就会自动编码请求体.</span></span></span><br><span class="line">  <span class="built_in">String</span> contentType;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">[responseType] 表示期望以那种格式(方式)接受响应数据。</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">目前 [ResponseType] 接受三种类型 <span class="code">`JSON`</span>, <span class="code">`STREAM`</span>, <span class="code">`PLAIN`</span>.</span></span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// <span class="markdown">默认值是 <span class="code">`JSON`</span>, 当响应头中content-type为&quot;application/json&quot;时，dio 会自动将响应内容转化为json对象。</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">如果想以二进制方式接受响应数据，如下载一个二进制文件，那么可以使用 <span class="code">`STREAM`</span>.</span></span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// <span class="markdown">如果想以文本(字符串)格式接收响应数据，请使用 <span class="code">`PLAIN`</span>.</span></span></span><br><span class="line">  ResponseType responseType;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown"><span class="code">`validateStatus`</span> 决定http响应状态码是否被dio视为请求成功， 返回<span class="code">`validateStatus`</span></span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown"> 返回<span class="code">`true`</span> , 请求结果就会按成功处理，否则会按失败处理.</span></span></span><br><span class="line">  ValidateStatus validateStatus;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">用户自定义字段，可以在 [Interceptor]、[Transformer] 和 [Response] 中取到.</span></span></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; extra;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">Common query parameters</span></span></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span> <span class="comment">/*String|Iterable&lt;String&gt;*/</span> &gt; queryParameters;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// <span class="markdown">请求数据中数组的编码的方式，具体可以参考CollectionFormat的定义</span></span></span><br><span class="line">  <span class="keyword">late</span> CollectionFormat collectionFormat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一个完成的<a href="https://github.com/flutterchina/dio/blob/master/example/options.dart">示例</a>.</p><h2 id="响应数据">*响应数据</h2><p>当请求成功时会返回一个Response对象，它包含如下字段：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">响应数据，可能已经被转换了类型, 详情请参考Options中的[ResponseType].</span></span></span><br><span class="line">  T data;</span><br><span class="line">  <span class="comment">/// <span class="markdown">响应头</span></span></span><br><span class="line">  Headers headers;</span><br><span class="line">  <span class="comment">/// <span class="markdown">本次请求信息</span></span></span><br><span class="line">  Options request;</span><br><span class="line">  <span class="comment">/// <span class="markdown">Http status code.</span></span></span><br><span class="line">  <span class="built_in">int?</span> statusCode;</span><br><span class="line">  <span class="built_in">String?</span> statusMessage;</span><br><span class="line">  <span class="comment">/// <span class="markdown">是否重定向(Flutter Web不可用)</span></span></span><br><span class="line">  <span class="built_in">bool?</span> isRedirect;</span><br><span class="line">  <span class="comment">/// <span class="markdown">重定向信息(Flutter Web不可用)</span></span></span><br><span class="line">  <span class="built_in">List</span>&lt;RedirectInfo&gt; redirects ;</span><br><span class="line">  <span class="comment">/// <span class="markdown">真正请求的url(重定向最终的uri)</span></span></span><br><span class="line">  <span class="built_in">Uri</span> realUri;</span><br><span class="line">  <span class="comment">/// <span class="markdown">响应对象的自定义字段（可以在拦截器中设置它），调用方可以在<span class="code">`then`</span>中获取.</span></span></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; extra;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例如下:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Response response = <span class="keyword">await</span> dio.<span class="keyword">get</span>(<span class="string">&#x27;https://www.google.com&#x27;</span>);</span><br><span class="line"><span class="built_in">print</span>(response.data);</span><br><span class="line"><span class="built_in">print</span>(response.headers);</span><br><span class="line"><span class="built_in">print</span>(response.requestOptions);</span><br><span class="line"><span class="built_in">print</span>(response.statusCode);</span><br></pre></td></tr></table></figure><h2 id="拦截器">拦截器</h2><p>每个 Dio 实例都可以添加任意多个拦截器，他们组成一个队列，拦截器队列的执行顺序是FIFO。通过拦截器你可以在请求之前、响应之后和发生异常时(但还没有被 <code>then</code> 或 <code>catchError</code>处理)做一些统一的预处理操作。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">dio.interceptors.add(InterceptorsWrapper(</span><br><span class="line">    onRequest:(options, handler)&#123;</span><br><span class="line">     <span class="comment">// Do something before request is sent</span></span><br><span class="line">     <span class="keyword">return</span> handler.next(options); <span class="comment">//continue</span></span><br><span class="line">     <span class="comment">// 如果你想完成请求并返回一些自定义数据，你可以resolve一个Response对象 `handler.resolve(response)`。</span></span><br><span class="line">     <span class="comment">// 这样请求将会被终止，上层then会被调用，then中返回的数据将是你的自定义response.</span></span><br><span class="line">     <span class="comment">//</span></span><br><span class="line">     <span class="comment">// 如果你想终止请求并触发一个错误,你可以返回一个`DioError`对象,如`handler.reject(error)`，</span></span><br><span class="line">     <span class="comment">// 这样请求将被中止并触发异常，上层catchError会被调用。</span></span><br><span class="line">    &#125;,</span><br><span class="line">    onResponse:(response,handler) &#123;</span><br><span class="line">     <span class="comment">// Do something with response data</span></span><br><span class="line">     <span class="keyword">return</span> handler.next(response); <span class="comment">// continue</span></span><br><span class="line">     <span class="comment">// 如果你想终止请求并触发一个错误,你可以 reject 一个`DioError`对象,如`handler.reject(error)`，</span></span><br><span class="line">     <span class="comment">// 这样请求将被中止并触发异常，上层catchError会被调用。</span></span><br><span class="line">    &#125;,</span><br><span class="line">    onError: (DioError e, handler) &#123;</span><br><span class="line">     <span class="comment">// Do something with response error</span></span><br><span class="line">     <span class="keyword">return</span>  handler.next(e);<span class="comment">//continue</span></span><br><span class="line">     <span class="comment">// 如果你想完成请求并返回一些自定义数据，可以resolve 一个`Response`,如`handler.resolve(response)`。</span></span><br><span class="line">     <span class="comment">// 这样请求将会被终止，上层then会被调用，then中返回的数据将是你的自定义response.</span></span><br><span class="line">    &#125;</span><br><span class="line">));</span><br></pre></td></tr></table></figure><p>一个简单的自定义拦截器示例:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dio/dio.dart&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomInterceptors</span> <span class="keyword">extends</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> onRequest(RequestOptions options, RequestInterceptorHandler handler) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;REQUEST[<span class="subst">$&#123;options.method&#125;</span>] =&gt; PATH: <span class="subst">$&#123;options.path&#125;</span>&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onRequest(options, handler);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future onResponse(Response response, ResponseInterceptorHandler handler) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;RESPONSE[<span class="subst">$&#123;response.statusCode&#125;</span>] =&gt; PATH: <span class="subst">$&#123;response.requestOptions?.path&#125;</span>&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onResponse(response, handler);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future onError(DioError err, ErrorInterceptorHandler handler) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ERROR[<span class="subst">$&#123;err.response?.statusCode&#125;</span>] =&gt; PATH: <span class="subst">$&#123;err.requestOptions?.path&#125;</span>&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onError(err, handler);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完成和终止请求-响应">完成和终止请求/响应</h3><p>在所有拦截器中，你都可以改变请求执行流， 如果你想完成请求/响应并返回自定义数据，你可以resolve一个 <code>Response</code> 对象或返回 <code>handler.resolve(data)</code>的结果。 如果你想终止(触发一个错误，上层<code>catchError</code>会被调用)一个请求/响应，那么可以reject一个<code>DioError</code> 对象或返回 <code>handler.reject(errMsg)</code> 的结果.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dio.interceptors.add(InterceptorsWrapper(</span><br><span class="line">  onRequest:(options, handler) &#123;</span><br><span class="line">   <span class="keyword">return</span> handler.resolve(Response(requestOptions:options,data:<span class="string">&#x27;fake data&#x27;</span>));</span><br><span class="line">  &#125;,</span><br><span class="line">));</span><br><span class="line">Response response = <span class="keyword">await</span> dio.<span class="keyword">get</span>(<span class="string">&#x27;/test&#x27;</span>);</span><br><span class="line"><span class="built_in">print</span>(response.data);<span class="comment">//&#x27;fake data&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="QueuedInterceptor">QueuedInterceptor</h3><p>如果同时发起多个网络请求，则它们是可以同时进入<code>Interceptor</code> 的（并行的），而 <code>QueuedInterceptor</code> 提供了一种串行机制：它可以保证请求进入拦截器时是串行的（前面的执行完后后面的才会进入拦截器）。</p><h4 id="例子">例子</h4><p>假设这么一个场景：出于安全原因，我们需要给所有的请求头中添加一个csrfToken，如果csrfToken不存在，我们先去请求csrfToken，获取到csrfToken后再重试。假设刚开始的时候 csrfToken 为 null ，如果允许请求并发，则这些并发请求并行进入拦截器时 csrfToken 都为null，所以它们都需要去请求 csrfToken，这会导致 csrfToken 被请求多次，为了避免不必要的重复请求，可以使用 QueuedInterceptor，这样只需要第一个请求请求一次即可，示例代码如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">dio.interceptors.add(QueuedInterceptorsWrapper(</span><br><span class="line">  onRequest: (options, handler) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;send request：path:<span class="subst">$&#123;options.path&#125;</span>，baseURL:<span class="subst">$&#123;options.baseUrl&#125;</span>&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (csrfToken == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;no token，request token firstly...&#x27;</span>);</span><br><span class="line">      tokenDio.<span class="keyword">get</span>(<span class="string">&#x27;/token&#x27;</span>).then((d) &#123;</span><br><span class="line">        options.headers[<span class="string">&#x27;csrfToken&#x27;</span>] = csrfToken = d.data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;request token succeed, value: &#x27;</span> + d.data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;token&#x27;</span>]);</span><br><span class="line">        <span class="built_in">print</span>( <span class="string">&#x27;continue to perform request：path:<span class="subst">$&#123;options.path&#125;</span>，baseURL:<span class="subst">$&#123;options.path&#125;</span>&#x27;</span>);</span><br><span class="line">        handler.next(options);</span><br><span class="line">      &#125;).catchError((error, stackTrace) &#123;</span><br><span class="line">        handler.reject(error, <span class="keyword">true</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      options.headers[<span class="string">&#x27;csrfToken&#x27;</span>] = csrfToken;</span><br><span class="line">      handler.next(options);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">));</span><br></pre></td></tr></table></figure><p>完整的示例代码请点击 <a href="https://github.com/flutterchina/dio/blob/develop/example/queued_interceptor_crsftoken.dart">这里</a>.</p><h3 id="日志">日志</h3><p>我们可以添加 <code>LogInterceptor</code> 拦截器来自动打印请求、响应日志, 如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dio.interceptors.add(LogInterceptor(responseBody: <span class="keyword">false</span>)); <span class="comment">//开启请求日志</span></span><br></pre></td></tr></table></figure><blockquote><p>由于拦截器队列的执行顺序是FIFO，如果把log拦截器添加到了最前面，则后面拦截器对<code>options</code>的更改就不会被打印（但依然会生效）， 所以建议把log拦截添加到队尾。</p></blockquote><h3 id="Cookie管理">Cookie管理</h3><p><a href="https://github.com/flutterchina/dio/tree/master/plugins/cookie_manager">dio_cookie_manager</a> 包是Dio的一个插件，它提供了一个Cookie管理器。详细示例可以移步<a href="https://github.com/flutterchina/dio/tree/master/plugins/cookie_manager">dio_cookie_manager</a> 。</p><h3 id="自定义拦截器">自定义拦截器</h3><p>开发者可以通过继承<code>Interceptor/QueuedInterceptor</code> 类来实现自定义拦截器，这是一个简单的<a href="https://github.com/flutterchina/dio/blob/master/example/custom_cache_interceptor.dart">缓存示例拦截器</a>。</p><h2 id="错误处理">*错误处理</h2><p>当请求过程中发生错误时, Dio 会包装 <code>Error/Exception</code> 为一个 <code>DioError</code>:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">//404</span></span><br><span class="line">  <span class="keyword">await</span> dio.<span class="keyword">get</span>(<span class="string">&#x27;https://wendux.github.io/xsddddd&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">on</span> DioError <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="comment">// The request was made and the server responded with a status code</span></span><br><span class="line">  <span class="comment">// that falls out of the range of 2xx and is also not 304.</span></span><br><span class="line">  <span class="keyword">if</span> (e.response) &#123;</span><br><span class="line">    <span class="built_in">print</span>(e.response.data)</span><br><span class="line">    <span class="built_in">print</span>(e.response.headers)</span><br><span class="line">    <span class="built_in">print</span>(e.response.requestOptions)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Something happened in setting up or sending the request that triggered an Error</span></span><br><span class="line">    <span class="built_in">print</span>(e.requestOptions)</span><br><span class="line">    <span class="built_in">print</span>(e.message)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DioError-字段">DioError 字段</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">Request info.</span></span></span><br><span class="line">  RequestOptions request;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">Response info, it may be <span class="code">`null`</span> if the request can&#x27;t reach to</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">the http server, for example, occurring a dns error, network is not available.</span></span></span><br><span class="line">  Response response;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">错误类型，见下文</span></span></span><br><span class="line">  DioErrorType type;</span><br><span class="line"></span><br><span class="line">  <span class="comment">///<span class="markdown">原始的error或exception对象，通常type为DEFAULT时存在。</span></span></span><br><span class="line">  <span class="built_in">dynamic</span> error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DioErrorType">DioErrorType</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> DioErrorType &#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">It occurs when url is opened timeout.</span></span></span><br><span class="line">  connectTimeout,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">It occurs when url is sent timeout.</span></span></span><br><span class="line">  sendTimeout,</span><br><span class="line"></span><br><span class="line">  <span class="comment">///<span class="markdown">It occurs when receiving timeout.</span></span></span><br><span class="line">  receiveTimeout,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">When the server response, but with a incorrect status, such as 404, 503...</span></span></span><br><span class="line">  response,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">When the request is cancelled, dio will throw a error with this type.</span></span></span><br><span class="line">  cancel,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">Default error type, Some other Error. In this case, you can</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">use the DioError.error if it is not null.</span></span></span><br><span class="line">  other,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用application-x-www-form-urlencoded编码">使用application/x-www-form-urlencoded编码</h2><p>默认情况下, Dio 会将请求数据(除过String类型)序列化为 <code>JSON</code>. 如果想要以 <code>application/x-www-form-urlencoded</code>格式编码, 你可以显式设置<code>contentType</code> :</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Instance level</span></span><br><span class="line">dio.options.contentType= Headers.formUrlEncodedContentType;</span><br><span class="line"><span class="comment">//or works once</span></span><br><span class="line">dio.post(</span><br><span class="line">  <span class="string">&#x27;/info&#x27;</span>,</span><br><span class="line">  data: &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">5</span>&#125;,</span><br><span class="line">  options: Options(contentType: Headers.formUrlEncodedContentType),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这里有一个<a href="https://github.com/flutterchina/dio/blob/6de8289ea71b0b7803654caaa2e9d3d47a588ab7/example/options.dart#L41">示例</a>.</p><h2 id="FormData">FormData</h2><p>Dio支持发送 FormData, 请求数据将会以 <code>multipart/form-data</code>方式编码, FormData中可以一个或多个包含文件 .</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formData = FormData.fromMap(&#123;</span><br><span class="line">  <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;wendux&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="string">&#x27;file&#x27;</span>: <span class="keyword">await</span> MultipartFile.fromFile(<span class="string">&#x27;./text.txt&#x27;</span>,filename: <span class="string">&#x27;upload.txt&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line">response = <span class="keyword">await</span> dio.post(<span class="string">&#x27;/info&#x27;</span>, data: formData);</span><br></pre></td></tr></table></figure><blockquote><p>注意: 只有 post 方法支持发送 FormData.</p></blockquote><p>这里有一个完整的<a href="https://github.com/flutterchina/dio/blob/master/example/formdata.dart">示例</a>.</p><h3 id="多文件上传">多文件上传</h3><p>多文件上传时，通过给key加中括号“[]”方式作为文件数组的标记，大多数后台也会通过key[]这种方式来读取。不过RFC中并没有规定多文件上传就必须得加“[]”，所以有时不带“[]”也是可以的，关键在于后台和客户端得一致。v3.0.0 以后通过<code>Formdata.fromMap()</code>创建的<code>Formdata</code>,如果有文件数组，是默认会给key加上“[]”的，比如：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FormData.fromMap(&#123;</span><br><span class="line">  <span class="string">&#x27;files&#x27;</span>: [</span><br><span class="line">    MultipartFile.fromFileSync(<span class="string">&#x27;./example/upload.txt&#x27;</span>, filename: <span class="string">&#x27;upload.txt&#x27;</span>),</span><br><span class="line">    MultipartFile.fromFileSync(<span class="string">&#x27;./example/upload.txt&#x27;</span>, filename: <span class="string">&#x27;upload.txt&#x27;</span>),</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最终编码时会key会为 “files[]”，<strong>如果不想添加“[]”</strong>，可以通过<code>Formdata</code>的API来构建：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formData = FormData();</span><br><span class="line">formData.files.addAll([</span><br><span class="line">  MapEntry(<span class="string">&#x27;files&#x27;</span>,</span><br><span class="line">    MultipartFile.fromFileSync(<span class="string">&#x27;./example/upload.txt&#x27;</span>,filename: <span class="string">&#x27;upload.txt&#x27;</span>),</span><br><span class="line">  ),</span><br><span class="line">  MapEntry(<span class="string">&#x27;files&#x27;</span>,</span><br><span class="line">    MultipartFile.fromFileSync(<span class="string">&#x27;./example/upload.txt&#x27;</span>,filename: <span class="string">&#x27;upload.txt&#x27;</span>),</span><br><span class="line">  ),</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>这样构建的<code>FormData</code>的key是不会有“[]”。</p><h2 id="转换器">转换器</h2><p>转换器<code>Transformer</code> 用于对请求数据和响应数据进行编解码处理。Dio实现了一个默认转换器<code>DefaultTransformer</code>作为默认的 <code>Transformer</code>. 如果你想对请求/响应数据进行自定义编解码处理，可以提供自定义转换器，通过 <code>dio.transformer</code>设置。</p><blockquote><p>请求转换器 <code>Transformer.transformRequest(...)</code> 只会被用于 ‘PUT’、 ‘POST’、 'PATCH’方法，因为只有这些方法才可以携带请求体(request body)。但是响应转换器 <code>Transformer.transformResponse()</code> 会被用于所有请求方法的返回数据。</p></blockquote><h3 id="Flutter中设置">Flutter中设置</h3><p>如果你在开发Flutter应用，强烈建议json的解码通过compute方法在后台进行，这样可以避免在解析复杂json时导致的UI卡顿。</p><blockquote><p>注意，根据笔者实际测试，发现通过<code>compute</code>在后台解码json耗时比直接解码慢很多，建议开发者仔细评估。</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 必须是顶层函数</span></span><br><span class="line">_parseAndDecode(<span class="built_in">String</span> response) &#123;</span><br><span class="line">  <span class="keyword">return</span> jsonDecode(response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">parseJson(<span class="built_in">String</span> text) &#123;</span><br><span class="line">  <span class="keyword">return</span> compute(_parseAndDecode, text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 自定义 jsonDecodeCallback</span></span><br><span class="line">  (dio.transformer <span class="keyword">as</span> DefaultTransformer).jsonDecodeCallback = parseJson;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其它示例">其它示例</h3><p>这里有一个 <a href="https://github.com/flutterchina/dio/blob/master/example/transfomer.dart">自定义Transformer的示例</a>.</p><h3 id="执行流">执行流</h3><p>虽然在拦截器中也可以对数据进行预处理，但是转换器主要职责是对请求/响应数据进行编解码，之所以将转化器单独分离，一是为了和拦截器解耦，二是为了不修改原始请求数据(如果你在拦截器中修改请求数据(options.data)，会覆盖原始请求数据，而在某些时候您可能需要原始请求数据). Dio的请求流是：</p><p><em>请求拦截器</em> &gt;&gt; <em>请求转换器</em> &gt;&gt; <em>发起请求</em> &gt;&gt; <em>响应转换器</em> &gt;&gt; <em>响应拦截器</em> &gt;&gt; <em>最终结果</em>。</p><p>这是一个自定义转换器的<a href="https://github.com/flutterchina/dio/blob/master/example/transfomer.dart">示例</a>.</p><h2 id="HttpClientAdapter">HttpClientAdapter</h2><p>HttpClientAdapter是 Dio 和 HttpClient之间的桥梁。2.0抽象出adapter主要是方便切换、定制底层网络库。Dio实现了一套标准的、强大API，而HttpClient则是真正发起Http请求的对象。我们通过HttpClientAdapter将Dio和HttpClient解耦，这样一来便可以自由定制Http请求的底层实现，比如，在Flutter中我们可以通过自定义HttpClientAdapter将Http请求转发到Native中，然后再由Native统一发起请求。再比如，假如有一天OKHttp提供了dart版，你想使用OKHttp发起http请求，那么你便可以通过适配器来无缝切换到OKHttp，而不用改之前的代码。</p><p>Dio 使用<code>DefaultHttpClientAdapter</code>作为其默认HttpClientAdapter，<code>DefaultHttpClientAdapter</code>使用<code>dart:io:HttpClient</code> 来发起网络请求。</p><h3 id="设置Http代理">设置Http代理</h3><p><code>DefaultHttpClientAdapter</code> 提供了一个<code>onHttpClientCreate</code> 回调来设置底层 <code>HttpClient</code>的代理，我们想使用代理，可以参考下面代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dio/dio.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dio/adapter.dart&#x27;</span>;</span><br><span class="line">...</span><br><span class="line">(dio.httpClientAdapter <span class="keyword">as</span> DefaultHttpClientAdapter).onHttpClientCreate = (client) &#123;</span><br><span class="line">  <span class="comment">// config the http client</span></span><br><span class="line">  client.findProxy = (uri) &#123;</span><br><span class="line">    <span class="comment">//proxy all request to localhost:8888</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;PROXY localhost:8888&#x27;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// you can also create a HttpClient to dio</span></span><br><span class="line">  <span class="comment">// return HttpClient();</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>完整的示例请查看<a href="https://github.com/flutterchina/dio/blob/master/example/proxy.dart">这里</a>.</p><h3 id="Https证书校验">Https证书校验</h3><p>有两种方法可以校验https证书，假设我们的后台服务使用的是自签名证书，证书格式是PEM格式，我们将证书的内容保存在本地字符串中，那么我们的校验逻辑如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> PEM=<span class="string">&#x27;XXXXX&#x27;</span>; <span class="comment">// certificate content</span></span><br><span class="line">(dio.httpClientAdapter <span class="keyword">as</span> DefaultHttpClientAdapter).onHttpClientCreate  = (client) &#123;</span><br><span class="line">  client.badCertificateCallback=(X509Certificate cert, <span class="built_in">String</span> host, <span class="built_in">int</span> port)&#123;</span><br><span class="line">    <span class="keyword">if</span>(cert.pem==PEM)&#123; <span class="comment">// Verify the certificate</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>X509Certificate</code>是证书的标准格式，包含了证书除私钥外所有信息，读者可以自行查阅文档。另外，上面的示例没有校验host，是因为只要服务器返回的证书内容和本地的保存一致就已经能证明是我们的服务器了（而不是中间人），host验证通常是为了防止证书和域名不匹配。</p><p>对于自签名的证书，我们也可以将其添加到本地证书信任链中，这样证书验证时就会自动通过，而不会再走到<code>badCertificateCallback</code>回调中：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(dio.httpClientAdapter <span class="keyword">as</span> DefaultHttpClientAdapter).onHttpClientCreate  = (client) &#123;</span><br><span class="line">  SecurityContext sc = SecurityContext();</span><br><span class="line">  <span class="comment">//file is the path of certificate</span></span><br><span class="line">  sc.setTrustedCertificates(file);</span><br><span class="line">  HttpClient httpClient = HttpClient(context: sc);</span><br><span class="line">  <span class="keyword">return</span> httpClient;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意，通过<code>setTrustedCertificates()</code>设置的证书格式必须为PEM或PKCS12，如果证书格式为PKCS12，则需将证书密码传入，这样则会在代码中暴露证书密码，所以客户端证书校验不建议使用PKCS12格式的证书。</p><h2 id="Http2支持">Http2支持</h2><p><a href="https://github.com/flutterchina/dio/tree/master/plugins/http2_adapter">dio_http2_adapter</a> 包提供了一个支持Http/2.0的Adapter，详情可以移步 <a href="https://github.com/flutterchina/dio/tree/master/plugins/http2_adapter">dio_http2_adapter</a> 。</p><h2 id="请求取消">请求取消</h2><p>你可以通过 <em>cancel token</em> 来取消发起的请求：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CancelToken token = CancelToken();</span><br><span class="line">dio.<span class="keyword">get</span>(url, cancelToken: token)</span><br><span class="line">    .catchError((DioError err)&#123;</span><br><span class="line">      <span class="keyword">if</span> (CancelToken.isCancel(err)) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Request canceled! &#x27;</span>+ err.message)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// handle error.</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">// cancel the requests with &quot;cancelled&quot; message.</span></span><br><span class="line">token.cancel(<span class="string">&quot;cancelled&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>注意: 同一个cancel token 可以用于多个请求，当一个cancel token取消时，所有使用该cancel token的请求都会被取消。</p></blockquote><p>完整的示例请参考<a href="https://github.com/flutterchina/dio/blob/master/example/cancel_request.dart">取消示例</a>.</p><h2 id="继承-Dio-class">继承 Dio class</h2><p><code>Dio</code> 是一个拥有factory 构造函数的接口类，因此不能直接继承 <code>Dio</code> ，但是可以通过 <code>DioForNative</code> 或<code>DioForBrowser</code> 来间接实现:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dio/dio.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dio/native_imp.dart&#x27;</span>; <span class="comment">//在浏览器中, import &#x27;package:dio/browser_imp.dart&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Http</span> <span class="keyword">extends</span> <span class="title">DioForNative</span> </span>&#123;</span><br><span class="line">  Http([BaseOptions options]):<span class="keyword">super</span>(options)&#123;</span><br><span class="line">    <span class="comment">// 构造函数做一些事</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们也可以直接实现 <code>Dio</code>接口类 :</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDio</span> <span class="title">with</span> <span class="title">DioMixin</span> <span class="keyword">implements</span> <span class="title">Dio</span></span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一些其他库">一些其他库</h2><p>awesome-dio</p><p>🎉 A curated list of awesome things related to dio.</p><table><thead><tr><th>Plugins</th><th>Status</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://github.com/flutterchina/dio/tree/master/plugins/cookie_manager">dio_cookie_manager</a></td><td><a href="https://pub.dartlang.org/packages/dio_http2_adapter"><img src="https://camo.githubusercontent.com/651c2851d777dbc5e679941cd2ee96badd2c6b81a8e3c83899a9888654ed5f56/68747470733a2f2f696d672e736869656c64732e696f2f7075622f762f64696f5f68747470325f616461707465722e7376673f7374796c653d666c61742d737175617265" alt="Pub"></a></td><td>A cookie manager for Dio</td></tr><tr><td><a href="https://github.com/flutterchina/dio/tree/master/plugins/http2_adapter">dio_http2_adapter</a></td><td><a href="https://pub.dartlang.org/packages/dio_cookie_manager"><img src="https://camo.githubusercontent.com/8964d2e10495f6912fa1f9506ec5bd9479878f49da0b3e08b39893c88a2783ef/68747470733a2f2f696d672e736869656c64732e696f2f7075622f762f64696f5f636f6f6b69655f6d616e616765722e7376673f7374796c653d666c61742d737175617265" alt="Pub"></a></td><td>A Dio HttpClientAdapter which support Http/2.0</td></tr><tr><td><a href="https://github.com/rodion-m/dio_smart_retry">dio_smart_retry</a></td><td><a href="https://pub.dev/packages/dio_smart_retry"><img src="https://camo.githubusercontent.com/be8fce1c31df488145731f3ce4c65df61a0d42026489a67be62791f3138a3847/68747470733a2f2f696d672e736869656c64732e696f2f7075622f762f64696f5f736d6172745f72657472792e7376673f7374796c653d666c61742d737175617265" alt="Pub"></a></td><td>Flexible retry library for Dio</td></tr><tr><td><a href="https://github.com/diefferson/http_certificate_pinning">http_certificate_pinning</a></td><td><a href="https://pub.dev/packages/http_certificate_pinning"><img src="https://camo.githubusercontent.com/ca4df1b46b6c0aeed74a66602990128d9f58ec9e1448301c9d689d2d03aac696/68747470733a2f2f696d672e736869656c64732e696f2f7075622f762f687474705f63657274696669636174655f70696e6e696e672e7376673f7374796c653d666c61742d737175617265" alt="Pub"></a></td><td>Https Certificate pinning for Flutter</td></tr><tr><td><a href="https://github.com/OwnWeb/curl_logger_dio_interceptor">curl_logger_dio_interceptor</a></td><td><a href="https://pub.dev/packages/curl_logger_dio_interceptor"><img src="https://camo.githubusercontent.com/f699651dfdb7afa73dfc1d559f85f304b6cef01651319a8abe380270a19e9550/68747470733a2f2f696d672e736869656c64732e696f2f7075622f762f6375726c5f6c6f676765725f64696f5f696e746572636570746f722e7376673f7374796c653d666c61742d737175617265" alt="Pub"></a></td><td>A Flutter curl-command generator for Dio.</td></tr><tr><td><a href="https://github.com/hurshi/dio-http-cache">dio_http_cache</a></td><td><a href="https://pub.dev/packages/dio_http_cache"><img src="https://camo.githubusercontent.com/c3157a30260882db44bcadc8608c0af7904ca1694fb56fdae3085171d3a278bb/68747470733a2f2f696d672e736869656c64732e696f2f7075622f762f64696f5f687474705f63616368652e7376673f7374796c653d666c61742d737175617265" alt="Pub"></a></td><td>A simple cache library for Dio like Rxcache in Android</td></tr><tr><td><a href="https://github.com/Milad-Akarie/pretty_dio_logger">pretty_dio_logger</a></td><td><a href="https://pub.dev/packages/pretty_dio_logger"><img src="https://camo.githubusercontent.com/95e041925f1578527df8d8bcb9607156cce4dc354dd6d29e9d81c8cc52a7e36e/68747470733a2f2f696d672e736869656c64732e696f2f7075622f762f7072657474795f64696f5f6c6f676765722e7376673f7374796c653d666c61742d737175617265" alt="Pub"></a></td><td>Pretty Dio logger is a Dio interceptor that logs network calls in a pretty, easy to read format.</td></tr></tbody></table><h1>异步与同步</h1><h2 id="原理">原理</h2><h3 id="异步">异步</h3><p>也就是说，<strong>代码执行中，某段代码的执行并不会影响后面代码的执行。</strong></p><p>说得好像有点抽象，让我们看看异步的实现方式：</p><ul><li><p><strong>多线程</strong></p><ul><li>开启另一条线程执行一段耗时代码，这样两条线程可以并列执行，自然不会阻塞线程而影响后面代码的执行了。</li><li><strong>多线程在适量并合理地使用下，可以说真香。但是其缺点也是显而易见的：</strong><ul><li>开启线程会带来额外的资源和性能消耗，在遇到大量并发时，会给服务器带来极大的压力。</li><li>多个线程操作共享内存时需要加锁控制，锁竞争会降低性能和效率，复杂情况下还容易造成死锁。</li></ul></li></ul></li><li><p><strong>单线程</strong></p><ul><li><strong>一条执行线上，同时且只能执行一个任务（事件），其他任务都必须在后面排队等待被执行</strong>。也就是说，在一条执行线上，为了不阻碍代码的执行，每遇到的耗时任务都会被挂起放入任务队列，待执行结束后再按放入顺序依次执行队列上的任务，从而达到异步效果。</li></ul></li></ul><p>​        上述执行线为什么不直接说是线程？因为Dart没有线程概念，只有<code>Isolate</code>。所以，<strong>Dart线程</strong>这个说法就是错的。当然，在此方面理解为<strong>线程</strong>，甚至理解为一个<strong>函数体</strong>也没毛病…</p><p>​        单线程模型的优势就是避免了上述多线程的缺点，然而这种方式比较适合于往往把时间浪费在等待对方传送数据或者返回结果的耗时操作，如网络请求，IO流操作等。对于尽可能利用处理器的多核实现并行计算的计算密集型操作相对来说多线程更为合适。</p><h3 id="Dart事件循环机制">Dart事件循环机制</h3><p>上文说了Dart是基于<code>事件循环机制</code>的<code>单线程模型</code>，那么问题来了…</p><h4 id="为什么要采用单线程模型？">为什么要采用单线程模型？</h4><p>App使用过程中，多数时间处于空闲状态，并不需要进行密集或高并发的处理，计算以及UI渲染，多线程方式显然有些多余。</p><h4 id="为什么要基于事件循环机制？">为什么要基于事件循环机制？</h4><p>对于用户点击，滑动，硬盘IO访问等等事件，你不知道何时发生或以什么顺序发生，所以得有一个永不停歇且不能阻塞的循环来等待并处理这些“突发”事件。</p><h4 id="Dart事件循环机制是怎样的？">Dart事件循环机制是怎样的？</h4><p>Dart事件循环机制是由一个 <strong>消息循环(Event looper)</strong> 和两个消息队列：<strong>事件队列(Event queue)</strong> 和 <strong>微任务队列(MicroTask queue)</strong> 构成。</p><h4 id="Event-Looper">Event Looper</h4><p>Dart代码的运行是从main函数开始的，main函数执行完后，<code>Event looper</code>开始工作，<code>Event looper</code>优先全部执行完<code>Microtask queue</code>中的event<br>直到<code>Microtask queue</code>为空时，才会执行<code>Event queue</code>中的event，后者为空时才可以退出循环，这里强调“可以”而不是“一定”要退出，视场景而定。</p><p><img src="1.png" alt=""></p><p>更官方的：</p><p><img src="0.png" alt=""></p><blockquote><p>执行完<code>main()</code>函数后将会创建一个<code>Main Isolate</code>。</p></blockquote><ul><li><strong>Event Loop</strong>会处理两个队列<code>MicroTask queue</code>和<code>Event queue</code>中的任务；</li><li><code>Event queue</code>主要处理外部的事件任务：<code>I/O</code>,<code>手势事件</code>,<code>定时器</code>,<code>isolate间的通信</code>等；</li><li><code>MicroTask queue</code>主要处理内部的任务：譬如处理<code>I/O</code>事件的中间过程中可能涉及的一些特殊处理等；</li><li>两个队列都是先进先出的处理逻辑，优先处理<code>MicroTask queue</code>的任务，当<code>MicroTask queue</code>队列为空后再执行<code>Event queue</code>中的任务；</li><li>当两个队列都为空的时候就进行GC操作，或者仅仅是在等待下个任务的到来。</li></ul><p>为了比较好的理解 <strong>Event Loop</strong> 的异步逻辑，我们来打个比喻：就像我去某网红奶茶品牌店买杯“幽兰拿铁”(由于是现做的茶，比较耗时)的过程。</p><blockquote><ol><li>我来到前台给服务员说我要买一杯你们店的“幽兰拿铁”，然后服务员递给了我一个有编号的飞盘(获取凭证)；</li><li>奶茶店的备餐员工就将我的订单放在订单列表的最后面，他们按照顺序准备订单上的商品，准备好一个就让顾客去领取（Event queue 先进先出进行处理），而我就走开了，该干啥干啥去了(异步过程，不等待处理结果)；</li><li>突然他们来了个超级VIP会员的订单，备餐员工就把这个超级VIP订单放在了其他订单的最前面，优先安排了这个订单的商品(MicroTask优先处理)—此场景为虚构；</li><li>当我的订单完成后，飞盘开始震动(进行结果回调)，我又再次回到了前台，如果前台妹子递给我一杯奶茶（获得结果），如果前台妹子说对不起先生，到您的订单的时候没水了，订单没法完成了给我退钱（获得异常错误错误）。</li></ol></blockquote><h4 id="Event-Queue">Event Queue</h4><p>该队列事件来源于<code>外部事件</code>和<code>Future</code></p><ol><li>外部事件</li></ol><blockquote><p>例如：输入/输出，手势，绘制，计时器，Stream等等；<br>对于<code>外部事件</code>，一旦没有任何microtask要执行，Event looper就会考虑将列为队列中的第一项并执行它。</p></blockquote><ol><li>Future</li></ol><blockquote><p>用于自定义Event queue事件。</p></blockquote><p>通过创建<code>Future</code>类实例来向Event queue添加事件：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Future(() &#123;</span><br><span class="line">  <span class="comment">// 事件任务</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>延时5秒后添加一个事件：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Future.delayed(<span class="keyword">const</span> <span class="built_in">Duration</span>(seconds:<span class="number">5</span>), () &#123;</span><br><span class="line">  <span class="comment">// 事件任务</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果该任务前面有其它任务需要先执行，该任务被执行的时间会大于5秒（单线程模型的缺陷之一，不能基于时钟调度）。</p><p>这里拓展下<code>Future</code>的一些用法（了解下就可以了，不是本文重点）：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Future(() =&gt; doTask) <span class="comment">// 执行异步任务</span></span><br><span class="line">    .then((result1) =&gt; doChildTask1(result1)) <span class="comment">// doTask执行完后的子任务，result为上个任务doTask的返回值</span></span><br><span class="line">    .then((result2) =&gt; doChildTask2(result2)) <span class="comment">// doChildTask1执行完后的子任务，result为上个任务doChildTask1的返回值</span></span><br><span class="line">    .whenComplete(() =&gt; doComplete); <span class="comment">// 当所有任务完成后的回调函数</span></span><br></pre></td></tr></table></figure><p>事件任务执行完后会立即依次执行<code>then</code>子任务，最后执行<code>whenComplete</code>函数。</p><h4 id="Microtask-Queue">Microtask Queue</h4><ol><li>上文已述，Microtask queue的优先级要高于Event queue</li><li>使用场景：想要在稍后完成一些任务（microtask）但又希望在执行下一个事件（event）之前执行。</li></ol><blockquote><p>Microtask一般用于非常短的内部异步动作，并且任务量非常少，如果微任务非常多，就会造成Event queue排不上队，会阻塞Event queue的执行（如，用户点击没有反应）。所以，大多数情况下优先考虑使用Event queue，整个Flutter源代码仅引用scheduleMicroTask（）方法7次。</p></blockquote><p>通过创建<code>scheduleMicrotask</code>函数来向Microtask queue添加任务：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scheduleMicrotask(() &#123;</span><br><span class="line">  <span class="comment">// 事件任务</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Isolate">Isolate</h3><p>所有的Dart代码都是在<code>isolate</code>中运行，它就像是机器上的一个小空间，具有自己的私有内存块和一个运行着<code>Event looper</code>的单个线程。正如上文强调的：<strong>Dart中没有线程的概念只有<code>isolate</code></strong>。</p><p><img src="2.png" alt="isolate具有自己的内存和运行事件循环的单个执行线程"></p><p>每个<code>isolate</code>都是相互隔离（独立）的，并不像线程那样可以共享内存，isolate本身就是隔离的意思…</p><p>许多Dart应用都在单个<code>isolate</code>中运行所有代码，但是如果特殊需要，您可以拥有多个。</p><p><img src="3.png" alt="两个isolate，每个isolate都有自己的内存和执行线程"></p><p><code>Isolate</code>间可以一起工作的唯一方法是通过来回传递消息。一个<code>isolate</code>将消息发送到另一个<code>isolate</code>，接收者使用其<code>Event looper</code>处理该消息。</p><p>如果你想了解更多，参考<a href="https://juejin.cn/post/6844904148303872013#heading-0">Flutter之isolate的使用及通信原理</a></p><h2 id="关键字">关键字</h2><p>异步操作常用关键字：<code>Future</code>,<code>async</code>,<code>await</code>，都是基于<strong>Event Loop</strong>。</p><ul><li><p>future 是 <a href="https://api.dart.dev/stable/dart-async/Future-class.html"><code>Future</code></a> 类的对象，其表示一个 <code>T</code> 类型的异步操作结果。如果异步操作不需要结果，则 future 的类型可为 <code>Future&lt;void&gt;</code>。当一个返回 future 对象的函数被调用时，会发生两件事：</p><ul><li>将函数操作列入队列等待执行并返回一个未完成的 <code>Future</code> 对象。</li><li>不久后当函数操作执行完成，<code>Future</code> 对象变为完成并携带一个值或一个错误。</li></ul></li><li><p>异步函数即在函数头中包含关键字 <code>async</code> 的函数。关键字 <code>await</code> 只能用在异步函数中</p></li></ul><p><strong>请注意异步函数是立即开始执行的（同步地），其将会在下述情况之一首次出现时暂停执行并返回一个未完成的 future 对象：</strong></p><ul><li><strong>函数中第一个 <code>await</code> 表达式出现时（在该函数从 <code>await</code> 表达式获取到未完成的 future 之后）。</strong></li><li><strong>函数中任何 <code>return</code> 语句的出现时。</strong></li><li><strong>函数体的结束。</strong></li></ul><h2 id="使用">使用</h2><p>你可以想上面<code>dio</code>那样直接使用await，这是完全可以的。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Response response;</span><br><span class="line"><span class="keyword">var</span> dio = Dio();</span><br><span class="line">response = <span class="keyword">await</span> dio.<span class="keyword">get</span>(<span class="string">&#x27;/test?id=12&amp;name=wendu&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="then-与-whenComplete"><code>.then()</code>与<code>.whenComplete ()</code></h3><h4 id="then"><code>.then()</code></h4><p>上面的请求也可以这么写：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Response response;</span><br><span class="line"><span class="keyword">var</span> dio = Dio();</span><br><span class="line">dio.<span class="keyword">get</span>(<span class="string">&#x27;/test?id=12&amp;name=wendu&#x27;</span>).then((value)&#123;</span><br><span class="line">    response = value;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>then 方法的第一个参数 <code>FutureOr&lt;R&gt; onValue(T value)</code> 就是 Future 的 onValue 代表的值 , 类型是 Future 泛型类型 R ;</p><p>then 方法的第二个参数 <code>&#123;Function? onError&#125;</code> 是可选的 , 用于捕获异常的方法 ;</p><p><strong>当然你可以在<code>dio.get()</code>方法前面加<code>await</code>，但加与不加是有区别的，对这个区别的理解程度其实就是对<code>await</code>关键字的理解程度。</strong></p><h4 id="whenComplete"><code>.whenComplete() </code></h4><p>在 Future 执行快要结束时 , 如果想要执行一些任务 , 可以在链式调用时 , 调用 Future 的 whenComplete 方法 ;</p><p>该方法类似于 try … catch … finally 中的 finally 代码块 , 是必定执行的代码 , 即使出险错误 , 也会执行该代码 ;</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dio.<span class="keyword">get</span>(<span class="string">&#x27;/test?id=12&amp;name=wendu&#x27;</span>).then((value) &#123;</span><br><span class="line">    <span class="built_in">print</span>(value);</span><br><span class="line">  &#125;).catchError((e) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;catchError:&#x27;</span>);</span><br><span class="line">    <span class="built_in">print</span>(e);</span><br><span class="line">  &#125;).whenComplete(() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;whenComplete&#x27;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="其他">其他</h4><p>Future也有其他方法，比如：</p><ul><li><code>Future.delay</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> future4 = Future.delayed(Duration(seconds: <span class="number">1</span>), () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>延迟一定时间再执行</p></blockquote><p>用的不多，需要的话可以自学。</p><h2 id="注意事项">注意事项</h2><h3 id="Async-方法">Async 方法</h3><p>当你使用 <strong>async</strong> 关键字作为方法声明的后缀时，<strong>Dart</strong> 会将其理解为：</p><ul><li>该方法的返回值是一个 <strong>Future</strong>；</li><li>它<strong>同步</strong>执行该方法的代码直到<strong>第一个 await 关键字</strong>，然后它暂停该方法其他部分的执行；</li><li>一旦由 <strong>await</strong> 关键字引用的 <strong>Future</strong> 执行完成，下一行代码将立即执行。</li></ul><p>为了更好地进行说明，让我们通过以下示例并尝试指出其运行的结果。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() <span class="keyword">async</span> &#123;</span><br><span class="line">  methodA();</span><br><span class="line">  <span class="keyword">await</span> methodB();</span><br><span class="line">  <span class="keyword">await</span> methodC(<span class="string">&#x27;main&#x27;</span>);</span><br><span class="line">  methodD();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">methodA()&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">methodB() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;B start&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> methodC(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;B end&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">methodC(<span class="built_in">String</span> from) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;C start from <span class="subst">$from</span>&#x27;</span>);</span><br><span class="line">  Future(()&#123;                <span class="comment">// &lt;== 该代码将在未来的某个时间段执行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;C running Future from <span class="subst">$from</span>&#x27;</span>);</span><br><span class="line">  &#125;).then((_)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;C end of Future from <span class="subst">$from</span>&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;C end from <span class="subst">$from</span>&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">methodD()&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>正确的顺序是：</p><ol><li>A</li><li>B start</li><li>C start from B</li><li>C end from B</li><li>B end</li><li>C start from main</li><li>C end from main</li><li>D</li><li>C running Future from B</li><li>C end of Future from B</li><li>C running Future from main</li><li>C end of Future from main</li></ol><p>现在，让我们认为上述代码中的 <strong>methodC()</strong> 为对服务端的调用，这可能需要不均匀的时间来进行响应。我相信可以很明确地说，预测确切的执行流程可能变得非常困难。</p><p>如果你最初希望示例代码中仅在所有代码末尾执行 <strong>methodD()</strong> ，那么你应该按照以下方式编写代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() <span class="keyword">async</span> &#123;</span><br><span class="line">  methodA();</span><br><span class="line">  <span class="keyword">await</span> methodB();</span><br><span class="line">  <span class="keyword">await</span> methodC(<span class="string">&#x27;main&#x27;</span>);</span><br><span class="line">  methodD();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">methodA()&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">methodB() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;B start&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> methodC(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;B end&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">methodC(<span class="built_in">String</span> from) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;C start from <span class="subst">$from</span>&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> Future(()&#123;                  <span class="comment">// &lt;== 在此处进行修改</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;C running Future from <span class="subst">$from</span>&#x27;</span>);</span><br><span class="line">  &#125;).then((_)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;C end of Future from <span class="subst">$from</span>&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;C end from <span class="subst">$from</span>&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">methodD()&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出序列为：</p><ol><li>A</li><li>B start</li><li>C start from B</li><li>C running Future from B</li><li>C end of Future from B</li><li>C end from B</li><li>B end</li><li>C start from main</li><li>C running Future from main</li><li>C end of Future from main</li><li>C end from main</li><li>D</li></ol><p>事实是通过在 <strong>methodC()</strong> 中定义 <strong>Future</strong> 的地方简单地添加 <strong>await</strong> 会改变整个行为。</p><h1>其他小技巧</h1><p>快速json解析为对象</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookCollection</span> </span>&#123;</span><br><span class="line">  <span class="comment">//索书号</span></span><br><span class="line">  <span class="built_in">String</span> callNo;</span><br><span class="line">  <span class="comment">//条码号</span></span><br><span class="line">  <span class="built_in">String</span> barcode;</span><br><span class="line">  <span class="comment">//出版日期</span></span><br><span class="line">  <span class="built_in">String</span> publishTime;</span><br><span class="line">  <span class="comment">//馆藏地</span></span><br><span class="line">  <span class="built_in">String</span> location;</span><br><span class="line">  <span class="comment">//是否可借</span></span><br><span class="line">  <span class="built_in">String</span> status;</span><br><span class="line"></span><br><span class="line">  BookCollection.fromJson(jsonMap) &#123;</span><br><span class="line">    callNo = jsonMap[<span class="string">&#x27;callNo&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    barcode = jsonMap[<span class="string">&#x27;barcode&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    publishTime = jsonMap[<span class="string">&#x27;publishTime&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    location = jsonMap[<span class="string">&#x27;location&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    status = jsonMap[<span class="string">&#x27;status&#x27;</span>] ?? <span class="string">&#x27;false&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span> list = jsonMap[<span class="string">&#x27;collectionBooks&#x27;</span>] ?? [];</span><br><span class="line"><span class="built_in">List</span>&lt;BookCollection&gt; collections =</span><br><span class="line">        list.map((element) =&gt; BookCollection.fromJson(element)).toList() ?? [];</span><br></pre></td></tr></table></figure><h1>参考：</h1><blockquote><p><a href="https://github.com/flutterchina/dio/blob/master/README-ZH.md">https://github.com/flutterchina/dio/blob/master/README-ZH.md</a></p><p><a href="https://github.com/flutterchina/dio/blob/develop/README-ZH.md">https://github.com/flutterchina/dio/blob/develop/README-ZH.md</a></p><p><a href="https://blog.csdn.net/androidbye/article/details/118059569?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.pc_relevant_default&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3">https://blog.csdn.net/androidbye/article/details/118059569?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.pc_relevant_default&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学线培训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学线培训 </tag>
            
            <tag> 移动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学线培训：winter-flutter：PlatformChannel与桌面组件</title>
      <link href="/2022/01/17/%E5%AD%A6%E7%BA%BF%E5%9F%B9%E8%AE%AD%EF%BC%9Awinter-flutter%EF%BC%9AMethodChannel%E4%B8%8E%E6%A1%8C%E9%9D%A2%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/01/17/%E5%AD%A6%E7%BA%BF%E5%9F%B9%E8%AE%AD%EF%BC%9Awinter-flutter%EF%BC%9AMethodChannel%E4%B8%8E%E6%A1%8C%E9%9D%A2%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1>PlatformChannel</h1><p>Flutter定义了三种不同类型的<code>Channel</code>，它们分别是</p><ul><li><code>BasicMessageChannel</code>：用于传递字符串和半结构化的信息。</li><li><code>MethodChannel</code>：用于传递方法调用（<code>method invocation</code>）。</li><li><code>EventChannel</code>: 用于数据流（<code>event streams</code>）的通信。</li></ul><p>三种Channel之间互相独立，各有用途，但它们在设计上却非常相近。每种<code>Channel</code>均有三个重要成员变量：</p><ul><li><code>name</code>: <code> String</code>类型，代表<code>Channel</code>的名字，也是其唯一标识符。</li><li><code>messager</code>：<code>BinaryMessenger</code>类型，代表消息信使，是消息的发送与接收的工具。</li><li><code>codec</code>: <code>MessageCodec</code>类型或<code>MethodCodec</code>类型，代表消息的编解码器。</li></ul><p><strong>下面讲MethodChannel，其余两种方法基本一致</strong></p><h2 id="MethodChannel">MethodChannel</h2><p><img src="0.jpg" alt=""></p><p><a href="http://82.156.169.66/battery.zip">样例下载</a>，以下基于样例进行讲解</p><h3 id="flutter端">flutter端</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> MethodChannel methodChannel = MethodChannel(<span class="string">&#x27;samples.flutter.io/battery&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> _batteryLevel = <span class="string">&#x27;Battery level: unknown.&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="keyword">void</span>&gt; _getBatteryLevel() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">String</span> batteryLevel;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">int</span> result = <span class="keyword">await</span> methodChannel.invokeMethod(<span class="string">&#x27;getBatteryLevel&#x27;</span>);</span><br><span class="line">    batteryLevel = <span class="string">&#x27;Battery level: <span class="subst">$result</span>%.&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">on</span> PlatformException &#123;</span><br><span class="line">    batteryLevel = <span class="string">&#x27;Failed to get battery level.&#x27;</span>;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;enter exception&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  setState(() &#123;</span><br><span class="line">    _batteryLevel = batteryLevel;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化MethodChannel对象，通过该对象调用相应的安卓端某个方法，参数为方法名。</p><p>注意这是一个异步操作，也就是说调用该方法时并不能立即得到结果。</p><p>也可以这样写：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;<span class="keyword">void</span>&gt; _getBatteryLevel() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">String</span> batteryLevel;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">await</span> methodChannel.invokeMethod(<span class="string">&#x27;getBatteryLevel&#x27;</span>).then((value) &#123;</span><br><span class="line">       result = value;</span><br><span class="line">     &#125;);</span><br><span class="line">    batteryLevel = <span class="string">&#x27;Battery level: <span class="subst">$result</span>%.&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">on</span> PlatformException &#123;</span><br><span class="line">    batteryLevel = <span class="string">&#x27;Failed to get battery level.&#x27;</span>;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;enter exception&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  setState(() &#123;</span><br><span class="line">    _batteryLevel = batteryLevel;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过调用<code>.then</code>获取异步函数的返回值<code>value</code></p><h3 id="安卓端">安卓端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">FlutterActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BATTERY_CHANNEL = <span class="string">&quot;samples.flutter.io/battery&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getBatteryLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> batteryLevel = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (VERSION.SDK_INT &gt;= VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">            BatteryManager batteryManager = (BatteryManager) getSystemService(BATTERY_SERVICE);</span><br><span class="line">            batteryLevel = batteryManager.getIntProperty(BatteryManager.BATTERY_PROPERTY_CAPACITY);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> ContextWrapper(getApplicationContext()).</span><br><span class="line">                    registerReceiver(<span class="keyword">null</span>, <span class="keyword">new</span> IntentFilter(Intent.ACTION_BATTERY_CHANGED));</span><br><span class="line">            batteryLevel = (intent.getIntExtra(BatteryManager.EXTRA_LEVEL, -<span class="number">1</span>) * <span class="number">100</span>) /</span><br><span class="line">                    intent.getIntExtra(BatteryManager.EXTRA_SCALE, -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> batteryLevel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        FlutterMain.startInitialization(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="keyword">new</span> MethodChannel(getFlutterView(), BATTERY_CHANNEL).setMethodCallHandler(</span><br><span class="line">                (call, result) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (call.method.equals(<span class="string">&quot;getBatteryLevel&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">int</span> batteryLevel = getBatteryLevel();</span><br><span class="line">                        <span class="keyword">if</span> (batteryLevel != -<span class="number">1</span>) &#123;</span><br><span class="line">                            result.success(batteryLevel);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            result.error(<span class="string">&quot;UNAVAILABLE&quot;</span>, <span class="string">&quot;Battery level not available.&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意两边的<code>methodChannel</code>名字要相同，通过这个名字区分不同的<code>methodChannel</code></p><p>通过<code>call.method</code>方法获取flutter的<code>invokeMethod</code>的参数并调用原生响应函数</p><p>这只是flutter调用原生的例子，原生调flutter用到的不多，用法类似。</p><h2 id="以i山大为例">以i山大为例</h2><p>1.在<code>MainActivity</code>内注册<code>methodChannel</code></p><p><img src="1.png" alt=""></p><p>2.handler文件夹下存放handler，引用<code>MethodChannel.MethodCallHandler</code>接口，重写<code>onMethodCall</code>方法。</p><p><img src="2.png" alt=""></p><p>3.util文件夹下存放相应的方法（被调用的所有方法）</p><p><img src="3.png" alt=""></p><p>原理可以参考<a href="https://www.jianshu.com/p/39575a90e820">闲鱼技术的博客</a></p><p><a href="https://www.jianshu.com/p/cb96d62f5042">三种Channel的样例</a></p><h1>桌面小组件</h1><p>建议直接参考<a href="https://developer.android.com/guide/topics/appwidgets?hl=zh-cn">官网</a></p><p>i山大内的样例可以直接参考<code>ScheduleWidgetService</code>、<code>ScheduleWidget</code>两个类</p><h1>参考</h1><blockquote><p><a href="https://flutter.cn/docs/development/platform-integration/platform-channels">https://flutter.cn/docs/development/platform-integration/platform-channels</a></p><p><a href="https://www.jianshu.com/p/39575a90e820">https://www.jianshu.com/p/39575a90e820</a></p><p><a href="https://developer.android.com/guide/topics/appwidgets?hl=zh-cn">https://developer.android.com/guide/topics/appwidgets?hl=zh-cn</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学线培训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学线培训 </tag>
            
            <tag> 移动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构课设:霍夫曼编码译码</title>
      <link href="/2022/01/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E8%AE%BE-%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81%E8%AF%91%E7%A0%81/"/>
      <url>/2022/01/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E8%AE%BE-%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81%E8%AF%91%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>单纯对这类题目比较感兴趣吧，因为要是单纯去实现最原始的霍夫曼算法的话，其实很简单的，但是很多时候正是我们的不知足心理推动了技术的发展与进步，而我也恰恰觉得现阶段霍夫曼算法还有可以优化的地方而变得更加高效，也希望能借这个机会给下学期的算法课开个好头。</p><h1>题目</h1><h2 id="问题描述"><strong>问题描述</strong></h2><p>利用哈夫曼编码进行信息通信可以大大提高信道利用率，缩短信息传输时间，降低传输成本。但是，这要求在发送端通过一个编码系统对待传数据预先编码；在接收端将传来的数据进行译码（复原）。对于双工信道（即可以双向传输信息的信道），每端都需要一个完整的编/译码系统。试为这样的信息收发站写一个哈夫曼码的编译码系统。</p><h2 id="基本要求"><strong>基本要求</strong></h2><p>一个完整的系统应具有以下功能：</p><p>（1）I：初始化（Initialization）。从终端读入字符集大小n及n个字符和m个权值，建立哈夫曼树，并将它存于文件hfmtree中。</p><p>（2）C：编码（Coding）。利用已建好的哈夫曼树（如不在内存，则从文件hfmtree中读入），对文件tobetrans中的正文进行编码，然后将结果存入文件codefile中。</p><p>（3）D：解码（Decoding）。利用已建好的哈夫曼树将文件codefile中的代码进行译码，结果存入文件textfile中。</p><p>（4）P：打印代码文件（Print）。将文件codefile以紧凑格式显示在终端上，每行50个代码。同时，将此字符形式的编码文件写入文件codeprint中。</p><p>（5）T：打印哈夫曼树（Tree printing）。将已在内存中的哈夫曼树以直观的方式（树或凹入表形式）显示在终端上，同时将此字符形式的哈夫曼树写入文件treeprint中。</p><h1>初期设计</h1><img src="0.jpg" alt="架构" style="zoom:20%;" /><h1>文献分析</h1><h2 id="第一篇">第一篇</h2><p>一种空间更优的快速霍夫曼解码算法：</p><blockquote><p>[1].Chen, H.C., Y.L. Wang and Y.F. Lan, A memory-efficient and fast Huffman decoding algorithm. INFORMATION PROCESSING LETTERS, 1999. 69(3): p. 119-122.</p></blockquote><p>以这棵霍夫曼树为例：</p><img src="1.png" style="zoom:50%;" /><h3 id="一些定义">一些定义</h3><p>各叶子节点从左至右用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>s</mi><mn>1</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>s</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">s_0,s_1...s_{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>表示（共有n个编码元素）</p><p><code>level</code>表示节点所在,级数，根节点级数为0，用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>表示</p><p><code>height</code>表示二叉树高度，即霍夫曼树中<code>level</code>的最大值，用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span></span></span></span>表示</p><p>编码元素<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的<code>weight</code>用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示（<strong>注意这个跟题干里的元素权重或者出现频率是不一样的</strong>），<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub><mo>=</mo><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mi>l</mi></mrow></msup></mrow><annotation encoding="application/x-tex">w_i = 2^{h-l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span></span></span></span></span></span></span></span></p><p>定义 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>u</mi><mi>n</mi><msub><mi>t</mi><mn>0</mn></msub><mo>=</mo><msub><mi>w</mi><mn>0</mn></msub><mo separator="true">,</mo><mi>c</mi><mi>o</mi><mi>u</mi><mi>n</mi><msub><mi>t</mi><mi>i</mi></msub><mo>=</mo><mi>c</mi><mi>o</mi><mi>u</mi><mi>n</mi><msub><mi>t</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">count_0 = w_0,count_i = count_{i-1} + w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathnormal">co</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">co</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8234109999999999em;vertical-align:-0.208331em;"></span><span class="mord mathnormal">co</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，(其实这个是不必要的)</p><hr><p>那么对于一棵霍夫曼树，我们就可以得到它的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>w</mi><mi>i</mi></msub><mo separator="true">,</mo><mi>c</mi><mi>o</mi><mi>u</mi><mi>n</mi><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i,w_i,count_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">co</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的对应的值的表，以上面的霍夫曼树为例：</p><p>用三个<strong>数组</strong>存储相应元素</p><img src="2.png" style="zoom:50%;" /><h3 id="第一种算法">第一种算法</h3><h4 id="伪代码（算法逻辑）">伪代码（算法逻辑）</h4><p>那么，在对霍夫曼编码进行解码的时候，我们就希望在尽可能短的时间内通过编码获取到对应的元素，算法伪代码如下：</p><ul><li><p>Step1：计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>=</mo><mo stretchy="false">(</mo><mi>c</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mi>d</mi></mrow></msup></mrow><annotation encoding="application/x-tex">t = (c+1)\times2^{h-d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span>是二进制数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span> 的位数，式中的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span> 换算成十进制参与计算</p></li><li><p>Step2：在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">count</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">co</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span></span></span></span>的数组中搜索<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span></span></span></span>：</p><ul><li>若没有相应的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>u</mi><mi>n</mi><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">count_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathnormal">co</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>与 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span></span></span></span> 相等，则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span> 不是一个编码</li><li>若存在，假设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>u</mi><mi>n</mi><msub><mi>t</mi><mi>k</mi></msub><mo>=</mo><mi>t</mi></mrow><annotation encoding="application/x-tex">count_k = t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathnormal">co</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span></span></span></span></li></ul></li><li><p>Step3：如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mi>k</mi></msub><mo mathvariant="normal">≠</mo><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mi>d</mi></mrow></msup></mrow><annotation encoding="application/x-tex">w_k \neq 2^{h-d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span></span></span></span>，则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span> 不是一个编码，否则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span> 对应的编码元素就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">s_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>（相当于找到了元素存储的下标 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>）</p></li></ul><h4 id="举例">举例</h4><p>（直接用原文的例子吧，很好理解）</p><img src="3.png" style="zoom:50%;" /><h4 id="原理">原理</h4><p>假设有高为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span></span></span></span> 的满二叉树（霍夫曼树），则有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi>h</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{h+1}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9324379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>个节点（注意这里对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span></span></span></span>的定义其实与课程中讲的并不一样）、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>h</mi></msup></mrow><annotation encoding="application/x-tex">2^h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span></span></span></span>个叶子。不妨设各叶子（编码元素）为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>s</mi><mn>1</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>s</mi><mrow><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">s_0,s_1...s_{2^{h}-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.691511em;vertical-align:-0.26095099999999993em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.49738em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7820285714285713em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26095099999999993em;"><span></span></span></span></span></span></span></span></span></span>，那么 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">w_i = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>u</mi><mi>n</mi><msub><mi>t</mi><mi>i</mi></msub><mo>=</mo><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">count_i = i+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathnormal">co</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。</p><p>那么，对于给定的二进制编码 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span> ，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span> 对应的十进制就是对应的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>c</mi></msub></mrow><annotation encoding="application/x-tex">s_c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的下标值。</p><p>假设高为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span></span></span></span> 的霍夫曼树 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span> 不为满二叉树，则级数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span> 的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub><mo>=</mo><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mi>l</mi></mrow></msup></mrow><annotation encoding="application/x-tex">w_i = 2^{h-l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span></span></span></span></span></span></span></span> ，也就是当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是对应的高为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span></span></span></span> 的满二叉树时，该节点作为内部节点的子树的叶子的数量。</p><p>在搜索 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span> 对应的编码元素时，若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span> 的位数小于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span></span></span></span> ，则追加足够的1来获得长度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span></span></span></span> 的二进制串 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>c</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">c&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span> （其实就相当于补成满二叉树的情况），那么，定义 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span> 对应的<code>weight</code> 为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>，则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>=</mo><mi>c</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">X = c+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 或  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>=</mo><msup><mi>c</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">X = c&#x27;+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.835222em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 。</p><p>显然，若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span> 不在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">count</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">co</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span></span></span></span> 的数列中，则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span> 一定不是一个元素的二进制编码。若在，但由于我们追加了足够的1去获取长度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span></span></span></span> 的二进制串，则可能存在多个二进制串对应值为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span> 的<code>weight</code>，所以需要第三步的检验。</p><h4 id="复杂度">复杂度</h4><p>显然时间复杂度是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log_2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，相较于使用优先级队列或直接使用队列的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlog_2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>有较大提升。</p><p>占用的空间则为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">3n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ，用于存储三个数列及树的高度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span></span></span></span> 。但是其实至少可以优化到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ，因为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub><mo>=</mo><mi>c</mi><mi>o</mi><mi>u</mi><mi>n</mi><msub><mi>t</mi><mi>i</mi></msub><mo>−</mo><mi>c</mi><mi>o</mi><mi>u</mi><mi>n</mi><msub><mi>t</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">w_i = count_i-count_{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathnormal">co</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8234109999999999em;vertical-align:-0.208331em;"></span><span class="mord mathnormal">co</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span> ，所以存储 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span> 的数列是不必要的。</p><h3 id="第二种算法（改进的算法）">第二种算法（改进的算法）</h3><p>现在的空间占用已经压缩到了 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ，我们希望进一步压缩 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">count</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">co</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span></span></span></span> 的占用空间。</p><p>令 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>W</mi><mi>i</mi></msub><mo>=</mo><msub><mi>w</mi><mrow><mn>2</mn><mi>i</mi></mrow></msub><mo>+</mo><msub><mi>w</mi><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mo stretchy="false">⌊</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mstyle><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">W_i=w_{2i}+w_{2i+1},i=1,2,..,\lfloor {\dfrac{n-1}{2}} \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8678509999999999em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">..</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mclose">⌋</span></span></span></span>。若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 为奇数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>W</mi><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msub><mo>=</mo><msub><mi>w</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">W_{(n-1)/2}=w_{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03853em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight">/2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></p><p>令 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>O</mi><mi>U</mi><mi>N</mi><msub><mi>T</mi><mn>0</mn></msub><mo>=</mo><msub><mi>W</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">COUNT_0=W_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">CO</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>O</mi><mi>U</mi><mi>N</mi><msub><mi>T</mi><mi>i</mi></msub><mo>=</mo><mi>C</mi><mi>O</mi><mi>U</mi><mi>N</mi><msub><mi>T</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>W</mi><mi>i</mi></msub><mo separator="true">,</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mo stretchy="false">⌊</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mstyle><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">COUNT_i=COUNT_{i-1}+W_i,i=1,2,...,\lfloor {\dfrac{n-1}{2}} \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">CO</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">CO</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mclose">⌋</span></span></span></span> 。</p><p>此外，定义一个新变量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">b_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mrow><mn>2</mn><mi>i</mi></mrow></msub><mo>≤</mo><msub><mi>w</mi><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mo stretchy="false">⌊</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mstyle><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">w_{2i} \leq w_{2i+1},i=1,2,..,\lfloor {\dfrac{n-1}{2}} \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8678509999999999em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">..</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mclose">⌋</span></span></span></span>，则令 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">b_i=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，否则，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mrow><mn>2</mn><mi>i</mi></mrow></msub><mo>&gt;</mo><msub><mi>w</mi><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">w_{2i}&gt;w_{2i+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span> 时， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">b_i=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。</p><p>由于我们能够通过 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>O</mi><mi>U</mi><mi>N</mi><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">COUNT_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">CO</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 数列获取（计算出）<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>W</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">W_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，所以不必存储 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>W</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">W_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。</p><h4 id="伪代码">伪代码</h4><p><strong>输入</strong>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mtext>，</mtext><mi>b</mi><mtext>，</mtext><mi>C</mi><mi>O</mi><mi>U</mi><mi>N</mi><mi>T</mi></mrow><annotation encoding="application/x-tex">s，b，COUNT</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mord cjk_fallback">，</span><span class="mord mathnormal">b</span><span class="mord cjk_fallback">，</span><span class="mord mathnormal" style="margin-right:0.02778em;">CO</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal" style="margin-right:0.13889em;">NT</span></span></span></span> 的数列、树的高度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span></span></span></span> 以及二进制编码 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span> 。</p><p><strong>输出</strong>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span> 对应的编码元素 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">s_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p><strong>过程</strong>：</p><ul><li>Step1：计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>=</mo><mo stretchy="false">(</mo><mi>c</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mi>d</mi></mrow></msup></mrow><annotation encoding="application/x-tex">t = (c+1)\times2^{h-d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span>是二进制数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span> 的位数，式中的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span> 换算成十进制参与计算</li><li>Step2：找到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>O</mi><mi>U</mi><mi>N</mi><msub><mi>T</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">COUNT_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">CO</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，使得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>O</mi><mi>U</mi><mi>N</mi><msub><mi>T</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>&lt;</mo><mi>t</mi><mo>≤</mo><mi>C</mi><mi>O</mi><mi>U</mi><mi>N</mi><msub><mi>T</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">COUNT_{k-1}&lt;t \leq COUNT_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">CO</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">CO</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。</li><li>Step3：计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mi>C</mi><mi>O</mi><mi>U</mi><mi>N</mi><msub><mi>T</mi><mi>k</mi></msub><mo>−</mo><mi>C</mi><mi>O</mi><mi>U</mi><mi>N</mi><msub><mi>T</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">x=COUNT_k-COUNT_{k-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">CO</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">CO</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span> 。</li><li>Step4：分解 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span> 为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x_1,x_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，使得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mi>i</mi></msub><mo>=</mo><msup><mn>2</mn><msub><mi>e</mi><mi>i</mi></msub></msup><mo separator="true">,</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">x=x_1+x_2,x_i = 2^{e_i},i=1,2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.858832em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span></span></span></span> 对于非负整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>e</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">e_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，不失整体性地假设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>e</mi><mn>1</mn></msub><mo>≤</mo><msub><mi>e</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">e_1 \leq e_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><ul><li>该分解可以如下进行：判断 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mo stretchy="false">⌊</mo><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>x</mi></mrow><mo stretchy="false">⌋</mo></mrow></msup></mrow><annotation encoding="application/x-tex">2^{\lfloor {log_2x} \rfloor}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">⌊</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mathnormal mtight">x</span></span><span class="mclose mtight">⌋</span></span></span></span></span></span></span></span></span></span></span></span> 是否等于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span> ，若不相等，那么 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><msup><mn>2</mn><mrow><mo stretchy="false">⌊</mo><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>x</mi></mrow><mo stretchy="false">⌋</mo></mrow></msup></mrow><annotation encoding="application/x-tex">x_2=2^{\lfloor {log_2x} \rfloor}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">⌊</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mathnormal mtight">x</span></span><span class="mclose mtight">⌋</span></span></span></span></span></span></span></span></span></span></span></span> ，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><mi>x</mi><mo>−</mo><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x_1=x-x_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。否则，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>x</mi><mn>2</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">x_1=x_2=\dfrac{x}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul></li><li>Step5：用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mi>k</mi></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">b_k,x_1,x_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 计算出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mn>2</mn><mi>k</mi></mrow></msub><mo separator="true">,</mo><msub><mi>s</mi><mrow><mn>2</mn><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">s_{2k},s_{2k+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>相应的<code>weight</code> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mi>a</mi></msub><mo separator="true">,</mo><msub><mi>w</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">w_a,w_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><ul><li><strong>其实应当注意到，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><msub><mi>W</mi><mi>k</mi></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x=W_k,x_1,x_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>对应<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mrow><mn>2</mn><mi>i</mi></mrow></msub><mo separator="true">,</mo><msub><mi>w</mi><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">w_{2i},w_{2i+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></strong>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>=</mo><mn>2</mn><mi>k</mi><mo separator="true">,</mo><mi>b</mi><mo>=</mo><mn>2</mn><mi>k</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">a=2k,b=2k+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。</li><li>对应地易解<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">b_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>以及<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>=</mo><msup><mn>2</mn><msub><mi>e</mi><mi>i</mi></msub></msup></mrow><annotation encoding="application/x-tex">x_i = 2^{e_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>（也就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub><mo>=</mo><msup><mn>2</mn><msub><mi>e</mi><mi>i</mi></msub></msup></mrow><annotation encoding="application/x-tex">w_i=2^{e_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>的形式）</li></ul></li><li>Step6：若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>=</mo><mi>C</mi><mi>O</mi><mi>U</mi><mi>N</mi><msub><mi>T</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">t=COUNT_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">CO</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mi>b</mi></msub><mo>=</mo><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mi>d</mi></mrow></msup></mrow><annotation encoding="application/x-tex">w_b=2^{h-d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span></span></span></span> ，那么 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span> 对应的编码元素就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mn>2</mn><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">s_{2k+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span> 。令 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mn>2</mn><mi>k</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">k=2k+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，并终止算法。</li><li>Step7：若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>=</mo><mi>C</mi><mi>O</mi><mi>U</mi><mi>N</mi><msub><mi>T</mi><mi>k</mi></msub><mo>−</mo><msub><mi>w</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">t=COUNT_k-w_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">CO</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mi>a</mi></msub><mo>=</mo><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mi>d</mi></mrow></msup></mrow><annotation encoding="application/x-tex">w_a=2^{h-d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span></span></span></span>，令 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mn>2</mn><mi>k</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">k=2k+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，并终止算法。都不满足，则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span> 不是一个编码。</li></ul><h4 id="举例-2">举例</h4><p>还是以上面的霍夫曼树为例</p><img src="4.png" style="zoom:80%;" /><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>=</mo><mn>0111</mn></mrow><annotation encoding="application/x-tex">c=0111</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0111</span></span></span></span>。<ul><li>第一步，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>=</mo><mo stretchy="false">(</mo><mn>7</mn><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mrow><mn>5</mn><mo>−</mo><mn>4</mn></mrow></msup><mo>=</mo><mn>16</mn></mrow><annotation encoding="application/x-tex">t=(7+1) \times 2^{5-4}=16</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span><span class="mbin mtight">−</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">16</span></span></span></span> 。</li><li>第二步，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>O</mi><mi>U</mi><mi>N</mi><msub><mi>T</mi><mn>1</mn></msub><mo>&lt;</mo><mi>t</mi><mo>≤</mo><mi>C</mi><mi>O</mi><mi>U</mi><mi>N</mi><msub><mi>T</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">COUNT_{1}&lt; t \leq COUNT_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">CO</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">CO</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">k=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>。</li><li>第三步，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">x = 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>。</li><li>第四步，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">x_1=1,x_2=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>。</li><li>第五步，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>=</mo><mn>4</mn><mo separator="true">,</mo><mi>b</mi><mo>=</mo><mn>5</mn><mo separator="true">,</mo><msub><mi>w</mi><mi>a</mi></msub><mo>=</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>w</mi><mi>b</mi></msub><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">a=4,b=5,w_a=1,w_b=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span></li><li>第六步，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>=</mo><mi>C</mi><mi>O</mi><mi>U</mi><mi>N</mi><msub><mi>T</mi><mn>2</mn></msub><mo>=</mo><mn>16</mn></mrow><annotation encoding="application/x-tex">t=COUNT_2=16</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">CO</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">16</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mi>b</mi></msub><mo>=</mo><mn>2</mn><mo>=</mo><msup><mn>2</mn><mrow><mn>5</mn><mo>−</mo><mn>4</mn></mrow></msup></mrow><annotation encoding="application/x-tex">w_b=2=2^{5-4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span><span class="mbin mtight">−</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></span>，则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span> 对应的编码元素是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>5</mn></msub></mrow><annotation encoding="application/x-tex">s_5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul></li></ul><p><strong>原理其实是跟上面的算法一样的，只不过这里没有存储<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span>并且将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span>进行了两两归并。</strong></p><h4 id="复杂度-2">复杂度</h4><p>时间复杂度仍为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log_2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</p><p>空间复杂度，数列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mo separator="true">,</mo><mi>C</mi><mi>O</mi><mi>U</mi><mi>N</mi><mi>T</mi><mo separator="true">,</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">s,COUNT,b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">CO</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal" style="margin-right:0.13889em;">NT</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span></span></span></span>以及树的高度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span></span></span></span> 的空间复杂度分别为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mo stretchy="false">⌈</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>n</mi><mn>2</mn></mfrac></mstyle><mo stretchy="false">⌉</mo><mo separator="true">,</mo><mo stretchy="false">⌈</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>n</mi><mrow><mn>2</mn><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow></mfrac></mstyle><mo stretchy="false">⌉</mo><mo separator="true">,</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n,\lceil \dfrac{n}{2} \rceil,\lceil \dfrac{n}{2log_2n} \rceil,1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.9880000000000002em;vertical-align:-0.8804400000000001em;"></span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">⌈</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌉</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">⌈</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌉</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span></span></span></span> ，总共的空间复杂度就是这四项的和。</p><p>即：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌈</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mn>3</mn><mi>n</mi></mrow><mn>2</mn></mfrac></mstyle><mo stretchy="false">⌉</mo><mo>+</mo><mo stretchy="false">⌈</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>n</mi><mrow><mn>2</mn><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow></mfrac></mstyle><mo stretchy="false">⌉</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lceil \dfrac{3n}{2} \rceil+\lceil \dfrac{n}{2log_2n} \rceil+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mopen">⌈</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌉</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.9880000000000002em;vertical-align:-0.8804400000000001em;"></span><span class="mopen">⌈</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌉</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><h2 id="第二篇">第二篇</h2><blockquote><p>[1]胡丽莹,林鹭.一种基于多级查找表的高效Huffman编码算法[J].数学杂志,2012,32(04):753-760.DOI:10.13548/j.sxzz.2012.04.028.</p></blockquote><p>文中扩展霍夫曼树和分级存储的思想对我的霍夫曼树的存储方式有较大启发。</p><p>该文中通过对树进行分级并定义偏移量来提高传统查找表的数据存储效率，但实际上原文中构建多重查找表的过程中使用的仍然是一个时间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \cdot 2^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 的算法（更严格的说是近似 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>h</mi><mo>⋅</mo><msup><mn>2</mn><mi>h</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(h \cdot 2^h)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 的算法， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span></span></span></span> 为树的高度。这就导致虽然在空间复杂度上实现了优化，但也付出了一定的时间复杂度的代价，是一种以时间换空间的方法。</p><p><strong>但其实在霍夫曼树中，真正有效的数据其实就是叶子元素（原始字符与其编码）及他们的位置</strong>。所以完全可以通过将树补满后记录各个叶子节点的位置和内容，在恢复霍夫曼树时通过叶子节点自底向上完成构建。</p><p>基于这种思想我完成了对叶子节点的数据保存策略，在<strong>综合开发-逻辑层-初始化-叶子节点的定位策略</strong>部分给出了分析。</p><h2 id="第三篇">第三篇</h2><blockquote><p>[1]文国知.基于C语言的自适应Huffman编码算法分析及实现研究.武汉工业学院学报,2011,30(2):53-57+62.<br>通过C语言程序,动态统计信源符号概率,逐步构造Huffman编码树,实现了自适应Huffman编码,解决了静态编码树不能根据信源符号的局部变化做出相应变化的主要问题。结果表明,自适应Huffman编码算法压缩率很大,能进一步提高数据传输的效率。</p></blockquote><p>这篇文献关注的是课程设计的初始化和编码两个功能。</p><p>Huffman编码算法进行编码时，必须进行两次扫描，第一次扫描统计字符出现的概率（权重），并据此进行构造Huffman树；第二次扫描是按Huffman树的字符进行编码。</p><p>虽然题目中给出的条件允许输入各节点的权值，但在实际应用过程中是不现实的。</p><p>而自定义哈夫曼编码，预先不知道各种符号的出现频率，编码树的初始状态只包含一个叶节点，即NYT（Not Yet Transmitted），NYT是一个溢出码，不同于任何一个将要传送的符号，当一个尚未包含在编码树中的符号需要被编码时，首先输出NYT的编码，然后跟着符号的原始表达。当解码器解出一个NYT之后，它就知道下面的内容暂时不再是Huffman编码，而是一个从未在编码数据流中出现过的原始符号。当插入一个符号q时，会出现两种情况：</p><ol><li><strong>q是第一次出现的字符结点</strong>。构造一个新的子树，子树包含NYT符号和新符号两个叶节点，如下图所示。然后<strong>判断该子树的父节点是否是是当前权重下编号最大的结点，如果是，直接更新权重即可；否则，将父节点与相同权重的编号最高的结点交换，再更新权重值。</strong><br><img src="5.png" alt="插入新的字符节点"></li><li><strong>q不是第一次出现的字符结点。如果q所在节点，是当前节点权重下编号最大的结点，则直接使其当前节点权重及父节点权重加1即可。否则，将当前节点与相同权重的编号最高的结点交换，再更新权重值。</strong></li></ol><p>通过这种方式可以在进行编码的同时构建霍夫曼树并获取到相应编码，提升程序运行效率。</p><p><strong>但是存在的最主要的问题是其编码与采用普通霍夫曼编码所得的编码序列并不一致，所以无法采用这种方法直接获取到可解析的霍夫曼编码（其实如果需要解析还是需要依据这棵编码树的动态调整，效率相对较低）</strong>。</p><p>（其实这种方法最大的问题在于获取到的编码与普通霍夫曼编码所得的编码序列并不一致，所以还要重新编码）</p><h2 id="第四篇">第四篇</h2><blockquote><p>[1]李伟生, 李域, 王涛. 一种不用建造Huffman树的高效Huffman编码算法[J]. 中国图象图形学报, 2005, 10(3):382-387.</p></blockquote><p>由于题目中明确要求构建霍夫曼树且该文算法其实是一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 的算法，故未采用，但其原理确实有趣，也对我的代码逻辑有一定启发。尤其是文中大部分前提都是由满二叉树演进到霍夫曼树，给我的整体代码逻辑与推理提供了很大启发。</p><h1>综合开发</h1><h2 id="逻辑层">逻辑层</h2><h3 id="类与结构体">类与结构体</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::ifstream;</span><br><span class="line"><span class="keyword">using</span> std::ofstream;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="keyword">int</span> num;<span class="comment">//节点标号,在构建完树之后不要轻易使用这个变量做任何逻辑运算</span></span><br><span class="line">    Node* p_left;</span><br><span class="line">    Node* p_right;</span><br><span class="line">    Node* p_parent;</span><br><span class="line">    <span class="built_in">Node</span>(Node* p_left, Node* p_right, Node* p_parent) : <span class="built_in">p_left</span>(p_left), <span class="built_in">p_right</span>(p_right), <span class="built_in">p_parent</span>(p_parent) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Brother</span>&#123;</span>LeftChild, RightChild&#125;;</span><br><span class="line">    <span class="built_in">BinaryTree</span>(<span class="keyword">int</span> num = <span class="number">0</span>,<span class="keyword">int</span> weight = <span class="number">0</span>);</span><br><span class="line">    ~<span class="built_in">BinaryTree</span>();</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">swap</span><span class="params">(Node* p_nodeA, Node* p_nodeB)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">addNode</span><span class="params">(Node* p_parent, Node* p_child, Brother brotherState)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(Node *p_node)</span></span>;</span><br><span class="line">    <span class="function">Node* <span class="title">getRoot</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> p_root;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Brother <span class="title">getBrotherState</span><span class="params">(Node *p_node)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isAncestor</span><span class="params">(Node* p_nodeChild, Node* p_nodeAncestor)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node *p_root;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Leaf</span>&#123;</span></span><br><span class="line">    std::string key;</span><br><span class="line">    <span class="keyword">int</span> level;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    std::string codeword;</span><br><span class="line">    Node* p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuffmanTree</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">HuffmanTree</span>();</span><br><span class="line">    ~<span class="built_in">HuffmanTree</span>();</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ReadFile</span><span class="params">(<span class="keyword">const</span> std::string&amp; str)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">encode</span><span class="params">(<span class="keyword">const</span> std::string&amp; str1,<span class="keyword">const</span> std::string&amp; str2)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">decodeWithMap</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">buildTree</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeNYT</span><span class="params">(Node* nyt)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printMap</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">writeTree</span><span class="params">(<span class="keyword">const</span> std::string&amp; filename)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">readTree</span><span class="params">(<span class="keyword">const</span> std::string&amp; filename)</span></span>;</span><br><span class="line"></span><br><span class="line">    std::unordered_map&lt;std::string,Leaf*&gt; leaves;<span class="comment">//所有现存的叶子</span></span><br><span class="line">    std::unordered_map&lt;std::string,std::string&gt; codewordMap;</span><br><span class="line">    std::string encodeResult;</span><br><span class="line">    std::string decodeResult;</span><br><span class="line">    BinaryTree* tree;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">weightAdd</span><span class="params">(Node* p_node)</span></span>;</span><br><span class="line">    <span class="function">std::string <span class="title">getHuffmanCode</span><span class="params">(Node *p)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">Node * <span class="title">findLarge</span><span class="params">(Node *)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getCodewordMap</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setLevelAndN</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">writeEncodeResultAsBinaryStream</span><span class="params">(<span class="keyword">const</span> std::string&amp; filepath, <span class="keyword">const</span> std::string&amp; filename)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getLocate</span><span class="params">(<span class="keyword">int</span> level, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> sum;</span><br><span class="line">    std::unordered_map&lt;<span class="keyword">int</span>,Node*&gt; allRebuildNewNodes;</span><br><span class="line">    std::unordered_map&lt;<span class="keyword">int</span>,Leaf*&gt; allRebuildLeafNodes;</span><br><span class="line"></span><br><span class="line">    ifstream is;</span><br><span class="line">    ofstream os;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="初始化：">初始化：</h3><p>通过自适应霍夫曼编码对获取到的字符序列进行编码，直接完成初始化，不必读入权值。编码后对霍夫曼树进行压缩发送（将所有非叶子节点全部剪掉而仅保留有效信息），使视图层能通过接收到的霍夫曼树的信息进行重建霍夫曼树。</p><h4 id="获取霍夫曼编码的策略：">获取霍夫曼编码的策略：</h4><p>使用栈，由叶子节点循环向父节点移动，若当前节点是父节点的左孩子则向栈中加入0，否则加入1，结束后将栈内容依次<code>pop</code>即可。（<strong>相当于完成了一次字符串反向输出</strong>，时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log_2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>)</p><h4 id="查询策略：">查询策略：</h4><p>动态编码时常常要查找某字符是否已经编码过，若使用线性结构存储已经编码的元素则总体编码的时间会达到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \cdot m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span>（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>为字符个数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span> 为总的字符长度）。</p><p>为此，使用<code>unordered_map</code>替换线性表，可将这一部分时间杂度降低到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span>。</p><p>但由于更新一个节点权重的时间复杂度在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \cdot log_2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\cdot (log_2n)^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>之间（如果不用调换子树与节点位置则复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\cdot log_2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，但可能存在调换子树与某一节点位置并更新编码的情况使得复杂度大于这个值但小于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\cdot (log_2n)^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>），所以总体的时间复杂度仍介于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\cdot log_2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>n</mi><mo>⋅</mo><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(mn\cdot (log_2n)^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">mn</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>之间。（也可以表示为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>u</mi><mi>n</mi><mo>⋅</mo><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(un\cdot (log_2n)^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">u</span></span></span></span> 为调换的次数，通常来说 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">u</span></span></span></span> 小于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span>）。</p><h4 id="节点的定位策略：">节点的定位策略：</h4><p>对于任意霍夫曼树 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi></mrow><annotation encoding="application/x-tex">H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span></span></span>，定义其对应的满二叉树为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 。</p><p>定义树的级数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>2...</mn><mi>h</mi></mrow><annotation encoding="application/x-tex">0,1,2...h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2...</span><span class="mord mathnormal">h</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span></span></span></span> 为树的高度。（避免“级数是从1开始算”的误解）。</p><p>定义两节点之间的<strong>落差 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span></strong>（<code>drop</code>）为两节点的级数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>（<code>level</code>）之差的绝对值，也即 <strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">Δ</mi><mi>l</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">d=|\Delta l|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣Δ</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord">∣</span></span></span></span></strong></p><p>用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 代表某一节点在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 中<strong>所在级数的位置</strong>（从左到右为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi>l</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{level}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.932438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>）</p><p>对于任意的一个编码，<strong>编码的长度其实就是该叶子节点在树中的级数</strong>，编码从头到尾的过程也就是从霍夫曼树根节点到编码元素叶子节点的过程。</p><p>那么如何计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> ：<strong>相对偏移量累加</strong></p><p>定义两节点间的<strong>相对偏移量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo>=</mo><msup><mn>2</mn><mrow><mi>d</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">\phi=2^{d-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">ϕ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo>⋯</mo></mrow><annotation encoding="application/x-tex">d=1,2,3 \cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span></span></span></span></strong> ，依据编码，指针从根节点开始，<strong>若下一节点是当前节点的右子树，则累加当前节点与叶子节点间的相对偏移量</strong>，并将指针移向下一个节点。重复这个步骤，直至当前指针指到叶子节点。</p><p>如：</p><img src="6.png" style="zoom:70%;" /><p>对于节点（2），编码101，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">level=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><msup><mn>2</mn><mrow><mn>3</mn><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><msup><mn>2</mn><mrow><mn>1</mn><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">n=2^{3-1}+2^{1-1}=5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>，也就是说，该叶子节点是树中第四级第六个节点（如果认为根节点算第一级）。</p><p>那么，该节点的定位<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><mi>c</mi><mi>a</mi><mi>t</mi><mi>e</mi><mo>=</mo><msup><mn>2</mn><mi>l</mi></msup><mo>+</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">locate = 2^{l}+n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">oc</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.932438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><h4 id="不足：">不足：</h4><ul><li>每次更新编码都要在<code>unordered_map</code>里更新一遍对应编码，造成一定的时间浪费。</li><li>在增加节点权值是出现调换子树与某一节点位置后要更新节点的霍夫曼编码，<strong>增加权值</strong>与<strong>更新节点的霍夫曼编码</strong>的复杂度都为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log_2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，<strong>遍历无序哈希表</strong>为所有已编码元素更新编码的时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，使得整个过程复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\cdot (log_2n)^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，但其实并不是所有的编码都需要更新，所以仍然可以优化。<ul><li>（其实这里被迫遍历是因为编码采用了无序哈希表存储，但若采用有序表存储，在更新时仍要涉及元素的查找，也至少是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>n</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(lon_2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>的时间复杂度，所以可优化的空间并不是很大）</li></ul></li></ul><h3 id="编码：">编码：</h3><p>编码过程可以直接使用初始化时形成的无序哈希表，使得整体的时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span>。但由于编码的存储形式都是字符（串），所以还需要将字符串转化成数字。</p><h4 id="方案一：">方案一：</h4><p><code>Unsigned long long</code>的数值范围是<code>0~18446744073709551615 (2^64 - 1)</code>，可以将编码后的数字转化成<code>Unsigned long long</code>存储，每个数字占用8字节空间，不过存在开头是0而被省去的情况，但只要严格按照每20位存为一个数，只要在被省去的位置补0就可以了。</p><h4 id="方案二：">方案二：</h4><p>可以对编码进行二次编码。即每四位转换成一个16进制数存入数组，但可能存在末尾不足四位的情况，用数组的第一个数字（0,1,2,3）直接记录最后末尾的位数，然后用0补足空位进行转换。在解码时再转换回二进制数即可。由于一个十六进制数只占半个字节，所以也可以节省很多空间。</p><p>综合来看方案二更优：每20位，方案一占用8字节，方案二占用2.5字节。（相较之下，如果不转换成数字再进行压缩，那么每个<code>char</code>就要占用1字节）</p><h4 id="问题：">问题：</h4><p>但其实，在txt文件（文本文件）中，每个字符都会占用一个字节，也就是说，并不会如我们所期望的那样存储为数字，所以如果想应用上面的两种方案，那么结果就必须写入一个二进制文件，但是问题在于二进制文件是无法直接打开可读的，而且可能需要自己设计文件格式以保证性能，所以有没有一种折中的方案呢？</p><p>（两种文件区别，<a href="https://www.cnblogs.com/zhangjiankun/archive/2011/11/27/2265184.html">参考</a>）</p><h4 id="方案三：">方案三：</h4><p>对于编码所得的二进制字符串，每八位0，1为一个字符，存储成ASCLL 字符，在解码时再将这些字符串解析为八位二进制串，这样其实也是相当于字节的每一位都存储了一个0/1的值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编码</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="built_in"><span class="keyword">char</span></span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">char</span> ch : encodeResult)&#123;</span><br><span class="line">    c &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        c |= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        c |= <span class="number">0</span>;</span><br><span class="line">    ++count;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        os&lt;&lt;c;</span><br><span class="line">        c = <span class="built_in"><span class="keyword">char</span></span>(<span class="number">0</span>);</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (count != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    c &lt;&lt;= (<span class="number">8</span> - count);</span><br><span class="line">    os&lt;&lt;c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解码</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> cbuffer;</span><br><span class="line">string codeword;</span><br><span class="line"><span class="keyword">while</span> (!is.<span class="built_in">eof</span>()) &#123; <span class="comment">//末尾以255表示输入的结束</span></span><br><span class="line">    cbuffer = is.<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">if</span> (cbuffer != <span class="number">255</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> pos = <span class="number">7</span>; pos &gt;= <span class="number">0</span>; --pos)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cbuffer &amp; (<span class="number">1</span> &lt;&lt; pos)) <span class="comment">//1</span></span><br><span class="line">               codeword.<span class="built_in">append</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span>                    <span class="comment">//0</span></span><br><span class="line">                codeword.<span class="built_in">append</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (codewordMap.<span class="built_in">find</span>(codeword) != codewordMap.<span class="built_in">end</span>())&#123;</span><br><span class="line">                decodeResult += codewordMap[codeword];</span><br><span class="line">                codeword = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(这里使用哈希表实现了一个近似 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>的解码，也可以使用霍夫曼树实现 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \cdot log_2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>的解码)</p><h3 id="解码：">解码：</h3><p>若采用第一篇文献的算法，时间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log_2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，空间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌈</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mn>3</mn><mi>n</mi></mrow><mn>2</mn></mfrac></mstyle><mo stretchy="false">⌉</mo><mo>+</mo><mo stretchy="false">⌈</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>n</mi><mrow><mn>2</mn><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow></mfrac></mstyle><mo stretchy="false">⌉</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lceil \dfrac{3n}{2} \rceil+\lceil \dfrac{n}{2log_2n} \rceil+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mopen">⌈</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌉</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.9880000000000002em;vertical-align:-0.8804400000000001em;"></span><span class="mopen">⌈</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌉</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><p>但其实，如果也采用<code>unordered_map</code>，即将获取到的霍夫曼树的所有叶子按照编码为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span>，字符为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">value</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span></span></span></span> 组成 <code>unordered_map</code>，可以将时间复杂度降到接近 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，空间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding="application/x-tex">2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span></span></span></span> 。但在创建表的时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。</p><p>或者，直接采用霍夫曼树进行解码，时间复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \cdot log_2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><h3 id="IO：">IO：</h3><p>使用的IO是<code>ifstream</code>与<code>ofstream</code>，并没有针对读写文件进行优化，但其实虽然在读文件                                       上<code>ifstream</code>效率并不算太低，但写文件的<code>ofstream</code>绝非最佳选择，但为了方便还是选用了，所以IO还有一定的优化空间。</p><h4 id="存在的问题：">存在的问题：</h4><p>存在读取中文为乱码的问题，网上给出了一些解决方案。</p><p>最简单的方法是将文件格式改为<code>ASCI</code>（其实``ofstream<code>输出的文件编码就是</code>ASCI`），也可以根据不同编码格式进行不同读取</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">fin</span><span class="params">(<span class="string">&quot;C:/Users/Administrator/Desktop/w/1.cpp&quot;</span>,ios::binary)</span></span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>  s2;</span><br><span class="line">    fin.<span class="built_in">read</span>((<span class="keyword">char</span>*)&amp;s2, <span class="built_in"><span class="keyword">sizeof</span></span>(s2));<span class="comment">//读取第一个字节，然后左移8位</span></span><br><span class="line">    <span class="keyword">int</span> p = s2&lt;&lt;<span class="number">8</span>;</span><br><span class="line">    fin.<span class="built_in">read</span>((<span class="keyword">char</span>*)&amp;s2, <span class="built_in"><span class="keyword">sizeof</span></span>(s2));<span class="comment">//读取第二个字节</span></span><br><span class="line">    p +=s2;</span><br><span class="line">string code;</span><br><span class="line"> </span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span>(p)<span class="comment">//判断文本前两个字节</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0xfffe</span>:  <span class="comment">//65534</span></span><br><span class="line">    code = <span class="string">&quot;Unicode&quot;</span>;    </span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0xfeff</span>:<span class="comment">//65279</span></span><br><span class="line">    code = <span class="string">&quot;Unicode big endian&quot;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0xe6a2</span>:<span class="comment">//59042</span></span><br><span class="line">    code = <span class="string">&quot;UTF-8&quot;</span>;     </span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: </span><br><span class="line">        code = <span class="string">&quot;ANSI&quot;</span>; </span><br><span class="line">     &#125;</span><br><span class="line">     fin.<span class="built_in">close</span>(); </span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>经过测试，我这里UTF-8输出的p是59042经过转换是0xe6a2,这里大家可以再进行一下测试</p><p>直接读取<code>utf-8</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;codecvt&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">fin</span><span class="params">(<span class="string">&quot;chapter17_4.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">&quot;chapter17_4.3.txt&quot;</span>)</span></span>;</span><br><span class="line">    std::wstring_convert&lt;std::codecvt_utf8&lt;<span class="keyword">wchar_t</span>&gt;&gt; conv;</span><br><span class="line">    string strfile;</span><br><span class="line">    <span class="keyword">if</span> (!fin.<span class="built_in">is_open</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;error in open file.\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> s2;</span><br><span class="line">    fin.<span class="built_in">read</span>((<span class="keyword">char</span>*)&amp;s2, <span class="built_in"><span class="keyword">sizeof</span></span>(s2));<span class="comment">//读取第一个字节，然后左移8位</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> p = s2 &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    fin.<span class="built_in">read</span>((<span class="keyword">char</span>*)&amp;s2, <span class="built_in"><span class="keyword">sizeof</span></span>(s2));<span class="comment">//读取第二个字节</span></span><br><span class="line">    p += s2;</span><br><span class="line">    cout &lt;&lt; p &lt;&lt; endl;</span><br><span class="line">    string code;</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (p)<span class="comment">//判断文本前两个字节</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xfffe</span>:  <span class="comment">//65534</span></span><br><span class="line">        code = <span class="string">&quot;Unicode&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xfeff</span>:<span class="comment">//65279</span></span><br><span class="line">        code = <span class="string">&quot;Unicode big endian&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xe6a2</span>:<span class="comment">//59042</span></span><br><span class="line">    &#123;   </span><br><span class="line">        code = <span class="string">&quot;utf-8&quot;</span>;</span><br><span class="line">        fin.<span class="built_in">seekg</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">getline</span>(fin, strfile) &amp;&amp; strfile.<span class="built_in">size</span>() &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; strfile &lt;&lt; endl;</span></span><br><span class="line">            wstring wb = conv.<span class="built_in">from_bytes</span>(strfile);<span class="comment">//转为宽字符</span></span><br><span class="line">            wcout.<span class="built_in">imbue</span>(<span class="built_in">locale</span>(<span class="string">&quot;chs&quot;</span>));<span class="comment">//更改区域设置 只为控制台输出显示</span></span><br><span class="line">            wcout &lt;&lt; wb &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        fin.<span class="built_in">close</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        code = <span class="string">&quot;ANSI&quot;</span>;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">getline</span>(fin, strfile) &amp;&amp; strfile.<span class="built_in">size</span>() &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; strfile &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;编码是：&quot;</span> &lt;&lt; code;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\nDone.\n&quot;</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>————————————————<br>参考：<a href="https://blog.csdn.net/qq_36437446/article/details/105279221">https://blog.csdn.net/qq_36437446/article/details/105279221</a></p><h4 id="改进：">改进：</h4><p>感觉上面的办法很麻烦，最后选择使用<code>getline()</code>的循环来获取所有字符，并用<code>string</code>作为读入类型替代了原先的逐字节（<code>char</code>）读取，因为显然255的长度是肯定无法编码所有汉字的。初始思路是<code>getline()</code>之后调用<code>substr(i,1)</code>对字符串进行依次分割，但发现仍有乱码。</p><p><strong>乱码原因在于中文采用三个字节进行编码</strong>，而<code>substr(i,1)</code>只会截取一个字节长度的子串，所以在读取到中文时需要<code>substr(i,3)</code>。将字符串用%x格式打印出来，可以发现中文的字符的char值都是0xffffffe6这样的，而非中文字符则是0x2e，0x61这样。所以只需要在一个循环中从开头开始比较字符值，大于0xffffff80（或者大于0x80也行）的值则下标+3，否则下标+1，即可保证汉字始终被完整截取。注意0xffffff80是一个负数，需要先转为<code>unsigned int</code>再比较大小。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;string&gt; <span class="title">getEachString</span><span class="params">(<span class="keyword">const</span> string&amp; s)</span></span>&#123;</span><br><span class="line">    vector&lt;string&gt; res;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> * chs = s.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(start &lt; <span class="built_in">strlen</span>(chs) &amp;&amp; start &lt; s.<span class="built_in">length</span>()) &#123;</span><br><span class="line">        length = ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)chs[start] &gt; <span class="number">0x80</span>) ? <span class="number">3</span> : <span class="number">1</span>;</span><br><span class="line">        res.<span class="built_in">push_back</span>(s.<span class="built_in">substr</span>(start, length));</span><br><span class="line">        start += length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树的重建：">树的重建：</h3><p>树重建的<strong>主要问题在于如何在更低的时间复杂度内确定节点的<code>widget</code></strong>，主要思路也无非自顶向下构建和自底向上构建两种，如果选择自底向上构建，<strong>问题在于无法直接通过子节点知道其真实对应的父节点是否存在，那么就需要额外的针对某种<code>key</code>与节点的存储，利用<code>key</code>存在与否判断节点是否存在</strong>。</p><p>这个<code>key</code>并没有选用<code>num</code>，是因为子节点与父节点之间的<code>num</code>并无关系，无法通过数学逻辑进行互推。受第二篇文献启发，我使用 <code>locate</code> 按层由上向下依次对<strong>满二叉树</strong>进行编码，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><mi>c</mi><mi>a</mi><mi>t</mi><mi>e</mi><mo>=</mo><msup><mn>2</mn><mi>l</mi></msup><mo>+</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">locate = 2^l+n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">oc</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.932438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，其中<code>l</code>为level，都可以由节点属性直接获取，作为<code>key</code>进行标识节点是否存在，这个标识在视图层也会用到。</p><p>基于<code>n</code>的特点，可以直接确定，<strong>若<code>n</code>为偶数则为父节点的左子树（0认为是偶数），否则则为父节点的右子树。通过这种方式确定子节点与父节点的左右子树关系</strong>。</p><p>这样，只要对所有叶子节点自下向上遍历一遍，依次建立父子关系即可完成树的重建。</p><p>如果在重建树的同时进行<code>weight</code>的计算，一方面，操作间的耦合度增加导致维护困难，另一方面，由于采用自底向上构建的方法，导致增加节点的时候可能存在树并不连通的情况导致某些上层节点的<code>weight</code>未被增加，所以选择在完成树的节点重建后，单独遍历叶子集合，自底向上完成遍历与<code>weight</code>的增加。</p><h2 id="视图层">视图层</h2><h3 id="树的重建">树的重建</h3><p>视图层由于并没有指针类型，无法通过链表进行构建，最终选择<strong>模拟指针</strong>，但就需要对节点的唯一定位标识作为模拟指针的值，所以仍然沿用逻辑层中<code>locate</code>的概念，作为模拟指针值。</p><p>在存储形式上，仍选用<code>unordered_map</code>使用<code>&lt;int,Node*&gt;</code>的泛型进行存储。</p><h4 id="优化：及时终止">优化：及时终止</h4><p>在逻辑层与视图层都做了优化，考虑到<strong>每个节点到根节点只有唯一一条路径</strong>，那么对所有叶子节点，在想根节点遍历的过程中，<strong>若发现某节点的父节点已经存在，则必有一次遍历已经建立了该节点到根节点的唯一路径，可直接结束，执行下一个叶子节点的遍历</strong>。</p><h2 id="树的可视化">树的可视化</h2><p>这部分写在我的博客：<a href="https://zwn2001.github.io/2022/02/01/%E7%BB%98%E5%88%B6-%E9%9C%8D%E5%A4%AB%E6%9B%BC%E6%A0%91/">绘制：霍夫曼树</a></p><h2 id="中间层">中间层</h2><p>这部分写在我的博客：<a href="https://zwn2001.github.io/2022/01/10/mix-code-flutter-cpp%EF%BC%9A%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/">mix-code_flutter-cpp</a></p><h1>测试、总结</h1><h2 id="测试">测试</h2><p>时间统计：<code>QueryPerformanceCounter()</code>（逻辑层时间）</p><p>压缩率基本维持在60%到80%</p><table><thead><tr><th>文件</th><th>大小</th><th>时间</th><th>CPU占用（共16G）</th></tr></thead><tbody><tr><td>1</td><td>195字节</td><td>0.0130425s</td><td></td></tr><tr><td>2</td><td>7.44K</td><td>1.79969s</td><td>19% <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>±</mo></mrow><annotation encoding="application/x-tex">\pm</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">±</span></span></span></span> 1% (3.04G <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>±</mo></mrow><annotation encoding="application/x-tex">\pm</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">±</span></span></span></span> 0.16G)</td></tr><tr><td>3</td><td>28K</td><td>7.3096s</td><td>27% <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>±</mo></mrow><annotation encoding="application/x-tex">\pm</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">±</span></span></span></span> 1% (4.32G <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>±</mo></mrow><annotation encoding="application/x-tex">\pm</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">±</span></span></span></span> 0.16G)</td></tr><tr><td>4</td><td>397K</td><td>139.738s</td><td>24% <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>±</mo></mrow><annotation encoding="application/x-tex">\pm</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">±</span></span></span></span> 3% (3.84 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>±</mo></mrow><annotation encoding="application/x-tex">\pm</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">±</span></span></span></span> 0.48G)</td></tr></tbody></table><h2 id="总结">总结</h2><h3 id="经验与不足">经验与不足</h3><p><code>ifstream</code>和<code>ofstream</code>在读取中文文件时并不能做到很好的适配，同时其<code>ASCI</code>的编码格式导致在开发过程中需要考虑一定的编码问题（一般常用的编码都是utf8）。<strong>最要命的是不支持中文路径</strong>。</p><p><code>getline()</code>和<code>substr()</code>对于中文编码适配也不好，与中文的编码格式有关。</p><p>总而言之，IO较佳的读写方案是使用<code>FILE</code>类进行操作，能避免很多问题。</p><p><strong>最大的不足在于初始化霍夫曼树时使用了过多指针导致性能过低</strong></p><p><strong>应该采用哈希表与模拟指针解决这一问题，能够极大地提高程序运行效率</strong>。</p><p>其次，文件读写<strong>更推荐使用二进制文件进行读写</strong>，使用文本文件读写在读出时会遭遇一系列问题，唯一的优点是可以直接可视化。</p><p>如无特殊需求，建议使用二进制文件。</p><p><strong>其他：</strong></p><ul><li>涉及IO仍然较多，导致一定的性能瓶颈</li><li>局限性较大：只能压缩文本</li><li>初始化霍夫曼树的复杂度较高导致了程序耗时较长（初始化霍夫曼树的时间占了总时间的95%以上）</li><li>视图层与逻辑层之间的交互效率比较低导致在使用UI界面时体验不佳（与中间层的调度有一定关系）</li><li>耦合度过高导致的维护困难，导致难以将指针重写成哈希表。</li></ul><h1>更进一步：</h1><p>以上的所有内容算是完成了课设内容，但我对自己完成的程序的压缩效率觉得特别不满意，在查阅一些资料后针对现有的问题重写了一部分代码。</p><h2 id="解决的问题：">解决的问题：</h2><ul><li><code>ifstream</code>和<code>ofstream</code>在中文内容与中文路径上不适配的问题，使用<code>FILE</code>代替</li><li>过多指针导致的效率低下，使用哈希表和模拟指针代替</li><li>局限于文本文件的编码导致实际上只完成了编码而没有完成压缩，不能压缩常见的二进制文件（如png），使用读写二进制文件代替。</li></ul><h2 id="时间紧张没有做的部分：">时间紧张没有做的部分：</h2><ul><li>霍夫曼树的可视化和完整的UI界面，所以也没有再像上面那样从满二叉树的视角去看待霍夫曼树</li></ul><h2 id="一些不足：">一些不足：</h2><ul><li>霍夫曼编码部分仍然使用了传统的编码思路，即：遍历获取权重-&gt;建立霍夫曼树-&gt;编码，导致一个文件要读取三遍。</li><li>省略了很多霍夫曼树的细节如树高和节点位置的标记，使得整棵树难以做高效的可视化。</li><li>二进制文件中其实有很多冗余信息（不必要的占位），使得在压缩小文件时效率并不高</li></ul><h2 id="二进制文件格式：">二进制文件格式：</h2><p><img src="7.jpg" alt=""></p><h2 id="测试-2">测试</h2><table><thead><tr><th>文件</th><th>大小</th><th>时间</th></tr></thead><tbody><tr><td>1</td><td>195字节</td><td>0.0005313s</td></tr><tr><td>2</td><td>7.44K</td><td>0.0119407s</td></tr><tr><td>3</td><td>28K</td><td>0.0070038s</td></tr><tr><td>4</td><td>397K</td><td>0.104739s</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python进阶语法记录-OOP、IO、网络</title>
      <link href="/2022/01/13/advanced-Python/"/>
      <url>/2022/01/13/advanced-Python/</url>
      
        <content type="html"><![CDATA[<h1>面向对象</h1><h2 id="类和实例">类和实例</h2><p>以Student类为例，在Python中，定义类是通过<code>class</code>关键字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>class</code>后面紧接着是类名，即<code>Student</code>，类名通常是大写开头的单词，紧接着是<code>(object)</code>，<strong>表示该类是从哪个类继承下来的，可以省略</strong>。通常，如果没有合适的继承类，就使用<code>object</code>类，这是所有类最终都会继承的类。</p><p>定义好了<code>Student</code>类，就可以根据<code>Student</code>类创建出<code>Student</code>的实例，<strong>创建实例是通过类名+()实现的</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart = Student()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart</span><br><span class="line">&lt;__main__.Student <span class="built_in">object</span> at <span class="number">0x10a67a590</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Student</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">__main__</span>.<span class="title">Student</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，变量<code>bart</code>指向的就是一个<code>Student</code>的实例，后面的<code>0x10a67a590</code>是内存地址，每个object的地址都不一样，而<code>Student</code>本身则是一个类。</p><p>可以使用点号 <strong>.</strong> 来访问对象的属性，同时可以自由地给一个实例变量绑定属性，比如，给实例<code>bart</code>绑定一个<code>name</code>属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.name = <span class="string">&#x27;Bart Simpson&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.name</span><br><span class="line"><span class="string">&#x27;Bart Simpson&#x27;</span></span><br></pre></td></tr></table></figure><p>由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的<code>__init__</code>方法，在创建实例的时候，就把<code>name</code>，<code>score</code>等属性绑上去：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, score</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br></pre></td></tr></table></figure><p><strong>注意到<code>__init__</code>方法的第一个参数永远是<code>self</code>，表示创建的实例本身</strong>，因此，在<code>__init__</code>方法内部，就可以把各种属性绑定到<code>self</code>，因为<code>self</code><strong>就指向创建的实例本身</strong>。</p><p>有了<code>__init__</code>方法，在创建实例的时候，就不能传入空的参数了，必须传入与<code>__init__</code>方法匹配的参数，但<code>self</code><strong>不需要传</strong>，Python解释器自己会把实例变量传进去：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart = Student(<span class="string">&#x27;Bart Simpson&#x27;</span>, <span class="number">59</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.name</span><br><span class="line"><span class="string">&#x27;Bart Simpson&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.score</span><br><span class="line"><span class="number">59</span></span><br></pre></td></tr></table></figure><p>和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量<code>self</code>，并且，调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。</p><h3 id="self代表类的实例，而非类">self代表类的实例，而非类</h3><p>类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的<strong>第一个参数名称</strong>, 按照惯例它的名称是 self。</p><p>从执行结果可以很明显的看出，self 代表的是类的实例，代表当前对象的地址，而 <code>self.__class__</code>则指向类。</p><p>self 不是 python 关键字，我们把他换成 runoop 也是可以正常执行的。</p><h3 id="类属性与方法">类属性与方法</h3><h4 id="类的私有属性">类的私有属性</h4><p><code>__private_attrs</code>：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 <strong>self.__private_attrs</strong>。</p><h4 id="类的私有方法">类的私有方法</h4><p><code>__private_method</code>：两个下划线开头，声明该方法为私有方法，不能在类的外部调用。在类的内部调用 <strong>self.__private_methods</strong></p><h4 id="单下划线、双下划线、头尾双下划线说明：">单下划线、双下划线、头尾双下划线说明：</h4><ul><li><code>__foo__</code>: 定义的是特殊方法，一般是系统定义名字 ，类似 <strong><strong>init</strong>()</strong> 之类的。</li><li><code>_foo</code>: 以单下划线开头的表示的是 protected 类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于 <strong>from module import *</strong></li><li><code>__foo</code>: 双下划线的表示的是私有类型(private)的变量, 只能是允许这个类本身进行访问了。</li></ul><h3 id="数据封装">数据封装</h3><p>既然<code>Student</code>实例本身就拥有数据，要访问这些数据，就没有必要从外面的函数去访问，可以直接在<code>Student</code>类的内部定义访问数据的函数，这样，就把“数据”给封装起来了。这些封装数据的函数是和<code>Student</code>类本身是关联起来的，我们称之为类的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, score</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: %s&#x27;</span> % (self.name, self.score))</span><br></pre></td></tr></table></figure><p><strong>要定义一个方法，除了第一个参数是<code>self</code>外，其他和普通函数一样</strong>。<strong>要调用一个方法，只需要在实例变量上直接调用，除了<code>self</code>不用传递，其他参数正常传入</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.print_score()</span><br><span class="line">Bart Simpson: <span class="number">59</span></span><br></pre></td></tr></table></figure><p>这样一来，我们从外部看<code>Student</code>类，就只需要知道，创建实例需要给出<code>name</code>和<code>score</code>，而如何打印，都是在<code>Student</code>类的内部定义的，这些数据和逻辑被“封装”起来了，调用很容易，但却不用知道内部实现的细节。</p><h2 id="python对象销毁-垃圾回收">python对象销毁(垃圾回收)</h2><p>Python 使用了引用计数这一简单技术来跟踪和回收垃圾。一个内部跟踪变量，称为一个引用计数器。在 Python 内部记录着所有使用中的对象各有多少引用。</p><p>当对象被创建时， 就创建了一个引用计数， 当这个对象不再需要时， 也就是说， 这个对象的引用计数变为0 时， 它被垃圾回收。但是回收不是&quot;立即&quot;的， 由解释器在适当的时机，将垃圾对象占用的内存空间回收。</p><p>垃圾回收机制不仅针对引用计数为0的对象，同样也可以处理循环引用的情况。循环引用指的是，两个对象相互引用，但是没有其他变量引用他们。这种情况下，仅使用引用计数是不够的。Python 的垃圾收集器实际上是一个引用计数器和一个循环垃圾收集器。作为引用计数的补充， 垃圾收集器也会留心被分配的总量很大（即未通过引用计数销毁的那些）的对象。 在这种情况下， 解释器会暂停下来， 试图清理所有未引用的循环。</p><p>析构函数 <code>__del__</code> ，<code>__del__</code>在对象销毁的时候被调用，当对象不再被使用时，<code>__del__</code>方法运行</p><p><strong>注意</strong>：通常你需要在单独的文件中定义一个类。</p><h2 id="继承和多态">继承和多态</h2><p>在OOP程序设计中，当我们定义一个class的时候，可以从某个现有的class继承，新的class称为子类（Subclass），而被继承的class称为基类、父类或超类（Base class、Super class）。</p><p>比如，我们已经编写了一个名为<code>Animal</code>的class，有一个<code>run()</code>方法可以直接打印：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Animal is running...&#x27;</span>)</span><br></pre></td></tr></table></figure><p>当我们需要编写<code>Dog</code>和<code>Cat</code>类时，就可以直接从<code>Animal</code>类继承：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>对于<code>Dog</code>来说，<code>Animal</code>就是它的父类，对于<code>Animal</code>来说，<code>Dog</code>就是它的子类。<code>Cat</code>和<code>Dog</code>类似。</p><p>继承有什么好处？最大的好处是子类获得了父类的全部功能。由于<code>Animial</code>实现了<code>run()</code>方法，因此，<code>Dog</code>和<code>Cat</code>作为它的子类，什么事也没干，就自动拥有了<code>run()</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dog = Dog()</span><br><span class="line">dog.run()</span><br><span class="line"></span><br><span class="line">cat = Cat()</span><br><span class="line">cat.run()</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Animal is running...</span><br><span class="line">Animal is running...</span><br></pre></td></tr></table></figure><p>当然，也可以对子类增加一些方法，比如Dog类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Animal</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Dog is running...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Eating meat...&#x27;</span>)</span><br></pre></td></tr></table></figure><p>继承的第二个好处需要我们对代码做一点改进。你看到了，无论是<code>Dog</code>还是<code>Cat</code>，它们<code>run()</code>的时候，显示的都是<code>Animal is running...</code>，符合逻辑的做法是分别显示<code>Dog is running...</code>和<code>Cat is running...</code>，因此，对<code>Dog</code>和<code>Cat</code>类改进如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Animal</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Dog is running...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>(<span class="params">Animal</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Cat is running...&#x27;</span>)</span><br></pre></td></tr></table></figure><p>再次运行，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dog is running...</span><br><span class="line">Cat is running...</span><br></pre></td></tr></table></figure><p>当子类和父类都存在相同的<code>run()</code>方法时，我们说，子类的<code>run()</code>覆盖了父类的<code>run()</code>，在代码运行的时候，总是会调用子类的<code>run()</code>。这样，我们就获得了继承的另一个好处：多态。</p><p>要理解什么是多态，我们首先要对数据类型再作一点说明。当我们定义一个class的时候，我们实际上就定义了一种数据类型。我们定义的数据类型和Python自带的数据类型，比如str、list、dict没什么两样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">list</span>() <span class="comment"># a是list类型</span></span><br><span class="line">b = Animal() <span class="comment"># b是Animal类型</span></span><br><span class="line">c = Dog() <span class="comment"># c是Dog类型</span></span><br></pre></td></tr></table></figure><p><strong>判断一个变量是否是某个类型可以用<code>isinstance()</code>判断：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(a, <span class="built_in">list</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(b, Animal)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(c, Dog)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>看来<code>a</code>、<code>b</code>、<code>c</code>确实对应着<code>list</code>、<code>Animal</code>、<code>Dog</code>这3种类型。</p><p>但是等等，试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(c, Animal)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>看来<code>c</code>不仅仅是<code>Dog</code>，<code>c</code>还是<code>Animal</code>！</p><p>不过仔细想想，这是有道理的，因为<code>Dog</code>是从<code>Animal</code>继承下来的，当我们创建了一个<code>Dog</code>的实例<code>c</code>时，我们认为<code>c</code>的数据类型是<code>Dog</code>没错，但<code>c</code>同时也是<code>Animal</code>也没错，<code>Dog</code>本来就是<code>Animal</code>的一种！</p><p>所以，<strong>在继承关系中，如果一个实例的数据类型是某个子类，那它的数据类型也可以被看做是父类。但是，反过来就不行</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = Animal()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(b, Dog)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p><code>Dog</code>可以看成<code>Animal</code>，但<code>Animal</code>不可以看成<code>Dog</code>。</p><p>要理解多态的好处，我们还需要再编写一个函数，这个函数接受一个<code>Animal</code>类型的变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_twice</span>(<span class="params">animal</span>):</span></span><br><span class="line">    animal.run()</span><br><span class="line">    animal.run()</span><br></pre></td></tr></table></figure><p>当我们传入<code>Animal</code>的实例时，<code>run_twice()</code>就打印出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>run_twice(Animal())</span><br><span class="line">Animal <span class="keyword">is</span> running...</span><br><span class="line">Animal <span class="keyword">is</span> running...</span><br></pre></td></tr></table></figure><p>当我们传入<code>Dog</code>的实例时，<code>run_twice()</code>就打印出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; run_twice(Dog())</span><br><span class="line">Dog is running...</span><br><span class="line">Dog is running...</span><br></pre></td></tr></table></figure><p>当我们传入<code>Cat</code>的实例时，<code>run_twice()</code>就打印出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; run_twice(Cat())</span><br><span class="line">Cat is running...</span><br><span class="line">Cat is running...</span><br></pre></td></tr></table></figure><p>看上去没啥意思，但是仔细想想，现在，如果我们再定义一个<code>Tortoise</code>类型，也从<code>Animal</code>派生：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tortoise</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Tortoise is running slowly...&#x27;</span>)</span><br></pre></td></tr></table></figure><p>当我们调用<code>run_twice()</code>时，传入<code>Tortoise</code>的实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; run_twice(Tortoise())</span><br><span class="line">Tortoise is running slowly...</span><br><span class="line">Tortoise is running slowly...</span><br></pre></td></tr></table></figure><p>你会发现，新增一个<code>Animal</code>的子类，不必对<code>run_twice()</code>做任何修改，实际上，任何依赖<code>Animal</code>作为参数的函数或者方法都可以不加修改地正常运行，原因就在于多态。</p><p>多态的好处就是，当我们需要传入<code>Dog</code>、<code>Cat</code>、<code>Tortoise</code>……时，我们只需要接收<code>Animal</code>类型就可以了，因为<code>Dog</code>、<code>Cat</code>、<code>Tortoise</code>……都是<code>Animal</code>类型，然后，按照<code>Animal</code>类型进行操作即可。由于<code>Animal</code>类型有<code>run()</code>方法，因此，传入的任意类型，只要是<code>Animal</code>类或者子类，就会自动调用实际类型的<code>run()</code>方法，这就是多态的意思：</p><p>对于一个变量，我们只需要知道它是<code>Animal</code>类型，无需确切地知道它的子类型，就可以放心地调用<code>run()</code>方法，而具体调用的<code>run()</code>方法是作用在<code>Animal</code>、<code>Dog</code>、<code>Cat</code>还是<code>Tortoise</code>对象上，由运行时该对象的确切类型决定，这就是多态真正的威力：<strong>调用方只管调用，不管细节，而当我们新增一种<code>Animal</code>的子类时，只要确保<code>run()</code>方法编写正确，不用管原来的代码是如何调用的。这就是著名的“开闭”原则：</strong></p><p><strong>对扩展开放：允许新增<code>Animal</code>子类；</strong></p><p><strong>对修改封闭：不需要修改依赖<code>Animal</code>类型的<code>run_twice()</code>等函数。</strong></p><p>继承还可以一级一级地继承下来，就好比从爷爷到爸爸、再到儿子这样的关系。而任何类，最终都可以追溯到根类object，这些继承关系看上去就像一颗倒着的树。比如如下的继承树：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">                ┌───────────────┐</span><br><span class="line">                │    object     │</span><br><span class="line">                └───────────────┘</span><br><span class="line">                        │</span><br><span class="line">           ┌────────────┴────────────┐</span><br><span class="line">           │                         │</span><br><span class="line">           ▼                         ▼</span><br><span class="line">    ┌─────────────┐           ┌─────────────┐</span><br><span class="line">    │   Animal    │           │    Plant    │</span><br><span class="line">    └─────────────┘           └─────────────┘</span><br><span class="line">           │                         │</span><br><span class="line">     ┌─────┴──────┐            ┌─────┴──────┐</span><br><span class="line">     │            │            │            │</span><br><span class="line">     ▼            ▼            ▼            ▼</span><br><span class="line">┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐</span><br><span class="line">│   Dog   │  │   Cat   │  │  Tree   │  │ Flower  │</span><br><span class="line">└─────────┘  └─────────┘  └─────────┘  └─────────┘</span><br></pre></td></tr></table></figure><h3 id="静态语言-vs-动态语言">静态语言 vs 动态语言</h3><p>对于静态语言（例如Java）来说，如果需要传入<code>Animal</code>类型，则传入的对象必须是<code>Animal</code>类型或者它的子类，否则，将无法调用<code>run()</code>方法。</p><p>对于Python这样的动态语言来说，则不一定需要传入<code>Animal</code>类型。我们只需要保证传入的对象有一个<code>run()</code>方法就可以了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Start...&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>这就是动态语言的“鸭子类型”，它并不要求严格的继承体系，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。</strong></p><p>Python的“file-like object“就是一种鸭子类型。对真正的文件对象，它有一个<code>read()</code>方法，返回其内容。但是，许多对象，只要有<code>read()</code>方法，都被视为“file-like object“。许多函数接收的参数就是“file-like object“，你不一定要传入真正的文件对象，完全可以传入任何实现了<code>read()</code>方法的对象。</p><h2 id="实例属性和类属性">实例属性和类属性</h2><p>由于Python是动态语言，根据类创建的实例可以任意绑定属性。动态绑定允许我们在程序运行的过程中动态给class加上功能，这在静态语言中很难实现。</p><p><strong>给实例绑定属性的方法是通过实例变量，或者通过<code>self</code>变量</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">&#x27;Bob&#x27;</span>)</span><br><span class="line">s.score = <span class="number">90</span></span><br></pre></td></tr></table></figure><p>但是，如果<code>Student</code>类本身需要绑定一个属性呢？<strong>可以直接在class中定义属性，这种属性是类属性，归<code>Student</code>类所有</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    name = <span class="string">&#x27;Student&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>当我们定义了一个类属性后，这个属性虽然归类所有，但类的所有实例都可以访问到</strong>。</p><p>实例属性属于各个实例所有，互不干扰；</p><p>类属性属于类所有，所有实例共享一个属性；</p><p>不要对实例属性和类属性使用相同的名字，否则将产生难以发现的错误。</p><h3 id="使用-slots">使用<code>__slots__</code></h3><p>但是，如果我们想要限制实例的属性怎么办？比如，只允许对Student实例添加<code>name</code>和<code>age</code>属性。</p><p><strong>为了达到限制的目的，Python允许在定义class的时候，定义一个特殊的<code>__slots__</code>变量，来限制该class实例能添加的属性</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>) <span class="comment"># 用tuple定义允许绑定的属性名称</span></span><br></pre></td></tr></table></figure><p>然后，我们试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student() <span class="comment"># 创建新的实例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">&#x27;Michael&#x27;</span> <span class="comment"># 绑定属性&#x27;name&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.age = <span class="number">25</span> <span class="comment"># 绑定属性&#x27;age&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">99</span> <span class="comment"># 绑定属性&#x27;score&#x27;</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;Student&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;score&#x27;</span></span><br></pre></td></tr></table></figure><p>由于<code>'score'</code>没有被放到<code>__slots__</code>中，所以不能绑定<code>score</code>属性，试图绑定<code>score</code>将得到<code>AttributeError</code>的错误。</p><p><strong>使用<code>__slots__</code>要注意，<code>__slots__</code>定义的属性仅对当前类实例起作用，对继承的子类是不起作用的</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">GraduateStudent</span>(<span class="params">Student</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = GraduateStudent()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g.score = <span class="number">9999</span></span><br></pre></td></tr></table></figure><p>除非在子类中也定义<code>__slots__</code>，这样，<strong>子类实例允许定义的属性就是自身的<code>__slots__</code>加上父类的<code>__slots__</code></strong>。</p><h3 id="使用-property">使用@property</h3><p>在绑定属性时，如果我们直接把属性暴露出去，虽然写起来很简单，但是，没办法检查参数，导致可以把成绩随便改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = Student()</span><br><span class="line">s.score = <span class="number">9999</span></span><br></pre></td></tr></table></figure><p>这显然不合逻辑。为了限制score的范围，可以通过一个<code>set_score()</code>方法来设置成绩，再通过一个<code>get_score()</code>来获取成绩，这样，在<code>set_score()</code>方法里，就可以检查参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_score</span>(<span class="params">self</span>):</span></span><br><span class="line">         <span class="keyword">return</span> self._score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_score</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value, <span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;score must be an integer!&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> value &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;score must between 0 ~ 100!&#x27;</span>)</span><br><span class="line">        self._score = value</span><br></pre></td></tr></table></figure><p>现在，对任意的Student实例进行操作，就不能随心所欲地设置score了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.set_score(<span class="number">60</span>) <span class="comment"># ok!</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.get_score()</span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.set_score(<span class="number">9999</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ValueError: score must between <span class="number">0</span> ~ <span class="number">100</span>!</span><br></pre></td></tr></table></figure><p>但是，上面的调用方法又略显复杂，没有直接用属性这么直接简单。</p><p>有没有既能检查参数，又可以用类似属性这样简单的方式来访问类的变量呢？对于追求完美的Python程序员来说，这是必须要做到的！</p><p>还记得装饰器（decorator）可以给函数动态加上功能吗？对于类的方法，装饰器一样起作用。<strong>Python内置的<code>@property</code>装饰器就是负责把一个方法变成属性调用</strong>的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._score</span><br><span class="line"></span><br><span class="line"><span class="meta">    @score.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value, <span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;score must be an integer!&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> value &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;score must between 0 ~ 100!&#x27;</span>)</span><br><span class="line">        self._score = value</span><br></pre></td></tr></table></figure><p><code>@property</code>的实现比较复杂，我们先考察如何使用。把一个getter方法变成属性，只需要加上<code>@property</code>就可以了，此时，<code>@property</code>本身又创建了另一个装饰器<code>@score.setter</code>，负责把一个setter方法变成属性赋值，于是，我们就拥有一个可控的属性操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">60</span> <span class="comment"># OK，实际转化为s.set_score(60)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score <span class="comment"># OK，实际转化为s.get_score()</span></span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">9999</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ValueError: score must between <span class="number">0</span> ~ <span class="number">100</span>!</span><br></pre></td></tr></table></figure><p>注意到这个神奇的<code>@property</code>，我们在对实例属性操作的时候，就知道该属性很可能不是直接暴露的，而是通过getter和setter方法来实现的。</p><p>还可以定义只读属性，只定义getter方法，不定义setter方法就是一个只读属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._birth</span><br><span class="line"></span><br><span class="line"><span class="meta">    @birth.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self._birth = value</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2015</span> - self._birth</span><br></pre></td></tr></table></figure><p>上面的<code>birth</code>是可读写属性，而<code>age</code>就是一个只读属性，因为<code>age</code>可以根据<code>birth</code>和当前时间计算出来。</p><p>要特别注意：<strong>属性的方法名不要和实例变量重名</strong>。例如，以下的代码是错误的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 方法名称和实例变量均为birth:</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.birth</span><br></pre></td></tr></table></figure><p>这是因为调用<code>s.birth</code>时，首先转换为方法调用，在执行<code>return self.birth</code>时，又视为访问<code>self</code>的属性，于是又转换为方法调用，造成无限递归，最终导致栈溢出报错<code>RecursionError</code>。</p><h2 id="枚举类">枚举类</h2><p>当我们需要定义常量时，一个办法是用大写变量通过整数来定义，例如月份：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JAN = <span class="number">1</span></span><br><span class="line">FEB = <span class="number">2</span></span><br><span class="line">MAR = <span class="number">3</span></span><br><span class="line">...</span><br><span class="line">NOV = <span class="number">11</span></span><br><span class="line">DEC = <span class="number">12</span></span><br></pre></td></tr></table></figure><p>好处是简单，缺点是类型是<code>int</code>，并且仍然是变量。</p><p>更好的方法是为这样的枚举类型定义一个class类型，然后，每个常量都是class的一个唯一实例。Python提供了<code>Enum</code>类来实现这个功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line">Month = Enum(<span class="string">&#x27;Month&#x27;</span>, (<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;Feb&#x27;</span>, <span class="string">&#x27;Mar&#x27;</span>, <span class="string">&#x27;Apr&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;Jun&#x27;</span>, <span class="string">&#x27;Jul&#x27;</span>, <span class="string">&#x27;Aug&#x27;</span>, <span class="string">&#x27;Sep&#x27;</span>, <span class="string">&#x27;Oct&#x27;</span>, <span class="string">&#x27;Nov&#x27;</span>, <span class="string">&#x27;Dec&#x27;</span>))</span><br></pre></td></tr></table></figure><p>这样我们就获得了<code>Month</code>类型的枚举类，可以直接使用<code>Month.Jan</code>来引用一个常量，或者枚举它的所有成员：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name, member <span class="keyword">in</span> Month.__members__.items():</span><br><span class="line">    <span class="built_in">print</span>(name, <span class="string">&#x27;=&gt;&#x27;</span>, member, <span class="string">&#x27;,&#x27;</span>, member.value)</span><br></pre></td></tr></table></figure><p><code>value</code>属性则是自动赋给成员的<code>int</code>常量，默认从<code>1</code>开始计数。</p><p>如果需要更精确地控制枚举类型，可以从<code>Enum</code>派生出自定义类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum, unique</span><br><span class="line"></span><br><span class="line"><span class="meta">@unique</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weekday</span>(<span class="params">Enum</span>):</span></span><br><span class="line">    Sun = <span class="number">0</span> <span class="comment"># Sun的value被设定为0</span></span><br><span class="line">    Mon = <span class="number">1</span></span><br><span class="line">    Tue = <span class="number">2</span></span><br><span class="line">    Wed = <span class="number">3</span></span><br><span class="line">    Thu = <span class="number">4</span></span><br><span class="line">    Fri = <span class="number">5</span></span><br><span class="line">    Sat = <span class="number">6</span></span><br></pre></td></tr></table></figure><p><code>@unique</code>装饰器可以帮助我们检查保证没有重复值。</p><p>访问这些枚举类型可以有若干种方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>day1 = Weekday.Mon</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(day1)</span><br><span class="line">Weekday.Mon</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(Weekday.Tue)</span><br><span class="line">Weekday.Tue</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(Weekday[<span class="string">&#x27;Tue&#x27;</span>])</span><br><span class="line">Weekday.Tue</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(Weekday.Tue.value)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(day1 == Weekday.Mon)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(day1 == Weekday.Tue)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(Weekday(<span class="number">1</span>))</span><br><span class="line">Weekday.Mon</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(day1 == Weekday(<span class="number">1</span>))</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Weekday(<span class="number">7</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ValueError: <span class="number">7</span> <span class="keyword">is</span> <span class="keyword">not</span> a valid Weekday</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name, member <span class="keyword">in</span> Weekday.__members__.items():</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(name, <span class="string">&#x27;=&gt;&#x27;</span>, member)</span><br><span class="line">...</span><br><span class="line">Sun =&gt; Weekday.Sun</span><br><span class="line">Mon =&gt; Weekday.Mon</span><br><span class="line">Tue =&gt; Weekday.Tue</span><br><span class="line">Wed =&gt; Weekday.Wed</span><br><span class="line">Thu =&gt; Weekday.Thu</span><br><span class="line">Fri =&gt; Weekday.Fri</span><br><span class="line">Sat =&gt; Weekday.Sat</span><br></pre></td></tr></table></figure><p>可见，<strong>既可以用成员名称引用枚举常量，又可以直接根据value的值获得枚举常量</strong>。</p><h1>IO</h1><p><strong>IO编程中，Stream（流）是一个很重要的概念，可以把流想象成一个水管，数据就是水管里的水，但是只能单向流动</strong>。Input Stream就是数据从外面（磁盘、网络）流进内存，Output Stream就是数据从内存流到外面去。</p><p>由于CPU和内存的速度远远高于外设的速度，所以，在IO编程中，就存在速度严重不匹配的问题。举个例子来说，比如要把100M的数据写入磁盘，CPU输出100M的数据只需要0.01秒，可是磁盘要接收这100M数据可能需要10秒，怎么办呢？有两种办法：</p><p>第一种是CPU等着，也就是程序暂停执行后续代码，等100M的数据在10秒后写入磁盘，再接着往下执行，这种模式称为<strong>同步IO</strong>；</p><p>另一种方法是CPU不等待，只是告诉磁盘，“您老慢慢写，不着急，我接着干别的事去了”，于是，后续代码可以立刻接着执行，这种模式称为<strong>异步IO</strong>。</p><p>同步和异步的区别就在于是否等待IO执行的结果。好比你去麦当劳点餐，你说“来个汉堡”，服务员告诉你，对不起，汉堡要现做，需要等5分钟，于是你站在收银台前面等了5分钟，拿到汉堡再去逛商场，这是同步IO。</p><p>你说“来个汉堡”，服务员告诉你，汉堡需要等5分钟，你可以先去逛商场，等做好了，我们再通知你，这样你可以立刻去干别的事情（逛商场），这是异步IO。</p><p>很明显，使用异步IO来编写程序性能会远远高于同步IO，但是异步IO的缺点是编程模型复杂。想想看，你得知道什么时候通知你“汉堡做好了”，而通知你的方法也各不相同。如果是服务员跑过来找到你，这是回调模式，如果服务员发短信通知你，你就得不停地检查手机，这是轮询模式。总之，异步IO的复杂度远远高于同步IO。</p><p>操作IO的能力都是由操作系统提供的，每一种编程语言都会把操作系统提供的低级C接口封装起来方便使用，Python也不例外。我们后面会详细讨论Python的IO编程接口。</p><p>注意，本章的IO编程都是同步模式。</p><h2 id="文件读写">文件读写</h2><p>读写文件是最常见的IO操作。Python内置了读写文件的函数，用法和C是兼容的。</p><p>读写文件前，我们先必须了解一下，<strong>在磁盘上读写文件的功能都是由操作系统提供的，现代操作系统不允许普通的程序直接操作磁盘，所以，读写文件就是请求操作系统打开一个文件对象（通常称为文件描述符），然后，通过操作系统提供的接口从这个文件对象中读取数据（读文件），或者把数据写入这个文件对象（写文件）</strong>。</p><h3 id="打开和关闭文件">打开和关闭文件</h3><p>Python 提供了必要的函数和方法进行默认情况下的文件基本操作。你可以用 <strong>file</strong> 对象做大部分的文件操作。</p><h4 id="open-函数">open 函数</h4><p>你必须先用Python内置的open()函数打开一个文件，创建一个file对象，相关的方法才可以调用它进行读写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(file_name [, access_mode][, buffering])</span><br></pre></td></tr></table></figure><p>各个参数的细节如下：</p><ul><li><code>file_name</code>：file_name变量是一个包含了你<strong>要访问的文件名称的字符串值</strong>。</li><li><code>access_mode</code>：<strong><code>access_mode</code>决定了打开文件的模式</strong>：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，<strong>默认文件访问模式为只读®</strong>。</li><li>``buffering<code>:**如果</code>buffering`的值被设为0，就不会有寄存。如果buffering的值取1，访问文件时会寄存行。如果将buffering的值设为大于1的整数，表明了这就是的寄存区的缓冲大小。如果取负值，寄存区的缓冲大小则为系统默认。**</li></ul><p>实际上参数还有很多，包括：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(file: <span class="type">Union</span>[<span class="built_in">str</span>, <span class="built_in">bytes</span>, PathLike[<span class="built_in">str</span>], PathLike[<span class="built_in">bytes</span>], <span class="built_in">int</span>], mode: <span class="built_in">str</span>, buffering: <span class="built_in">int</span>, encoding: <span class="type">Optional</span>[<span class="built_in">str</span>], errors: <span class="type">Optional</span>[<span class="built_in">str</span>], newline: <span class="type">Optional</span>[<span class="built_in">str</span>], closefd: <span class="built_in">bool</span>, opener: <span class="type">Optional</span>[(<span class="built_in">str</span>, <span class="built_in">int</span>) -&gt; <span class="built_in">int</span>]) -&gt; IO </span><br></pre></td></tr></table></figure><p>不同模式打开文件的完全列表：</p><table><thead><tr><th style="text-align:left">模式</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">t</td><td style="text-align:left">文本模式 (默认)。</td></tr><tr><td style="text-align:left">x</td><td style="text-align:left">写模式，新建一个文件，如果该文件已存在则会报错。</td></tr><tr><td style="text-align:left">b</td><td style="text-align:left">二进制模式。</td></tr><tr><td style="text-align:left">+</td><td style="text-align:left"><strong>打开一个文件进行更新(可读可写)</strong>。</td></tr><tr><td style="text-align:left">U</td><td style="text-align:left">通用换行模式（不推荐）。</td></tr><tr><td style="text-align:left">r</td><td style="text-align:left">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td style="text-align:left">rb</td><td style="text-align:left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td></tr><tr><td style="text-align:left">r+</td><td style="text-align:left"><strong>打开一个文件用于读写。文件指针将会放在文件的开头。</strong></td></tr><tr><td style="text-align:left">rb+</td><td style="text-align:left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td style="text-align:left">w</td><td style="text-align:left">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即<strong>原有内容会被删除</strong>。如果该文件不存在，创建新文件。</td></tr><tr><td style="text-align:left">wb</td><td style="text-align:left">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td style="text-align:left">w+</td><td style="text-align:left"><strong>打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</strong></td></tr><tr><td style="text-align:left">wb+</td><td style="text-align:left">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td style="text-align:left">a</td><td style="text-align:left"><strong>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</strong></td></tr><tr><td style="text-align:left">ab</td><td style="text-align:left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td style="text-align:left">a+</td><td style="text-align:left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td style="text-align:left">ab+</td><td style="text-align:left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><p>下图很好的总结了这几种模式：</p><p><img src="1.png" alt=""></p><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">r</th><th style="text-align:center">r+</th><th style="text-align:center">w</th><th style="text-align:center">w+</th><th style="text-align:center">a</th><th style="text-align:center">a+</th></tr></thead><tbody><tr><td style="text-align:center">读</td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center"></td><td style="text-align:center">+</td><td style="text-align:center"></td><td style="text-align:center">+</td></tr><tr><td style="text-align:center">写</td><td style="text-align:center"></td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center">+</td></tr><tr><td style="text-align:center">创建</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center">+</td></tr><tr><td style="text-align:center">覆盖</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">指针在开始</td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">指针在结尾</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">+</td><td style="text-align:center">+</td></tr></tbody></table><h2 id="File对象的属性">File对象的属性</h2><p>一个文件被打开后，你有一个file对象，你可以得到有关该文件的各种信息。</p><p>以下是和file对象相关的所有属性的列表：</p><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">file.closed</td><td style="text-align:left">返回true如果文件已被关闭，否则返回false。</td></tr><tr><td style="text-align:left">file.mode</td><td style="text-align:left">返回被打开文件的访问模式。</td></tr><tr><td style="text-align:left"><a href="http://file.name">file.name</a></td><td style="text-align:left">返回文件的名称。</td></tr><tr><td style="text-align:left">file.softspace</td><td style="text-align:left">如果用print输出后，必须跟一个空格符，则返回false。否则返回true。</td></tr></tbody></table><p>如下实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;foo.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;文件名: &quot;</span>, fo.name</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;是否已关闭 : &quot;</span>, fo.closed</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;访问模式 : &quot;</span>, fo.mode</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;末尾是否强制加空格 : &quot;</span>, fo.softspace</span><br></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">文件名:  foo.txt</span><br><span class="line">是否已关闭 :  False</span><br><span class="line">访问模式 :  w</span><br><span class="line">末尾是否强制加空格 :  0</span><br></pre></td></tr></table></figure><h3 id="write-方法">write()方法</h3><p>write()方法可将任何字符串写入一个打开的文件。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。<strong>write()方法不会在字符串的结尾添加换行符(‘\n’)：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fileObject.write(string)</span><br></pre></td></tr></table></figure><p>在这里，被传递的参数是要写入到已打开文件的内容。</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;foo.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">fo.write( <span class="string">&quot;www.runoob.com!\nVery good site!\n&quot;</span>)</span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure><p>上述方法会创建foo.txt文件，并将收到的内容写入该文件，并最终关闭文件。如果你打开这个文件，将看到以下内容:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat foo.txt </span><br><span class="line">www.runoob.com!</span><br><span class="line">Very good site!</span><br></pre></td></tr></table></figure><h3 id="read-方法">read()方法</h3><p><code>read（）</code>方法从一个打开的文件中读取一个字符串。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fileObject.read([count])</span><br></pre></td></tr></table></figure><p>在这里，<strong>被传递的参数是要从已打开文件中读取的字节计数</strong>。该方法从文件的开头开始读入，如果没有传入count，它会尝试尽可能多地读取更多的内容，很可能是直到文件的末尾。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;foo.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>)</span><br><span class="line"><span class="built_in">str</span> = fo.read(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;读取的字符串是 : &quot;</span>, <span class="built_in">str</span></span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">读取的字符串是 :  www.runoob</span><br></pre></td></tr></table></figure><p>由于文件读写时都有可能产生<code>IOError</code>，一旦出错，后面的<code>f.close()</code>就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用<code>try ... finally</code>来实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;/path/to/file&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><p>但是每次都这么写实在太繁琐，所以，<strong>Python引入了<code>with</code>语句来自动帮我们调用<code>close()</code>方法</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/path/to/file&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br></pre></td></tr></table></figure><p>这和前面的<code>try ... finally</code>是一样的，但是代码更佳简洁，并且不必调用<code>f.close()</code>方法。</p><p>调用<code>read()</code>会一次性读取文件的全部内容，如果文件有10G，内存就爆了，所以，<strong>要保险起见，可以反复调用<code>read(size)</code>方法，每次最多读取size个字节的内容。另外，调用<code>readline()</code>可以每次读取一行内容，调用<code>readlines()</code>一次读取所有内容并按行返回<code>list</code></strong>。因此，要根据需要决定怎么调用。</p><p>如果文件很小，<code>read()</code>一次性读取最方便；如果不能确定文件大小，反复调用<code>read(size)</code>比较保险；如果是配置文件，调用<code>readlines()</code>最方便：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">    <span class="built_in">print</span>(line.strip()) <span class="comment"># 把末尾的&#x27;\n&#x27;删掉</span></span><br></pre></td></tr></table></figure><h3 id="close-方法">close()方法</h3><p>File 对象的<code> close（）</code>方法<strong>刷新缓冲区里任何还没写入的信息，并关闭该文件，这之后便不能再进行写入</strong>。</p><p><strong>当一个文件对象的引用被重新指定给另一个文件时，Python 会关闭之前的文件</strong>。用 close（）方法关闭文件是一个很好的习惯。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fileObject.close()</span><br></pre></td></tr></table></figure><h3 id="另：">另：</h3><h4 id="字符编码">字符编码</h4><p>要读取非UTF-8编码的文本文件，需要给<code>open()</code>函数传入<code>encoding</code>参数，例如，读取GBK编码的文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">open</span>(<span class="string">&#x27;/Users/michael/gbk.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">&#x27;测试&#x27;</span></span><br></pre></td></tr></table></figure><p>遇到有些编码不规范的文件，你可能会遇到<code>UnicodeDecodeError</code>，因为在文本文件中可能夹杂了一些非法编码的字符。遇到这种情况，<code>open()</code>函数还接收一个<code>errors</code>参数，表示如果遇到编码错误后如何处理。最简单的方式是直接忽略：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">open</span>(<span class="string">&#x27;/Users/michael/gbk.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="StringIO和BytesIO">StringIO和BytesIO</h4><p><code>StringIO</code>和<code>BytesIO</code>是在<strong>内存</strong>中操作string和bytes的方法，使得和读写文件具有一致的接口。</p><h5 id="StringIO">StringIO</h5><p>很多时候，数据读写不一定是文件，也可以在内存中读写。StringIO顾名思义就是在内存中读写str。</p><p>要把str写入StringIO，我们需要先创建一个StringIO，然后，像文件一样写入即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = StringIO()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">&#x27;world!&#x27;</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(f.getvalue())</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure><p><code>getvalue()</code>方法用于获得写入后的str。</p><p>要读取StringIO，可以用一个str初始化StringIO，然后，像读文件一样读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = StringIO(<span class="string">&#x27;Hello!\nHi!\nGoodbye!&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="meta">... </span>    s = f.readline()</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> s == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">break</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(s.strip())</span><br><span class="line">...</span><br><span class="line">Hello!</span><br><span class="line">Hi!</span><br><span class="line">Goodbye!</span><br></pre></td></tr></table></figure><h5 id="BytesIO">BytesIO</h5><p>StringIO操作的只能是str，如果要操作二进制数据，就需要使用BytesIO。</p><p>BytesIO实现了在内存中读写bytes，我们创建一个BytesIO，然后写入一些bytes：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = BytesIO()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(f.getvalue())</span><br><span class="line"><span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br></pre></td></tr></table></figure><p>请注意，写入的不是str，而是经过UTF-8编码的bytes。</p><p>和StringIO类似，可以用一个bytes初始化BytesIO，然后，像读文件一样读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = BytesIO(<span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="文件定位">文件定位</h4><p><code>tell()</code>方法告诉你<strong>文件内</strong>的当前位置, 换句话说，<strong>下一次的读写会发生在文件开头这么多字节之后</strong>。</p><p><code>seek（offset [,from]）</code>方法<strong>改变当前文件内的位置</strong>。Offset变量表示要移动的字节数。From变量指定开始移动字节的参考位置。</p><p><strong>如果from被设为0，这意味着将文件的开头作为移动字节的参考位置。如果设为1，则使用当前的位置作为参考位置。如果它被设为2，那么该文件的末尾将作为参考位置。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;foo.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>)</span><br><span class="line"><span class="built_in">str</span> = fo.read(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;读取的字符串是 : &quot;</span>, <span class="built_in">str</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查找当前位置</span></span><br><span class="line">position = fo.tell()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;当前文件位置 : &quot;</span>, position</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 把指针再次重新定位到文件开头</span></span><br><span class="line">position = fo.seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">str</span> = fo.read(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;重新读取字符串 : &quot;</span>, <span class="built_in">str</span></span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">读取的字符串是 :  www.runoob</span><br><span class="line">当前文件位置 :  <span class="number">10</span></span><br><span class="line">重新读取字符串 :  www.runoob</span><br></pre></td></tr></table></figure><h2 id="重命名和删除文件">重命名和删除文件</h2><p>Python的os模块提供了帮你执行文件处理操作的方法，比如重命名和删除文件。</p><p>要使用这个模块，你必须先导入它，然后才可以调用相关的各种功能。</p><h3 id="rename-方法">rename() 方法</h3><p><code>rename()</code> 方法需要两个参数，当前的文件名和新文件名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.rename(current_file_name, new_file_name)</span><br></pre></td></tr></table></figure><h3 id="remove-方法">remove()方法</h3><p>你可以用<code>remove()</code>方法删除文件，需要提供要删除的文件名作为参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.remove(file_name)</span><br></pre></td></tr></table></figure><h2 id="Python里的目录：">Python里的目录：</h2><p>所有文件都包含在各个不同的目录下，不过Python也能轻松处理。os模块有许多方法能帮你创建，删除和更改目录。</p><h3 id="mkdir-方法">mkdir()方法</h3><p>可以使用os模块的<code>mkdir()</code>方法在当前目录下创建新的目录们。你需要提供一个包含了要创建的目录名称的参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.mkdir(<span class="string">&quot;newdir&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="chdir-方法">chdir()方法</h3><p>可以用<code>chdir()</code>方法来<strong>改变当前的目录</strong>。<code>chdir()</code>方法需要的一个参数是你想设成当前目录的目录名称。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.chdir(<span class="string">&quot;newdir&quot;</span>)</span><br></pre></td></tr></table></figure><p>下例将进入&quot;/home/newdir&quot;目录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将当前目录改为&quot;/home/newdir&quot;</span></span><br><span class="line">os.chdir(<span class="string">&quot;/home/newdir&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="getcwd-方法：">getcwd()方法：</h3><p><code>getcwd()</code>方法显示当前的工作目录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.getcwd()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">print</span> os.getcwd()</span><br></pre></td></tr></table></figure><h3 id="rmdir-方法">rmdir()方法</h3><p><code>rmdir()</code>方法删除目录，目录名称以参数传递。</p><p><strong>在删除这个目录之前，它的所有内容应该先被清除。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.rmdir(<span class="string">&#x27;dirname&#x27;</span>)</span><br></pre></td></tr></table></figure><p>以下是删除&quot; /tmp/test&quot;目录的例子。目录的完全合规的名称必须被给出，否则会在当前目录下搜索该目录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除”/tmp/test”目录</span></span><br><span class="line">os.rmdir( <span class="string">&quot;/tmp/test&quot;</span>  )</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/python/os-file-methods.html">Python OS 文件/目录方法</a></p><h1>网络：从0到1，Python网络编程的入门之路</h1><p>来自<a href="https://www.zhihu.com/people/mrlwt">tonnie</a>的<a href="https://www.zhihu.com/question/48509984">从0到1，Python网络编程的入门之路</a></p><p>有删改但不多，只是加了一些标题用来划分不同内容以及一些加粗标注，写的挺好的，不过看之前建议看看《图解TCP/IP》这类的基础知识书。</p><p>最近在学习Python网络编程时看了一些相关的文章，发现大多数要么讲的晦涩难懂，要么讲的比较浅显，我就想为什么不在学习的过程中写一篇心得呢，于是有了这篇文章。我相信技术不全是冰冷的，从人的角度出发，才能更好地领悟编程的乐趣，本文将尝试以简洁的文字分享如何入门Python中的网络编程。</p><p>在Python世界里，喜欢用Python做爬虫的人不在少数，那么在请求页面的过程中发生了什么呢？</p><h2 id="网络请求过程：TCP-IP的小例子">网络请求过程：TCP/IP的小例子</h2><p>现在编写一个最简单的Client/Server程序：</p><ol><li><p>首先执行下面的命令开启一个监听8000端口的HTTP服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 8000</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 ...</span><br></pre></td></tr></table></figure></li><li><p>接着编写一个程序，来对这个服务器发起HTTP请求：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">&#x27;http://127.0.0.1:8000/&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure></li><li><p>再执行这个程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash-3.2$ python test.py</span><br><span class="line">&lt;Response [200]&gt;</span><br></pre></td></tr></table></figure></li></ol><p>可以看到，服务器返回了一个200成功响应。</p><p>好，现在我们来总结请求过程：</p><ol><li>客户端向服务器端发起了一个HTTP(GET)请求。</li><li>服务器端向客户端返回了一个HTTP(200)响应。</li></ol><p>这是我们能看到的最抽象的过程，下面再用tcpdump细看发生了什么：</p><p>在命令行用tcpdump来监听本地网卡的tcp连接，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i lo0 port 8000</span><br></pre></td></tr></table></figure><p>或者你也可以用-w参数把信息写出到文件，再通过wireshark来观察结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i lo0 port 8000 -w test.cap</span><br></pre></td></tr></table></figure><p>现在执行程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash-3.2$ python test.py</span><br><span class="line">&lt;Response [200]&gt;</span><br></pre></td></tr></table></figure><p>不出意外的话，我们就能观察到tcpdump输出类似如下的结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class="line">listening on lo0, link-type NULL (BSD loopback), capture size 262144 bytes</span><br><span class="line">23:46:06.464962 IP localhost.49329 &gt; localhost.irdmi: Flags [S], seq 1191154495, win 65535, options [mss 16344,nop,wscale 5,nop,nop,TS val 178410641 ecr 0,sackOK,eol], length 0</span><br><span class="line">23:46:06.465018 IP localhost.irdmi &gt; localhost.49329: Flags [S.], seq 1405387906, ack 1191154496, win 65535, options [mss 16344,nop,wscale 5,nop,nop,TS val 178410641 ecr 178410641,sackOK,eol], length 0</span><br><span class="line">23:46:06.465029 IP localhost.49329 &gt; localhost.irdmi: Flags [.], ack 1, win 12759, options [nop,nop,TS val 178410641 ecr 178410641], length 0</span><br><span class="line">23:46:06.465039 IP localhost.irdmi &gt; localhost.49329: Flags [.], ack 1, win 12759, options [nop,nop,TS val 178410641 ecr 178410641], length 0</span><br><span class="line">23:46:06.465065 IP localhost.49329 &gt; localhost.irdmi: Flags [P.], seq 1:146, ack 1, win 12759, options [nop,nop,TS val 178410641 ecr 178410641], length 145</span><br><span class="line">23:46:06.465079 IP localhost.irdmi &gt; localhost.49329: Flags [.], ack 146, win 12754, options [nop,nop,TS val 178410641 ecr 178410641], length 0</span><br><span class="line">23:46:06.467141 IP localhost.irdmi &gt; localhost.49329: Flags [P.], seq 1:156, ack 146, win 12754, options [nop,nop,TS val 178410642 ecr 178410641], length 155</span><br><span class="line">23:46:06.467171 IP localhost.49329 &gt; localhost.irdmi: Flags [.], ack 156, win 12754, options [nop,nop,TS val 178410643 ecr 178410642], length 0</span><br><span class="line">23:46:06.467231 IP localhost.irdmi &gt; localhost.49329: Flags [P.], seq 156:5324, ack 146, win 12754, options [nop,nop,TS val 178410643 ecr 178410643], length 5168</span><br><span class="line">23:46:06.467245 IP localhost.49329 &gt; localhost.irdmi: Flags [.], ack 5324, win 12593, options [nop,nop,TS val 178410643 ecr 178410643], length 0</span><br><span class="line">23:46:06.467313 IP localhost.irdmi &gt; localhost.49329: Flags [F.], seq 5324, ack 146, win 12754, options [nop,nop,TS val 178410643 ecr 178410643], length 0</span><br><span class="line">23:46:06.467331 IP localhost.49329 &gt; localhost.irdmi: Flags [.], ack 5325, win 12593, options [nop,nop,TS val 178410643 ecr 178410643], length 0</span><br><span class="line">23:46:06.468442 IP localhost.49329 &gt; localhost.irdmi: Flags [F.], seq 146, ack 5325, win 12593, options [nop,nop,TS val 178410644 ecr 178410643], length 0</span><br><span class="line">23:46:06.468479 IP localhost.irdmi &gt; localhost.49329: Flags [.], ack 147, win 12754, options [nop,nop,TS val 178410644 ecr 178410644], length 0</span><br></pre></td></tr></table></figure><p>通过结果能看到：</p><ol><li>客户端发起一个SYN报文，向服务器请求建立一个TCP连接。</li><li>服务器端返回一个SYN+ACK报文，表示服务器收到了客户端传来的请求，并同意与客户端建立TCP连接。</li><li>客户端返回一个ACK报文，表示已经知道服务器同意建立TCP连接，这时候双方开始通信。</li><li>客户端和服务器端不断地交换信息，接收报文，返回应答。</li><li>最后数据传输完毕，服务器发起一个FIN报文，表示要结束通信，客户端返回一个ACK应答，接着又发送一个FIN报文，最后服务器端返回一个ACK应答，此时连接过程结束。</li></ol><p>仔细一想，这个过程跟现实世界中的“打电话”是非常相似的，与之代替的不就是拨打电话、建立连接、确认应答、交换信息、关闭连接吗，我们经常说TCP是面向连接的也是这个道理。</p><p>现在再来看服务器端的状态，通过lsof命令来查看绑定8000端口的描述符信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lsof -n -i:8000          </span><br><span class="line">COMMAND    PID   USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME</span><br><span class="line">python3.4 1128 tonnie    4u  IPv4 0x17036ae156ec58cf      0t0  TCP *:irdmi (LISTEN)</span><br></pre></td></tr></table></figure><p>通过结果可以观察到服务器的进程的一些信息，服务器进程处于<strong>LISTEN</strong>阶段，说明服务器处于保持着监听连接的状态：</p><p>现在用刚才的例子来解释TCP中状态迁移的概念，这时候，如果从客户端到来一个请求：</p><ol><li>服务器端接收到客户端的SYN报文，返回SYN+ACK报文，服务器端进入<strong>SYN_RCVD</strong>状态。</li><li>服务器端收到客户端返回的ACK应答后，连接建立，进入<strong>ESTABLISHED</strong>状态。</li><li>服务器端的数据传输完毕，给客户端发送FIN报文，进入<strong>FIN_WAIT_1</strong>状态。</li><li>服务器端接收到客户端返回的ACK应答后，进入<strong>FIN_WAIT_2</strong>状态。</li><li>服务器端接收到客户端的FIN报文，接着返回一个ACK应答，等待连接关闭，进入<strong>TIME_WAIT</strong>状态。</li><li>服务器端经过<strong>2MSL</strong>时间后进入<strong>CLOSED</strong>状态，此时连接关闭。</li></ol><p>至于客户端，在每个阶段也有各自的状态，下图表示了TCP状态迁移的过程：</p><p><img src="2.jpg" alt=""></p><p>下面来看TCP/IP的四层模型：</p><ol><li>应用层，在这一层上的有HTTP、DNS、FTP、SSH等。</li><li>传输层，在这一层上的有TCP、UDP等。</li><li>网络层，在这一层上的有IP、ARP等。</li><li>网络接口层，在这一层上的有以太网、PPP等。</li></ol><p><img src="3.jpg" alt=""></p><p><strong>编者注</strong>:TCP/IP模型是由 OSI 模型演化而来，TCP/IP 模型将 OSI 模型由七层简化为五层（一开始为四层），应用层、表示层、会话层统一为应用层。</p><p><img src="8.jpg" alt=""></p><p>在上面的程序中，客户端与服务器端的通信都要经过这四个层来打交道。那么这段Python程序是如何操作连接的建立和关闭以及数据的传输呢？答案是<strong>通过socket提供的一系列方法</strong>。</p><h2 id="socket">socket</h2><p><strong>socket是一种IPC方法，它使得同一主机或不同主机的应用程序能交换数据，socket在上图中处于第三层和第四层之间，所以可以把socket理解为在传输层和应用层之间的一组通信接口，或者是一个抽象的通信设备，应用程序借助socket就能方便地与其他应用程序进行交流。</strong></p><p>现在把客户端的代码简化为用socket表现的最简形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">sock.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8000</span>))</span><br><span class="line">sock.send(<span class="string">b&#x27;GET / HTTP/1.1\r\nHost: 127.0.0.1:8000\r\n\r\n&#x27;</span>)</span><br><span class="line">data = sock.recv(<span class="number">4096</span>)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">sock.close()</span><br></pre></td></tr></table></figure><p>是不是感觉跟上面TCP的连接过程十分相似？只是用代码的方式把这一具现过程给抽象表现出来罢了。</p><p>再看服务器端的最简化代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">sock.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8000</span>))</span><br><span class="line">sock.listen(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    cli_sock, cli_addr = sock.accept()</span><br><span class="line">    req = cli_sock.recv(<span class="number">4096</span>)</span><br><span class="line">    cli_sock.send(<span class="string">b&#x27;hello world&#x27;</span>)</span><br><span class="line">    cli_sock.close()</span><br></pre></td></tr></table></figure><p>过程同样很简单，总结一下它们的过程：</p><p><strong>服务器端：</strong></p><ol><li>调用<code>socket.socket</code>建立一个socket对象，指定<strong>域(domain)和协议(protocol)</strong>，此时一个文件描述符会绑定到这个socket对象。</li><li>调用<code>sock.setsockopt</code>设置这个socket选项，本例中把socket.SO_REUSEADDR设置为1，表示服务器端进程终止后，操作系统会为它绑定的端口保留一段时间，以防其他进程在它结束后抢占这个端口。</li><li>调用<code>sock.bind</code>为这个socket对象绑定到一个地址上，它需要一个主机地址和端口组成的元组作为参数。</li><li>调用<code>sock.listen</code>通知系统开始侦听来自客户端的连接，参数是在队列中最大的未决连接数量。</li><li>调用<code>sock.accept</code>阻塞调用直至返回一个元组，里面包含了用于与客户端进行对话的socket对象以及客户端的地址信息。</li><li>调用<code>cli_sock.recv</code>方法接受来自客户端发来的数据，在这个例子中拿到的是<code>b’GET / HTTP/1.1\r\nHost: 127.0.0.1:8000\r\n\r\n’</code>。</li><li>调用<code>cli_sock.send</code>方法把数据发送给客户端。</li><li>调用<code>cli_sock.close</code>结束连接。</li></ol><p><strong>客户端：</strong></p><ol><li>调用<code>socket.socket</code>建立一个socket对象，指定域(domain)和协议(protocol)，此时一个文件描述符会绑定到这个socket对象。</li><li>调用<code>sock.connect</code>通过指定的主机和端口连接到对端的服务器进程。</li><li>调用<code>sock.send</code>给服务器端发送数据。</li><li>调用<code>sock.recv</code>接收服务器端发来的数据。</li><li>调用<code>sock.close</code>关闭连接。</li></ol><p>socket的数据是通过内核维护的读写缓冲区来获取的，如下图中的表示：</p><p><img src="4.png" alt=""></p><p>每次从缓冲区写入或读入数据都会发起标准的系统调用，如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(fd, buf, bufsize)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">write</span><span class="params">(fd, buf, bufwrite)</span></span>;</span><br></pre></td></tr></table></figure><p>来进行数据的写或读。当然对于大文件来说，执行多次read、write等系统调用的耗费是相当可观的，这时候就要用到<strong>sendfile</strong>系统调用：</p><p><img src="5.png" alt=""></p><h3 id="socket的域"><strong>socket的域</strong></h3><p>在上面的程序中我们建立socket对象都是使用了<strong>AF_INET</strong>这个参数，它表示这个socket是通过IPV4的方式进行通信的。</p><p>这种socket也被叫做<strong>Internet Domain Socket</strong>，它定义的地址形式是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> &#123;</span></span><br><span class="line">     <span class="keyword">in_addr_t</span> s_addr;     <span class="comment">//32位无符号整数。</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> &#123;</span></span><br><span class="line">     <span class="keyword">sa_family_t</span> sin_family;     <span class="comment">//AF_INET</span></span><br><span class="line">     <span class="keyword">in_port_t</span> sin_port;     <span class="comment">//端口号</span></span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span>     <span class="comment">//ipv4地址</span></span><br><span class="line">     <span class="keyword">unsigned</span> <span class="keyword">char</span> __pad[X];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>与之相对的，还有一种socket类型为<strong>Unix Domain Socket</strong>，它通过<strong>AF_UNIX</strong>这个参数来创建。它定义的地址形式是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> &#123;</span></span><br><span class="line">     <span class="keyword">sa_family_t</span> sun_family;     <span class="comment">//AF_UNIX</span></span><br><span class="line">     <span class="keyword">char</span> sun_path[<span class="number">108</span>];     <span class="comment">//socket路径名</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>当用Unix Domain Socket发起bind操作时，会在文件系统中创建一个条目，socket和路径名为一对一关系</strong>。一般来说，Unix Domain Socket只针对在同一主机下应用程序下的网络通信，<strong>它还有一个特点是可以使用目录权限来控制socket的访问</strong>。（例如我们使用mysql时用到的<code>mysql.sock</code>就是使用<code>unix domain sokcet</code>的载体）</p><h3 id="socket的协议"><strong>socket的协议</strong></h3><p>在protocol上我们使用了SOCK_STREAM，表示这是个流式套接字（即TCP），除此之外我们还可以把它指定为SOCK_DGRAM，表示这是个数据报套接字（即UDP）。</p><p><strong>TCP跟UDP的一些基本区别：</strong></p><blockquote><ol><li>TCP面向连接，UDP不面向连接。</li><li>TCP面向字节，不存在消息边界，可能存在粘包问题。UDP则面向报文。</li><li>TCP会尽力保证数据的可靠交付，而UDP默认不做保证。</li><li>TCP头部20字节，UDP头部8字节。</li></ol></blockquote><p><strong>编者注</strong>：如何理解1和3：</p><p>TCP协议是一种可靠的通信协议，<strong>它要求传输的过程是可靠的，因此需要经过三次握手的环节，确立连接关系之后，才可以进行传输</strong>。除此之外，TCP还有超时重传机制，还有排序的机制，有发送的窗口，有窗口大小等等，保证接收方接收到的就是发送方发送过去的。</p><p>UDP是一种不可靠的通信协议，它<strong>不需要建立连接</strong>，不需要对连接进行确认ACK的操作，不需要重传，不需要排序，它<strong>只管传输</strong>。</p><p>比如：</p><blockquote><p>“我给你讲一个关于TCP的笑话。”</p><p>“好的你给我讲一个关于TCP的笑话。”</p><p>“好的。”</p><p><strong>------确立连接关系，进行传输------</strong></p><p>“苟。这是第一个字。”</p><p>“第一个字收到，请发第二个字。”</p><p>“利。这是第二个字。”</p><p>“第二个字收到，请发第三个字。”</p><p>“国。这是第三个字。”</p><p><strong>------超时重传-------</strong></p><p>“国。这是第三个字。”</p><p>“第三个字收到，请发第四个字。”</p><p>“家……”</p><p>……</p><p>“我讲完了。”</p><p>“好的。我听完了。”</p><p>“好的。”</p><p><strong>------关闭连接------</strong></p><p>“我给你讲一个关于UDP的笑话。”</p><p>“咦我好像听见一个关笑P话的U……？咦这苟啊国家啊这什么什么之是啥玩意？我让应用层看看……应用层说应该是两句诗？”</p></blockquote><p>TCP 最适合用于对时序不太关心的，且要求高可靠性的应用程序。</p><ul><li><a href="https://www.zhihu.com/search?q=%E4%B8%87%E7%BB%B4%E7%BD%91&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1883510114%7D">万维网</a>（HTTP/HTTPS）</li><li>安全外壳（SSH）</li><li><a href="https://www.zhihu.com/search?q=%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1883510114%7D">电子邮件</a>（SMTP，IMAP / POP）</li><li>文件传输协议（FTP）</li></ul><p>UDP 最适合需要速度和效率的应用程序。</p><ul><li>串流影片</li><li>线上游戏</li><li>现场直播</li><li>域名系统（DNS）</li><li><a href="https://www.zhihu.com/search?q=%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1883510114%7D">互联网协议</a>语音（VoIP）</li><li>普通文件传输协议（TFTP）</li></ul><h3 id="socket的通道"><strong>socket的通道</strong></h3><p>一般来说，socket的信道是双向的，即一个socket既能读又能写。有时候你需要建立一个半开放的socket，这时候就要使用socket的shutdown调用，它接收一个标记，其中：</p><ul><li><strong>SHUT_RD代表关闭连接的读端。</strong></li><li><strong>SHUT_WR代表关闭连接的写端。</strong></li><li><strong>SHUT_RDWR代表关闭连接的读端跟写端。</strong></li></ul><p>shutdown()不会显式关闭文件描述符，需要另外调用close()。</p><h3 id="socket服务器">socket服务器</h3><p>现在你应该对socket有一个大致的了解了，现在我们再来探讨一个socket服务器是怎么编写的。</p><p>再回到最开始的那段代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 8000</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 ...</span><br></pre></td></tr></table></figure><p>我们直接用python内置的HTTPServer绑定了8000这个端口上。</p><p>查看python3的<code>http.server</code>所在的源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">HandlerClass=BaseHTTPRequestHandler,</span></span></span><br><span class="line"><span class="params"><span class="function">         ServerClass=HTTPServer, protocol=<span class="string">&quot;HTTP/1.0&quot;</span>, port=<span class="number">8000</span>, bind=<span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    server_address = (bind, port)</span><br><span class="line"></span><br><span class="line">    HandlerClass.protocol_version = protocol</span><br><span class="line">    httpd = ServerClass(server_address, HandlerClass)</span><br><span class="line"></span><br><span class="line">    sa = httpd.socket.getsockname()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Serving HTTP on&quot;</span>, sa[<span class="number">0</span>], <span class="string">&quot;port&quot;</span>, sa[<span class="number">1</span>], <span class="string">&quot;...&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        httpd.serve_forever()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nKeyboard interrupt received, exiting.&quot;</span>)</span><br><span class="line">        httpd.server_close()</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>当<code>http.server</code>以模块方式运行时会调用test方法，创建一个测试服务器，这个服务器默认使用了<strong>HTTPServer</strong>作为服务器的类，<strong>BaseHTTPRequestHandler</strong>作为请求的处理类。</p><p>看HTTPServer，也就是我们一开始使用的服务器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTTPServer</span>(<span class="params">socketserver.TCPServer</span>):</span></span><br><span class="line"></span><br><span class="line">    allow_reuse_address = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">server_bind</span>(<span class="params">self</span>):</span></span><br><span class="line">        socketserver.TCPServer.server_bind(self)</span><br><span class="line">        host, port = self.socket.getsockname()[:<span class="number">2</span>]</span><br><span class="line">        self.server_name = socket.getfqdn(host)</span><br><span class="line">        self.server_port = port</span><br></pre></td></tr></table></figure><p>它继承了<strong>socketserver.TCPServer</strong>这个类，找到socketserver所在的源码，发现有一段注释，说明了几个服务器类之间的关系。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+------------+</span><br><span class="line">| BaseServer |</span><br><span class="line">+------------+</span><br><span class="line">      |</span><br><span class="line">      v</span><br><span class="line">+-----------+        +------------------+</span><br><span class="line">| TCPServer |-------&gt;| UnixStreamServer |</span><br><span class="line">+-----------+        +------------------+</span><br><span class="line">      |</span><br><span class="line">      v</span><br><span class="line">+-----------+        +--------------------+</span><br><span class="line">| UDPServer |-------&gt;| UnixDatagramServer |</span><br><span class="line">+-----------+        +--------------------+</span><br></pre></td></tr></table></figure><p>可以看到，<strong>TCPServer</strong>继承自<strong>BaseServer</strong>，而<strong>UDPServer</strong>又继承自<strong>TCPServer</strong>。</p><p>找到TCPServer这个类，可以看到它默认使用<code>socket.AF_INET(IPV4)</code>和<code>socket.SOCK_STREAM(TCP)</code>协议，并会在初始化的时候建立一个socket对象，注意这时候这个socket对象仅仅只是被创建处理，它还没有做任何的绑定。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TCPServer</span>(<span class="params">BaseServer</span>):</span></span><br><span class="line">    address_family = socket.AF_INET</span><br><span class="line"></span><br><span class="line">    socket_type = socket.SOCK_STREAM</span><br><span class="line"></span><br><span class="line">    request_queue_size = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    allow_reuse_address = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, server_address, RequestHandlerClass, bind_and_activate=<span class="literal">True</span></span>):</span></span><br><span class="line">        BaseServer.__init__(self, server_address, RequestHandlerClass)</span><br><span class="line">        self.socket = socket.socket(self.address_family,</span><br><span class="line">                                    self.socket_type)</span><br><span class="line">        <span class="keyword">if</span> bind_and_activate:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.server_bind()</span><br><span class="line">                self.server_activate()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                self.server_close()</span><br><span class="line">                <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><p>真正的绑定操作发生在<code>self.server_bind()</code>这行代码里，现在我们查看这个方法，它把socket对象绑定到<code>__init__</code>初始化中得到的地址上，并获取服务端的地址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server_bind</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">if</span> self.allow_reuse_address:</span><br><span class="line">        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    self.socket.bind(self.server_address)</span><br><span class="line">    self.server_address = self.socket.getsockname()</span><br></pre></td></tr></table></figure><p>绑定后的监听动作则发生在<code>self.server_activate()</code>这行里，它紧跟着binding后进行，在这个方法里socket会在绑定的地址上监听到来的连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server_activate</span>(<span class="params">self</span>):</span></span><br><span class="line">    self.socket.listen(self.request_queue_size)</span><br></pre></td></tr></table></figure><p>现在我们关心的是，如果现在有一个客户端发起了连接请求，服务器类会怎么处理呢？我们可以在<strong>TCPServer</strong>继承的<strong>BaseServer</strong>找到答案。</p><p>找到BaseServer的<code>serve_forever</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serve_forever</span>(<span class="params">self, poll_interval=<span class="number">0.5</span></span>):</span></span><br><span class="line">    self.__is_shut_down.clear()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.__shutdown_request:</span><br><span class="line">            r, w, e = _eintr_retry(select.select, [self], [], [],</span><br><span class="line">                                    poll_interval)</span><br><span class="line">            <span class="keyword">if</span> self <span class="keyword">in</span> r:</span><br><span class="line">                self._handle_request_noblock()</span><br><span class="line"></span><br><span class="line">            self.service_actions()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        self.__shutdown_request = <span class="literal">False</span></span><br><span class="line">        self.__is_shut_down.<span class="built_in">set</span>()</span><br></pre></td></tr></table></figure><p>当服务器没被shutdown时，就会在while循环中用select去轮询活跃的socket，返回活跃的文件描述符，当检测到当前有可读事件时，就会调用<code>_handle_request_noblock</code>方法来处理socket：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_request</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> self.socket.accept()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_handle_request_noblock</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        request, client_address = self.get_request()</span><br><span class="line">    <span class="keyword">except</span> OSError:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> self.verify_request(request, client_address):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.process_request(request, client_address)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.handle_error(request, client_address)</span><br><span class="line">            self.shutdown_request(request)</span><br></pre></td></tr></table></figure><p>在<code>_handle_request_noblock</code>方法中，服务器拿到可读的socket（request），调用<em>process_request</em>方法来处理请求，当发生异常时调用<code>handle_error</code>处理错误，接着调用<code>shutdown_request</code>关闭请求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, client_address</span>):</span></span><br><span class="line">    self.finish_request(request, client_address)</span><br><span class="line">    self.shutdown_request(request)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">finish_request</span>(<span class="params">self, request, client_address</span>):</span></span><br><span class="line">    self.RequestHandlerClass(request, client_address, self)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shutdown_request</span>(<span class="params">self, request</span>):</span></span><br><span class="line">    self.close_request(request)</span><br></pre></td></tr></table></figure><p>最后来看<code>process_request</code>方法做了什么事情，首先它调用<code>finish_request</code>方法，实例化出一个<code>RequestHandlerClass</code>（请求处理类）来处理本次请求，处理完成后调用<code>shutdown_request</code>方法来结束请求。</p><p>看看<strong>UDPServer</strong>，几乎是换汤不换药，只修改了TCPServer的几个重要的参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UDPServer</span>(<span class="params">TCPServer</span>):</span></span><br><span class="line">    allow_reuse_address = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    socket_type = socket.SOCK_DGRAM</span><br><span class="line"></span><br><span class="line">    max_packet_size = <span class="number">8192</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_request</span>(<span class="params">self</span>):</span></span><br><span class="line">        data, client_addr = self.socket.recvfrom(self.max_packet_size)</span><br><span class="line">        <span class="keyword">return</span> (data, self.socket), client_addr</span><br></pre></td></tr></table></figure><p>服务器类差不多就这样了，再来看RequestHandler。</p><p>先看最原始的<strong>BaseRequestHandler</strong>类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseRequestHandler</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, request, client_address, server</span>):</span></span><br><span class="line">        self.request = request</span><br><span class="line">        self.client_address = client_address</span><br><span class="line">        self.server = server</span><br><span class="line">        self.setup()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.handle()</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self.finish()</span><br></pre></td></tr></table></figure><p>它接收一个请求(socket)作为参数，调用<code>self.setup()</code>建立用于读写的文件描述符，接着调用<code>self.handle()</code>来处理这次请求，最终调用<code>self.finish()</code>结束处理。</p><p>现在看<strong>StreamRequestHandler</strong>类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamRequestHandler</span>(<span class="params">BaseRequestHandler</span>):</span></span><br><span class="line">    rbufsize = -<span class="number">1</span></span><br><span class="line">    wbufsize = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    timeout = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    disable_nagle_algorithm = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.connection = self.request</span><br><span class="line">        <span class="keyword">if</span> self.timeout <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.connection.settimeout(self.timeout)</span><br><span class="line">        <span class="keyword">if</span> self.disable_nagle_algorithm:</span><br><span class="line">            self.connection.setsockopt(socket.IPPROTO_TCP,</span><br><span class="line">                                       socket.TCP_NODELAY, <span class="literal">True</span>)</span><br><span class="line">        self.rfile = self.connection.makefile(<span class="string">&#x27;rb&#x27;</span>, self.rbufsize)</span><br><span class="line">        self.wfile = self.connection.makefile(<span class="string">&#x27;wb&#x27;</span>, self.wbufsize)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">finish</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.wfile.closed:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.wfile.flush()</span><br><span class="line">            <span class="keyword">except</span> socket.error:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        self.wfile.close()</span><br><span class="line">        self.rfile.close()</span><br></pre></td></tr></table></figure><p>在<code>setup</code>过程为socket建立了一个用于读的文件描述符以及一个用于写的文件描述符，在<code>finish</code>的过程中会把写缓冲区刷新，关闭读写两个文件描述符。</p><p>从上面得知<code>handle</code>是处理请求的核心过程，在<strong>BaseHTTPRequestHandler</strong>中是这样实现的，handler会处理一个socket请求，如果该请求是断续请求而且没有超时或异常的话，就会继续处理下一个请求（例如keep-alive、大数据传输）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class BaseHTTPRequestHandler(socketserver.StreamRequestHandler):</span><br><span class="line">    def handle(self):</span><br><span class="line">        self.handle_one_request()</span><br><span class="line">        while not self.close_connection:</span><br><span class="line">            self.handle_one_request()</span><br></pre></td></tr></table></figure><p>其他部分太琐碎就不贴了，完成这一步后，服务器端就完成了一个来自客户端的请求的处理。</p><p>有的人还是可能觉得<strong>BaseHTTPRequestHandler</strong>和<strong>SimpleHTTPRequestHandler</strong>这类的处理类太挫太不灵活了，针对这个<code>http.server</code>模块还提供了一种处理类：<strong>CGIHTTPRequestHandler</strong>，它可以通过请求信息选择执行指向的cgi脚本。cgi虽然更灵活，但也有一些弊端，于是后面又有了各种方案：fastcgi、mod_python、wsgi…有兴趣的可以看<a href="https://link.zhihu.com/?target=https%3A//docs.python.org/3/howto/webservers.html">HOWTO Use Python in the web</a>。但在不复杂的情况下，这些自带的请求处理类也勉强够用了。</p><p>再谈到之前说的HTTPServer，在线上环境中一般没有人会这么傻，直接使用这个内置的HTTPServer的。因为它是单进程而且在请求的生命周期内都只能处理同一个请求，不过好在socketserver这个模块也提供了<strong>ThreadingMixIn</strong>以及<strong>ForkingMixIn</strong>，他们的目的是当一个请求到来时使用新建一个线程或一个进程去处理它。</p><p>使用方法十分简单，用<code>ThreadingMixIn</code>或<code>ForkingMixIn</code>与Server类组成混合类就行了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadingHTTPServer</span>(<span class="params">ThreadingMixIn, HTTPServer</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>通过ThreadingMixIn的源码确实可以看到它重写了<code>process_request</code>这个方法，它会覆盖混合类中Server类的<code>process_request</code>方法，当Server处理请求时就会调用到这个方法，在ThreadingMixIn的处理中，会新起一个线程来处理请求。这样一来，服务器的并发能力就比原来有了很大的提升了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadingMixIn</span>:</span></span><br><span class="line">    daemon_threads = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request_thread</span>(<span class="params">self, request, client_address</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.finish_request(request, client_address)</span><br><span class="line">            self.shutdown_request(request)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.handle_error(request, client_address)</span><br><span class="line">            self.shutdown_request(request)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, client_address</span>):</span></span><br><span class="line">        t = threading.Thread(target = self.process_request_thread,</span><br><span class="line">                             args = (request, client_address))</span><br><span class="line">        t.daemon = self.daemon_threads</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure><p>但有的人看到这里不一定会满意，一个请求一个线程，一百个请求一百个线程，一万个、十万个…还不得上天啊。在实际环境中，一般需要把线程控制在一定的数量内（例如线程池）以降低系统负载。</p><p>现在继续把目光转移到我们一开始讨论的socket上，再来扯IO模型的问题。</p><p>我们知道socket的输入需要两个阶段：</p><ol><li>等待数据准备好。</li><li>从内核向进程复制数据。</li></ol><p>因为等待的过程是阻塞式，所以我们上面使用多线程就是降低这个阻塞所带来的影响。</p><h3 id="五种IO模型：">五种IO模型：</h3><h4 id="阻塞IO模型"><strong>阻塞IO模型</strong></h4><p>recv-&gt;无数据报准备好-&gt;等待数据-&gt;数据报准备好-&gt;数据从内核复制到用户空间-&gt;复制完成-&gt;返回成功指示</p><p><strong>非阻塞IO模型</strong></p><p>recv-&gt;无数据报准备好-&gt;返回EWOULDBLOCK-&gt;recv-&gt;无数据报准备好-&gt;返回EWOULDBLOCK-&gt;数据报准备好-&gt;数据从内核复制到用户空间-&gt;复制完成-&gt;返回成功指示</p><p>特点：轮询操作，大量占用cpu时间。</p><h4 id="IO复用模型"><strong>IO复用模型</strong></h4><p>select-&gt;无数据报准备好-&gt;据报准备好-&gt;返回可读条件-&gt;recv-&gt;数据从内核复制到用户空间-&gt;复制完成-&gt;返回成功指示</p><h4 id="信号驱动模型"><strong>信号驱动模型</strong></h4><p>建立信号处理程序(sigaction)-&gt;递交SIGIO-&gt;recv-&gt;数据从内核复制到用户空间-&gt;复制完成-&gt;返回成功指示</p><h4 id="异步IO模型"><strong>异步IO模型</strong></h4><p>aio_read-&gt;无数据准备好-&gt;数据报准备好-&gt;数据从内核复制到用户空间-&gt;复制完成-&gt;递交aio_read中指定的信号</p><p>特点：直到数据复制完成产生信号的过程中进程都不被阻塞。</p><p>毫无疑问，我们从开始一直使用着阻塞的IO模型，这个效率是低下的。</p><p>为了获取更好的性能，我们一般采用IO多路复用模型，例如<em>select</em>和<em>poll</em>操作，运行进程同时检查多个文件描述符以找出它们任意一个是否可以进行IO操作，内核一旦发现进程指定的一个或多个IO条件就绪（输入准备被读取，或描述符能承接更多的输出），它就通知进程。</p><p>但前面说了<em>select</em>和<em>poll</em>有一个弊端就是他们在检查可用描述符的时候都是不断地遍历又遍历，当要监听的socket的文件描述符数量庞大时，性能会急剧下降，CPU消耗严重。</p><p>信号驱动模型比他们优越的地方在于，当有输入数据来到指定的文件描述符时，内核向请求数据的进程发送一个信号，进程可以处理其他任务，通过接收信号以获得通知。</p><p>而<em>epoll</em>则更进一步，用事件驱动的方式来监听fd，避免了信号处理的繁琐，在文件描述符上注册事件函数，由系统监视这些文件描述符，当在文件描述符可就绪时，内核通知应用进程。</p><p>在一些高并发的网络操作上，<em>epoll</em>的性能通常比<em>select</em>跟<em>poll</em>好几个数量级。</p><p>IO调用中有两个概念：</p><ul><li>水平触发：如果文件描述符可以非阻塞地进行io调用，此时认为他已经就绪）。（支持模型：select，poll，epoll等）</li><li>边缘触发：如果文件描述符自上次来的时候有了新的io活动（新的输入），触发通知。（支持模型：信号驱动，epoll等）</li></ul><p>在实际开发中要注意他们的区别，知道边缘触发为什么可能产生socket饥饿问题，怎么解决。</p><p>用一张图总结5个IO模型是这样的：</p><p><img src="6.png" alt=""></p><p>使用多路IO复用模型能有效提高网络编程的质量。</p><h3 id="HTTP"><strong>HTTP</strong></h3><p>现在再来看HTTP，<strong>HTTP是在TCP之上的无状态的协议，处于四层模型中的应用层，HTTP使用TCP来传输报文数据</strong>。</p><p>以浏览器输入一个网址打开为例，看HTTP的请求过程：</p><ol><li><strong>浏览器首先从URL中解析出主机名，端口等信息，URL的通用格式为：*://:@:/;?#*。</strong></li><li><strong>浏览器把主机名转换为IP地址（DNS）。</strong></li><li><strong>浏览器与服务器建立一条TCP连接。</strong></li><li><strong>浏览器在TCP连接上发送一条HTTP请求报文。</strong></li><li><strong>服务器在TCP连接上返回一条HTTP响应报文。</strong></li><li><strong>关闭连接，浏览器渲染文档。</strong></li></ol><p>HTTP的请求信息包括几个要素：</p><ol><li>请求行，例如*<strong>GET /index.html HTTP/1.1*</strong>，表示要请求index.html这个文件。</li><li>请求头（首部）。</li><li>空行。</li><li>消息体。</li></ol><p>例如在第一个例子中，我们向8000端口发起请求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1 （请求行）</span><br><span class="line">Host: 127.0.0.1:8000 （请求头）</span><br></pre></td></tr></table></figure><p>会得到以下回应：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.0 200 OK （响应行）</span><br><span class="line">Content-Length: 5252</span><br><span class="line">Content-type: text/html; charset=utf-8</span><br><span class="line">Date: Tue, 21 Feb 2017 08:36:01 GMT</span><br><span class="line">Server: SimpleHTTP/0.6 Python/3.4.5</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Directory listing for /&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Directory listing for /&lt;/h1&gt;</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>HTTP的关键之处在于它的首部，HTTP的首部信息决定了客户端和服务器端能做什么事情。</p><h4 id="HTTP状态码"><strong>HTTP状态码</strong></h4><blockquote><ul><li><a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%231xx.E6.B6.88.E6.81.AF">1xx消息</a>——请求已被服务器接收，继续处理</li><li><a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%232xx.E6.88.90.E5.8A.9F">2xx成功</a>——请求已成功被服务器接收、理解、并接受</li><li><a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%233xx.E9.87.8D.E5.AE.9A.E5.90.91">3xx重定向</a>——需要后续操作才能完成这一请求</li><li><a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%234xx.E8.AF.B7.E6.B1.82.E9.94.99.E8.AF.AF">4xx请求错误</a>——请求含有词法错误或者无法被执行</li><li><a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%235xx.E6.9C.8D.E5.8A.A1.E5.99.A8.E9.94.99.E8.AF.AF">5xx服务器错误</a>——服务器在处理某个正确请求时发生错误</li></ul></blockquote><h4 id="HTTP-DOM"><strong>HTTP &amp; DOM</strong></h4><p>DOM，又称Document Object Module，即文档对象模型。我们在写爬虫的时候通常都需要对html页面进行解析，这时候就需要dom解析器来对抓取的页面进行分析。</p><p>平时我们用lxml和BeautifulSoup用得爽了，但他们是怎么去解析html的呢？</p><p>在python的<em>html.parser</em>模块中就带了一个HTML解析器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> html.parser <span class="keyword">import</span> HTMLParser</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHTMLParser</span>(<span class="params">HTMLParser</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_starttag</span>(<span class="params">self, tag, attrs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Encountered a start tag:&quot;</span>, tag)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_endtag</span>(<span class="params">self, tag</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Encountered an end tag :&quot;</span>, tag)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_data</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Encountered some data  :&quot;</span>, data)</span><br><span class="line"></span><br><span class="line">parser = MyHTMLParser()</span><br><span class="line">parser.feed(<span class="string">&#x27;&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;&#x27;</span></span><br><span class="line">            <span class="string">&#x27;&lt;body&gt;&lt;h1&gt;Parse me!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&#x27;</span>)</span><br><span class="line"><span class="comment"># ------------------------------------------------------------------</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Encountered a start tag: html</span></span><br><span class="line"><span class="string">Encountered a start tag: head</span></span><br><span class="line"><span class="string">Encountered a start tag: title</span></span><br><span class="line"><span class="string">Encountered some data  : Test</span></span><br><span class="line"><span class="string">Encountered an end tag : title</span></span><br><span class="line"><span class="string">Encountered an end tag : head</span></span><br><span class="line"><span class="string">Encountered a start tag: body</span></span><br><span class="line"><span class="string">Encountered a start tag: h1</span></span><br><span class="line"><span class="string">Encountered some data  : Parse me!</span></span><br><span class="line"><span class="string">Encountered an end tag : h1</span></span><br><span class="line"><span class="string">Encountered an end tag : body</span></span><br><span class="line"><span class="string">Encountered an end tag : html</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>可以通过它的源码中来观察dom是如何被解析的。</p><h4 id="HTTP-RESTful"><strong>HTTP &amp; RESTful</strong></h4><p>推荐阅读：<a href="https://link.zhihu.com/?target=http%3A//blog.jobbole.com/41233/">RESTful API 设计最佳实践</a></p><h4 id="DNS"><strong>DNS</strong></h4><p>主机到IP的转换通常要经过DNS查询，DNS是一个庞大的分布式数据库，它将主机名组织在一个层级的空间中，一个节点的域名由该节点到根的路径所有节点组成的名字连接而成。</p><p><img src="7.png" alt=""></p><p>使用dnspython包可以方便地进行dns查询：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dns.resolver</span><br><span class="line"></span><br><span class="line">domain = <span class="string">&#x27;baidu.com&#x27;</span></span><br><span class="line">A = dns.resolver.query(domain, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> answer <span class="keyword">in</span> A.response.answer:</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> answer.items:</span><br><span class="line">        <span class="built_in">print</span>(item.address)</span><br></pre></td></tr></table></figure><h4 id="FTP"><strong>FTP</strong></h4><p>在python世界里，使用ftp非常简单，只需要使用内置的ftplib模块就可以使用ftp协议对远端机器进行操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ftplib <span class="keyword">import</span> FTP</span><br><span class="line"><span class="keyword">with</span> FTP(<span class="string">&quot;ftp1.at.proftpd.org&quot;</span>) <span class="keyword">as</span> ftp:</span><br><span class="line">    ftp.login()</span><br><span class="line">    ftp.<span class="built_in">dir</span>()</span><br><span class="line"><span class="string">&#x27;230 Anonymous login ok, restrictions apply.&#x27;</span></span><br><span class="line">dr-xr-xr-x   <span class="number">9</span> ftp      ftp           <span class="number">154</span> May  <span class="number">6</span> <span class="number">10</span>:<span class="number">43</span> .</span><br><span class="line">dr-xr-xr-x   <span class="number">9</span> ftp      ftp           <span class="number">154</span> May  <span class="number">6</span> <span class="number">10</span>:<span class="number">43</span> ..</span><br><span class="line">dr-xr-xr-x   <span class="number">5</span> ftp      ftp          <span class="number">4096</span> May  <span class="number">6</span> <span class="number">10</span>:<span class="number">43</span> CentOS</span><br><span class="line">dr-xr-xr-x   <span class="number">3</span> ftp      ftp            <span class="number">18</span> Jul <span class="number">10</span>  <span class="number">2008</span> Fedora</span><br></pre></td></tr></table></figure><h4 id="XML-RPC"><strong>XML-RPC</strong></h4><p>建立一个XML-RPC的服务器跟客户端同样很简单。</p><p>Server</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xmlrpc.server <span class="keyword">import</span> SimpleXMLRPCServer</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleService</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getData</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;42&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">currentTime</span>:</span></span><br><span class="line"><span class="meta">        @staticmethod</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">getCurrentTime</span>():</span></span><br><span class="line">            <span class="keyword">return</span> datetime.datetime.now()</span><br><span class="line"></span><br><span class="line">server = SimpleXMLRPCServer((<span class="string">&quot;localhost&quot;</span>, <span class="number">8000</span>))</span><br><span class="line">server.register_function(<span class="built_in">pow</span>)</span><br><span class="line">server.register_function(<span class="keyword">lambda</span> x,y: x+y, <span class="string">&#x27;add&#x27;</span>)</span><br><span class="line">server.register_instance(ExampleService(), allow_dotted_names=<span class="literal">True</span>)</span><br><span class="line">server.register_multicall_functions()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Serving XML-RPC on localhost port 8000&#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    server.serve_forever()</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nKeyboard interrupt received, exiting.&quot;</span>)</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>Client</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xmlrpc.client <span class="keyword">import</span> ServerProxy, MultiCall</span><br><span class="line">server = ServerProxy(<span class="string">&quot;http://localhost:8000&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(server.currentTime.getCurrentTime())</span><br><span class="line"><span class="keyword">except</span> Error <span class="keyword">as</span> v:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ERROR&quot;</span>, v)</span><br><span class="line"></span><br><span class="line">multi = MultiCall(server)</span><br><span class="line">multi.getData()</span><br><span class="line">multi.<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">9</span>)</span><br><span class="line">multi.add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> response <span class="keyword">in</span> multi():</span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line"><span class="keyword">except</span> Error <span class="keyword">as</span> v:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ERROR&quot;</span>, v)</span><br></pre></td></tr></table></figure><h1>参考：</h1><p><a href="https://www.liaoxuefeng.com/">廖雪峰的博客</a></p><p><a href="https://www.runoob.com/python3">菜鸟</a></p><p><a href="https://zhuanlan.zhihu.com/tonnie">知乎-四条鱼</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载与汇总 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法记录</title>
      <link href="/2022/01/11/basic-Python/"/>
      <url>/2022/01/11/basic-Python/</url>
      
        <content type="html"><![CDATA[<h1>前言：</h1><p>以前也闲得无聊看过一点Python，但是吧，平常用不上，渐渐就生疏了，也没怎么继续学下去，现在基本忘光了。现在准备入手OpenCV，拿Python版入手，稳妥起见先把以前看的一点Python拾遗补漏，记点记录以后忘了的话还可以翻翻看看，毕竟现在手头语言也不少了(java，dart，c++，JS)，时间长了难免有搞混的情况。</p><p>(这里吐槽一句，软院本科真的是在培养全沾工程师，（我的c++还好，js完全就是沾了沾，java也没有完全特别深入地去学，dart自学的，算得上是用的比较熟练的脚本语言）)。</p><h3 id="基于Python3！Python2已经逐渐成为过去式">基于Python3！Python2已经逐渐成为过去式</h3><h1>正文</h1><p><a href="https://zhuanlan.zhihu.com/p/41381773">Python学习资料/文章/指南整理</a></p><ul><li>引自<a href="https://zhuanlan.zhihu.com/tonnie">知乎-四条鱼</a></li></ul><h2 id="基本语法">基本语法</h2><ul><li><p>标识符</p><ul><li>第一个字符必须是字母表中字母或下划线 <strong>_</strong> 。</li><li>标识符的其他的部分由字母、数字和下划线组成。</li><li>标识符对大小写敏感。</li><li>可以中文变量名但不要这么做</li></ul></li><li><p><strong>使用缩进来表示代码块</strong></p><ul><li>类似<code>yaml</code>格式，缩进一般是4个空格</li></ul></li><li><p>多行语句</p><ul><li>使用反斜杠 \来实现多行语句</li><li>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠</li></ul></li><li><p>同一行显示多条语句</p><ul><li>Python 可以在同一行中使用多条语句，语句之间使用分号 <strong>;</strong> 分割</li><li>如<code>import sys; x = 'runoob'; sys.stdout.write(x + '\n')</code></li></ul></li><li><p>多个语句构成代码组</p><ul><li><p>缩进相同的一组语句构成一个代码块，我们称之代码组。</p><p>像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> expression : </span><br><span class="line">   suite</span><br><span class="line"><span class="keyword">elif</span> expression : </span><br><span class="line">   suite </span><br><span class="line"><span class="keyword">else</span> : </span><br><span class="line">   suite</span><br></pre></td></tr></table></figure></li></ul></li><li><p>不用任何符号结尾（除非在同一行显示）</p></li></ul><hr><h1>数据类型</h1><h2 id="注意：">注意：</h2><h3 id="变量声明">变量声明</h3><p><strong>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</strong></p><p>在 Python 中，变量就是变量，它没有类型，我们所说的&quot;类型&quot;是变量所指的内存中对象的类型。</p><h3 id="多变量赋值">多变量赋值</h3><p>允许同时为多个变量赋值，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = b = c = <span class="number">1</span></span><br><span class="line">或者</span><br><span class="line">a, b = <span class="number">1</span>, <span class="number">2</span></span><br></pre></td></tr></table></figure><hr><h2 id="组合数据类型">组合数据类型</h2><p>六个标准的数据类型：</p><ul><li>Number（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ul><p>其中：</p><ul><li>**不可变数据（3 个）：**Number（数字）、String（字符串）、Tuple（元组）；</li><li>**可变数据（3 个）：**List（列表）、Dictionary（字典）、Set（集合）。</li></ul><p>（Number与String不可变是因为Python不像Java那样存在数据类型的定义与调用，Python变量不需要声明，也就是说，如果你试图像java一样对变量重新赋值，编译器会认为你定义了一个重名变量）</p><h3 id="可变性">可变性</h3><p>对于可变对象，比如list，对list进行操作，list内部的内容是会变化的，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure><p>而对于不可变对象，比如str，对str进行操作呢：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.replace(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;Abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;abc&#x27;</span></span><br></pre></td></tr></table></figure><p>虽然字符串有个<code>replace()</code>方法，也确实变出了<code>'Abc'</code>，但变量<code>a</code>最后仍是<code>'abc'</code>，应该怎么理解呢？</p><p>我们先把代码改成下面这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a.replace(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">&#x27;Abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;abc&#x27;</span></span><br></pre></td></tr></table></figure><p>要始终牢记的是，<code>a</code>是变量，而<code>'abc'</code>才是字符串对象！有些时候，我们经常说，对象<code>a</code>的内容是<code>'abc'</code>，但其实是指，<code>a</code>本身是一个变量，它指向的对象的内容才是<code>'abc'</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌───┐                  ┌───────┐</span><br><span class="line">│ a │─────────────────&gt;│ &#x27;abc&#x27; │</span><br><span class="line">└───┘                  └───────┘</span><br></pre></td></tr></table></figure><p>当我们调用<code>a.replace('a', 'A')</code>时，实际上调用方法<code>replace</code>是作用在字符串对象<code>'abc'</code>上的，而这个方法虽然名字叫<code>replace</code>，但却没有改变字符串<code>'abc'</code>的内容。相反，<code>replace</code>方法创建了一个新字符串<code>'Abc'</code>并返回，如果我们用变量<code>b</code>指向该新字符串，就容易理解了，变量<code>a</code>仍指向原有的字符串<code>'abc'</code>，但变量<code>b</code>却指向新字符串<code>'Abc'</code>了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">┌───┐                  ┌───────┐</span><br><span class="line">│ a │─────────────────&gt;│ &#x27;abc&#x27; │</span><br><span class="line">└───┘                  └───────┘</span><br><span class="line">┌───┐                  ┌───────┐</span><br><span class="line">│ b │─────────────────&gt;│ &#x27;Abc&#x27; │</span><br><span class="line">└───┘                  └───────┘</span><br></pre></td></tr></table></figure><p>所以，对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的。</p><h3 id="Number（数字）">Number（数字）</h3><p>Python3 支持 <strong>int、float、bool、complex（复数）</strong>。</p><p>在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</p><h4 id="数值运算注意点：">数值运算注意点：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> / <span class="number">4</span>  <span class="comment"># 除法，得到一个浮点数</span></span><br><span class="line"><span class="number">0.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> // <span class="number">4</span> <span class="comment"># 除法，得到一个整数</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> ** <span class="number">5</span> <span class="comment"># 乘方</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure><p>Python的整数没有大小限制，而某些语言的整数根据其存储长度是有大小限制的，例如Java对32位整数的范围限制在<code>-2147483648</code>-<code>2147483647</code>。</p><p>Python的浮点数也没有大小限制，但是超出一定范围就直接表示为<code>inf</code>（无限大）。</p><h3 id="String（字符串）">String（字符串）</h3><p>Python中的字符串用单引号  ’ 或双引号 &quot; 括起来，同时使用反斜杠 \ 转义特殊字符。</p><h4 id="字符串的截取：">字符串的截取：</h4><p><img src="0.svg" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;Runoob&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span>)          <span class="comment"># 输出字符串</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span>[<span class="number">0</span>:-<span class="number">1</span>])    <span class="comment"># 输出第一个到倒数第二个的所有字符</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span>[<span class="number">0</span>])       <span class="comment"># 输出字符串第一个字符</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span>[<span class="number">2</span>:<span class="number">5</span>])     <span class="comment"># 输出从第三个开始到第五个的字符</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span>[<span class="number">2</span>:])      <span class="comment"># 输出从第三个开始的后的所有字符</span></span><br></pre></td></tr></table></figure><h4 id="字符串复制：">字符串复制：</h4><p>使用 <code>* </code>，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span> * <span class="number">2</span>)      <span class="comment"># 输出字符串两次，也可以写成 print (2 * str)</span></span><br><span class="line"><span class="comment"># RunoobRunoob</span></span><br></pre></td></tr></table></figure><p><strong>与 C 字符串不同的是，Python 字符串不能被改变。向一个索引位置赋值，比如word[0] = 'm’会导致错误。</strong></p><h3 id="List（列表）">List（列表）</h3><ul><li><p>列表中元素的类型可以不相同</p></li><li><p>列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p></li><li><p>内置函数基本跟java一致</p></li></ul><p><img src="1.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [ <span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span> ]</span><br><span class="line">tinylist = [<span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>)            <span class="comment"># 输出完整列表</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">0</span>])         <span class="comment"># 输出列表第一个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">1</span>:<span class="number">3</span>])       <span class="comment"># 从第二个开始输出到第三个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">2</span>:])        <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="built_in">print</span> (tinylist * <span class="number">2</span>)    <span class="comment"># 输出两次列表</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span> + tinylist) <span class="comment"># 连接列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [&#x27;abcd&#x27;, 786, 2.23, &#x27;runoob&#x27;, 70.2]</span></span><br><span class="line"><span class="comment"># abcd</span></span><br><span class="line"><span class="comment"># [786, 2.23]</span></span><br><span class="line"><span class="comment"># [2.23, &#x27;runoob&#x27;, 70.2]</span></span><br><span class="line"><span class="comment"># [123, &#x27;runoob&#x27;, 123, &#x27;runoob&#x27;]</span></span><br><span class="line"><span class="comment"># [&#x27;abcd&#x27;, 786, 2.23, &#x27;runoob&#x27;, 70.2, 123, &#x27;runoob&#x27;]</span></span><br></pre></td></tr></table></figure><p><strong>另</strong>：</p><p>Python 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串：</p><p><img src="2.png" alt=""></p><p>如果第三个参数为负数表示逆向读取，以下实例用于翻转字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseWords</span>(<span class="params"><span class="built_in">input</span></span>):</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment"># 通过空格将字符串分隔符，把各个单词分隔为列表</span></span><br><span class="line">    inputWords = <span class="built_in">input</span>.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 翻转字符串</span></span><br><span class="line">    <span class="comment"># 假设列表 list = [1,2,3,4],  </span></span><br><span class="line">    <span class="comment"># list[0]=1, list[1]=2 ，而 -1 表示最后一个元素 list[-1]=4 ( 与 list[3]=4 一样)</span></span><br><span class="line">    <span class="comment"># inputWords[-1::-1] 有三个参数</span></span><br><span class="line">    <span class="comment"># 第一个参数 -1 表示最后一个元素</span></span><br><span class="line">    <span class="comment"># 第二个参数为空，表示移动到列表末尾</span></span><br><span class="line">    <span class="comment"># 第三个参数为步长，-1 表示逆向</span></span><br><span class="line">    inputWords=inputWords[-<span class="number">1</span>::-<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 重新组合字符串</span></span><br><span class="line">    output = <span class="string">&#x27; &#x27;</span>.join(inputWords)</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">input</span> = <span class="string">&#x27;I like runoob&#x27;</span></span><br><span class="line">    rw = reverseWords(<span class="built_in">input</span>)</span><br><span class="line">    <span class="built_in">print</span>(rw)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runoob like I</span><br></pre></td></tr></table></figure><h3 id="Tuple（元组）">Tuple（元组）</h3><p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。</p><p><strong>不可变的tuple有什么意义？因为tuple不可变，所以代码更安全。</strong></p><p><strong>元组写在小括号 () 里，不过小括号可以省略</strong>，元素之间用逗号隔开。但是打印元组时会将括号打印出来。</p><p><strong>元组中的元素类型也可以不相同</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tuple</span> = ( <span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>  )</span><br><span class="line">tinytuple = (<span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>)             <span class="comment"># 输出完整元组</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">0</span>])          <span class="comment"># 输出元组的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">1</span>:<span class="number">3</span>])        <span class="comment"># 输出从第二个元素开始到第三个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">2</span>:])         <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="built_in">print</span> (tinytuple * <span class="number">2</span>)     <span class="comment"># 输出两次元组</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span> + tinytuple) <span class="comment"># 连接元组</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span>, <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>)</span><br><span class="line">abcd</span><br><span class="line">(<span class="number">786</span>, <span class="number">2.23</span>)</span><br><span class="line">(<span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>)</span><br><span class="line">(<span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span>, <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>, <span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li><p>1、与字符串一样，元组的元素不能修改。</p></li><li><p>2、元组也可以被索引和切片，方法一样。</p></li><li><p>3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tup1 = ()    <span class="comment"># 空元组</span></span><br><span class="line">tup2 = (<span class="number">20</span>,) <span class="comment"># 一个元素，需要在元素后添加逗号</span></span><br></pre></td></tr></table></figure></li><li><p>4、元组也可以使用+操作符进行拼接。</p></li></ul><h3 id="Set（集合）">Set（集合）</h3><p>无序，不可重复</p><p>可以使用大括号 <strong>{ }</strong> 或者 <strong>set()</strong> 函数创建集合，注意：创建一个空集合必须用 <strong>set()</strong> 而不是 <strong>{ }</strong>，因为 <strong>{ }</strong> 是用来创建一个空字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sites = &#123;<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>, <span class="string">&#x27;Zhihu&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sites)   <span class="comment"># 输出集合，重复的元素被自动去掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 成员测试</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;Runoob&#x27;</span> <span class="keyword">in</span> sites :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Runoob 在集合中&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Runoob 不在集合中&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># set可以进行集合运算</span></span><br><span class="line">a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a - b)     <span class="comment"># a 和 b 的差集</span></span><br><span class="line"><span class="built_in">print</span>(a | b)     <span class="comment"># a 和 b 的并集</span></span><br><span class="line"><span class="built_in">print</span>(a &amp; b)     <span class="comment"># a 和 b 的交集</span></span><br><span class="line"><span class="built_in">print</span>(a ^ b)     <span class="comment"># a 和 b 中不同时存在的元素</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Zhihu&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>&#125;</span><br><span class="line">Runoob 在集合中</span><br><span class="line">&#123;<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>还有一些封装好的函数：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>S.add(x)</td><td>若x不在集合中，则加入</td></tr><tr><td>S.clear()</td><td>清空集合</td></tr><tr><td>S.copy()</td><td>返回S的一个副本</td></tr><tr><td>S.pop()</td><td>随机返回S内的一个元素**（并将集合内该元素删除）**</td></tr><tr><td>S.discard(x)</td><td>若x在S内，删除。不存在则不报错</td></tr><tr><td>S.remove(x)</td><td>若x在S内，删除。不存在则报错</td></tr><tr><td>S.isdisjoint(T)</td><td>S与T两集合无相同元素则返回true</td></tr><tr><td>len(S)</td><td></td></tr><tr><td>x in S</td><td></td></tr><tr><td>x not in S</td><td></td></tr></tbody></table><h3 id="Dictionary（字典）">Dictionary（字典）</h3><p>相当于java的map</p><p>字典是一种映射类型，字典用 <strong>{ }</strong> 标识，它是一个无序的 <strong>键(key) : 值(value)</strong> 的集合。</p><p>键(key)必须使用不可变类型。在同一个字典中，键(key)必须是唯一的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dicts = &#123;&#125;</span><br><span class="line">dicts[<span class="string">&#x27;one&#x27;</span>] = <span class="string">&quot;1 - 菜鸟教程&quot;</span></span><br><span class="line">dicts[<span class="number">2</span>] = <span class="string">&quot;2 - 菜鸟工具&quot;</span></span><br><span class="line"></span><br><span class="line">tinydict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>,<span class="string">&#x27;code&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;site&#x27;</span>: <span class="string">&#x27;www.runoob.com&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (dicts[<span class="string">&#x27;one&#x27;</span>])       <span class="comment"># 输出键为 &#x27;one&#x27; 的值</span></span><br><span class="line"><span class="built_in">print</span> (dicts[<span class="number">2</span>])           <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="built_in">print</span> (tinydict)          <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="built_in">print</span> (tinydict.keys())   <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="built_in">print</span> (tinydict.values()) <span class="comment"># 输出所有值</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> - 菜鸟教程</span><br><span class="line"><span class="number">2</span> - 菜鸟工具</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;site&#x27;</span>: <span class="string">&#x27;www.runoob.com&#x27;</span>&#125;</span><br><span class="line">dict_keys([<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;site&#x27;</span>])</span><br><span class="line">dict_values([<span class="string">&#x27;runoob&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>])</span><br></pre></td></tr></table></figure><p>构造函数 dict() 可以直接从键值对序列中构建字典,如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dict</span>([(<span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;Google&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;Taobao&#x27;</span>, <span class="number">3</span>)])</span><br><span class="line"><span class="comment"># &#123;&#x27;Runoob&#x27;: 1, &#x27;Google&#x27;: 2, &#x27;Taobao&#x27;: 3&#125;</span></span><br><span class="line">&#123;x: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)&#125;</span><br><span class="line"><span class="comment"># &#123;2: 4, 4: 16, 6: 36&#125;</span></span><br><span class="line"><span class="built_in">dict</span>(Runoob=<span class="number">1</span>, Google=<span class="number">2</span>, Taobao=<span class="number">3</span>)</span><br><span class="line"><span class="comment"># &#123;&#x27;Runoob&#x27;: 1, &#x27;Google&#x27;: 2, &#x27;Taobao&#x27;: 3&#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li>字典的关键字必须为不可变类型，且不能重复。</li><li>创建空字典使用 <strong>{ }</strong>。</li><li>还有一些内置的函数，例如clear()、keys()、values()等。</li></ul><p>和list比较，dict有以下几个特点：</p><blockquote><ol><li>查找和插入的速度极快，不会随着key的增加而变慢；</li><li>需要占用大量的内存，内存浪费多。</li></ol></blockquote><p>而list相反：</p><blockquote><ol><li>查找和插入的时间随着元素的增加而增加；</li><li>占用空间小，浪费内存很少。</li></ol></blockquote><p>所以，dict是用空间来换取时间的一种方法。</p><p>dict可以用在需要高速查找的很多地方，在Python代码中几乎无处不在，正确使用dict非常重要，需要牢记的第一条就是dict的key必须是<strong>不可变对象</strong>。</p><p>这是因为dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完全混乱了。这个通过key计算位置的算法是哈希算法（Hash）。</p><p>要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key。</p><hr><h2 id="其他基本数据类型">其他基本数据类型</h2><h4 id="布尔值">布尔值</h4><p>布尔值和布尔代数的表示完全一致，一个布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>，在Python中，可以直接用<code>True</code>、<code>False</code>表示布尔值（请注意大小写），也可以通过布尔运算计算出来</p><p>布尔值可以用（与）<code>and</code>、（或）<code>or</code>和（非）<code>not</code>运算。</p><h4 id="空值">空值</h4><p>空值是Python里一个特殊的值，用<code>None</code>表示。<code>None</code>不能理解为<code>0</code>，因为<code>0</code>是有意义的，而<code>None</code>是一个特殊的空值。</p><p>可以理解为java的null</p><hr><h2 id="数据类型转换">数据类型转换</h2><h3 id="内置的转换函数">内置的转换函数</h3><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">int(x [,base])</td><td style="text-align:left">将x转换为一个整数</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-float.html">float(x)</a></td><td style="text-align:left">将x转换到一个浮点数</td></tr><tr><td style="text-align:left">complex(real [,imag])</td><td style="text-align:left">创建一个复数</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-str.html">str(x)</a></td><td style="text-align:left">将对象 x 转换为字符串</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-repr.html">repr(x)</a></td><td style="text-align:left">将对象 x 转换为表达式字符串</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-eval.html">eval(str)</a></td><td style="text-align:left">用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-tuple.html">tuple(s)</a></td><td style="text-align:left">将序列 s 转换为一个元组</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-list-list.html">list(s)</a></td><td style="text-align:left">将序列 s 转换为一个列表</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-set.html">set(s)</a></td><td style="text-align:left">转换为可变集合</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-dict.html">dict(d)</a></td><td style="text-align:left">创建一个字典。d 必须是一个 (key, value)元组序列。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-frozenset.html">frozenset(s)</a></td><td style="text-align:left">转换为不可变集合</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-chr.html">chr(x)</a></td><td style="text-align:left">将一个整数转换为一个字符</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-ord.html">ord(x)</a></td><td style="text-align:left">将一个字符转换为它的整数值</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-hex.html">hex(x)</a></td><td style="text-align:left">将一个整数转换为一个十六进制字符串</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-oct.html">oct(x)</a></td><td style="text-align:left">将一个整数转换为一个八进制字符串</td></tr></tbody></table><hr><h1>函数</h1><h2 id="定义一个函数">定义一个函数</h2><p>你可以定义一个由自己想要功能的函数，以下是简单的规则：</p><ul><li>函数代码块以 <strong>def</strong> 关键词开头，后接函数标识符名称和圆括号 <strong>()</strong>。</li><li>任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。</li><li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li><li>函数内容以冒号 <strong>:</strong> 起始，并且缩进。</li><li><strong>return [表达式]</strong> 结束函数，选择性地返回一个值给调用方，不带表达式的 return 相当于返回 None。</li></ul><p><img src="3.png" alt=""></p><h2 id="函数参数">函数参数</h2><h3 id="传递方式：">传递方式：</h3><p>python 函数的参数传递：</p><ul><li><strong>不可变类型</strong>：类似 C++ 的值传递，如整数、字符串、元组。如 fun(a)，传递的只是 a 的值，没有影响 a 对象本身。如果在 fun(a) 内部修改 a 的值，则是新生成一个 a 的对象。</li><li><strong>可变类型</strong>：类似 C++ 的引用传递，如 列表，字典。如 fun(la)，则是将 la 真正的传过去，修改后 fun 外部的 la 也会受影响</li></ul><p><strong>python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。</strong></p><hr><h3 id="参数类型：">参数类型：</h3><p>除必须参数（就是正常写在参数列表里的参数）外，还有其他参数类型</p><h4 id="关键字参数">关键字参数</h4><p>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。</p><p><strong>使用关键字参数允许函数调用时参数的顺序与声明时不一致</strong>，因为 Python 解释器能够用参数名匹配参数值。</p><p>以下实例在函数 printme() 调用时使用参数名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printme</span>(<span class="params"> <span class="built_in">str</span> </span>):</span></span><br><span class="line">   <span class="string">&quot;打印任何传入的字符串&quot;</span></span><br><span class="line">   <span class="built_in">print</span> (<span class="built_in">str</span>)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#调用printme函数</span></span><br><span class="line">printme( <span class="built_in">str</span> = <span class="string">&quot;菜鸟教程&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="默认参数">默认参数</h4><p>调用函数时，如果没有传递参数，则会使用默认参数。以下实例中如果没有传入 age 参数，则使用默认值：</p><p><strong>定义默认参数要牢记一点：默认参数必须指向不变对象！</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printinfo</span>(<span class="params"> name, age = <span class="number">35</span> </span>):</span></span><br><span class="line">   <span class="string">&quot;打印任何传入的字符串&quot;</span></span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;名字: &quot;</span>, name)</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;年龄: &quot;</span>, age)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#调用printinfo函数</span></span><br><span class="line">printinfo(age=<span class="number">50</span>, name=<span class="string">&quot;runoob&quot;</span> )</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;------------------------&quot;</span>)</span><br><span class="line">printinfo( name=<span class="string">&quot;runoob&quot;</span> )</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">名字:  runoob</span><br><span class="line">年龄:  <span class="number">50</span></span><br><span class="line">------------------------</span><br><span class="line">名字:  runoob</span><br><span class="line">年龄:  <span class="number">35</span></span><br></pre></td></tr></table></figure><h4 id="不定长参数">不定长参数</h4><p>你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，在参数列表中写的时候要在变量前加上<code>*</code>，并且只能放在参数列表的最后。</p><p>加了星号<code>*</code>的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printinfo</span>(<span class="params"> arg1, *vartuple </span>):</span></span><br><span class="line">   <span class="string">&quot;打印任何传入的参数&quot;</span></span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;输出: &quot;</span>)</span><br><span class="line">   <span class="built_in">print</span> (arg1)</span><br><span class="line">   <span class="built_in">print</span> (vartuple)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用printinfo 函数</span></span><br><span class="line">printinfo( <span class="number">70</span>, <span class="number">60</span>, <span class="number">50</span> )</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出: </span><br><span class="line"><span class="number">70</span></span><br><span class="line">(<span class="number">60</span>, <span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>还有一种就是参数带两个星号 <code>**</code>，加了两个星号 <code>**</code>的参数会以字典的形式导入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printinfo</span>(<span class="params"> arg1, **vardict </span>):</span></span><br><span class="line">   <span class="string">&quot;打印任何传入的参数&quot;</span></span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;输出: &quot;</span>)</span><br><span class="line">   <span class="built_in">print</span> (arg1)</span><br><span class="line">   <span class="built_in">print</span> (vardict)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用printinfo 函数</span></span><br><span class="line">printinfo(<span class="number">1</span>, a=<span class="number">2</span>,b=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出: </span><br><span class="line"><span class="number">1</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="空函数与占位符">空函数与占位符</h2><p>如果想定义一个什么事也不做的空函数，可以用<code>pass</code>语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>pass</code>语句什么都不做，那有什么用？实际上<code>pass</code>可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个<code>pass</code>，让代码能运行起来。</p><p><code>pass</code>还可以用在其他语句里，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="keyword">pass</span>缺少了`<span class="keyword">pass</span>`，代码运行就会有语法错误。</span><br></pre></td></tr></table></figure><hr><h2 id="返回多个值">返回多个值</h2><p>函数可以返回多个值吗？答案是肯定的。</p><p>比如在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的坐标：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">x, y, step, angle=<span class="number">0</span></span>):</span></span><br><span class="line">    nx = x + step * math.cos(angle)</span><br><span class="line">    ny = y - step * math.sin(angle)</span><br><span class="line">    <span class="keyword">return</span> nx, ny</span><br></pre></td></tr></table></figure><p><code>import math</code>语句表示导入<code>math</code>包，并允许后续代码引用<code>math</code>包里的<code>sin</code>、<code>cos</code>等函数。</p><p>然后，我们就可以同时获得返回值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(x, y)</span><br><span class="line"><span class="number">151.96152422706632</span> <span class="number">70.0</span></span><br></pre></td></tr></table></figure><p>但其实这只是一种假象，Python函数返回的仍然是单一值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(r)</span><br><span class="line">(<span class="number">151.96152422706632</span>, <span class="number">70.0</span>)</span><br></pre></td></tr></table></figure><p>原来返回值是一个tuple！但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回一个tuple，但写起来更方便。</p><hr><h1>迭代器、列表生成式与生成器</h1><h2 id="迭代器">迭代器</h2><p>迭代是Python最强大的功能之一，是访问集合元素的一种方式。</p><p>迭代器是一个可以记住遍历的位置的对象。</p><p>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p><p>迭代器有两个基本的方法：<strong>iter()</strong> 和 <strong>next()</strong>。</p><p>字符串，字典，列表或元组对象都可用于创建迭代器，只要是可迭代对象，无论有无下标，都可以迭代</p><h3 id="for循环迭代">for循环迭代</h3><p>比如<code>dict</code>就可以迭代：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(key)</span><br><span class="line">...</span><br><span class="line">a</span><br><span class="line">c</span><br><span class="line">b</span><br></pre></td></tr></table></figure><p>因为<code>dict</code>的存储不是按照<code>list</code>的方式顺序排列，所以，迭代出的结果顺序很可能不一样。</p><p>默认情况下，<code>dict</code>迭代的是key。如果要迭代value，可以用<code>for value in d.values()</code>，如果要同时迭代key和value，可以用<code>for k, v in d.items()</code>。</p><p>由于字符串也是可迭代对象，因此，也可以作用于<code>for</code>循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> ch <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(ch)</span><br><span class="line">...</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">C</span><br></pre></td></tr></table></figure><p>所以，<strong>当我们使用<code>for</code>循环时，只要作用于一个可迭代对象，<code>for</code>循环就可以正常运行，而我们不太关心该对象究竟是<code>list</code>还是其他数据类型。</strong></p><p>那么，如何判断一个对象是可迭代对象呢？方法是通过<code>collections.abc</code>模块的<code>Iterable</code>类型判断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="string">&#x27;abc&#x27;</span>, Iterable) <span class="comment"># str是否可迭代</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], Iterable) <span class="comment"># list是否可迭代</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(<span class="number">123</span>, Iterable) <span class="comment"># 整数是否可迭代</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>最后一个小问题，如果要对<code>list</code>实现类似Java那样的下标循环怎么办？<strong>Python内置的<code>enumerate</code>函数可以把一个<code>list</code>变成索引-元素对</strong>，这样就可以在<code>for</code>循环中同时迭代索引和元素本身：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, value <span class="keyword">in</span> <span class="built_in">enumerate</span>([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i, value)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span> A</span><br><span class="line"><span class="number">1</span> B</span><br><span class="line"><span class="number">2</span> C</span><br></pre></td></tr></table></figure><p>上面的<code>for</code>循环里，同时引用了两个变量，在Python里是很常见的，比如下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x, y <span class="keyword">in</span> [(<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">9</span>)]:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(x, y)</span><br><span class="line">...</span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">3</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><h3 id="迭代器迭代">迭代器迭代</h3><blockquote><p>迭代器对象可以使用常规for语句进行遍历：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>it = <span class="built_in">iter</span>(<span class="built_in">list</span>)    <span class="comment"># 创建迭代器对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (<span class="built_in">next</span>(it))   <span class="comment"># 输出迭代器的下一个元素</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (<span class="built_in">next</span>(it))</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>执行以上程序，输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4</span><br></pre></td></tr></table></figure><blockquote><p>也可以使用 next() 函数：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">it = <span class="built_in">iter</span>(<span class="built_in">list</span>)    <span class="comment"># 创建迭代器对象</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> it:</span><br><span class="line">    <span class="built_in">print</span> (x, end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><p>执行以上程序，输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="创建一个迭代器">创建一个迭代器</h4><p>把一个类作为一个迭代器使用需要在类中实现两个方法 <code>__iter__()</code> 与<code>__next__()</code>。</p><p>如果你已经了解的面向对象编程，就知道类都有一个构造函数，Python 的构造函数为 <code>__init__()</code>, 它会在对象初始化的时候执行。<code>__iter__() </code>方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 <code>__next__() </code>方法并通过 StopIteration 异常标识迭代的完成。<code>__next__() </code>方法会返回下一个迭代器对象。</p><p>创建一个返回数字的迭代器，初始值为 1，逐步递增 1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNumbers</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">    self.a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> self</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">    x = self.a</span><br><span class="line">    self.a += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"> </span><br><span class="line">myclass = MyNumbers()</span><br><span class="line">myiter = <span class="built_in">iter</span>(myclass)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myiter))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myiter))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myiter))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myiter))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myiter))</span><br></pre></td></tr></table></figure><p>执行输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="StopIteration">StopIteration</h4><p>StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在<code>__next__()</code>方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。</p><p>在 20 次迭代后停止执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNumbers</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">    self.a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> self</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">if</span> self.a &lt;= <span class="number">20</span>:</span><br><span class="line">      x = self.a</span><br><span class="line">      self.a += <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">raise</span> StopIteration</span><br><span class="line"> </span><br><span class="line">myclass = MyNumbers()</span><br><span class="line">myiter = <span class="built_in">iter</span>(myclass)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> myiter:</span><br><span class="line">  <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p>执行输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td></tr></table></figure><hr><h2 id="列表生成式">列表生成式</h2><p>列表生成式即List Comprehensions，是Python内置的非常简单却强大的可以用来创建list的生成式。</p><p>举个例子，要生成list <code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code>可以用<code>list(range(1, 11))</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><p>但如果要生成<code>[1x1, 2x2, 3x3, ..., 10x10]</code>怎么做？方法一是循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">   L.append(x * x)</span><br><span class="line">L</span><br><span class="line"><span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br></pre></td></tr></table></figure><p>但是循环太繁琐，而列表生成式则可以用一行语句代替循环生成上面的list：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line"><span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br></pre></td></tr></table></figure><p><strong>写列表生成式时，把要生成的元素<code>x * x</code>放到前面，后面跟<code>for</code>循环</strong>，就可以把list创建出来，十分有用，多写几次，很快就可以熟悉这种语法。</p><p><strong>for循环后面还可以加上if判断</strong>，这样我们就可以筛选出仅偶数的平方：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="comment"># [4, 16, 36, 64, 100]</span></span><br></pre></td></tr></table></figure><p><strong>还可以使用两层循环，可以生成全排列</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">&#x27;XYZ&#x27;</span>]</span><br><span class="line"><span class="comment"># [&#x27;AX&#x27;, &#x27;AY&#x27;, &#x27;AZ&#x27;, &#x27;BX&#x27;, &#x27;BY&#x27;, &#x27;BZ&#x27;, &#x27;CX&#x27;, &#x27;CY&#x27;, &#x27;CZ&#x27;]</span></span><br></pre></td></tr></table></figure><p>三层和三层以上的循环就很少用到了。</p><p>运用列表生成式，可以写出非常简洁的代码。例如，列出当前目录下的所有文件和目录名，可以通过一行代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os <span class="comment"># 导入os模块，模块的概念后面讲到</span></span><br><span class="line">[d <span class="keyword">for</span> d <span class="keyword">in</span> os.listdir(<span class="string">&#x27;.&#x27;</span>)] <span class="comment"># os.listdir可以列出文件和目录</span></span><br><span class="line"><span class="comment"># [&#x27;.emacs.d&#x27;, &#x27;.ssh&#x27;, &#x27;.Trash&#x27;, &#x27;Adlm&#x27;, &#x27;Applications&#x27;, &#x27;Desktop&#x27;, &#x27;Documents&#x27;, &#x27;Downloads&#x27;, &#x27;Library&#x27;, &#x27;Movies&#x27;, &#x27;Music&#x27;, &#x27;Pictures&#x27;, &#x27;Public&#x27;, &#x27;VirtualBox VMs&#x27;, &#x27;Workspace&#x27;, &#x27;XCode&#x27;]</span></span><br></pre></td></tr></table></figure><p><code>for</code>循环其实可以同时使用两个甚至多个变量，比如<code>dict</code>的<code>items()</code>可以同时迭代key和value：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;y&#x27;</span>: <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;z&#x27;</span>: <span class="string">&#x27;C&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items():</span><br><span class="line">    <span class="built_in">print</span>(k, <span class="string">&#x27;=&#x27;</span>, v)</span><br><span class="line">...</span><br><span class="line"><span class="comment"># y = B</span></span><br><span class="line"><span class="comment"># x = A</span></span><br><span class="line"><span class="comment"># z = C</span></span><br></pre></td></tr></table></figure><p>因此，列表生成式也可以使用两个变量来生成list：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;y&#x27;</span>: <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;z&#x27;</span>: <span class="string">&#x27;C&#x27;</span> &#125;</span><br><span class="line">[k + <span class="string">&#x27;=&#x27;</span> + v <span class="keyword">for</span> k, v <span class="keyword">in</span> d.items()]</span><br><span class="line"><span class="comment"># [&#x27;y=B&#x27;, &#x27;x=A&#x27;, &#x27;z=C&#x27;]</span></span><br></pre></td></tr></table></figure><p>最后把一个list中所有的字符串变成小写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;World&#x27;</span>, <span class="string">&#x27;IBM&#x27;</span>, <span class="string">&#x27;Apple&#x27;</span>]</span><br><span class="line">[s.lower() <span class="keyword">for</span> s <span class="keyword">in</span> L]</span><br><span class="line"><span class="comment"># [&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;ibm&#x27;, &#x27;apple&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="if-…-else">if … else</h3><p>使用列表生成式的时候，有些童鞋经常搞不清楚<code>if...else</code>的用法。</p><p>例如，以下代码正常输出偶数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="comment"># [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><p><strong>但是，我们不能在最后的<code>if</code>加上<code>else</code></strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>]</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">    [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>]</span><br><span class="line">                                              ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><p>这是因为跟在<code>for</code>后面的<code>if</code>是一个筛选条件，不能带<code>else</code>，否则如何筛选？</p><p>另一些童鞋发现<strong>把<code>if</code>写在<code>for</code>前面必须加<code>else</code>，否则报错</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[x <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">    [x <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">                       ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><p><strong>这是因为<code>for</code>前面的部分是一个表达式，它必须根据<code>x</code>计算出一个结果</strong>。因此，考察表达式：<code>x if x % 2 == 0</code>，它无法根据<code>x</code>计算出结果，因为缺少<code>else</code>，必须加上<code>else</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[x <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> -x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line"><span class="comment"># [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]</span></span><br></pre></td></tr></table></figure><p>上述<code>for</code>前面的表达式<code>x if x % 2 == 0 else -x</code>才能根据<code>x</code>计算出确定的结果。</p><p>可见，<strong>在一个列表生成式中，<code>for</code>前面的<code>if ... else</code>是表达式，而<code>for</code>后面的<code>if</code>是过滤条件，不能带<code>else</code></strong>。</p><hr><h2 id="生成器">生成器</h2><p>通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p><p>所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。</p><p>要创建一个generator，有很多种方法。第一种方法很简单，<strong>只要把一个列表生成式的<code>[]</code>改成<code>()</code>，就创建了一个generator：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">L = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(L)</span><br><span class="line"><span class="comment"># [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br><span class="line">g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(g)</span><br><span class="line"><span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x1022ef630&gt;</span></span><br></pre></td></tr></table></figure><p><strong>创建<code>L</code>和<code>g</code>的区别仅在于最外层的<code>[]</code>和<code>()</code>，<code>L</code>是一个list，而<code>g</code>是一个generator。</strong></p><p>我们可以直接打印出list的每一个元素，但我们怎么打印出generator的每一个元素呢？</p><p>如果要一个一个打印出来，可以通过<code>next()</code>函数获得generator的下一个返回值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(g)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(g)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(g)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(g)</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(g)</span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(g)</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(g)</span><br><span class="line"><span class="number">36</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(g)</span><br><span class="line"><span class="number">49</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(g)</span><br><span class="line"><span class="number">64</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(g)</span><br><span class="line"><span class="number">81</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(g)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p>我们讲过，generator保存的是算法，每次调用<code>next(g)</code>，就计算出<code>g</code>的下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出<code>StopIteration</code>的错误。</p><p>当然，上面这种不断调用<code>next(g)</code>实在是太变态了，正确的方法是使用<code>for</code>循环，因为generator也是可迭代对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> n <span class="keyword">in</span> g:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(n)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">36</span></span><br><span class="line"><span class="number">49</span></span><br><span class="line"><span class="number">64</span></span><br><span class="line"><span class="number">81</span></span><br></pre></td></tr></table></figure><p><strong>所以，我们创建了一个generator后，基本上永远不会调用<code>next()</code>，而是通过<code>for</code>循环来迭代它，并且不需要关心<code>StopIteration</code>的错误。</strong></p><p>generator非常强大。如果推算的算法比较复杂，用类似列表生成式的<code>for</code>循环无法实现的时候，还可以用函数来实现。</p><p>比如，著名的斐波拉契数列（Fibonacci），除第一个和第二个数外，任意一个数都可由前两个数相加得到：</p><p>1, 1, 2, 3, 5, 8, 13, 21, 34, …</p><p>斐波拉契数列用列表生成式写不出来，但是，用函数把它打印出来却很容易：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params"><span class="built_in">max</span></span>):</span></span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="built_in">max</span>:</span><br><span class="line">        <span class="built_in">print</span>(b)</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br></pre></td></tr></table></figure><p>注意，赋值语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b = b, a + b</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = (b, a + b) <span class="comment"># t是一个tuple</span></span><br><span class="line">a = t[<span class="number">0</span>]</span><br><span class="line">b = t[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>但不必显式写出临时变量t就可以赋值。</p><p>上面的函数可以输出斐波那契数列的前N个数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fib(<span class="number">6</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="string">&#x27;done&#x27;</span></span><br></pre></td></tr></table></figure><p>仔细观察，可以看出，<code>fib</code>函数实际上是定义了斐波拉契数列的推算规则，可以从第一个元素开始，推算出后续任意的元素，这种逻辑其实非常类似generator。</p><p>也就是说，上面的函数和generator仅一步之遥。要把<code>fib</code>函数变成generator函数，只需要把<code>print(b)</code>改为<code>yield b</code>就可以了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params"><span class="built_in">max</span></span>):</span></span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="built_in">max</span>:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>这就是定义generator的另一种方法。如果一个函数定义中包含<code>yield</code>关键字，那么这个函数就不再是一个普通函数，而是一个generator函数，调用一个generator函数将返回一个generator：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = fib(<span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f</span><br><span class="line">&lt;generator <span class="built_in">object</span> fib at <span class="number">0x104feaaa0</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>这里，最难理解的就是generator函数和普通函数的执行流程不一样。普通函数是顺序执行，遇到<code>return</code>语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用<code>next()</code>的时候执行，遇到<code>yield</code>语句返回，再次执行时从上次返回的<code>yield</code>语句处继续执行。</strong></p><p>举个简单的例子，定义一个generator函数，依次返回数字1，3，5：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;step 1&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;step 2&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;step 3&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span>(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>调用该generator函数时，首先要生成一个generator对象，然后用<code>next()</code>函数不断获得下一个返回值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>o = odd()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(o)</span><br><span class="line">step <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(o)</span><br><span class="line">step <span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(o)</span><br><span class="line">step <span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(o)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p>可以看到，<code>odd</code>不是普通函数，而是generator函数，在执行过程中，遇到<code>yield</code>就中断，下次又继续执行。执行3次<code>yield</code>后，已经没有<code>yield</code>可以执行了，所以，第4次调用<code>next(o)</code>就报错。</p><p><strong>请务必注意：调用generator函数会创建一个generator对象，多次调用generator函数会创建多个相互独立的generator</strong>。</p><p>有的童鞋会发现这样调用<code>next()</code>每次都返回1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(odd())</span><br><span class="line">step <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(odd())</span><br><span class="line">step <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(odd())</span><br><span class="line">step <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>原因在于<code>odd()</code>会创建一个新的generator对象，上述代码实际上创建了3个完全独立的generator，对3个generator分别调用<code>next()</code>当然每个都会返回第一个值。</p><p>正确的写法是创建一个generator对象，然后不断对这一个generator对象调用<code>next()</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = odd()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(g)</span><br><span class="line">step <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(g)</span><br><span class="line">step <span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(g)</span><br><span class="line">step <span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>回到<code>fib</code>的例子，我们在循环过程中不断调用<code>yield</code>，就会不断中断。当然要给循环设置一个条件来退出循环，不然就会产生一个无限数列出来。</p><p>同样的，把函数改成generator函数后，我们基本上从来不会用<code>next()</code>来获取下一个返回值，而是直接使用<code>for</code>循环来迭代：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> fib(<span class="number">6</span>):</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><p>但是用<code>for</code>循环调用generator时，发现拿不到generator的<code>return</code>语句的返回值。如果想要拿到返回值，必须捕获<code>StopIteration</code>错误，返回值包含在<code>StopIteration</code>的<code>value</code>中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">g = fib(<span class="number">6</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = <span class="built_in">next</span>(g)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;g:&#x27;</span>, x)</span><br><span class="line">    <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Generator return value:&#x27;</span>, e.value)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">...</span><br><span class="line">g: <span class="number">1</span></span><br><span class="line">g: <span class="number">1</span></span><br><span class="line">g: <span class="number">2</span></span><br><span class="line">g: <span class="number">3</span></span><br><span class="line">g: <span class="number">5</span></span><br><span class="line">g: <span class="number">8</span></span><br><span class="line">Generator <span class="keyword">return</span> value: done</span><br></pre></td></tr></table></figure><p>关于如何捕获错误，后面的错误处理还会详细讲解。</p><hr><h2 id="PS">PS.</h2><p>我们已经知道，可以直接作用于<code>for</code>循环的数据类型有以下几种：</p><ul><li><p>一类是集合数据类型，如<code>list</code>、<code>tuple</code>、<code>dict</code>、<code>set</code>、<code>str</code>等；</p></li><li><p>一类是<code>generator</code>，包括生成器和带<code>yield</code>的generator function。</p></li></ul><p>这些可以直接作用于<code>for</code>循环的对象统称为可迭代对象：<code>Iterable</code>。</p><p>可以使用<code>isinstance()</code>判断一个对象是否是<code>Iterable</code>对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="built_in">isinstance</span>([], Iterable)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="built_in">isinstance</span>(&#123;&#125;, Iterable)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="built_in">isinstance</span>(<span class="string">&#x27;abc&#x27;</span>, Iterable)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="built_in">isinstance</span>((x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)), Iterable)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="built_in">isinstance</span>(<span class="number">100</span>, Iterable)</span><br><span class="line"><span class="comment"># False</span></span><br></pre></td></tr></table></figure><p>而生成器不但可以作用于<code>for</code>循环，还可以被<code>next()</code>函数不断调用并返回下一个值，直到最后抛出<code>StopIteration</code>错误表示无法继续返回下一个值了。</p><p>可以被<code>next()</code>函数调用并不断返回下一个值的对象称为迭代器：<code>Iterator</code>。</p><p>可以使用<code>isinstance()</code>判断一个对象是否是<code>Iterator</code>对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterator</span><br><span class="line"><span class="built_in">isinstance</span>((x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)), Iterator)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="built_in">isinstance</span>([], Iterator)</span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"><span class="built_in">isinstance</span>(&#123;&#125;, Iterator)</span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"><span class="built_in">isinstance</span>(<span class="string">&#x27;abc&#x27;</span>, Iterator)</span><br><span class="line"><span class="comment"># False</span></span><br></pre></td></tr></table></figure><p><strong>生成器都是<code>Iterator</code>对象，但<code>list</code>、<code>dict</code>、<code>str</code>虽然是<code>Iterable</code>，却不是<code>Iterator</code></strong>。</p><p>把<code>list</code>、<code>dict</code>、<code>str</code>等<code>Iterable</code>变成<code>Iterator</code>可以使用<code>iter()</code>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isinstance</span>(<span class="built_in">iter</span>([]), Iterator)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="built_in">isinstance</span>(<span class="built_in">iter</span>(<span class="string">&#x27;abc&#x27;</span>), Iterator)</span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure><p><strong>你可能会问，为什么<code>list</code>、<code>dict</code>、<code>str</code>等数据类型不是<code>Iterator</code>？</strong></p><p><strong>这是因为Python的<code>Iterator</code>对象表示的是一个数据流，Iterator对象可以被<code>next()</code>函数调用并不断返回下一个数据，直到没有数据时抛出<code>StopIteration</code>错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过<code>next()</code>函数实现按需计算下一个数据，所以<code>Iterator</code>的计算是惰性的，只有在需要返回下一个数据时它才会计算。</strong></p><p><strong><code>Iterator</code>甚至可以表示一个无限大的数据流，例如全体自然数。而使用list是永远不可能存储全体自然数的。</strong></p><h3 id="小结">小结</h3><p><strong>凡是可作用于<code>for</code>循环的对象都是<code>Iterable</code>类型；</strong></p><p><strong>凡是可作用于<code>next()</code>函数的对象都是<code>Iterator</code>类型，它们表示一个惰性计算的序列；</strong></p><p>集合数据类型如<code>list</code>、<code>dict</code>、<code>str</code>等是<code>Iterable</code>但不是<code>Iterator</code>，不过可以通过<code>iter()</code>函数获得一个<code>Iterator</code>对象。</p><p><strong>Python的<code>for</code>循环本质上就是通过不断调用<code>next()</code>函数实现的</strong>，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>实际上完全等价于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先获得Iterator对象:</span></span><br><span class="line">it = <span class="built_in">iter</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment"># 循环:</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获得下一个值:</span></span><br><span class="line">        x = <span class="built_in">next</span>(it)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="comment"># 遇到StopIteration就退出循环</span></span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><hr><h1>函数式编程</h1><h2 id="高阶函数">高阶函数</h2><p>高阶函数英文叫Higher-order function。什么是高阶函数？我们以实际代码为例子，一步一步深入概念。</p><h3 id="变量可以指向函数">变量可以指向函数</h3><p>以Python内置的求绝对值的函数<code>abs()</code>为例，调用该函数用以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">abs</span>(-<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 10</span></span><br></pre></td></tr></table></figure><p>但是，如果只写<code>abs</code>呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">abs</span></span><br><span class="line"><span class="comment"># &lt;built-in function abs&gt;</span></span><br></pre></td></tr></table></figure><p>可见，<strong><code>abs(-10)</code>是函数调用，而<code>abs</code>是函数本身</strong>。</p><p>要获得函数调用结果，我们可以把结果赋值给变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">abs</span>(-<span class="number">10</span>)</span><br><span class="line">x</span><br><span class="line"><span class="comment"># 10</span></span><br></pre></td></tr></table></figure><p>但是，如果把函数本身赋值给变量呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">abs</span></span><br><span class="line">f</span><br><span class="line"><span class="comment"># &lt;built-in function abs&gt;</span></span><br></pre></td></tr></table></figure><p>结论**：函数本身也可以赋值给变量，即：变量可以指向函数**。</p><p>如果一个变量指向了一个函数，那么，可否通过该变量来调用这个函数？用代码验证一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">abs</span></span><br><span class="line">f(-<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 10</span></span><br></pre></td></tr></table></figure><p>成功！说明变量<code>f</code>现在已经指向了<code>abs</code>函数本身。直接调用<code>abs()</code>函数和调用变量<code>f()</code>完全相同。</p><h3 id="函数名也是变量">函数名也是变量</h3><p>那么函数名是什么呢？<strong>函数名其实就是指向函数的变量</strong>！对于<code>abs()</code>这个函数，完全可以把函数名<code>abs</code>看成变量，它指向一个可以计算绝对值的函数！<strong>（或者可以理解为一个指针，指向该函数在内存中的位置）</strong></p><p>如果把<code>abs</code>指向其他对象，会有什么情况发生？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">abs</span> = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">abs</span>(-<span class="number">10</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;int&#x27;</span> <span class="built_in">object</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">callable</span></span><br></pre></td></tr></table></figure><p>把<code>abs</code>指向<code>10</code>后，就无法通过<code>abs(-10)</code>调用该函数了！因为<code>abs</code>这个变量已经不指向求绝对值函数而是指向一个整数<code>10</code>！</p><p>当然实际代码绝对不能这么写，这里是为了说明函数名也是变量。要恢复<code>abs</code>函数，请重启Python交互环境。</p><p>注：由于<code>abs</code>函数实际上是定义在<code>import builtins</code>模块中的，所以要让修改<code>abs</code>变量的指向在其它模块也生效，要用<code>import builtins; builtins.abs = 10</code>。</p><h3 id="传入函数">传入函数</h3><p>既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。</p><p>一个最简单的高阶函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y, f</span>):</span></span><br><span class="line">    <span class="keyword">return</span> f(x) + f(y)</span><br></pre></td></tr></table></figure><p>当我们调用<code>add(-5, 6, abs)</code>时，参数<code>x</code>，<code>y</code>和<code>f</code>分别接收<code>-5</code>，<code>6</code>和<code>abs</code>，根据函数定义，我们可以推导计算过程为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = -<span class="number">5</span></span><br><span class="line">y = <span class="number">6</span></span><br><span class="line">f = <span class="built_in">abs</span></span><br><span class="line">f(x) + f(y) ==&gt; <span class="built_in">abs</span>(-<span class="number">5</span>) + <span class="built_in">abs</span>(<span class="number">6</span>) ==&gt; <span class="number">11</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">11</span></span><br></pre></td></tr></table></figure><p>编写高阶函数，就是让函数的参数能够接收别的函数。</p><h3 id="小结-2">小结</h3><p>把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式。</p><hr><h2 id="举例">举例</h2><h3 id="map-reduce">map()/reduce()</h3><p>Python内建了<code>map()</code>和<code>reduce()</code>函数。（这大概就是字典是Dictionary而不是Map的原因）</p><p>如果你读过Google的那篇大名鼎鼎的论文“<a href="http://research.google.com/archive/mapreduce.html">MapReduce: Simplified Data Processing on Large Clusters</a>”，你就能大概明白map/reduce的概念。</p><h4 id="map">map()</h4><p><code>map()</code>函数接收两个参数，一个是函数，一个是<code>Iterable</code>，<strong><code>map</code>将传入的函数依次作用到序列的每个元素，并把结果作为新的<code>Iterator</code>返回</strong>。</p><p>举例说明，比如我们有一个函数f(x)=<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">x^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，要把这个函数作用在一个list <code>[1, 2, 3, 4, 5, 6, 7, 8, 9]</code>上，就可以用<code>map()</code>实现如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">            f(x) = x * x</span><br><span class="line"></span><br><span class="line">                  │</span><br><span class="line">                  │</span><br><span class="line">  ┌───┬───┬───┬───┼───┬───┬───┬───┐</span><br><span class="line">  │   │   │   │   │   │   │   │   │</span><br><span class="line">  ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼</span><br><span class="line"></span><br><span class="line">[ 1   2   3   4   5   6   7   8   9 ]</span><br><span class="line"></span><br><span class="line">  │   │   │   │   │   │   │   │   │</span><br><span class="line">  │   │   │   │   │   │   │   │   │</span><br><span class="line">  ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼</span><br><span class="line"></span><br><span class="line">[ 1   4   9  16  25  36  49  64  81 ]</span><br></pre></td></tr></table></figure><p>现在，我们用Python代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">     <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"> r = <span class="built_in">map</span>(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"> <span class="built_in">list</span>(r)</span><br><span class="line"><span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br></pre></td></tr></table></figure><p><strong><code>map()</code>传入的第一个参数是<code>f</code>，即函数对象本身。由于结果<code>r</code>是一个<code>Iterator</code>，<code>Iterator</code>是惰性序列，因此通过<code>list()</code>函数让它把整个序列都计算出来并返回一个list</strong>。</p><p>你可能会想，不需要<code>map()</code>函数，写一个循环，也可以计算出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]:</span><br><span class="line">    L.append(f(n))</span><br><span class="line"><span class="built_in">print</span>(L)</span><br></pre></td></tr></table></figure><p>的确可以，但是，从上面的循环代码，能一眼看明白“把f(x)作用在list的每一个元素并把结果生成一个新的list”吗？</p><p>所以，<code>map()</code>作为高阶函数，事实上它把运算规则抽象了，因此，我们不但可以计算简单的f(x)=<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">x^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，还可以计算任意复杂的函数，比如，把这个list所有数字转为字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]))</span><br><span class="line"><span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;]</span></span><br></pre></td></tr></table></figure><p>只需要一行代码。（str是Python内置函数）</p><h4 id="reduce">reduce()</h4><p><strong><code>reduce</code>把一个函数作用在一个序列<code>[x1, x2, x3, ...]</code>上，这个函数必须接收两个参数，<code>reduce</code>把结果继续和序列的下一个元素做累积计算</strong>，其效果就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</span><br></pre></td></tr></table></figure><p>比方说对一个序列求和，就可以用<code>reduce</code>实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">reduce(add, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])</span><br><span class="line"><span class="comment"># 25</span></span><br></pre></td></tr></table></figure><p>当然求和运算可以直接用Python内建函数<code>sum()</code>，没必要动用<code>reduce</code>。</p><p>但是如果要把序列<code>[1, 3, 5, 7, 9]</code>变换成整数<code>13579</code>，<code>reduce</code>就可以派上用场：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">10</span> + y</span><br><span class="line"></span><br><span class="line">reduce(fn, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])</span><br><span class="line"><span class="comment"># 13579</span></span><br></pre></td></tr></table></figure><p>这个例子本身没多大用处，但是，如果考虑到字符串<code>str</code>也是一个序列，对上面的例子稍加改动，配合<code>map()</code>，我们就可以写出把<code>str</code>转换为<code>int</code>的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">10</span> + y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">char2num</span>(<span class="params">s</span>):</span></span><br><span class="line">    digits = &#123;<span class="string">&#x27;0&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;1&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;4&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;5&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;6&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;7&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;8&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;9&#x27;</span>: <span class="number">9</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> digits[s]</span><br><span class="line"></span><br><span class="line">reduce(fn, <span class="built_in">map</span>(char2num, <span class="string">&#x27;13579&#x27;</span>))</span><br><span class="line"><span class="comment"># 13579</span></span><br></pre></td></tr></table></figure><p>整理成一个<code>str2int</code>的函数就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">DIGITS = &#123;<span class="string">&#x27;0&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;1&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;4&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;5&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;6&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;7&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;8&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;9&#x27;</span>: <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2int</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">x, y</span>):</span></span><br><span class="line">        <span class="keyword">return</span> x * <span class="number">10</span> + y</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">char2num</span>(<span class="params">s</span>):</span></span><br><span class="line">        <span class="keyword">return</span> DIGITS[s]</span><br><span class="line">    <span class="keyword">return</span> reduce(fn, <span class="built_in">map</span>(char2num, s))</span><br></pre></td></tr></table></figure><p>还可以用lambda函数进一步简化成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">DIGITS = &#123;<span class="string">&#x27;0&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;1&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;4&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;5&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;6&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;7&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;8&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;9&#x27;</span>: <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">char2num</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> DIGITS[s]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2int</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: x * <span class="number">10</span> + y, <span class="built_in">map</span>(char2num, s))</span><br></pre></td></tr></table></figure><p>也就是说，假设Python没有提供<code>int()</code>函数，你完全可以自己写一个把字符串转化为整数的函数，而且只需要几行代码！</p><h3 id="filter">filter()</h3><p>Python内建的<code>filter()</code>函数用于过滤序列。<strong>和<code>map()</code>类似，<code>filter()</code>也接收一个函数和一个序列。和<code>map()</code>不同的是，<code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是<code>True</code>还是<code>False</code>决定保留还是丢弃该元素</strong>。</p><p>例如，在一个list中，删掉偶数，只保留奇数，可以这么写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">filter</span>(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>]))</span><br><span class="line"><span class="comment"># 结果: [1, 5, 9, 15]</span></span><br></pre></td></tr></table></figure><p>把一个序列中的空字符串删掉，可以这么写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_empty</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> s <span class="keyword">and</span> s.strip()</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">filter</span>(not_empty, [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="literal">None</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;  &#x27;</span>]))</span><br><span class="line"><span class="comment"># 结果: [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span></span><br><span class="line"><span class="comment"># s.strip()用于移除字符串头尾指定的字符（不传入参数则默认为空格或换行符）或字符序列。</span></span><br><span class="line"><span class="comment"># 注意：该方法只能删除开头或是结尾的字符，不能删除中间部分的字符。</span></span><br></pre></td></tr></table></figure><p>可见用<code>filter()</code>这个高阶函数，关键在于正确实现一个“筛选”函数。</p><p><strong>注意到<code>filter()</code>函数返回的是一个<code>Iterator</code>，也就是一个惰性序列，所以要强迫<code>filter()</code>完成计算结果，需要用<code>list()</code>函数获得所有结果并返回list</strong>。</p><h4 id="eg-用filter求素数">eg.用filter求素数</h4><p>计算<a href="http://baike.baidu.com/view/10626.htm">素数</a>的一个方法是<a href="http://baike.baidu.com/view/3784258.htm">埃氏筛法</a>，它的算法理解起来非常简单：</p><p>首先，列出从<code>2</code>开始的所有自然数，构造一个序列：</p><p>2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …</p><p>取序列的第一个数<code>2</code>，它一定是素数，然后用<code>2</code>把序列的<code>2</code>的倍数筛掉：</p><p>3, <s>4</s>, 5, <s>6</s>, 7, <s>8</s>, 9, <s>10</s>, 11, <s>12</s>, 13, <s>14</s>, 15, <s>16</s>, 17, <s>18</s>, 19, <s>20</s>, …</p><p>取新序列的第一个数<code>3</code>，它一定是素数，然后用<code>3</code>把序列的<code>3</code>的倍数筛掉：</p><p>5, <s>6</s>, 7, <s>8</s>, <s>9</s>, <s>10</s>, 11, <s>12</s>, 13, <s>14</s>, <s>15</s>, <s>16</s>, 17, <s>18</s>, 19, <s>20</s>, …</p><p>取新序列的第一个数<code>5</code>，然后用<code>5</code>把序列的<code>5</code>的倍数筛掉：</p><p>7, <s>8</s>, <s>9</s>, <s>10</s>, 11, <s>12</s>, 13, <s>14</s>, <s>15</s>, <s>16</s>, 17, <s>18</s>, 19, <s>20</s>, …</p><p>不断筛下去，就可以得到所有的素数。</p><p>用Python来实现这个算法，可以先构造一个从<code>3</code>开始的奇数序列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_odd_iter</span>():</span></span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = n + <span class="number">2</span></span><br><span class="line">        <span class="keyword">yield</span> n</span><br></pre></td></tr></table></figure><p>注意这是一个生成器，并且是一个无限序列。</p><p>然后定义一个筛选函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_not_divisible</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x % n &gt; <span class="number">0</span></span><br></pre></td></tr></table></figure><p>最后，定义一个生成器，不断返回下一个素数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">primes</span>():</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    it = _odd_iter() <span class="comment"># 初始序列</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = <span class="built_in">next</span>(it) <span class="comment"># 返回序列的第一个数</span></span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        it = <span class="built_in">filter</span>(_not_divisible(n), it) <span class="comment"># 构造新序列</span></span><br></pre></td></tr></table></figure><p>这个生成器先返回第一个素数<code>2</code>，然后，利用<code>filter()</code>不断产生筛选后的新的序列。</p><p>由于<code>primes()</code>也是一个无限序列，所以调用时需要设置一个退出循环的条件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印1000以内的素数:</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> primes():</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">1000</span>:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>注意到<code>Iterator</code>是惰性计算的序列，所以我们可以用Python表示“全体自然数”，“全体素数”这样的序列，而代码非常简洁。</p><h3 id="sorted">sorted</h3><p>排序也是在程序中经常用到的算法。无论使用冒泡排序还是快速排序，排序的核心是比较两个元素的大小。如果是数字，我们可以直接比较，但如果是字符串或者两个dict呢？直接比较数学上的大小是没有意义的，因此，比较的过程必须通过函数抽象出来。</p><p>Python内置的<code>sorted()</code>函数就可以对list进行排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sorted</span>([<span class="number">36</span>, <span class="number">5</span>, -<span class="number">12</span>, <span class="number">9</span>, -<span class="number">21</span>])</span><br><span class="line"><span class="comment"># [-21, -12, 5, 9, 36]</span></span><br></pre></td></tr></table></figure><p>此外，<code>sorted()</code>函数也是一个高阶函数**，它还可以接收一个<code>key</code>函数来实现自定义的排序**，例如按绝对值大小排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sorted</span>([<span class="number">36</span>, <span class="number">5</span>, -<span class="number">12</span>, <span class="number">9</span>, -<span class="number">21</span>], key=<span class="built_in">abs</span>)</span><br><span class="line"><span class="comment"># [5, 9, -12, -21, 36]</span></span><br></pre></td></tr></table></figure><p><strong>key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序</strong>。对比原始的list和经过<code>key=abs</code>处理过的list：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">36</span>, <span class="number">5</span>, -<span class="number">12</span>, <span class="number">9</span>, -<span class="number">21</span>]</span><br><span class="line"></span><br><span class="line">keys = [<span class="number">36</span>, <span class="number">5</span>,  <span class="number">12</span>, <span class="number">9</span>,  <span class="number">21</span>]</span><br></pre></td></tr></table></figure><p>然后<code>sorted()</code>函数按照keys进行排序，并按照对应关系返回list相应的元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keys排序结果 =&gt; [5, 9,  12,  21, 36]</span><br><span class="line">                |  |    |    |   |</span><br><span class="line">最终结果     =&gt; [5, 9, -12, -21, 36]</span><br></pre></td></tr></table></figure><p>我们再看一个字符串排序的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sorted</span>([<span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;about&#x27;</span>, <span class="string">&#x27;Zoo&#x27;</span>, <span class="string">&#x27;Credit&#x27;</span>])</span><br><span class="line"><span class="comment"># [&#x27;Credit&#x27;, &#x27;Zoo&#x27;, &#x27;about&#x27;, &#x27;bob&#x27;]</span></span><br></pre></td></tr></table></figure><p>默认情况下，对字符串排序，是按照ASCII的大小比较的，由于<code>'Z' &lt; 'a'</code>，结果，大写字母<code>Z</code>会排在小写字母<code>a</code>的前面。</p><p>现在，我们提出排序应该忽略大小写，按照字母序排序。要实现这个算法，不必对现有代码大加改动，只要我们能用一个key函数把字符串映射为忽略大小写排序即可。忽略大小写来比较两个字符串，实际上就是先把字符串都变成大写（或者都变成小写），再比较。</p><p>这样，我们给<code>sorted</code>传入key函数，即可实现忽略大小写的排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sorted</span>([<span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;about&#x27;</span>, <span class="string">&#x27;Zoo&#x27;</span>, <span class="string">&#x27;Credit&#x27;</span>], key=<span class="built_in">str</span>.lower)</span><br><span class="line"><span class="comment"># [&#x27;about&#x27;, &#x27;bob&#x27;, &#x27;Credit&#x27;, &#x27;Zoo&#x27;]</span></span><br></pre></td></tr></table></figure><p>要进行反向排序，不必改动key函数，可以传入第三个参数<code>reverse=True</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sorted</span>([<span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;about&#x27;</span>, <span class="string">&#x27;Zoo&#x27;</span>, <span class="string">&#x27;Credit&#x27;</span>], key=<span class="built_in">str</span>.lower, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># [&#x27;Zoo&#x27;, &#x27;Credit&#x27;, &#x27;bob&#x27;, &#x27;about&#x27;]</span></span><br></pre></td></tr></table></figure><p>从上述例子可以看出，高阶函数的抽象能力是非常强大的，而且，核心代码可以保持得非常简洁。</p><h2 id="返回函数">返回函数</h2><h3 id="函数作为返回值">函数作为返回值</h3><p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。</p><p>我们来实现一个可变参数的求和。通常情况下，求和的函数是这样定义的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_sum</span>(<span class="params">*args</span>):</span></span><br><span class="line">    ax = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">        ax = ax + n</span><br><span class="line">    <span class="keyword">return</span> ax</span><br></pre></td></tr></table></figure><p>但是，如果不需要立刻求和，而是在后面的代码中，根据需要再计算怎么办？可以不返回求和的结果，而是返回求和的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span>():</span></span><br><span class="line">        ax = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">            ax = ax + n</span><br><span class="line">        <span class="keyword">return</span> ax</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br></pre></td></tr></table></figure><p>当我们调用<code>lazy_sum()</code>时，返回的并不是求和结果，而是求和函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line">f</span><br><span class="line"><span class="comment"># &lt;function lazy_sum.&lt;locals&gt;.sum at 0x101c6ed90&gt;</span></span><br></pre></td></tr></table></figure><p>调用函数<code>f</code>时，才真正计算求和的结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f()</span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure><p>在这个例子中，我们在函数<code>lazy_sum</code>中又定义了函数<code>sum</code>，并且，内部函数<code>sum</code>可以引用外部函数<code>lazy_sum</code>的参数和局部变量，当<code>lazy_sum</code>返回函数<code>sum</code>时，相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力。</p><p>请再注意一点，当我们调用<code>lazy_sum()</code>时，每次调用都会返回一个新的函数，即使传入相同的参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1 = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2 = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1==f2</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p><code>f1()</code>和<code>f2()</code>的调用结果互不影响。</p><h3 id="闭包">闭包</h3><p>注意到返回的函数在其定义内部引用了局部变量<code>args</code>，所以，当一个函数返回了一个函数后，其内部的局部变量还被新函数引用，所以，闭包用起来简单，实现起来可不容易。</p><p>另一个需要注意的问题是，<strong>返回的函数并没有立刻执行，而是直到调用了<code>f()</code>才执行</strong>。我们来看一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span>():</span></span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">             <span class="keyword">return</span> i*i</span><br><span class="line">        fs.append(f)</span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line"></span><br><span class="line">f1, f2, f3 = count()</span><br></pre></td></tr></table></figure><p>在上面的例子中，每次循环，都创建了一个新的函数，然后，把创建的3个函数都返回了。</p><p>你可能认为调用<code>f1()</code>，<code>f2()</code>和<code>f3()</code>结果应该是<code>1</code>，<code>4</code>，<code>9</code>，但实际结果是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f3()</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><p>全部都是<code>9</code>！原因就在于返回的函数引用了变量<code>i</code>，但它并非立刻执行。等到3个函数都返回时，它们所引用的变量<code>i</code>已经变成了<code>3</code>，因此最终结果为<code>9</code>。</p><p><strong>返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量</strong>。</p><p>如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">j</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">g</span>():</span></span><br><span class="line">            <span class="keyword">return</span> j*j</span><br><span class="line">        <span class="keyword">return</span> g</span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        fs.append(f(i)) <span class="comment"># f(i)立刻被执行，因此i的当前值被传入f()</span></span><br><span class="line">    <span class="keyword">return</span> fs</span><br></pre></td></tr></table></figure><p>再看看结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1, f2, f3 = count()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2()</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f3()</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><p>缺点是代码较长，可利用lambda函数缩短代码。</p><h3 id="nonlocal">nonlocal</h3><p>使用闭包，就是内层函数引用了外层函数的局部变量。如果只是读外层变量的值，我们会发现返回的闭包函数调用一切正常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inc</span>():</span></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span>():</span></span><br><span class="line">        <span class="comment"># 仅读取x的值:</span></span><br><span class="line">        <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line"></span><br><span class="line">f = inc()</span><br><span class="line"><span class="built_in">print</span>(f()) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(f()) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p>但是，如果对外层变量赋值，由于Python解释器会把<code>x</code>当作函数<code>fn()</code>的局部变量，它会报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inc</span>():</span></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span>():</span></span><br><span class="line">        <span class="comment"># nonlocal x</span></span><br><span class="line">        x = x + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line"></span><br><span class="line">f = inc()</span><br><span class="line"><span class="built_in">print</span>(f()) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(f()) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p>原因是<code>x</code>作为局部变量并没有初始化，直接计算<code>x+1</code>是不行的。但我们其实是想引用<code>inc()</code>函数内部的<code>x</code>，所以需要在<code>fn()</code>函数内部加一个<code>nonlocal x</code>的声明。加上这个声明后，解释器把<code>fn()</code>的<code>x</code>看作外层函数的局部变量，它已经被初始化了，可以正确计算<code>x+1</code>。</p><p><strong>使用闭包时，对外层变量赋值前，需要先使用nonlocal声明该变量不是当前函数的局部变量</strong>。</p><h2 id="匿名函数">匿名函数</h2><p>当我们在传入函数时，有些时候，不需要显式地定义函数，直接传入匿名函数更方便。</p><p>在Python中，对匿名函数提供了有限支持。还是以<code>map()</code>函数为例，计算f(x)=<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">x^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>时，除了定义一个<code>f(x)</code>的函数外，还可以直接传入匿名函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x * x, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]))</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure><p>通过对比可以看出，匿名函数<code>lambda x: x * x</code>实际上就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br></pre></td></tr></table></figure><p><strong>关键字<code>lambda</code>表示匿名函数，冒号前面的<code>x</code>表示函数参数。</strong></p><p><strong>匿名函数有个限制，就是只能有一个表达式，不用写<code>return</code>，返回值就是该表达式的结果。</strong></p><p><strong>用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="keyword">lambda</span> x: x * x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f</span><br><span class="line">&lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x101c6ef28</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">5</span>)</span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure><p>同样，也可以把匿名函数作为返回值返回，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span>: x * x + y * y</span><br></pre></td></tr></table></figure><h2 id="装饰器（类似注解）">装饰器（类似注解）</h2><p>由于函数也是一个对象，而且函数对象可以被赋值给变量，所以，通过变量也能调用该函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;2015-3-25&#x27;</span>)</span><br><span class="line">...</span><br><span class="line">f = now</span><br><span class="line">f()</span><br><span class="line"><span class="comment"># 2015-3-25</span></span><br></pre></td></tr></table></figure><p>函数对象有一个<code>__name__</code>属性，可以拿到函数的名字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>now.__name__</span><br><span class="line"><span class="string">&#x27;now&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.__name__</span><br><span class="line"><span class="string">&#x27;now&#x27;</span></span><br></pre></td></tr></table></figure><p>现在，假设我们要增强<code>now()</code>函数的功能，比如，在函数调用前后自动打印日志，但又不希望修改<code>now()</code>函数的定义，<strong>这种在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）</strong>。</p><p>本质上，decorator就是一个返回函数的高阶函数。所以，我们要定义一个能打印日志的decorator，可以定义如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;call %s():&#x27;</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>观察上面的<code>log</code>，因为它是一个decorator，所以接受一个函数作为参数，并返回一个函数。我们要借助Python的@语法，把decorator置于函数的定义处：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;2015-3-25&#x27;</span>)</span><br></pre></td></tr></table></figure><p>调用<code>now()</code>函数，不仅会运行<code>now()</code>函数本身，还会在运行<code>now()</code>函数前打印一行日志：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>now()</span><br><span class="line">call now():</span><br><span class="line"><span class="number">2015</span>-<span class="number">3</span>-<span class="number">25</span></span><br></pre></td></tr></table></figure><p>把<code>@log</code>放到<code>now()</code>函数的定义处，相当于执行了语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">now = log(now)</span><br></pre></td></tr></table></figure><p>由于<code>log()</code>是一个decorator，返回一个函数，所以，原来的<code>now()</code>函数仍然存在，只是现在同名的<code>now</code>变量指向了新的函数，于是调用<code>now()</code>将执行新函数，即在<code>log()</code>函数中返回的<code>wrapper()</code>函数。</p><p><code>wrapper()</code>函数的参数定义是<code>(*args, **kw)</code>，因此，<code>wrapper()</code>函数可以接受任意参数的调用。在<code>wrapper()</code>函数内，首先打印日志，再紧接着调用原始函数。</p><p>如果decorator本身需要传入参数，那就需要编写一个返回decorator的高阶函数，写出来会更复杂。比如，要自定义log的文本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s %s():&#x27;</span> % (text, func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure><p>这个3层嵌套的decorator用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@log(<span class="params"><span class="string">&#x27;execute&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;2015-3-25&#x27;</span>)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>now()</span><br><span class="line">execute now():</span><br><span class="line"><span class="number">2015</span>-<span class="number">3</span>-<span class="number">25</span></span><br></pre></td></tr></table></figure><p>和两层嵌套的decorator相比，3层嵌套的效果是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>now = log(<span class="string">&#x27;execute&#x27;</span>)(now)</span><br></pre></td></tr></table></figure><p>我们来剖析上面的语句，首先执行<code>log('execute')</code>，返回的是<code>decorator</code>函数，再调用返回的函数，参数是<code>now</code>函数，返回值最终是<code>wrapper</code>函数。</p><p>以上两种decorator的定义都没有问题，但还差最后一步。因为我们讲了函数也是对象，它有<code>__name__</code>等属性，但你去看经过decorator装饰之后的函数，它们的<code>__name__</code>已经从原来的<code>'now'</code>变成了<code>'wrapper'</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>now.__name__</span><br><span class="line"><span class="string">&#x27;wrapper&#x27;</span></span><br></pre></td></tr></table></figure><p>因为返回的那个<code>wrapper()</code>函数名字就是<code>'wrapper'</code>，所以，需要把原始函数的<code>__name__</code>等属性复制到<code>wrapper()</code>函数中，否则，有些依赖函数签名的代码执行就会出错。</p><p>不需要编写<code>wrapper.__name__ = func.__name__</code>这样的代码，Python内置的<code>functools.wraps</code>就是干这个事的，所以，一个完整的decorator的写法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;call %s():&#x27;</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>或者针对带参数的decorator：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">        @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s %s():&#x27;</span> % (text, func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure><p><code>import functools</code>是导入<code>functools</code>模块。模块的概念稍候讲解。现在，只需记住在定义<code>wrapper()</code>的前面加上<code>@functools.wraps(func)</code>即可。</p><h2 id="偏函数">偏函数</h2><p>当函数的参数个数太多，需要简化时，使用<code>functools.partial</code>可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。</p><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017454145929440">https://www.liaoxuefeng.com/wiki/1016959663602400/1017454145929440</a></p><h1>模块</h1><p><strong>(了解前半部分即可)</strong></p><h2 id="定义">定义</h2><p>为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。<strong>在Python中，一个.py文件就称之为一个模块（Module）</strong>。</p><p>使用模块有什么好处？</p><p>最大的好处是大大提高了代码的可维护性。其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括Python内置的模块和来自第三方的模块。</p><p>使用模块还可以<strong>避免函数名和变量名冲突</strong>。<strong>相同名字的函数和变量完全可以分别存在不同的模块中</strong>，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。<strong>但是也要注意，尽量不要与内置函数名字冲突</strong>。点<a href="http://docs.python.org/3/library/functions.html">这里</a>查看Python的所有内置函数。</p><p>你也许还想到，如果不同的人编写的模块名相同怎么办？为了避免模块名冲突，Python又引入了按目录来组织模块的方法，称为包（Package）。引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。</p><p>举个例子，一个<code>abc.py</code>的文件就是一个名字叫<code>abc</code>的模块，一个<code>xyz.py</code>的文件就是一个名字叫<code>xyz</code>的模块。</p><p>现在，假设我们的<code>abc</code>和<code>xyz</code>这两个模块名字与其他模块冲突了，于是我们可以通过包来组织模块，避免冲突。方法是选择一个顶层包名，比如<code>mycompany</code>，按照如下目录存放：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mycompany</span><br><span class="line">├─ __init__.py</span><br><span class="line">├─ abc.py</span><br><span class="line">└─ xyz.py</span><br></pre></td></tr></table></figure><p>现在，<code>abc.py</code>模块的名字就变成了<code>mycompany.abc</code>，类似的，<code>xyz.py</code>的模块名变成了<code>mycompany.xyz</code>。</p><p><strong>请注意，每一个包目录下面都会有一个<code>__init__.py</code>的文件，这个文件是必须存在的，否则，Python就把这个目录当成普通目录，而不是一个包</strong>。<code>__init__.py</code>可以是空文件，也可以有Python代码，因为<code>__init__.py</code>本身就是一个模块，而它的模块名就是<code>mycompany</code>。</p><hr><p>下面是一个使用 python 标准库中模块的例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;命令行参数如下:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sys.argv:</span><br><span class="line">   <span class="built_in">print</span>(i)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n\nPython 路径为：&#x27;</span>, sys.path, <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>执行结果如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">命令行参数如下:</span><br><span class="line">using_sys.py</span><br><span class="line">参数<span class="number">1</span></span><br><span class="line">参数<span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Python 路径为： [<span class="string">&#x27;/root&#x27;</span>, <span class="string">&#x27;/usr/lib/python3.4&#x27;</span>, <span class="string">&#x27;/usr/lib/python3.4/plat-x86_64-linux-gnu&#x27;</span>, <span class="string">&#x27;/usr/lib/python3.4/lib-dynload&#x27;</span>, <span class="string">&#x27;/usr/local/lib/python3.4/dist-packages&#x27;</span>, <span class="string">&#x27;/usr/lib/python3/dist-packages&#x27;</span>] </span><br></pre></td></tr></table></figure><ul><li>1、import sys 引入 python 标准库中的 <a href="http://sys.py">sys.py</a> 模块；这是引入某一模块的方法。</li><li>2、sys.argv 是一个包含命令行参数的列表。</li><li>3、sys.path 包含了一个 Python 解释器自动查找所需模块的路径的列表。</li></ul><hr><h2 id="import-语句">import 语句</h2><p>想使用 Python 源文件，只需在另一个源文件里执行 import 语句，语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import module1[, module2[,... moduleN]</span><br></pre></td></tr></table></figure><p>当解释器遇到 import 语句，如果模块在当前的搜索路径就会被导入。</p><p><strong>搜索路径是一个解释器,会先进行搜索的所有目录的列表。如想要导入模块 support，需要把命令放在脚本的顶端</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Filename: support.py</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_func</span>(<span class="params"> par </span>):</span></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Hello : &quot;</span>, par)</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p><a href="http://test.py">test.py</a> 引入 support 模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Filename: test.py</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> support</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 现在可以调用模块里包含的函数了</span></span><br><span class="line">support.print_func(<span class="string">&quot;Runoob&quot;</span>)</span><br></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python3 test.py </span><br><span class="line">Hello :  Runoob</span><br></pre></td></tr></table></figure><p><strong>一个模块只会被导入一次</strong>，不管你执行了多少次import。这样可以防止导入模块被一遍又一遍地执行。</p><p>当我们使用import语句的时候，Python解释器是怎样找到对应的文件的呢？</p><p><strong>这就涉及到Python的搜索路径，搜索路径是由一系列目录名组成的，Python解释器就依次从这些目录中去寻找所引入的模块。</strong></p><p><strong>这看起来很像环境变量，事实上，也可以通过定义环境变量的方式来确定搜索路径。</strong></p><p>搜索路径是在Python编译或安装的时候确定的，安装新的库应该也会修改。搜索路径被存储在sys模块中的path变量，做一个简单的实验，在交互式解释器中，输入以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import sys</span><br><span class="line">&gt;&gt;&gt; sys.path</span><br><span class="line">[&#x27;&#x27;, &#x27;/usr/lib/python3.4&#x27;, &#x27;/usr/lib/python3.4/plat-x86_64-linux-gnu&#x27;, &#x27;/usr/lib/python3.4/lib-dynload&#x27;, &#x27;/usr/local/lib/python3.4/dist-packages&#x27;, &#x27;/usr/lib/python3/dist-packages&#x27;]</span><br><span class="line">&gt;&gt;&gt; </span><br></pre></td></tr></table></figure><p>sys.path 输出是一个列表，其中第一项是空串’'，代表当前目录（若是从一个脚本中打印出来的话，可以更清楚地看出是哪个目录），亦即我们执行python解释器的目录（对于脚本的话就是运行的脚本所在的目录）。</p><p>因此若像我一样在当前目录下存在与要引入模块同名的文件，就会把要引入的模块屏蔽掉。</p><hr><h2 id="from-…-import-语句">from … import 语句</h2><p>Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中，语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from modname import name1[, name2[, ... nameN]]</span><br></pre></td></tr></table></figure><p>例如，要导入模块 fibo 的 fib 函数，使用如下语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from fibo import fib, fib2</span><br><span class="line">&gt;&gt;&gt; fib(500)</span><br><span class="line">1 1 2 3 5 8 13 21 34 55 89 144 233 377</span><br></pre></td></tr></table></figure><p>这个声明不会把整个fibo模块导入到当前的命名空间中，它只会将fibo里的fib函数引入进来。</p><hr><h2 id="from-…-import-语句-2">from … import * 语句</h2><p>把一个模块的所有内容全都导入到当前的命名空间也是可行的，只需使用如下声明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from modname import *</span><br></pre></td></tr></table></figure><p>这提供了一个简单的方法来导入一个模块中的所有项目。然而这种声明不该被过多地使用。</p><hr><h2 id="深入模块">深入模块</h2><p>模块除了方法定义，还可以包括可执行的代码。这些代码一般用来初始化这个模块。这些代码只有在第一次被导入时才会被执行。</p><p>每个模块有各自独立的符号表，在模块内部为所有的函数当作全局符号表来使用。</p><p>所以，模块的作者可以放心大胆的在模块内部使用这些全局变量，而不用担心把其他用户的全局变量搞混。</p><p>从另一个方面，当你确实知道你在做什么的话，你也可以通过 modname.itemname 这样的表示法来访问模块内的函数。</p><p>模块是可以导入其他模块的。在一个模块（或者脚本，或者其他地方）的最前面使用 import 来导入一个模块，当然这只是一个惯例，而不是强制的。被导入的模块的名称将被放入当前操作的模块的符号表中。</p><p>还有一种导入的方法，可以使用 import 直接把模块内（函数，变量的）名称导入到当前操作模块。比如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from fibo import fib, fib2</span><br><span class="line">&gt;&gt;&gt; fib(500)</span><br><span class="line">1 1 2 3 5 8 13 21 34 55 89 144 233 377</span><br></pre></td></tr></table></figure><p>这种导入的方法不会把被导入的模块的名称放在当前的字符表中（所以在这个例子里面，fibo 这个名称是没有定义的）。</p><p>这还有一种方法，可以一次性的把模块中的所有（函数，变量）名称都导入到当前模块的字符表:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from fibo import *</span><br><span class="line">&gt;&gt;&gt; fib(500)</span><br><span class="line">1 1 2 3 5 8 13 21 34 55 89 144 233 377</span><br></pre></td></tr></table></figure><p>这将把所有的名字都导入进来，但是那些由单一下划线（_）开头的名字不在此例。大多数情况， Python程序员不使用这种方法，因为引入的其它来源的命名，很可能覆盖了已有的定义。</p><hr><h2 id="name-属性">__name__属性</h2><p>一个模块被另一个程序第一次引入时，其主程序将运行。如果我们想在模块被引入时，模块中的某一程序块不执行，我们可以用__name__属性来使该程序块仅在该模块自身运行时执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line"># Filename: using_name.py</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">   print(&#x27;程序自身在运行&#x27;)</span><br><span class="line">else:</span><br><span class="line">   print(&#x27;我来自另一模块&#x27;)</span><br></pre></td></tr></table></figure><p>运行输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python using_name.py</span><br><span class="line">程序自身在运行</span><br><span class="line">$ python</span><br><span class="line">&gt;&gt;&gt; import using_name</span><br><span class="line">我来自另一模块</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p><strong>说明</strong>： 每个模块都有一个__name__属性，当其值是’<strong>main</strong>’时，表明该模块自身在运行，否则是被引入。</p><p>说明：<strong><strong>name</strong></strong> 与 <strong><strong>main</strong></strong> 底下是双下划线， <strong>_ _</strong> 是这样去掉中间的那个空格。</p><hr><h2 id="dir-函数">dir() 函数</h2><p>内置的函数 dir() 可以找到模块内定义的所有名称。以一个字符串列表的形式返回:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import fibo, sys</span><br><span class="line">&gt;&gt;&gt; dir(fibo)</span><br><span class="line">[&#x27;__name__&#x27;, &#x27;fib&#x27;, &#x27;fib2&#x27;]</span><br><span class="line">&gt;&gt;&gt; dir(sys)  </span><br><span class="line">[&#x27;__displayhook__&#x27;, &#x27;__doc__&#x27;, &#x27;__excepthook__&#x27;, &#x27;__loader__&#x27;, &#x27;__name__&#x27;,</span><br><span class="line"> &#x27;__package__&#x27;, &#x27;__stderr__&#x27;, &#x27;__stdin__&#x27;, &#x27;__stdout__&#x27;,</span><br><span class="line"> &#x27;_clear_type_cache&#x27;, &#x27;_current_frames&#x27;, &#x27;_debugmallocstats&#x27;, &#x27;_getframe&#x27;,</span><br><span class="line"> &#x27;_home&#x27;, &#x27;_mercurial&#x27;, &#x27;_xoptions&#x27;, &#x27;abiflags&#x27;, &#x27;api_version&#x27;, &#x27;argv&#x27;,</span><br><span class="line"> &#x27;base_exec_prefix&#x27;, &#x27;base_prefix&#x27;, &#x27;builtin_module_names&#x27;, &#x27;byteorder&#x27;,</span><br><span class="line"> &#x27;call_tracing&#x27;, &#x27;callstats&#x27;, &#x27;copyright&#x27;, &#x27;displayhook&#x27;,</span><br><span class="line"> &#x27;dont_write_bytecode&#x27;, &#x27;exc_info&#x27;, &#x27;excepthook&#x27;, &#x27;exec_prefix&#x27;,</span><br><span class="line"> &#x27;executable&#x27;, &#x27;exit&#x27;, &#x27;flags&#x27;, &#x27;float_info&#x27;, &#x27;float_repr_style&#x27;,</span><br><span class="line"> &#x27;getcheckinterval&#x27;, &#x27;getdefaultencoding&#x27;, &#x27;getdlopenflags&#x27;,</span><br><span class="line"> &#x27;getfilesystemencoding&#x27;, &#x27;getobjects&#x27;, &#x27;getprofile&#x27;, &#x27;getrecursionlimit&#x27;,</span><br><span class="line"> &#x27;getrefcount&#x27;, &#x27;getsizeof&#x27;, &#x27;getswitchinterval&#x27;, &#x27;gettotalrefcount&#x27;,</span><br><span class="line"> &#x27;gettrace&#x27;, &#x27;hash_info&#x27;, &#x27;hexversion&#x27;, &#x27;implementation&#x27;, &#x27;int_info&#x27;,</span><br><span class="line"> &#x27;intern&#x27;, &#x27;maxsize&#x27;, &#x27;maxunicode&#x27;, &#x27;meta_path&#x27;, &#x27;modules&#x27;, &#x27;path&#x27;,</span><br><span class="line"> &#x27;path_hooks&#x27;, &#x27;path_importer_cache&#x27;, &#x27;platform&#x27;, &#x27;prefix&#x27;, &#x27;ps1&#x27;,</span><br><span class="line"> &#x27;setcheckinterval&#x27;, &#x27;setdlopenflags&#x27;, &#x27;setprofile&#x27;, &#x27;setrecursionlimit&#x27;,</span><br><span class="line"> &#x27;setswitchinterval&#x27;, &#x27;settrace&#x27;, &#x27;stderr&#x27;, &#x27;stdin&#x27;, &#x27;stdout&#x27;,</span><br><span class="line"> &#x27;thread_info&#x27;, &#x27;version&#x27;, &#x27;version_info&#x27;, &#x27;warnoptions&#x27;]</span><br></pre></td></tr></table></figure><p>如果没有给定参数，那么 dir() 函数会罗列出当前定义的所有名称:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = [1, 2, 3, 4, 5]</span><br><span class="line">&gt;&gt;&gt; import fibo</span><br><span class="line">&gt;&gt;&gt; fib = fibo.fib</span><br><span class="line">&gt;&gt;&gt; dir() # 得到一个当前模块中定义的属性列表</span><br><span class="line">[&#x27;__builtins__&#x27;, &#x27;__name__&#x27;, &#x27;a&#x27;, &#x27;fib&#x27;, &#x27;fibo&#x27;, &#x27;sys&#x27;]</span><br><span class="line">&gt;&gt;&gt; a = 5 # 建立一个新的变量 &#x27;a&#x27;</span><br><span class="line">&gt;&gt;&gt; dir()</span><br><span class="line">[&#x27;__builtins__&#x27;, &#x27;__doc__&#x27;, &#x27;__name__&#x27;, &#x27;a&#x27;, &#x27;sys&#x27;]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; del a # 删除变量名a</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; dir()</span><br><span class="line">[&#x27;__builtins__&#x27;, &#x27;__doc__&#x27;, &#x27;__name__&#x27;, &#x27;sys&#x27;]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="标准模块">标准模块</h2><p>Python 本身带着一些标准的模块库，在 Python 库参考文档中将会介绍到（就是后面的&quot;库参考文档&quot;）。</p><p>有些模块直接被构建在解析器里，这些虽然不是一些语言内置的功能，但是他却能很高效的使用，甚至是系统级调用也没问题。</p><p>这些组件会根据不同的操作系统进行不同形式的配置，比如 winreg 这个模块就只会提供给 Windows 系统。</p><p>应该注意到这有一个特别的模块 sys ，它内置在每一个 Python 解析器中。变量 sys.ps1 和 sys.ps2 定义了主提示符和副提示符所对应的字符串:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import sys</span><br><span class="line">&gt;&gt;&gt; sys.ps1</span><br><span class="line">&#x27;&gt;&gt;&gt; &#x27;</span><br><span class="line">&gt;&gt;&gt; sys.ps2</span><br><span class="line">&#x27;... &#x27;</span><br><span class="line">&gt;&gt;&gt; sys.ps1 = &#x27;C&gt; &#x27;</span><br><span class="line">C&gt; print(&#x27;Runoob!&#x27;)</span><br><span class="line">Runoob!</span><br><span class="line">C&gt; </span><br></pre></td></tr></table></figure><hr><h2 id="包">包</h2><p>包是一种管理 Python 模块命名空间的形式，采用&quot;点模块名称&quot;。</p><p>比如一个模块的名称是 A.B， 那么他表示一个包 A中的子模块 B 。</p><p>就好像使用模块的时候，你不用担心不同模块之间的全局变量相互影响一样，采用点模块名称这种形式也不用担心不同库之间的模块重名的情况。</p><p>这样不同的作者都可以提供 NumPy 模块，或者是 Python 图形库。</p><p>不妨假设你想设计一套统一处理声音文件和数据的模块（或者称之为一个&quot;包&quot;）。</p><p>现存很多种不同的音频文件格式（基本上都是通过后缀名区分的，例如： .wav，:file:.aiff，:file:.au，），所以你需要有一组不断增加的模块，用来在不同的格式之间转换。</p><p>并且针对这些音频数据，还有很多不同的操作（比如混音，添加回声，增加均衡器功能，创建人造立体声效果），所以你还需要一组怎么也写不完的模块来处理这些操作。</p><p>这里给出了一种可能的包结构（在分层的文件系统中）:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">sound/                          顶层包</span><br><span class="line">      __init__.py               初始化 sound 包</span><br><span class="line">      formats/                  文件格式转换子包</span><br><span class="line">              __init__.py</span><br><span class="line">              wavread.py</span><br><span class="line">              wavwrite.py</span><br><span class="line">              aiffread.py</span><br><span class="line">              aiffwrite.py</span><br><span class="line">              auread.py</span><br><span class="line">              auwrite.py</span><br><span class="line">              ...</span><br><span class="line">      effects/                  声音效果子包</span><br><span class="line">              __init__.py</span><br><span class="line">              echo.py</span><br><span class="line">              surround.py</span><br><span class="line">              reverse.py</span><br><span class="line">              ...</span><br><span class="line">      filters/                  filters 子包</span><br><span class="line">              __init__.py</span><br><span class="line">              equalizer.py</span><br><span class="line">              vocoder.py</span><br><span class="line">              karaoke.py</span><br><span class="line">              ...</span><br></pre></td></tr></table></figure><p>在导入一个包的时候，Python 会根据 sys.path 中的目录来寻找这个包中包含的子目录。</p><p>目录只有包含一个叫做 <strong>init</strong>.py 的文件才会被认作是一个包，主要是为了避免一些滥俗的名字（比如叫做 string）不小心的影响搜索路径中的有效模块。</p><p>最简单的情况，放一个空的 :file:<strong>init</strong>.py就可以了。当然这个文件中也可以包含一些初始化代码或者为（将在后面介绍的） __all__变量赋值。</p><p>用户可以每次只导入一个包里面的特定模块，比如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import sound.effects.echo</span><br></pre></td></tr></table></figure><p>这将会导入子模块:sound.effects.echo。 他必须使用全名去访问:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sound.effects.echo.echofilter(input, output, delay=0.7, atten=4)</span><br></pre></td></tr></table></figure><p>还有一种导入子模块的方法是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from sound.effects import echo</span><br></pre></td></tr></table></figure><p>这同样会导入子模块: echo，并且他不需要那些冗长的前缀，所以他可以这样使用:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo.echofilter(input, output, delay=0.7, atten=4)</span><br></pre></td></tr></table></figure><p>还有一种变化就是直接导入一个函数或者变量:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from sound.effects.echo import echofilter</span><br></pre></td></tr></table></figure><p>同样的，这种方法会导入子模块: echo，并且可以直接使用他的 echofilter() 函数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echofilter(input, output, delay=0.7, atten=4)</span><br></pre></td></tr></table></figure><p>注意当使用 <strong>from package import item</strong> 这种形式的时候，对应的 item 既可以是包里面的子模块（子包），或者包里面定义的其他名称，比如函数，类或者变量。</p><p>import 语法会首先把 item 当作一个包定义的名称，如果没找到，再试图按照一个模块去导入。如果还没找到，抛出一个 <strong>:exc:ImportError</strong> 异常。</p><p>反之，如果使用形如 <strong>import item.subitem.subsubitem</strong> 这种导入形式，除了最后一项，都必须是包，而最后一项则可以是模块或者是包，但是不可以是类，函数或者变量的名字。</p><hr><h2 id="从一个包中导入">从一个包中导入*</h2><p>如果我们使用 <strong>from sound.effects import *</strong> 会发生什么呢？</p><p>Python 会进入文件系统，找到这个包里面所有的子模块，然后一个一个的把它们都导入进来。</p><p>但这个方法在 Windows 平台上工作的就不是非常好，因为 Windows 是一个不区分大小写的系统。</p><p>在 Windows 平台平台上，我们无法确定一个叫做 <a href="http://ECHO.py">ECHO.py</a> 的文件导入为模块是 echo 还是 Echo，或者是 ECHO。</p><p>为了解决这个问题，我们只需要提供一个精确包的索引。</p><p>导入语句遵循如下规则：如果包定义文件 <strong><strong>init</strong>.py</strong> 存在一个叫做 <strong><strong>all</strong></strong> 的列表变量，那么在使用 <strong>from package import *</strong> 的时候就把这个列表中的所有名字作为包内容导入。</p><p>作为包的作者，可别忘了在更新包之后保证 <strong><strong>all</strong></strong> 也更新了啊。</p><p>以下实例在 file:sounds/effects/<strong>init</strong>.py 中包含如下代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__all__ = [&quot;echo&quot;, &quot;surround&quot;, &quot;reverse&quot;]</span><br></pre></td></tr></table></figure><p>这表示当你使用from sound.effects import *这种用法时，你只会导入包里面这三个子模块。</p><p>如果 <strong><strong>all</strong></strong> 真的没有定义，那么使用**from sound.effects import ***这种语法的时候，就不会导入包 sound.effects 里的任何子模块。他只是把包sound.effects和它里面定义的所有内容导入进来（可能运行__init__.py里定义的初始化代码）。</p><p>这会把 <strong>init</strong>.py 里面定义的所有名字导入进来。并且他不会破坏掉我们在这句话之前导入的所有明确指定的模块。看下这部分代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import sound.effects.echo</span><br><span class="line">import sound.effects.surround</span><br><span class="line">from sound.effects import *</span><br></pre></td></tr></table></figure><p>这个例子中，在执行 from…import 前，包 sound.effects 中的 echo 和 surround 模块都被导入到当前的命名空间中了。（当然如果定义了 <strong>all</strong> 就更没问题了）</p><p>通常我们并不主张使用 ***** 这种方法来导入模块，因为这种方法经常会导致代码的可读性降低。不过这样倒的确是可以省去不少敲键的功夫，而且一些模块都设计成了只能通过特定的方法导入。</p><p>记住，使用 <strong>from Package import specific_submodule</strong> 这种方法永远不会有错。事实上，这也是推荐的方法。除非是你要导入的子模块有可能和其他包的子模块重名。</p><p>如果在结构中包是一个子包（比如这个例子中对于包sound来说），而你又想导入兄弟包（同级别的包）你就得使用导入绝对的路径来导入。比如，如果模块sound.filters.vocoder 要使用包 sound.effects 中的模块 echo，你就要写成 from sound.effects import echo。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from . import echo</span><br><span class="line">from .. import formats</span><br><span class="line">from ..filters import equalizer</span><br></pre></td></tr></table></figure><p>无论是隐式的还是显式的相对导入都是从当前模块开始的。主模块的名字永远是&quot;<strong>main</strong>&quot;，一个Python应用程序的主模块，应当总是使用绝对路径引用。</p><p>包还提供一个额外的属性__path__。这是一个目录列表，里面每一个包含的目录都有为这个包服务的__init__.py，你得在其他__init__.py被执行前定义哦。可以修改这个变量，用来影响包含在包里面的模块和子包。</p><p>这个功能并不常用，一般用来扩展包里面的模块。</p><h1>参考：</h1><p><a href="https://www.liaoxuefeng.com/">廖雪峰的博客</a></p><p><a href="https://www.runoob.com/python3">菜鸟</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载与汇总 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mix-code_flutter-cpp</title>
      <link href="/2022/01/10/mix-code-flutter-cpp%EF%BC%9A%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/"/>
      <url>/2022/01/10/mix-code-flutter-cpp%EF%BC%9A%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1>前言：</h1><p>使用flutter与c++进行混合开发是一次尝试，起因是数据结构课设，我希望能用Flutter作为UI层进行展示。</p><p>其实最初的想法是做一个APP，通过<code>UI层：flutter、平台层：java&amp;JNI、逻辑层：c++</code>这样的结构去进行调用，不过一方面APP局限性比较大，最终的展示效果可能不是特别好，另一方面，Flutter也可以用于开发桌面端程序，所以最终还是决定使用<code>UI层：flutter、中间层：ffi、逻辑层：c++</code>这样的方式直接使用dart调用c++，避免java作为中间层进行转发可能存在的io问题以及额外的内存开销。</p><h1>配置</h1><p>首先启用Flutter的桌面端开发，使用桌面端要<a href="https://visualstudio.microsoft.com/downloads/">安装 Visual Studio 2019</a>（windows），注意一定是2019版,然后在创建项目的时候就可以选择加入桌面端开发。</p><p>然后也是踩了点坑，因为以前没用过VS，所以对VS的配置可以说是毫不熟悉，AS运行项目的时候直接报错：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error waiting <span class="keyword">for</span> a debug connection: The log reader stopped unexpectedly, or never started.</span><br><span class="line">Error launching application <span class="keyword">on</span> Windows.</span><br></pre></td></tr></table></figure><p>这给我整蒙了，最后在<a href="https://github.com/flutter/flutter/issues/93635">flutter的官方issue</a>里找到了答案:</p><blockquote><p>安装10.0.22000.0版本左右的SDK</p></blockquote><p>成功搞定，盲猜一波SDK旧版本不适配问题。</p><h1>开发</h1><h2 id="开发总结">开发总结</h2><h3 id="安卓">安卓</h3><p><a href="https://github.com/VomPom/flutter_ffi_tutorial">一个例子</a></p><p>虽然我没有选择安卓，但是官网给的安卓教程还比较详细，是用本地插件与配置文件结合的方式进行操作的。</p><h3 id="Windows">Windows</h3><p>win端没有采用<code>ffi</code>，而是使用了<code>methodChannel</code>，别问为啥，问就是坑少、简单。</p><p>但其实在方法调用时最大的问题就是数据类型的统一，如何在dart的数据类型与c++的之间完成正确的转换，还是需要我们自己动手。</p><p><strong>特别致谢<a href="https://blog.csdn.net/yushulx">yushulx</a>。</strong></p><p>c++接收参数并获取的方法如下：（注意dart要发送一个<code>Map&lt;String,dynamic&gt;</code>(至少）!)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> *arguments = std::get_if&lt;EncodableMap&gt;(method_call.<span class="built_in">arguments</span>());</span><br><span class="line"></span><br><span class="line">std::string filename;</span><br><span class="line"><span class="keyword">auto</span> filename_it = arguments-&gt;<span class="built_in">find</span>(<span class="built_in">EncodableValue</span>(<span class="string">&quot;filename&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (filename_it != arguments-&gt;<span class="built_in">end</span>())&#123;</span><br><span class="line">  filename = std::get&lt;std::string&gt;(filename_it-&gt;second);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">std::vector&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; bytes;</span><br><span class="line"><span class="keyword">auto</span> bytes_it = arguments-&gt;<span class="built_in">find</span>(<span class="built_in">EncodableValue</span>(<span class="string">&quot;bytes&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (bytes_it != arguments-&gt;<span class="built_in">end</span>())&#123;</span><br><span class="line">  bytes = std::get&lt;vector&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt;&gt;(bytes_it-&gt;second);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> width = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> width_it = arguments-&gt;<span class="built_in">find</span>(<span class="built_in">EncodableValue</span>(<span class="string">&quot;width&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (width_it != arguments-&gt;<span class="built_in">end</span>())&#123;</span><br><span class="line">  width = std::get&lt;<span class="keyword">int</span>&gt;(width_it-&gt;second);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="踩坑">踩坑</h2><h2 id="报错1">报错1</h2><p>刚开始的时候试了个<a href="https://blog.csdn.net/NiuAGeNiuC/article/details/118863341">现成的例子</a>,结果报错了（其实是VS在报错）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失</span><br></pre></td></tr></table></figure><p>解决方案：<br><strong>修改字符编码格式</strong><br>Visual Studio提供高级保存选项功能，它能指定特定代码文件的编码规范和行尾所使用的换行符。在Visual Studio 2019中，该命令没有默认显示在“文件”菜单中。用户需要手工设置，才能显示该命令。操作方法如下：</p><p>（1）单击“工具”|“自定义”命令，弹出“自定义”对话框。<br>（2）单击“命令”标签，进入“命令”选项卡。<br>（3）在“菜单栏”下拉列表中，选择“文件”选项。<br>（4）单击“添加命令”按钮，弹出“添加命令”对话框。<br>（5）在“类别”列表中，选择“文件”选项；在“命令”列表中，选择“高级保存选项”选项。<br>（6）单击“确定”按钮，关闭“添加命令”对话框。<br>（7）选中“控件”列表中的“高级保存选项”选项，单击“上移”或者“下移”按钮，调整该命令的位置。<br>（8）单击“关闭”按钮，完成“高级保存选项”命令的添加操作。<br>（9）打开“文件”菜单下的“高级保存选项”，设置编码为ASCII，关闭，然后再设置为unicode（utf-8）<br>亲测成功</p><h2 id="报错二">报错二</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error C2220: 以下警告被视为错误（然后一堆warning）</span><br></pre></td></tr></table></figure><p>打开：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目路径\项目文件夹\example\build\windows\plugins\项目名</span><br></pre></td></tr></table></figure><p>运行<code>projectName.sln</code>，用VS2019进行编辑，在项目-&gt;属性下</p><p><img src="0.png" alt=""></p><p>关闭（点击保存），但每次编译完就会被改回来。</p><p>所以，最好就是一点点在源码改掉！</p><p>首先，所在的行都有标注。</p><p>其次，很多都是类型不匹配导致的问题，比如ASCII与<code>char</code>，<code>int</code>和<code>double</code>，<code>char</code>和<code>string</code>，很多都是可以通过相应构造方法解决的，比如将一个<code>int</code>的ASCII码转为<code>char</code>：<code>char a = char(n)</code>，<code>n</code>为ASCII码的值。</p><h2 id="问题一">问题一</h2><p>VS中的相对路径</p><blockquote><p>其实就是相当于工程文件（XXXX.vcproj）为起点零计算出的能找到包含所需头文件（也就是找包含所需头文件的include目录）</p><p>则我们可以从工程文件xxxx.vcproj所在目录为起点向上回退到包含你所需要头文件的include文件夹所在的目录目录，你回退了几次就需要几个&quot;…&quot;符号。</p></blockquote><h2 id="问题二">问题二</h2><p>如何更简便的创建文件夹和文件？</p><p>对于一般的应用来说，<code>GetFileAttributes</code>可以说是判断文件或文件夹是否存在最好的API。因为它功能明确，使用简单，支持XP系统，更重要的是它可以直接区别文件和文件夹。当我们要写一个判断文件或文件夹是否存在的函数时，它应该是首选。代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断文件是否存在</span></span><br><span class="line"><span class="function">BOOL <span class="title">IsFileExist</span><span class="params">(<span class="keyword">const</span> CString&amp; csFile)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD dwAttrib = <span class="built_in">GetFileAttributes</span>(csFile);</span><br><span class="line">    <span class="keyword">return</span> INVALID_FILE_ATTRIBUTES != dwAttrib &amp;&amp; <span class="number">0</span> == (dwAttrib &amp; FILE_ATTRIBUTE_DIRECTORY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断文件夹是否存在</span></span><br><span class="line"><span class="function">BOOL <span class="title">IsDirExist</span><span class="params">(<span class="keyword">const</span> CString &amp; csDir)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD dwAttrib = <span class="built_in">GetFileAttributes</span>(csDir);</span><br><span class="line">    <span class="keyword">return</span> INVALID_FILE_ATTRIBUTES != dwAttrib &amp;&amp; <span class="number">0</span> != (dwAttrib &amp; FILE_ATTRIBUTE_DIRECTORY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断文件或文件夹是否存在</span></span><br><span class="line"><span class="function">BOOL <span class="title">IsPathExist</span><span class="params">(<span class="keyword">const</span> CString &amp; csPath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD dwAttrib = <span class="built_in">GetFileAttributes</span>(csPath);</span><br><span class="line">    <span class="keyword">return</span> INVALID_FILE_ATTRIBUTES != dwAttrib;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变变变变变种(听说会更快一点)</span></span><br><span class="line"><span class="function">BOOL <span class="title">IsPathExist</span><span class="params">(<span class="keyword">const</span> CString &amp; csPath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WIN32_FILE_ATTRIBUTE_DATA attrs = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> != <span class="built_in">GetFileAttributesEx</span>(csPath, GetFileExInfoStandard, &amp;attrs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0为false，非0为true</span></span><br></pre></td></tr></table></figure><p>至于文件：</p><p>Do this with a file stream. <strong>When a <code>std::ofstream</code> is closed, the file is created</strong>. I prefer the following code, because the OP only asks to create a file, not to write in it:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   ofstream &#123; filepath + filename &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The stream is destroyed right after its creation, so the stream is closed inside the destructor and thus the file is created.</p><h1>参考：</h1><blockquote><p><a href="https://flutter.cn/docs/development/platform-integration/c-interop">https://flutter.cn/docs/development/platform-integration/c-interop</a></p><p><a href="https://juejin.cn/post/6976824832595853342">https://juejin.cn/post/6976824832595853342</a></p><p><a href="https://blog.csdn.net/NiuAGeNiuC/article/details/118863341">https://blog.csdn.net/NiuAGeNiuC/article/details/118863341</a></p><p><a href="https://blog.csdn.net/helloworld_ptt/article/details/77927515">https://blog.csdn.net/helloworld_ptt/article/details/77927515</a></p><p><a href="https://blog.csdn.net/yushulx/article/details/116270141">https://blog.csdn.net/yushulx/article/details/116270141</a></p><p><a href="https://blog.csdn.net/u010803748/article/details/79599294">https://blog.csdn.net/u010803748/article/details/79599294</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> flutter-desktop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter&amp;c++混合开发 </tag>
            
            <tag> flutter-desktop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学线培训:winter-flutter-1</title>
      <link href="/2022/01/07/%E5%AD%A6%E7%BA%BF%E5%9F%B9%E8%AE%AD-winter-flutter-1/"/>
      <url>/2022/01/07/%E5%AD%A6%E7%BA%BF%E5%9F%B9%E8%AE%AD-winter-flutter-1/</url>
      
        <content type="html"><![CDATA[<h1>Widget 简介（了解）</h1><h2 id="Widget-概念">Widget 概念</h2><p>在前面的介绍中，我们知道在Flutter中几乎所有的对象都是一个 widget 。与原生开发中“控件”不同的是，Flutter 中的 widget 的概念更广泛，<strong>它不仅可以表示UI元素，也可以表示一些功能性的组件</strong>如：用于手势检测的 <code>GestureDetector</code> 、用于APP主题数据传递的 <code>Theme</code> 等等，而<strong>原生开发中的控件通常只是指UI元素</strong>。在后面的内容中，我们在描述UI元素时可能会用到“控件”、“组件”这样的概念，读者心里需要知道他们就是 widget ，只是在不同场景的不同表述而已。由于 Flutter 主要就是用于构建用户界面的，所以，在大多数时候，读者可以认为 widget 就是一个控件，不必纠结于概念。</p><p>Flutter 中是通过 Widget 嵌套 Widget 的方式来构建UI和进行实践处理的，所以记住，<strong>Flutter 中万物皆为Widget。</strong></p><h2 id="Flutter中的四棵树（比较抽象，尽量理解即可）">Flutter中的四棵树（比较抽象，尽量理解即可）</h2><p>既然 Widget 只是描述一个UI元素的配置信息，那么真正的布局、绘制是由谁来完成的呢？Flutter 框架的的处理流程是这样的：</p><ol><li>根据 Widget 树生成一个 Element 树，Element 树中的节点都继承自 <code>Element</code> 类。</li><li>根据 Element 树生成 Render 树（渲染树），渲染树中的节点都继承自<code>RenderObject</code> 类。</li><li>根据渲染树生成 Layer 树，然后上屏显示，Layer 树中的节点都继承自 <code>Layer</code> 类。</li></ol><p>真正的布局和渲染逻辑在 Render 树中，Element 是 Widget 和 RenderObject 的粘合剂，可以理解为一个中间代理。我们通过一个例子来说明，假设有如下 Widget 树：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Container( <span class="comment">// 一个容器 widget</span></span><br><span class="line">  color: Colors.blue, <span class="comment">// 设置容器背景色</span></span><br><span class="line">  child: Row( <span class="comment">// 可以将子widget沿水平方向排列</span></span><br><span class="line">    children: [</span><br><span class="line">      Image.network(<span class="string">&#x27;https://www.example.com/1.png&#x27;</span>), <span class="comment">// 显示图片的 widget</span></span><br><span class="line">      <span class="keyword">const</span> Text(<span class="string">&#x27;A&#x27;</span>),</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>注意，如果 Container 设置了背景色，Container 内部会创建一个新的 ColoredBox 来填充背景，相关逻辑如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (color != <span class="keyword">null</span>)</span><br><span class="line">  current = ColoredBox(color: color!, child: current);</span><br></pre></td></tr></table></figure><p>而 Image 内部会通过 RawImage 来渲染图片、Text 内部会通过 RichText 来渲染文本，所以最终的 Widget树、Element 树、渲染树结构如下：</p><p><img src="8.png" alt=""></p><p>这里需要注意：</p><ol><li>三棵树中，Widget 和 Element 是一一对应的，但并不和 RenderObject 一一对应。比如 <code>StatelessWidget</code> 和 <code>StatefulWidget</code> 都没有对应的 RenderObject。</li><li>渲染树在上屏前会生成一棵 Layer 树。</li><li>以上的内容比较涉及底层原理，这里只是让大家了解一下界面渲染原理，不必深究。</li></ol><h2 id="Context">Context</h2><p><code>build</code>方法有一个<code>context</code>参数，它是<code>BuildContext</code>类的一个实例，表示当前 widget 在 widget 树中的上下文，每一个 widget 都会对应一个 context 对象（因为每一个 widget 都是 widget 树上的一个节点）。实际上，<code>context</code>是当前 widget 在 widget 树中位置中执行”相关操作“的一个句柄(handle)，比如它提供了从当前 widget 开始向上遍历 widget 树以及按照 widget 类型查找父级 widget 的方法。下面是在子树中获取父级 widget 的一个示例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContextRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span>  </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&quot;Context测试&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Container(</span><br><span class="line">        child: Builder(builder: (context) &#123;</span><br><span class="line">          <span class="comment">// 在 widget 树中向上查找最近的父级`Scaffold`  widget </span></span><br><span class="line">          Scaffold scaffold = context.findAncestorWidgetOfExactType&lt;Scaffold&gt;();</span><br><span class="line">          <span class="comment">// 直接返回 AppBar的title， 此处实际上是Text(&quot;Context测试&quot;)</span></span><br><span class="line">          <span class="keyword">return</span> (scaffold.appBar <span class="keyword">as</span> AppBar).title;</span><br><span class="line">        &#125;),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="0.png" alt="运行后效果"></p><h3 id="通过Context获取State对象">通过Context获取State对象</h3><p><code>  context</code>对象有一个<code>findAncestorStateOfType()</code>方法，该方法可以从当前节点沿着 widget 树向上查找指定类型的 StatefulWidget 对应的 State 对象。通常用于在子 widget 树中获取父级 StatefulWidget 的State 对象。</p><p>一般来说，如果 StatefulWidget 的状态是私有的（不应该向外部暴露），那么我们代码中就不应该去直接获取其 State 对象；如果StatefulWidget的状态是希望暴露出的（通常还有一些组件的操作方法），我们则可以去直接获取其State对象。但是通过 <code>context.findAncestorStateOfType</code> 获取 StatefulWidget 的状态的方法是通用的，我们并不能在语法层面指定 StatefulWidget 的状态是否私有，所以在 Flutter 开发中便有了一个默认的约定：**如果 StatefulWidget 的状态是希望暴露出的，应当在 StatefulWidget 中提供一个<code>of</code> 静态方法来获取其 State 对象，开发者便可直接通过该方法来获取；如果 State不希望暴露，则不提供<code>of</code>方法。**这个约定在 Flutter SDK 里随处可见。</p><p>但其实也可以通过GlobalKey去获取，但是代价比较大，加上key的概念更加抽象难以理解，也不做解释。</p><h2 id="StatefulWidget-生命周期：">StatefulWidget 生命周期：</h2><p><img src="1.jpg" alt=""></p><p>跟安卓相比，基本一模一样。</p><h1>热重载</h1><p>Flutter的热重载(hot reload)功能可以帮助您在无需重新启动应用的情况下快速、轻松地进行测试、构建用户界面、添加功能以及修复错误。 通过将更新后的源代码文件注入正在运行的Dart虚拟机（VM）中来实现热重载。在虚拟机使用新的的字段和函数更新类后，Flutter框架会自动重新构建widget树，以便您快速查看更改的效果。</p><p>要热重载一个Flutter应用程序:</p><ol><li><p>从受支持的IntelliJ IDE或终端窗口运行应用程序。物理机或虚拟器都可以运行。</p></li><li><p>修改项目中的一个Dart文件。大多数类型的代码更改可以重新加载; 有关需要完全重新启动的更改列表，请参阅<a href="https://flutterchina.club/hot-reload/#limitations">限制</a>。</p></li><li><p>单击工具栏上的Hot Reload按钮。</p><p><img src="https://flutterchina.club/images/intellij/hot-reload.gif" alt=""></p></li></ol><p>如果您正在使用命令行<code>flutter run</code>运行应用程序，请在终端窗口输入<code>r</code></p><p>成功执行热重载后，您将在控制台中看到类似于以下内容的消息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Performing hot reload...</span><br><span class="line">Reloaded 1 of 448 libraries in 2,777ms.</span><br></pre></td></tr></table></figure><p>在android studio中的位置：</p><p><img src="2.png" alt=""></p><p>比较简单，可以自行尝试</p><h1>路由管理</h1><p>路由（Route）在移动开发中通常指页面（Page），这跟 Web 开发中单页应用的 Route 概念意义是相同的，Route 在 Android中 通常指一个 Activity，在 iOS 中指一个 ViewController。所谓路由管理，就是管理页面之间如何跳转，通常也可被称为导航管理。Flutter 中的路由管理和原生开发类似，无论是 Android 还是 iOS，导航管理都会维护一个路由栈，路由入栈（push）操作对应打开一个新页面，路由出栈（pop）操作对应页面关闭操作，而<strong>路由管理主要是指如何来管理路由栈</strong>。</p><p>同样地，我们在原生中常常遇到一个界面在不可见之后是否要销毁的问题以及清空路由栈等等操作，而这些操作在Flutter中更加便利，我们可以直接调用Navigator进行统一的路由管理，其中的操作其实也不仅限于push与pop。</p><h2 id="Navigator">Navigator</h2><p><code>Navigator</code>是一个路由管理的组件，它提供了打开和退出路由页方法。<code>Navigator</code>通过一个栈来管理活动路由集合，其实就是路由栈。通常当前屏幕显示的页面就是栈顶的路由。<code>Navigator</code>提供了一系列方法来管理路由栈，在此我们只介绍其最常用的两个方法：</p><h3 id="Future-push-BuildContext-context-Route-route">Future push(BuildContext context, Route route)</h3><p>将给定的路由入栈（即打开新的页面），返回值是一个<code>Future</code>对象，用以接收新路由出栈（即关闭）时的返回数据。但是实际上，如果你仅仅是想打开一个新的界面，完全可以这样：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IconButton(</span><br><span class="line">    onPressed:()&#123;</span><br><span class="line">         Navigator.push(context, PageName());</span><br><span class="line">    &#125;</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>意味着将这个界面打开（入栈）。</p><h3 id="bool-pop-BuildContext-context-result">bool pop(BuildContext context, [ result ])</h3><p>将栈顶路由出栈，也就是关闭当前界面，<code>result</code> 为页面关闭时返回给上一个页面的数据。</p><p>同上，如果没有什么需求，直接这样就行：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IconButton(</span><br><span class="line">    onPressed:()&#123;</span><br><span class="line">         Navigator.pop(context);</span><br><span class="line">    &#125;</span><br><span class="line">),</span><br></pre></td></tr></table></figure><h3 id="PS">PS.</h3><p><code>Navigator</code> 还有很多其它方法，如<code>Navigator.replace</code>、<code>Navigator.popUntil</code>等,通过这些方法的使用甚至组合使用，其实可以解决很多逻辑上的难题，详情自行使用搜索引擎进行查阅，在此不再赘述，路由逻辑上的问题，只要能够发现，一般都会有现成的比较成熟的解决方案。下面我们还需要介绍一下路由相关的另一个概念“命名路由”。</p><h4 id="实例方法">实例方法</h4><p>Navigator类中第一个参数为context的<strong>静态方法</strong>都对应一个Navigator的<strong>实例方法</strong>， 比如<code>Navigator.push(BuildContext context, Route route)</code>等价于<code>Navigator.of(context).push(Route route)</code> ，下面命名路由相关的方法也是一样的。这个在上面的context与widget树部分有提到。</p><h2 id="路由传值">路由传值</h2><p>很多时候，在路由跳转时我们需要带一些参数，比如打开商品详情页时，我们需要带一个商品id，这样商品详情页才知道展示哪个商品信息；又比如我们在填写订单时需要选择收货地址，打开地址选择页并选择地址后，可以将用户选择的地址返回到订单页等等。下面我们通过一个简单的示例来演示新旧路由如何传参。</p><h3 id="示例">示例</h3><p>我们创建一个<code>TipRoute</code>路由，它接受一个提示文本参数，负责将传入它的文本显示在页面上，另外<code>TipRoute</code>中我们添加一个“返回”按钮，点击后在返回上一个路由的同时会带上一个返回参数，下面我们看一下实现代码。</p><p><code>TipRoute</code>实现代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TipRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  TipRoute(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.text,  <span class="comment">// 接收一个text参数</span></span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> text;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&quot;提示&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Padding(</span><br><span class="line">        padding: EdgeInsets.all(<span class="number">18</span>),</span><br><span class="line">        child: Center(</span><br><span class="line">          child: Column(</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Text(text),</span><br><span class="line">              ElevatedButton(</span><br><span class="line">                onPressed: () =&gt; Navigator.pop(context, <span class="string">&quot;我是返回值&quot;</span>),</span><br><span class="line">                child: Text(<span class="string">&quot;返回&quot;</span>),</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是打开新路由<code>TipRoute</code>的代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouterTestRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: ElevatedButton(</span><br><span class="line">        onPressed: () <span class="keyword">async</span> &#123;</span><br><span class="line">          <span class="comment">// 打开`TipRoute`，并等待返回结果</span></span><br><span class="line">          <span class="keyword">var</span> result = <span class="keyword">await</span> Navigator.push(</span><br><span class="line">            context,</span><br><span class="line">            MaterialPageRoute(</span><br><span class="line">              builder: (context) &#123;</span><br><span class="line">                <span class="keyword">return</span> TipRoute(</span><br><span class="line">                  <span class="comment">// 路由参数</span></span><br><span class="line">                  text: <span class="string">&quot;我是提示xxxx&quot;</span>,</span><br><span class="line">                );</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          );</span><br><span class="line">          <span class="comment">//输出`TipRoute`路由返回结果</span></span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&quot;路由返回值: <span class="subst">$result</span>&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        child: Text(<span class="string">&quot;打开提示页&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面代码，点击<code>RouterTestRoute</code>页的“打开提示页”按钮，会打开<code>TipRoute</code>页，运行效果如图2-4所示下：</p><p><img src="https://book.flutterchina.club/assets/img/2-4.1abb1cab.png" alt=""></p><p>需要说明：</p><ol><li><p>提示文案“我是提示xxxx”是通过<code>TipRoute</code>的<code>text</code>参数传递给新路由页的。我们可以通过等待<code>Navigator.push(…)</code>返回的<code>Future</code>来获取新路由的返回数据。</p></li><li><p>在<code>TipRoute</code>页中有两种方式可以返回到上一页；第一种方式是直接点击导航栏返回箭头，第二种方式是点击页面中的“返回”按钮。这两种返回方式的区别是前者不会返回数据给上一个路由，而后者会。下面是分别点击页面中的返回按钮和导航栏返回箭头后，<code>RouterTestRoute</code>页中<code>print</code>方法在控制台输出的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I/flutter (27896): 路由返回值: 我是返回值</span><br><span class="line">I/flutter (27896): 路由返回值: null</span><br></pre></td></tr></table></figure></li></ol><p>上面介绍的是非命名路由的传值方式，命名路由的传值方式会有所不同，我们会在下面介绍命名路由时介绍。</p><h2 id="命名路由">命名路由</h2><p>所谓“命名路由”（Named Route）即有名字的路由，我们可以先给路由起一个名字，然后就可以通过路由名字直接打开新的路由了，这为路由管理带来了一种直观、简单的方式。其实这种方式只是方便对路由进行统一管理，可以理解为键值对，与直接使用并无太大区别。通过使用命名路由，可以将路由与跳转的界面进行解耦，方便修改目标界面（不过小型项目倒无所谓）。</p><h3 id="路由表">路由表</h3><p>要想使用命名路由，我们必须先提供并注册一个路由表（routing table），这样应用程序才知道哪个名字与哪个路由组件相对应。路由表的定义如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, WidgetBuilder&gt; routes;</span><br></pre></td></tr></table></figure><p>它是一个<code>Map</code>，key为路由的名字，是个字符串；value是个<code>builder</code>回调函数，用于生成相应的路由widget。我们在通过路由名字打开新路由时，应用会根据路由名字在路由表中查找到对应的<code>WidgetBuilder</code>回调函数，然后调用该回调函数生成路由widget并返回。</p><h3 id="注册路由表">注册路由表</h3><p>路由表的注册方式很简单，我们回到之前“计数器”的示例，然后在<code>MyApp</code>类的<code>build</code>方法中找到<code>MaterialApp</code>，添加<code>routes</code>属性，代码如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp(</span><br><span class="line">  title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">  theme: ThemeData(</span><br><span class="line">    primarySwatch: Colors.blue,</span><br><span class="line">  ),</span><br><span class="line">  <span class="comment">//注册路由表</span></span><br><span class="line">  routes:&#123;</span><br><span class="line">   <span class="string">&quot;new_page&quot;</span>:(context) =&gt; NewRoute(),</span><br><span class="line">    ... <span class="comment">// 省略其它路由注册信息</span></span><br><span class="line">  &#125; ,</span><br><span class="line">  home: MyHomePage(title: <span class="string">&#x27;Flutter Demo Home Page&#x27;</span>),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>现在我们就完成了路由表的注册。上面的代码中<code>home</code>路由并没有使用命名路由，如果我们也想将<code>home</code>注册为命名路由应该怎么做呢？其实很简单，直接看代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp(</span><br><span class="line">  title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">  initialRoute:<span class="string">&quot;/&quot;</span>, <span class="comment">//名为&quot;/&quot;的路由作为应用的home(首页)</span></span><br><span class="line">  theme: ThemeData(</span><br><span class="line">    primarySwatch: Colors.blue,</span><br><span class="line">  ),</span><br><span class="line">  <span class="comment">//注册路由表</span></span><br><span class="line">  routes:&#123;</span><br><span class="line">   <span class="string">&quot;new_page&quot;</span>:(context) =&gt; NewRoute(),</span><br><span class="line">   <span class="string">&quot;/&quot;</span>:(context) =&gt; MyHomePage(title: <span class="string">&#x27;Flutter Demo Home Page&#x27;</span>), <span class="comment">//注册首页路由</span></span><br><span class="line">  &#125; </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>可以看到，我们只需在路由表中注册一下<code>MyHomePage</code>路由，然后将其名字作为<code>MaterialApp</code>的<code>initialRoute</code>属性值即可，该属性决定应用的初始路由页是哪一个命名路由。</p><h3 id="通过路由名打开新路由页">通过路由名打开新路由页</h3><p>要通过路由名称来打开新路由，可以使用<code>Navigator</code> 的<code>pushNamed</code>方法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Future pushNamed(BuildContext context, <span class="built_in">String</span> routeName,&#123;<span class="built_in">Object</span> arguments&#125;)</span><br></pre></td></tr></table></figure><p><code>Navigator</code> 除了<code>pushNamed</code>方法，还有<code>pushReplacementNamed</code>等其他管理命名路由的方法，可以自行使用搜索引擎查看他们的作用。接下来我们通过路由名来打开新的路由页，修改<code>TextButton</code>的<code>onPressed</code>回调代码，改为：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">onPressed: () &#123;</span><br><span class="line">  Navigator.pushNamed(context, <span class="string">&quot;new_page&quot;</span>);</span><br><span class="line">  <span class="comment">//Navigator.push(context,</span></span><br><span class="line">  <span class="comment">//  MaterialPageRoute(builder: (context) &#123;</span></span><br><span class="line">  <span class="comment">//  return NewRoute();</span></span><br><span class="line">  <span class="comment">//&#125;));  </span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>热重载应用，再次点击“open new route”按钮，依然可以打开新的路由页。</p><h3 id="命名路由参数传递">命名路由参数传递</h3><p>在Flutter最初的版本中，命名路由是不能传递参数的，后来才支持了参数；下面展示命名路由如何传递并获取路由参数：</p><p>我们先注册一个路由：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">routes:&#123;</span><br><span class="line">  <span class="string">&quot;new_page&quot;</span>:(context) =&gt; EchoRoute(),</span><br><span class="line"> &#125; ,</span><br></pre></td></tr></table></figure><p>在路由页通过<code>RouteSetting</code>对象获取路由参数：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EchoRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">//获取路由参数  </span></span><br><span class="line">    <span class="keyword">var</span> args=ModalRoute.of(context).settings.arguments;</span><br><span class="line">    <span class="comment">//...省略无关代码</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在打开路由时传递参数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Navigator.of(context).pushNamed(<span class="string">&quot;new_page&quot;</span>, arguments: <span class="string">&quot;hi&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="PS-2">PS.</h3><p>关于一些路由的基本逻辑操作，可以参考<a href="https://www.jianshu.com/p/44650be76110">这篇博客</a></p><h1>布局逻辑</h1><p>在原生开发的时候一直提倡大家用LinearLayout，其中一个原因就是Flutter的默认布局逻辑基本就是LinearLayout，所以在原生使用相对布局的同学可能会比较难受，不过用习惯了就好，毕竟这个布局逻辑是很容易接受的。</p><p>如果大家看《Flutter实战》，在布局类组件（第四章）可以先忽略4.1和4.2，这两部分可能对大家来说特别陌生、难以接受，不过还是推荐了解一下SizedBox，这个容器简单好用。</p><p>下面主要说一下线性布局与弹性布局。</p><h2 id="线性布局">线性布局</h2><p>Flutter 中通过<code>Row</code>和<code>Column</code>来实现线性布局，类似于Android 中的<code>LinearLayout</code>控件。<code>Row</code>和<code>Column</code>都继承自<code>Flex</code>，我们将在弹性布局一节中详细介绍<code>Flex</code>。</p><h3 id="主轴和纵轴">主轴和纵轴</h3><p>对于线性布局，有<strong>主轴</strong>和<strong>纵轴</strong>之分，<strong>如果布局是沿水平方向，那么主轴就是指水平方向，而纵轴即垂直方向；如果布局沿垂直方向，那么主轴就是指垂直方向，而纵轴就是水平方向。在线性布局中，有两个定义对齐方式的枚举类<code>MainAxisAlignment</code>和<code>CrossAxisAlignment</code>，分别代表主轴对齐和纵轴对齐。</strong></p><h3 id="Row">Row</h3><p>Row可以沿水平方向排列其子widget。定义如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Row(&#123;</span><br><span class="line">  ...  </span><br><span class="line">  TextDirection textDirection,    </span><br><span class="line">  MainAxisSize mainAxisSize = MainAxisSize.max,    </span><br><span class="line">  MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start,</span><br><span class="line">  VerticalDirection verticalDirection = VerticalDirection.down,  </span><br><span class="line">  CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center,</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>textDirection</code>：表示水平方向子组件的布局顺序(是从左往右还是从右往左)，默认为系统当前Locale环境的文本方向(如中文、英语都是从左往右，而阿拉伯语是从右往左)。</li><li><code>mainAxisSize</code>：<strong>表示<code>Row</code>在主轴(水平)方向占用的空间</strong>，默认是<code>MainAxisSize.max</code>，表示尽可能多的占用水平方向的空间，此时无论子 widgets 实际占用多少水平空间，<code>Row</code>的宽度始终等于水平方向的最大宽度；而<code>MainAxisSize.min</code>表示尽可能少的占用水平空间，当子组件没有占满水平剩余空间，则<code>Row</code>的实际宽度等于所有子组件占用的的水平空间；</li><li><code>mainAxisAlignment</code>：<strong>表示子组件在<code>Row</code>所占用的水平空间内对齐方式</strong>，如果<code>mainAxisSize</code>值为<code>MainAxisSize.min</code>，则此属性无意义，因为子组件的宽度等于<code>Row</code>的宽度。只有当<code>mainAxisSize</code>的值为<code>MainAxisSize.max</code>时，此属性才有意义，<code>MainAxisAlignment.start</code>表示沿<code>textDirection</code>的初始方向对齐，如<code>textDirection</code>取值为<code>TextDirection.ltr</code>时，则<code>MainAxisAlignment.start</code>表示左对齐，<code>textDirection</code>取值为<code>TextDirection.rtl</code>时表示从右对齐。而<code>MainAxisAlignment.end</code>和<code>MainAxisAlignment.start</code>正好相反；<code>MainAxisAlignment.center</code>表示居中对齐。读者可以这么理解：<code>textDirection</code>是<code>mainAxisAlignment</code>的参考系。</li><li><code>verticalDirection</code>：表示<code>Row</code>纵轴（垂直）的对齐方向，默认是<code>VerticalDirection.down</code>，表示从上到下。</li><li><code>crossAxisAlignment</code>：表示子组件在纵轴方向的对齐方式，<code>Row</code>的高度等于子组件中最高的子元素高度，它的取值和<code>MainAxisAlignment</code>一样(包含<code>start</code>、<code>end</code>、 <code>center</code>三个值)，不同的是<code>crossAxisAlignment</code>的参考系是<code>verticalDirection</code>，即<code>verticalDirection</code>值为<code>VerticalDirection.down</code>时<code>crossAxisAlignment.start</code>指顶部对齐，<code>verticalDirection</code>值为<code>VerticalDirection.up</code>时，<code>crossAxisAlignment.start</code>指底部对齐；而<code>crossAxisAlignment.end</code>和<code>crossAxisAlignment.start</code>正好相反；</li><li><strong><code>children</code> ：子组件数组。</strong></li></ul><h3 id="示例-2">示例</h3><p>请阅读下面代码，先想象一下运行的结果：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Column(</span><br><span class="line">  <span class="comment">//测试Row对齐方式，排除Column默认居中对齐的干扰</span></span><br><span class="line">  crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    Row(</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Text(<span class="string">&quot; hello world &quot;</span>),</span><br><span class="line">        Text(<span class="string">&quot; I am Jack &quot;</span>),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">    Row(</span><br><span class="line">      mainAxisSize: MainAxisSize.min,</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Text(<span class="string">&quot; hello world &quot;</span>),</span><br><span class="line">        Text(<span class="string">&quot; I am Jack &quot;</span>),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">    Row(</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.end,</span><br><span class="line">      textDirection: TextDirection.rtl,</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Text(<span class="string">&quot; hello world &quot;</span>),</span><br><span class="line">        Text(<span class="string">&quot; I am Jack &quot;</span>),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">    Row(</span><br><span class="line">      crossAxisAlignment: CrossAxisAlignment.start,  </span><br><span class="line">      verticalDirection: VerticalDirection.up,</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Text(<span class="string">&quot; hello world &quot;</span>, style: TextStyle(fontSize: <span class="number">30.0</span>),),</span><br><span class="line">        Text(<span class="string">&quot; I am Jack &quot;</span>),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>实际运行结果如图所示：</p><p><img src="3.png" alt=""></p><p>解释：第一个<code>Row</code>很简单，默认为居中对齐；第二个<code>Row</code>，由于<code>mainAxisSize</code>值为<code>MainAxisSize.min</code>，<code>Row</code>的宽度等于两个<code>Text</code>的宽度和，所以对齐是无意义的，所以会从左往右显示；第三个<code>Row</code>设置<code>textDirection</code>值为<code>TextDirection.rtl</code>，所以子组件会从右向左的顺序排列，而此时<code>MainAxisAlignment.end</code>表示左对齐，所以最终显示结果就是图中第三行的样子；第四个 Row 测试的是纵轴的对齐方式，由于两个子 Text 字体不一样，所以其高度也不同，我们指定了<code>verticalDirection</code>值为<code>VerticalDirection.up</code>，即从低向顶排列，而此时<code>crossAxisAlignment</code>值为<code>CrossAxisAlignment.start</code>表示底对齐。</p><h3 id="Column">Column</h3><p><code>Column</code>可以在垂直方向排列其子组件。参数和<code>Row</code>一样，不同的是布局方向为垂直，主轴纵轴正好相反，读者可类比<code>Row</code>来理解，下面看一个例子：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CenterColumnRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Text(<span class="string">&quot;hi&quot;</span>),</span><br><span class="line">        Text(<span class="string">&quot;world&quot;</span>),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果如图所示：</p><p><img src="4.png" alt=""></p><p>解释：</p><ul><li>由于我们没有指定<code>Column</code>的<code>mainAxisSize</code>，所以使用默认值<code>MainAxisSize.max</code>，则<code>Column</code>会在垂直方向占用尽可能多的空间，此例中会占满整个屏幕高度。</li><li>由于我们指定了 <code>crossAxisAlignment</code> 属性为<code>CrossAxisAlignment.center</code>，那么子项在<code>Column</code>纵轴方向（此时为水平方向）会居中对齐。注意，在水平方向对齐是有边界的，总宽度为<code>Column</code>占用空间的实际宽度，而实际的宽度取决于子项中宽度最大的Widget。在本例中，<code>Column</code>有两个子Widget，而显示“world”的<code>Text</code>宽度最大，所以<code>Column</code>的实际宽度则为<code>Text(&quot;world&quot;)</code> 的宽度，所以居中对齐后<code>Text(&quot;hi&quot;)</code>会显示在<code>Text(&quot;world&quot;)</code>的中间部分。</li></ul><p><strong>实际上，<code>Row</code>和<code>Column</code>都只会在主轴方向占用尽可能大的空间，而纵轴的长度则取决于他们最大子元素的长度</strong>。如果我们想让本例中的两个文本控件在整个手机屏幕中间对齐，我们有两种方法：</p><ul><li><p>将<code>Column</code>的宽度指定为屏幕宽度；这很简单，我们可以通过<code>ConstrainedBox</code>或<code>SizedBox</code>（我们将在后面章节中专门介绍这两个Widget）来强制更改宽度限制，例如：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ConstrainedBox(</span><br><span class="line">  constraints: BoxConstraints(minWidth: <span class="built_in">double</span>.infinity), </span><br><span class="line">  child: Column(</span><br><span class="line">    crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">      Text(<span class="string">&quot;hi&quot;</span>),</span><br><span class="line">      Text(<span class="string">&quot;world&quot;</span>),</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>将<code>minWidth</code>设为<code>double.infinity</code>，可以使宽度占用尽可能多的空间。</p></li><li><p>使用<code>Center</code> 组件；将在后面章节中介绍。</p></li></ul><h3 id="特殊情况">特殊情况</h3><p>如果<code>Row</code>里面嵌套<code>Row</code>，或者<code>Column</code>里面再嵌套<code>Column</code>，那么只有最外面的<code>Row</code>或<code>Column</code>会占用尽可能大的空间，里面<code>Row</code>或<code>Column</code>所占用的空间为实际大小，下面以<code>Column</code>为例说明：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Container(</span><br><span class="line">  color: Colors.green,</span><br><span class="line">  child: Padding(</span><br><span class="line">    padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">    child: Column(</span><br><span class="line">      crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">      mainAxisSize: MainAxisSize.max, <span class="comment">//有效，外层Colum高度为整个屏幕</span></span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Container(</span><br><span class="line">          color: Colors.red,</span><br><span class="line">          child: Column(</span><br><span class="line">            mainAxisSize: MainAxisSize.max,<span class="comment">//无效，内层Colum高度为实际高度  </span></span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Text(<span class="string">&quot;hello world &quot;</span>),</span><br><span class="line">              Text(<span class="string">&quot;I am Jack &quot;</span>),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>运行效果如图所示：</p><p><img src="5.png" alt=""></p><p>如果要让里面的<code>Column</code>占满外部<code>Column</code>，可以使用<code>Expanded</code> 组件：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Expanded( </span><br><span class="line">  child: Container(</span><br><span class="line">    color: Colors.red,</span><br><span class="line">    child: Column(</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.center, <span class="comment">//垂直方向居中对齐</span></span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Text(<span class="string">&quot;hello world &quot;</span>),</span><br><span class="line">        Text(<span class="string">&quot;I am Jack &quot;</span>),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>运行效果如图所示：</p><p><img src="6.png" alt=""></p><p>我们将在介绍弹性布局时详细介绍Expanded。</p><h2 id="弹性布局">弹性布局</h2><p>弹性布局允许子组件按照一定比例来分配父容器空间。弹性布局的概念在其它UI系统中也都存在，如 H5 中的弹性盒子布局，Android中 的<code>FlexboxLayout</code>等。Flutter 中的弹性布局主要通过<code>Flex</code>和<code>Expanded</code>来配合实现。</p><h3 id="Flex">Flex</h3><p><code>Flex</code>组件可以沿着水平或垂直方向排列子组件，如果你知道主轴方向，使用<code>Row</code>或<code>Column</code>会方便一些，<strong>因为<code>Row</code>和<code>Column</code>都继承自<code>Flex</code></strong>，参数基本相同，所以能使用Flex的地方基本上都可以使用<code>Row</code>或<code>Column</code>。<code>Flex</code>本身功能是很强大的，它也可以和<code>Expanded</code>组件配合实现弹性布局。接下来我们只讨论<code>Flex</code>和弹性布局相关的属性(其它属性已经在介绍<code>Row</code>和<code>Column</code>时介绍过了)。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Flex(&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">required</span> <span class="keyword">this</span>.direction, <span class="comment">//弹性布局的方向, Row默认为水平方向，Column默认为垂直方向</span></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; children = <span class="keyword">const</span> &lt;Widget&gt;[],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>Flex</code>继承自<code>MultiChildRenderObjectWidget</code>，对应的<code>RenderObject</code>为<code>RenderFlex</code>，<code>RenderFlex</code>中实现了其布局算法。</p><h3 id="Expanded">Expanded</h3><p><strong>Expanded 只能作为 Flex 的孩子（否则会报错）</strong>，它可以按比例“扩伸”<code>Flex</code>子组件所占用的空间。因为 <code>Row</code>和<code>Column</code> 继都承自Flex，所以 Expanded 也可以作为它们的孩子。</p><p>也就是说，Expanded组件必须用在Row、Column、Flex内，并且从Expanded到封装它的Row、Column、Flex的路径必须只包括StatelessWidgets或StatefulWidgets组件(不能是其他类型的组件，像RenderObjectWidget，它是渲染对象，不再改变尺寸了，因此Expanded不能放进RenderObjectWidget)。</p><p>注意一点：在Row中使用Expanded的时候，无法指定Expanded中的子组件的宽度width，但可以指定其高度height。同理，在Column中使用Expanded的时候，无法指定Expanded中的子组件的高度height，可以指定宽度width。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Expanded(&#123;</span><br><span class="line">  <span class="built_in">int</span> flex = <span class="number">1</span>, </span><br><span class="line">  <span class="keyword">required</span> Widget child,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>flex</code>参数为弹性系数，如果为 0 或<code>null</code>，则<code>child</code>是没有弹性的，即不会被扩伸占用的空间。如果大于0，所有的<code>Expanded</code>按照其 flex 的比例来分割主轴的全部空闲空间。下面我们看一个例子：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlexLayoutTestRoute</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        <span class="comment">//Flex的两个子widget按1：2来占据水平空间  </span></span><br><span class="line">        Flex(</span><br><span class="line">          direction: Axis.horizontal,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Expanded(</span><br><span class="line">              flex: <span class="number">1</span>,</span><br><span class="line">              child: Container(</span><br><span class="line">                height: <span class="number">30.0</span>,</span><br><span class="line">                color: Colors.red,</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            Expanded(</span><br><span class="line">              flex: <span class="number">2</span>,</span><br><span class="line">              child: Container(</span><br><span class="line">                height: <span class="number">30.0</span>,</span><br><span class="line">                color: Colors.green,</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        Padding(</span><br><span class="line">          padding: <span class="keyword">const</span> EdgeInsets.only(top: <span class="number">20.0</span>),</span><br><span class="line">          child: SizedBox(</span><br><span class="line">            height: <span class="number">100.0</span>,</span><br><span class="line">            <span class="comment">//Flex的三个子widget，在垂直方向按2：1：1来占用100像素的空间  </span></span><br><span class="line">            child: Flex(</span><br><span class="line">              direction: Axis.vertical,</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                Expanded(</span><br><span class="line">                  flex: <span class="number">2</span>,</span><br><span class="line">                  child: Container(</span><br><span class="line">                    height: <span class="number">30.0</span>,</span><br><span class="line">                    color: Colors.red,</span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">                Spacer(</span><br><span class="line">                  flex: <span class="number">1</span>,</span><br><span class="line">                ),</span><br><span class="line">                Expanded(</span><br><span class="line">                  flex: <span class="number">1</span>,</span><br><span class="line">                  child: Container(</span><br><span class="line">                    height: <span class="number">30.0</span>,</span><br><span class="line">                    color: Colors.green,</span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果如图所示：</p><p><img src="7.png" alt="弹性布局"></p><p>示例中的<code>Spacer</code>的功能是占用指定比例的空间，实际上它只是<code>Expanded</code>的一个包装类，<code>Spacer</code>的源码如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spacer</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Spacer(&#123;Key? key, <span class="keyword">this</span>.flex = <span class="number">1</span>&#125;)</span><br><span class="line">    : <span class="keyword">assert</span>(flex != <span class="keyword">null</span>),</span><br><span class="line">      <span class="keyword">assert</span>(flex &gt; <span class="number">0</span>),</span><br><span class="line">      <span class="keyword">super</span>(key: key);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> flex;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Expanded(</span><br><span class="line">      flex: flex,</span><br><span class="line">      child: <span class="keyword">const</span> SizedBox.shrink(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结">小结</h3><p>弹性布局比较简单，唯一需要注意的就是<code>Row</code>、<code>Column</code>以及<code>Flex</code>的关系。</p><p>Expanded经常会出现应用不正确的报错，一般是将Expanded用在了一个无界widget中导致渲染器报错，大家多去尝试、踩坑。</p><p>可以参考<a href="https://blog.csdn.net/devnn/article/details/105892081">这个博客</a>去了解一些expanded与col和row的组合使用</p><h3 id="PS-3">PS.</h3><p><a href="https://juejin.cn/post/6844903857697325069">占位 Spacer()</a>,以及<a href="https://www.youtube.com/watch?v=7FJgd7QN1zI">油管教学</a></p><h1>状态管理</h1><p>这里提一嘴状态管理，但是初期遇到的状态管理问题可能并不多。</p><p>响应式的编程框架中都会有一个永恒的主题——“状态(State)管理”，无论是在 React/Vue（两者都是支持响应式编程的 Web 开发框架）还是 Flutter 中，他们讨论的问题和解决的思想都是一致的。所以，<code>StatefulWidget</code>的状态应该被谁管理？Widget本身？父 Widget ？都会？还是另一个对象？答案是取决于实际情况！以下是管理状态的最常见的方法：</p><ul><li>Widget 管理自己的状态。</li><li>Widget 管理子 Widget 状态。</li><li>混合管理（父 Widget 和子 Widget 都管理状态）。</li></ul><p>实际上，还是以计数器为例，一个很经典的问题就是，点击加号之后如何更新界面？如果你使用setState，当然可以，但是会将整个widget树都更新一遍，但是实际上我们很明确只会更新树中的一个节点的属性，这是很浪费性能的。在者，若果在一个界面上改变了某个值，如何在其余界面上将这个改变表现出来？或者说，如何通知其他界面更新这个值？这都是状态管理的问题。或许你可以重新跳转到那个界面，但同样地，如果这个界面本就在路由栈中，重新构建这个界面会浪费性能，而且可能导致路由错乱。</p><p>为此，开发者们可谓耗尽心机，为此做了很多库，比如Provider和GetX，都是很好用的状态管理库，如果有兴趣可以尝试，GetX优先。</p><p>参考资料：</p><blockquote><p><a href="https://book.flutterchina.club/">《Flutter实战·第二版》</a></p><p><a href="https://flutterchina.club/">Flutter中文网</a></p><p><a href="https://juejin.cn/post/6844903857697325069">https://juejin.cn/post/6844903857697325069</a></p><p><a href="https://www.cnblogs.com/tian874540961/p/10515020.html">https://www.cnblogs.com/tian874540961/p/10515020.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学线培训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学线培训 </tag>
            
            <tag> 移动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022:new_year</title>
      <link href="/2022/01/01/2022-new-year/"/>
      <url>/2022/01/01/2022-new-year/</url>
      
        <content type="html"><![CDATA[<h2 id="正文">正文</h2><p>转眼一年半过去了，感觉也还算自由自在。没有什么太烦心的事，也算不上什么一帆风顺。</p><img src="0.jpg" style="zoom:36%;" /><img src="2.jpg" alt="（奇奇怪怪的姿势）" style="zoom:38%;" /><p>回首过去的一年，经历了好多，但要是想一一细数，却又那么朦胧难辨。倒不是说没有什么值得留念的，可能因为我并不喜欢追忆过往，往事如云烟，还是随它去吧。</p><p>只觉得，过去一年，浮浮沉沉，收获了很多东西，也不可避免地失去了一些，毕竟，我也在“磨损”。很庆幸身边有志同道合的伙伴，手头有自己享受的工作。</p><p><img src="1.jpg" alt="（奇奇怪怪的提交记录）"></p><p>未来的路想怎么走，还不好说，感觉还是比较茫茫然，虽然日常真的很喜欢看稚晖君，不过基本是不会追随他的步伐了，（毕竟栈溢出工程师也不是人人都能成的），感觉手头还有很多东西要学，OpenCV，JVM，安卓与flutter底层原理与渲染机制，动画与绘制原理…反正是多的数不过来，大概也会有所取舍。其实还是很庆幸保留了自己的一点小脾气，只学自己喜欢的，不喜欢的就猛摆烂，怎么说。。。。。有利有弊吧。</p><p>如果你问我，我的人生会如何规划，那我肯定也不知道。不过估计也没多少人会这么关心我，而且就算知道，我自己大概也不会理会，甚至直接背道而驰。新的一年，我只希望能够平安顺遂，有风有浪。其实这么多年，结交的朋友也不少，但真正留在身边的却屈指可数，大家各有各的路要走，我也更希望大家都能在自己的路上开开心心地走到底。</p><img src="4.jpg" style="zoom:25%;" /><p>我们都将长大。</p><img src="5.jpg" style="zoom:30%;" /><p>好吧，叨叨了这么多，感觉又说了半天废话，明天还要考试，也该安心看看书了。</p><p>以上</p><img src="3.jpg" style="zoom:20%;" /><h2 id="后记">后记</h2><p>得偿所愿咯。</p>]]></content>
      
      
      <categories>
          
          <category> 值得纪念的事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端数据过期的处理策略</title>
      <link href="/2021/12/21/%E5%90%8E%E7%AB%AF%E6%95%B0%E6%8D%AE%E8%BF%87%E6%9C%9F%E7%9A%84%E5%A4%84%E7%90%86%E7%AD%96%E7%95%A5/"/>
      <url>/2021/12/21/%E5%90%8E%E7%AB%AF%E6%95%B0%E6%8D%AE%E8%BF%87%E6%9C%9F%E7%9A%84%E5%A4%84%E7%90%86%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<p>课设中涉及对过期需求的自动处理（自动设置状态为超时），其实日常生活中也有很多相类似的问题，比如订单签收后若买家没有确认收货则要在24小时后自动确认，或者QQ每到周一早上的一个固定时间就会给用户发送上周QQ空间的访客情况，老师要设置作业的截止日期，过期学生就不能使用提交作业的功能。</p><p>其实个人总结了一下大致可以分为两类任务，一类属于延时任务，比如订单的24小时自动确认收货，另一类属于定时任务，比如在某个特定的时间给用户发送报告，课设中的任务其实就是一个定时任务，而类似的问题其实在个人课设中也有出现。</p><p>不过不同的是个人课设中的选课时间功能完全可以简化处理，即在学生进行选课操作时检查当前时间与规定时间，并对超时请求进行拦截以达到显示超时的目的。但此次团体课设则不同，此次团体课设要求检查的是截止日期是否超时，并对超时的需求执行对应的操作，主要考虑到高效性与实效性，并不能简单地通过前端请求进行拦截。</p><p>基于此，我设计了三种方案，三种方案优缺点各异，但在横向与纵向的比较之中带给了我很大的启发。</p><h3 id="数据库轮询">数据库轮询</h3><p>第一种是对数据库进行定期轮询，即通过一个线程定时的去扫描数据库，通过当前时间来判断是否有超时的需求，然后进行相关操作。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wzt.tapm.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> okhttp3.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoTimeOutStarter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_URL = <span class="string">&quot;http://localhost:8081&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JSONArray data ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HttpUtil httpUtil = <span class="keyword">new</span> HttpUtil();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Callback updateListCallback = <span class="keyword">new</span> Callback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (response.body() != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    String responseData = response.body().string();</span><br><span class="line">                    JSONObject object = JSON.parseObject(responseData);</span><br><span class="line">                    data = object.getJSONArray(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (data.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat();<span class="comment">// 格式化时间</span></span><br><span class="line">                        sdf.applyPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">                        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">                        String DayNow = sdf.format(date);</span><br><span class="line">                        <span class="comment">//处理数据</span></span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.size(); i++) &#123;</span><br><span class="line">                            JSONObject jsonObject = data.getJSONObject(i);</span><br><span class="line">                            String ddl = jsonObject.getString(<span class="string">&quot;ddl&quot;</span>);</span><br><span class="line">                            <span class="keyword">if</span> (ddl.compareTo(DayNow) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                                String status = jsonObject.getString(<span class="string">&quot;status&quot;</span>);</span><br><span class="line">                                FormBody formBody;</span><br><span class="line">                                <span class="keyword">if</span> (status.equals(<span class="string">&quot;2&quot;</span>))&#123;</span><br><span class="line">                                    formBody = <span class="keyword">new</span> FormBody.Builder()</span><br><span class="line">                                            .add(<span class="string">&quot;demand_id&quot;</span>,jsonObject.getString(<span class="string">&quot;demand_id&quot;</span>))</span><br><span class="line">                                            .add(<span class="string">&quot;commit&quot;</span>,<span class="string">&quot;需求已超时&quot;</span>)</span><br><span class="line">                                            .build();</span><br><span class="line">                                    timeOutFrom2To6(formBody);</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">if</span> (status.equals(<span class="string">&quot;4&quot;</span>))&#123;</span><br><span class="line">                                    formBody = <span class="keyword">new</span> FormBody.Builder()</span><br><span class="line">                                            .add(<span class="string">&quot;demand_id&quot;</span>,jsonObject.getString(<span class="string">&quot;demand_id&quot;</span>))</span><br><span class="line">                                            .add(<span class="string">&quot;commit&quot;</span>,<span class="string">&quot;需求已超时&quot;</span>)</span><br><span class="line">                                            .build();</span><br><span class="line">                                    timeOutFrom4To6(formBody);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//打印异常栈</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(() -&gt;&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                updateList(updateListCallback);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">86400</span>*<span class="number">1000</span>);<span class="comment">//一天</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateList</span><span class="params">(Callback updateListCallback)</span></span>&#123;</span><br><span class="line">        FormBody formBody = <span class="keyword">new</span> FormBody.Builder().build();</span><br><span class="line">        httpUtil.OKHttpWithCallBack(<span class="keyword">false</span>,BASE_URL+<span class="string">&quot;/getDemandDdlData&quot;</span>, updateListCallback,formBody);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">timeOutFrom2To6</span><span class="params">(FormBody formBody)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        httpUtil.OKHttpWithoutCallBack(<span class="keyword">false</span>,BASE_URL+<span class="string">&quot;/demand/from2to6&quot;</span>,formBody);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">timeOutFrom4To6</span><span class="params">(FormBody formBody)</span></span>&#123;</span><br><span class="line">        httpUtil.OKHttpWithoutCallBack(<span class="keyword">false</span>,BASE_URL+<span class="string">&quot;/demand/from4to6&quot;</span>,formBody);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中<code>httputil</code>是我以前自己封装的方法，参见https://zwn2001.github.io/2021/10/27/%E7%BD%91%E7%BB%9C%E7%9A%84%E5%BC%82%E6%AD%A5/的代码部分。</p><p>项目中采用的就是这种方法，原因很简单：</p><blockquote><ul><li><p>时间只精确到天，只要每天扫描一遍数据库即可，对数据库的损耗并不大</p></li><li><p>简单易维护</p></li><li><p>易拓展，易集群</p></li></ul></blockquote><p>同时，虽然这个类是跟团体项目后端文件在一个项目之中，但并没有采用线程间发送数据的方式，原因一方面有现成的接口，另一方面要降低耦合度。</p><p>但其实缺点也很明显：</p><blockquote><ul><li>内存开销大，尤其是对于JVM，负载会比较高，如果设定在服务高峰期进行操作很容易OOM。</li><li>在数据量比较大的情况下会有比较明显的延迟，对于电商这样的平台来说是完全不可取的方案。</li><li>在数据量大、时间精确、需要频繁扫描的场景中效率低，服务器、内存负载极高。</li></ul></blockquote><h3 id="时间轮算法">时间轮算法</h3><p><img src="0.png" alt="一张经典的示意图"></p><p>时间轮算法可谓一个经典算法，可以类比于时钟，如上图箭头（指针）按某一个方向按固定频率轮动，每一次跳动称为一个<code> tick</code>。这样可以看出定时轮由个3个重要的属性参数，<code>ticksPerWheel</code>（一轮的tick数），<code>tickDuration</code>（一个tick的持续时间）以及<code> timeUnit</code>（时间单位），例如当<code>ticksPerWheel</code>=60，<code>tickDuration</code>=1，<code>timeUnit</code>=秒，这就和现实中的始终的秒针走动完全类似了。</p><p>如果当前指针指在1上面，我有一个任务需要4秒以后执行，那么这个执行的线程回调或者消息将会被放在5上。那如果需要在20秒之后执行怎么办，由于这个环形结构槽数只到8，如果要20秒，指针需要多转2圈。位置是在2圈之后的5上面（20 % 8 + 1）。</p><p>但是也如上所介绍的，这个算法更多地是在延时任务里使用，而如果像团体课设这样的定时任务就显得有些困难。</p><p>一方面，一年有多少天并不是固定的，就导致算法需要处理特殊情况而降低效率。另一方面，一旦服务器宕机就很难恢复到正常的操作流程，安全性不高，同时，集群难度也比较高。</p><p>但优点也很明显，高效率，低延迟。</p><h3 id="Redis缓存">Redis缓存</h3><p>使用Redis缓存处理定时任务确实很方便，开始时也确实考虑要使用，但时间上来不及最后还是放弃。</p><p>但其实策略跟数据库轮询比较类似。每隔特定的时间或者每添加一个需求就将其以Map的形式添加到Redis缓存中，在特定线程中对数据进行定期更新，将超时的id返回到事务线程进行对mysql数据库的数据处理。</p><p>优点很简单：</p><ul><li>效率相当高</li><li>集群拓展相当方便</li><li>由于使用Redis作为消息通道，消息都存储在Redis中。如果发送程序或者任务处理程序挂了，重启之后，还有重新处理数据的可能性。</li></ul><p>不过缺点就是需要对redis进行一定维护，但还是利大于弊。</p><p>其实总体来说各有优劣，但在比较之中我也收获了更多的思想与策略，我觉得这才是开发过程中对我最重要的一部分。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>置顶</title>
      <link href="/2021/12/15/%E7%BD%AE%E9%A1%B6/"/>
      <url>/2021/12/15/%E7%BD%AE%E9%A1%B6/</url>
      
        <content type="html"><![CDATA[<p>举头望明月，万般感怀皆在其中， 此情此景，犹如天星照我，愿逐月华。</p><p><img src="0.png" alt=""></p><img src="2.jpg" style="zoom:50%;" /><img src="3.jpg" style="zoom:50%;" /><img src="4.png" style="zoom:30%;" /><img src="5.png" style="zoom:30%;" /><img src="6.png" style="zoom:30%;" />]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学线移动例会：git</title>
      <link href="/2021/12/09/%E5%AD%A6%E7%BA%BF%E7%A7%BB%E5%8A%A8%E4%BE%8B%E4%BC%9A%EF%BC%9Agit/"/>
      <url>/2021/12/09/%E5%AD%A6%E7%BA%BF%E7%A7%BB%E5%8A%A8%E4%BE%8B%E4%BC%9A%EF%BC%9Agit/</url>
      
        <content type="html"><![CDATA[<p><img src="head.png" alt=""></p><h1>前言：为什么要有git与GitHub&amp;Gitee</h1><h2 id="1-起源">1.起源</h2><p>很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。</p><p>Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？</p><p>事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！</p><p>你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。</p><p>不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统<code>BitKeeper</code>，<code>BitKeeper</code>的东家<code>BitMover</code>公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。</p><p>安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解<code>BitKeeper</code>的协议（这么干的其实也不只他一个），被<code>BitMover</code>公司发现了（监控工作做得不错！），于是<code>BitMover</code>公司怒了，要收回Linux社区的免费使用权。</p><p>Linus可以向<code>BitMover</code>公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：</p><p>Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。</p><p>Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。</p><p>历史就是这么偶然，如果不是当年<code>BitMover</code>公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。</p><h2 id="2-集中式与分布式">2.集中式与分布式</h2><p>Linus一直痛恨的CVS及SVN都是<strong>集中式</strong>的版本控制系统，而Git是<strong>分布式</strong>版本控制系统，集中式和分布式版本控制系统有什么区别呢？</p><p>先说集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。</p><p><img src="cen-repo.jfif" alt="集中式"></p><p>集中式版本控制系统最大的毛病就是必须联网才能工作，如果在局域网内还好，带宽够大，速度够快，可如果在互联网上，遇到网速慢的话，可能提交一个10M的文件就需要5分钟，这还不得把人给憋死啊。</p><p>那分布式版本控制系统与集中式版本控制系统有何不同呢？<strong>分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库</strong>，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><p>和集中式版本控制系统相比，<strong>分布式版本控制系统的安全性要高很多</strong>，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。</p><p>在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</p><p><img src="distr-repo.jfif" alt="分布式"></p><p>当然，Git的优势不单是不必联网这么简单，后面我们还会看到Git极其强大的分支管理，把SVN等远远抛在了后面。</p><p>CVS作为最早的开源而且免费的集中式版本控制系统，直到现在还有不少人在用。由于CVS自身设计的问题，会造成提交文件不完整，版本库莫名其妙损坏的情况。同样是开源而且免费的SVN修正了CVS的一些稳定性问题，是目前用得最多的集中式版本库控制系统。</p><p>除了免费的外，还有收费的集中式版本控制系统，比如IBM的ClearCase（以前是Rational公司的，被IBM收购了），特点是安装比Windows还大，运行比蜗牛还慢，能用ClearCase的一般是世界500强，他们有个共同的特点是财大气粗，或者人傻钱多。</p><p>微软自己也有一个集中式版本控制系统叫VSS，集成在Visual Studio中。由于其反人类的设计，连微软自己都不好意思用了。</p><p>分布式版本控制系统除了Git以及促使Git诞生的<code>BitKeeper</code>外，还有类似Git的Mercurial和Bazaar等。这些分布式版本控制系统各有特点，但最快、最简单也最流行的依然是Git！</p><h1>安装</h1><p>首先，<a href="https://git-scm.com/downloads">下载安装程序</a>或者使用<a href="https://npm.taobao.org/mirrors/git-for-windows/">国内Windows镜像站</a></p><p>不出意外除了更改安装路径都是next，<a href="https://blog.csdn.net/mukes/article/details/115693833">细节参考此博客</a></p><p><strong>温馨提示：路径中尽量不要有英文名</strong></p><h1>基本概念</h1><h2 id="分支">分支</h2><img src="0.png" alt="分支示例" style="zoom:50%;" /><img src="1.png" alt="实际示例-以i山大为例" style="zoom:75%;" /><h3 id="分支是什么">分支是什么</h3><p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。</p><p>如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！</p><p><img src="13.png" alt=""></p><p>分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p><p>现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。（<strong>但其实通常并不这么做</strong>）</p><h3 id="常见分支">常见分支</h3><h4 id="一、主分支master">一、主分支master</h4><p><strong>代码库应该有且只有一个主分支</strong>。所有提供给用户使用的正式版本，都在这个主分支上发布。</p><p><strong>Git主分支的名字，默认叫做Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。</strong></p><h4 id="二、-开发分支Develop">二、 开发分支Develop</h4><p>主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop（或者Dev）。</p><p>这个分支可以用来生成代码的最新隔夜版本（nightly）。如果想正式对外发布，就在Master分支上，对Develop分支进行&quot;合并&quot;（merge）。</p><h4 id="三、临时性分支">三、临时性分支</h4><p>临时性分支主要有三种：</p><ul><li><p>功能分支 （feature）</p></li><li><p>预发布分支 (release)</p></li><li><p>修补bug分支 (fixbug)</p></li></ul><p>这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。</p><p>少用，就不再展开讲</p><h2 id="工作区、暂存区、版本库">工作区、暂存区、版本库</h2><h3 id="工作区（Working-Directory）">工作区（Working Directory）</h3><p>就是你在电脑里能看到的目录。</p><h3 id="版本库（Repository）">版本库（Repository）</h3><p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。</p><p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p><p><img src="0.jfif" alt=""></p><p>head就不细说了，参考：<a href="https://www.liaoxuefeng.com/wiki/896043488029600/900003767775424">https://www.liaoxuefeng.com/wiki/896043488029600/900003767775424</a></p><p>我们把文件往Git版本库里添加的时候，是分两步执行的：</p><ul><li><p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p></li><li><p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p></li></ul><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p><p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p><h1>上手操作</h1><h2 id="创建版本库">创建版本库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><img src="2.png" style="zoom: 50%;" /><img src="3.png" style="zoom:50%;" /><h2 id="进行创建与提交">进行创建与提交</h2><p>在此目录下新建learn.txt，输入任意字符，比如”我想学git“，执行：（添加）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add learn.txt</span><br></pre></td></tr></table></figure><p>就可以添加到仓库，Unix的哲学是“没有消息就是好消息”</p><p>我们新建类、接口等文件时，就往往执行add</p><p>不信？执行：（显示状态）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>会显示：</p><img src="4.png" style="zoom:50%;" /><p>现在数据存储在暂存区</p><p>如何存入版本库？执行：（提交）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m</span><br></pre></td></tr></table></figure><img src="5.png" style="zoom:50%;" /><p>简单解释一下<code>git commit</code>命令，<strong><code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</strong></p><p>嫌麻烦不想输入<code>-m &quot;xxx&quot;</code>行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。</p><p><code>git commit</code>命令执行成功后会告诉你，<code>1 file changed</code>：1个文件被改动（我们新添加的learn.txt文件）；<code>1 insertions</code>：插入了一行内容（learn.txt有一行内容）。</p><p>此时，再查看状态：</p><img src="6.png" style="zoom:50%;" /><p>可见，没什么可以提交的了。</p><p><strong>注意：</strong></p><p>Q：输入<code>git add readme.txt</code>，得到错误：<code>fatal: not a git repository (or any of the parent directories)</code>。</p><p>A：<strong>Git命令必须在Git仓库目录内执行</strong>（<code>git init</code>除外），在仓库目录外执行是没有意义的。</p><h2 id="回退">回退</h2><p>修改文件，再次提交。但是要先add，再commit。演示如下：</p><img src="7.png" style="zoom:50%;" /><p>查看提交记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p>如图：</p><img src="8.png" style="zoom:50%;" /><p>像这样，你不断对文件进行修改，然后不断提交修改到版本库里，就好比打原神游戏时，每通关一部分就会与复苏之门建立联系，如果某一关没过去，你还可以选择读取前一关的状态再重新开始。Git也是一样，每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为<code>commit</code>。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个<code>commit</code>恢复，然后继续工作，而不是把几个月的工作成果全部丢失。</p><p>如何回退？执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure><p>会显示回退到了上一版</p><p>不过回退的可选参数实在太多，不展开讲，可以参考<a href="https://www.runoob.com/git/git-reset.html">菜鸟教程</a></p><blockquote><p>以上都是一些基础性内容，并且实际操作中用的也不多，但是了解一下可以让大家对git的原理有更清楚的认识，接下来的部分是应用最频繁的</p></blockquote><h1>远程仓库</h1><h2 id="引言">引言</h2><p>一般来说，git的工作流程如下：</p><p><img src="10.jpg" alt="（图源菜鸟）"></p><p>我们也知道Git 并不像 SVN 那样有个中心服务器。</p><p>目前我们使用到的 Git 命令都是在本地执行，如果你想通过 Git 分享你的代码或者与其他开发人员合作。 你就需要将数据放到一台其他开发人员能够连接的服务器上。</p><p>（注：首先确保学线gitlab账号已注册）</p><h2 id="克隆">克隆</h2><p>克隆一个远程项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone url</span><br></pre></td></tr></table></figure><p>比如：<code>git clone http://git.swsdu.online/lzw-sdu/first-git-job.git</code>（可能要输账号密码）</p><img src="11.png" style="zoom:50%;" /><p>你会发现文件夹里多了first-git-job这个文件夹，就是远程仓库中的项目内容</p><h2 id="push-pull-merge">push&amp;pull&amp;merge</h2><h3 id="push">push</h3><h4 id="基础知识">基础知识</h4><p><code>git push</code>命令用于将本地分支的更新，推送到远程主机。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure><p>注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以<code>git pull</code>是&lt;远程分支&gt;:&lt;本地分支&gt;，而<code>git push</code>是&lt;本地分支&gt;:&lt;远程分支&gt;。(pull下面会说)</p><blockquote><p>至于远程主机，可以用<code>git remote</code>查看，具体不展开讲，学线一般只有origin</p></blockquote><p>如果省略远程分支名，则表示将本地分支推送与之存在&quot;追踪关系&quot;的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>上面命令表示，将本地的<code>master</code>分支推送到<code>origin</code>主机的<code>master</code>分支。如果后者不存在，则会被新建。</p><p>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin :master</span><br><span class="line"># 等同于</span><br><span class="line">git push origin --<span class="keyword">delete</span> master</span><br></pre></td></tr></table></figure><p>上面命令表示删除<code>origin</code>主机的<code>master</code>分支。</p><p>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin</span><br></pre></td></tr></table></figure><p>上面命令表示，将当前分支推送到<code>origin</code>主机的对应分支。</p><p>如果当前分支只有一个追踪分支，那么主机名都可以省略。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>如果当前分支与多个主机存在追踪关系，则可以使用<code>-u</code>选项指定一个默认主机，这样后面就可以不加任何参数使用<code>git push</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>上面命令将本地的<code>master</code>分支推送到<code>origin</code>主机，同时指定<code>origin</code>为默认主机，后面就可以不加任何参数使用<code>git push</code>了。</p><p>不带任何参数的<code>git push</code>，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用<code>git config</code>命令。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="built_in">global</span> push.default matching</span><br><span class="line"># 或者</span><br><span class="line">git config --<span class="built_in">global</span> push.default simple</span><br></pre></td></tr></table></figure><p>还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用<code>--all</code>选项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --all origin</span><br></pre></td></tr></table></figure><p>上面命令表示，将所有本地分支都推送到<code>origin</code>主机。</p><p>如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做<code>git pull</code>合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用<code>--force</code>选项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --force origin </span><br></pre></td></tr></table></figure><p>上面命令使用<code>--force</code>选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用<code>--force</code>选项。</p><h4 id="操作">操作</h4><p>在前面克隆到本地的库中，我们看到里面已经有<code>.git</code>文件，我们在这个文件夹下进行操作。</p><p>添加自定义内容，然后push到远程仓库，注意要先add并提交到本地版本库。然后直接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>因为本地跟远程都只有master分支，而且只有origin一个远程主机</p><p><img src="14.png" alt=""></p><h3 id="pull">pull</h3><p><code>git pull</code>命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure><p>比如，取回<code>origin</code>主机的<code>next</code>分支，与本地的<code>master</code>分支合并，需要写成下面这样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin next:master</span><br></pre></td></tr></table></figure><p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin next</span><br></pre></td></tr></table></figure><p>上面命令表示，取回<code>origin/next</code>分支，再与当前分支合并。实质上，这等同于先做<code>git fetch</code>，再做<code>git merge</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git merge origin/next</span><br></pre></td></tr></table></figure><p>在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在<code>git clone</code>的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的<code>master</code>分支自动&quot;追踪&quot;<code>origin/master</code>分支。</p><p>Git也允许手动建立追踪关系。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream master origin/next</span><br></pre></td></tr></table></figure><p>上面命令指定<code>master</code>分支追踪<code>origin/next</code>分支。</p><p>如果当前分支与远程分支存在追踪关系，<code>git pull</code>就可以省略远程分支名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin</span><br></pre></td></tr></table></figure><p>上面命令表示，本地的当前分支自动与对应的<code>origin</code>主机&quot;追踪分支&quot;（remote-tracking branch）进行合并。</p><p>如果当前分支只有一个追踪分支，连远程主机名都可以省略。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p>上面命令表示，当前分支自动与唯一一个追踪分支进行合并。</p><p>如果合并需要采用rebase模式，可以使用<code>--rebase</code>选项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure><p>如果远程主机删除了某个分支，默认情况下，<code>git pull</code> 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致<code>git pull</code>不知不觉删除了本地分支。</p><p>但是，你可以改变这个行为，加上参数 <code>-p</code> 就会在本地删除远程已经删除的分支。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git pull -p</span><br><span class="line"># 等同于下面的命令</span><br><span class="line">git fetch --prune origin </span><br><span class="line">git fetch -p</span><br></pre></td></tr></table></figure><h3 id="merge">merge</h3><p>有时一个项目有多个开发者，如果你修改的文件在远程仓库中已经被其他开发者修改，当你想把自己的修改push到远程仓库或者从远程仓库更新代码时就会被提醒需要merge。当然merge的功能也不限于此，你还可以通过merge进行分支管理，当然这是后话。</p><p>一般来说我们的merge都是在IDE中进行的，此处以jetbrains家的IDE为例。</p><img src="12.png" style="zoom:50%;" /><ul><li><p>左边的Local Changes代表”当前“分支上的修改；</p></li><li><p>右边的Changes from Server代表“合并进来”的分支上的修改；</p></li><li><p>中间的Result代表经过处理后的最终内容；</p></li></ul><p>这部分还是建议各部门结合自己IDE实际情况再说几句，这里不展开讲。</p><h3 id="PS-SSH-key">PS. SSH key</h3><p>在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure><p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</p><p>如果一切顺利的话，可以在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p><p>第2步：在“SSH Keys”页面，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容即可。</p><p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p><p>当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。</p><h1>参考：</h1><p>git的简介与概念、远程仓库等：<a href="https://www.liaoxuefeng.com/">廖雪峰的官方网站</a></p><p>git的常见分支：<a href="https://blog.csdn.net/zyw0713/article/details/80083431">https://blog.csdn.net/zyw0713/article/details/80083431</a></p><p>git基本操作：廖雪峰官网（同上）与<a href="https://www.runoob.com/git/git-basic-operations.html">菜鸟教程</a></p><p>git push、pull的知识点：阮一峰的<a href="https://www.ruanyifeng.com/blog/2014/06/git_remote.html">博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 学线培训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学线培训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验八：图</title>
      <link href="/2021/12/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E5%85%AB%EF%BC%9A%E5%9B%BE/"/>
      <url>/2021/12/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E5%85%AB%EF%BC%9A%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>1、 创建图类，存储结构使用邻接矩阵。</p><p>2、 输入图的节点数n（小于10个）、边数m，节点分别用1-n代表。</p><p>3、 采用“起始节点，终止节点，权值”输入图的m条边，创建图。</p><p>4、 输出从节点1开始的BFS遍历，在遍历过程中，如有多个可以选择的节点，则优先选择编号较小的节点。</p><p>5、 输出从节点1开始的DFS遍历，在遍历过程中，如有多个可以选择的节点，则优先选择编号较小的节点。</p><p>6、 输出从第1节点到第n节点最短路径的长度，如果没有路经，输出0。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; resultQueue;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> **nodes = <span class="keyword">new</span> <span class="keyword">int</span>*[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> nodeNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> **weight = <span class="keyword">new</span> <span class="keyword">int</span>*[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> *status = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">Graph</span>()&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">            <span class="built_in">initStatus</span>();</span><br><span class="line">            nodes[i]= <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">            weight[i] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; ++j) &#123;</span><br><span class="line">                nodes[i][j] = <span class="number">0</span>;</span><br><span class="line">                weight[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initStatus</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">            status[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">initStatus</span>();</span><br><span class="line">        queue&lt;<span class="keyword">int</span>&gt; nodeQueue;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nodeNum; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nodes[<span class="number">1</span>][i] == <span class="number">1</span>)&#123;</span><br><span class="line">                nodeQueue.<span class="built_in">push</span>(i);</span><br><span class="line">                status[i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        status[<span class="number">1</span>] = <span class="number">1</span>;<span class="comment">//1这个节点已经用过了</span></span><br><span class="line">        resultQueue.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!nodeQueue.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">int</span> nodeNow = nodeQueue.<span class="built_in">front</span>();</span><br><span class="line">            nodeQueue.<span class="built_in">pop</span>();<span class="comment">//记下第一个元素并将其弹栈</span></span><br><span class="line">            resultQueue.<span class="built_in">push</span>(nodeNow);<span class="comment">//放到结果栈里</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= nodeNum; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nodes[nodeNow][i] == <span class="number">1</span> &amp;&amp; status[i] == <span class="number">0</span>)&#123;<span class="comment">//有边而且还没到达过</span></span><br><span class="line">                    nodeQueue.<span class="built_in">push</span>(i);</span><br><span class="line">                    status[i] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!resultQueue.<span class="built_in">empty</span>()&amp;&amp;resultQueue.<span class="built_in">size</span>() != <span class="number">1</span>)&#123;</span><br><span class="line">            cout&lt;&lt;resultQueue.<span class="built_in">front</span>()&lt;&lt;<span class="string">&quot;,&quot;</span>;</span><br><span class="line">            resultQueue.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;resultQueue.<span class="built_in">front</span>()&lt;&lt;endl;</span><br><span class="line">        resultQueue.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        resultQueue.<span class="built_in">push</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= nodeNum; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nodes[i][j] == <span class="number">1</span> &amp;&amp; status[j] == <span class="number">0</span>)&#123;<span class="comment">//有边而且还没到达过</span></span><br><span class="line">                status[j] = <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">DFS</span>(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findWay</span><span class="params">(<span class="keyword">int</span> targetLocation)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="built_in">initStatus</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= targetLocation; ++i) &#123;</span><br><span class="line">            status[i] = <span class="number">100000</span>;<span class="comment">//足够大了,用它来表示到初始节点最近的距离</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        queue&lt;<span class="keyword">int</span>&gt; nodeQueue;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nodeNum; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nodes[<span class="number">1</span>][i] == <span class="number">1</span>)&#123;</span><br><span class="line">                nodeQueue.<span class="built_in">push</span>(i);</span><br><span class="line">                <span class="keyword">int</span> wt = status[<span class="number">1</span>] + weight[<span class="number">1</span>][i];</span><br><span class="line">                <span class="keyword">if</span> (wt&lt;status[i])&#123;</span><br><span class="line">                    status[i] = wt;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!nodeQueue.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">int</span> nodeNow = nodeQueue.<span class="built_in">front</span>();</span><br><span class="line">            nodeQueue.<span class="built_in">pop</span>();<span class="comment">//记下第一个元素并将其弹栈</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= nodeNum; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nodes[nodeNow][i] == <span class="number">1</span>)&#123;<span class="comment">//有边而且还没到达过</span></span><br><span class="line">                    nodeQueue.<span class="built_in">push</span>(i);</span><br><span class="line">                    <span class="keyword">int</span> wt = status[nodeNow] + weight[nodeNow][i];</span><br><span class="line">                    <span class="keyword">if</span> (wt&lt;status[i])&#123;</span><br><span class="line">                        status[i] = wt;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;status[targetLocation]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Input&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d,%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    Graph graph = *<span class="keyword">new</span> <span class="built_in">Graph</span>();</span><br><span class="line">    graph.nodeNum = n;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>, weight = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d,%d,%d&quot;</span>,&amp;start,&amp;end,&amp;weight);</span><br><span class="line">        <span class="keyword">if</span> (start&lt;end)&#123;</span><br><span class="line">            graph.nodes[start][end] = <span class="number">1</span>;</span><br><span class="line">            graph.weight[start][end] = weight;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            graph.nodes[end][start] = <span class="number">1</span>;</span><br><span class="line">            graph.weight[end][start] = weight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Output&quot;</span> &lt;&lt; endl;</span><br><span class="line">    graph.<span class="built_in">BFS</span>();</span><br><span class="line">    graph.<span class="built_in">initStatus</span>();</span><br><span class="line">    graph.<span class="built_in">DFS</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (!resultQueue.<span class="built_in">empty</span>()&amp;&amp;resultQueue.<span class="built_in">size</span>() != <span class="number">1</span>)&#123;</span><br><span class="line">        cout&lt;&lt;resultQueue.<span class="built_in">front</span>()&lt;&lt;<span class="string">&quot;,&quot;</span>;</span><br><span class="line">        resultQueue.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;resultQueue.<span class="built_in">front</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">if</span> (resultQueue.<span class="built_in">front</span>() != graph.nodeNum)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;0&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        graph.<span class="built_in">findWay</span>(graph.nodeNum);</span><br><span class="line">    &#125;</span><br><span class="line">    resultQueue.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;End&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构试验七：搜索树与堆</title>
      <link href="/2021/11/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%95%E9%AA%8C%E4%B8%83%EF%BC%9A%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%A0%86/"/>
      <url>/2021/11/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%95%E9%AA%8C%E4%B8%83%EF%BC%9A%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%A0%86/</url>
      
        <content type="html"><![CDATA[<p>写的好乱。有空再整理吧</p><blockquote><p>1、 输入一系列不为零的正整数（最多不超过20个），遇到0代表输入结束（不包含0）。</p><p>2、 根据上面输入的数据序列，用初始化方法创建最大堆（不要用节点依次插入的办法创建最大堆），然后输出最大堆的层次序列。</p><p>3、 输出用堆排序后的排序结果。</p><p>4、 根据上面输入的数据，创建二叉搜索树（关键字不允许重复，如遇重复，则不重复插入该关键字），输出二叉搜索树的前序序列、中序序列（分行输出）。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> allCount, counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BStreeNode</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    BStreeNode *leftChild, *rightChild;</span><br><span class="line">    <span class="built_in">BStreeNode</span>() &#123;</span><br><span class="line">        leftChild = rightChild = <span class="literal">nullptr</span>;</span><br><span class="line">        data = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaxHeap</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> elements[<span class="number">21</span>]&#123;&#125;;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MaxHeap::init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size / <span class="number">2</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">int</span> currentElementLocate = i;</span><br><span class="line">            <span class="keyword">int</span> childLocate = <span class="number">2</span> * i;</span><br><span class="line">            <span class="keyword">int</span> data ;</span><br><span class="line">            <span class="keyword">while</span> (childLocate &lt;= size) &#123;</span><br><span class="line">                <span class="keyword">if</span> (childLocate &lt; size &amp;&amp; elements[childLocate] &lt; elements[childLocate + <span class="number">1</span>]) &#123;</span><br><span class="line">                    childLocate++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (elements[currentElementLocate] &lt; elements[childLocate]) &#123;</span><br><span class="line">                    data = elements[currentElementLocate];</span><br><span class="line">                    elements[currentElementLocate] = elements[childLocate];<span class="comment">//把子节点的值往上移</span></span><br><span class="line">                    elements[childLocate] = data;</span><br><span class="line">                &#125;</span><br><span class="line">                currentElementLocate = childLocate;</span><br><span class="line">                childLocate = <span class="number">2</span> * currentElementLocate;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(BStreeNode *node)</span> </span>&#123;<span class="comment">//前序遍历输出</span></span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (counter != allCount - <span class="number">1</span>) cout &lt;&lt; node-&gt;data &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; node-&gt;data &lt;&lt; endl;</span><br><span class="line">        counter++;</span><br><span class="line">        <span class="built_in">preOrder</span>(node-&gt;leftChild);</span><br><span class="line">        <span class="built_in">preOrder</span>(node-&gt;rightChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(BStreeNode *node)</span> </span>&#123;<span class="comment">//中序遍历输出</span></span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">inOrder</span>(node-&gt;leftChild);</span><br><span class="line">        <span class="keyword">if</span> (counter != allCount - <span class="number">1</span>) cout &lt;&lt; node-&gt;data &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; node-&gt;data &lt;&lt; endl;</span><br><span class="line">        counter++;</span><br><span class="line">        <span class="built_in">inOrder</span>(node-&gt;rightChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(BStreeNode *node)</span> </span>&#123;<span class="comment">//后序遍历输出</span></span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">postOrder</span>(node-&gt;leftChild);</span><br><span class="line">        <span class="built_in">postOrder</span>(node-&gt;rightChild);</span><br><span class="line">        <span class="keyword">if</span> (counter != allCount - <span class="number">1</span>) cout &lt;&lt; node-&gt;data &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; node-&gt;data &lt;&lt; endl;</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是一个构造可能的平衡二叉树的方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addToBSTree</span><span class="params">(BStreeNode *pNode, <span class="keyword">int</span> *list, <span class="keyword">int</span> leftFrom, <span class="keyword">int</span> leftTo, <span class="keyword">int</span> rightFrom, <span class="keyword">int</span> rightTo)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (leftTo &gt;= leftFrom || rightTo &gt;= rightFrom) &#123;</span><br><span class="line">        <span class="keyword">if</span> (leftTo &gt;= leftFrom) &#123;</span><br><span class="line">            BStreeNode *leftNode = <span class="keyword">new</span> <span class="built_in">BStreeNode</span>();</span><br><span class="line">            <span class="keyword">int</span> leftMiddle = (leftFrom + leftTo) / <span class="number">2</span>;</span><br><span class="line">            leftNode-&gt;data = list[leftMiddle];</span><br><span class="line">            <span class="keyword">if</span> (pNode-&gt;data != leftNode-&gt;data) &#123;</span><br><span class="line">                pNode-&gt;leftChild = leftNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">addToBSTree</span>(leftNode, list, leftFrom, leftMiddle - <span class="number">1</span>, leftMiddle + <span class="number">1</span>, leftTo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rightTo &gt;= rightFrom) &#123;</span><br><span class="line">            BStreeNode *rightNode = <span class="keyword">new</span> <span class="built_in">BStreeNode</span>();</span><br><span class="line">            <span class="keyword">int</span> rightMiddle = (rightFrom + rightTo) / <span class="number">2</span>;</span><br><span class="line">            rightNode-&gt;data = list[rightMiddle];</span><br><span class="line">            <span class="keyword">if</span> (pNode-&gt;data != rightNode-&gt;data) &#123;</span><br><span class="line">                pNode-&gt;rightChild = rightNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">addToBSTree</span>(rightNode, list, rightFrom, rightMiddle - <span class="number">1</span>, rightMiddle + <span class="number">1</span>, rightTo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到二叉树中新插入的node的节点的位置并插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(BStreeNode *root, BStreeNode *node)</span> </span>&#123;</span><br><span class="line">    BStreeNode *current = root;</span><br><span class="line">    <span class="keyword">if</span> (node-&gt;data &gt; current-&gt;data) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;rightChild != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            current = current-&gt;rightChild;</span><br><span class="line">            <span class="built_in">find</span>(current, node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current-&gt;rightChild = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node-&gt;data &lt; current-&gt;data) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;leftChild != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            current = current-&gt;leftChild;</span><br><span class="line">            <span class="built_in">find</span>(current, node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current-&gt;leftChild = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Input&quot;</span> &lt;&lt; endl;</span><br><span class="line">    MaxHeap *heap = <span class="keyword">new</span> <span class="built_in">MaxHeap</span>();</span><br><span class="line">    <span class="keyword">int</span> inputData[<span class="number">21</span>];<span class="comment">//后面要用，记录输入的数据</span></span><br><span class="line">    <span class="keyword">bool</span> has;<span class="comment">//数据是否存在</span></span><br><span class="line">    <span class="keyword">int</span> locate = <span class="number">0</span>;<span class="comment">//data放在堆中的位置</span></span><br><span class="line">    <span class="keyword">int</span> data = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; data;</span><br><span class="line"></span><br><span class="line">    inputData[allCount] = data;</span><br><span class="line">    allCount++;<span class="comment">//先++，避免for循环出问题</span></span><br><span class="line">    <span class="keyword">while</span> (data != <span class="number">0</span>) &#123;</span><br><span class="line">        locate++;</span><br><span class="line">        heap-&gt;elements[locate] = data;</span><br><span class="line">        cin &gt;&gt; data;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//收集输入的数据，后面要用</span></span><br><span class="line">        has = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; allCount; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data == inputData[i]) &#123; has = <span class="literal">true</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!has &amp;&amp; data != <span class="number">0</span>) &#123;</span><br><span class="line">            inputData[allCount] = data;</span><br><span class="line">            allCount++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    heap-&gt;size = locate;</span><br><span class="line"></span><br><span class="line">    heap-&gt;<span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Output&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出层次序列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; heap-&gt;size; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; heap-&gt;elements[i] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; heap-&gt;elements[heap-&gt;size] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//堆排序,有瑕疵但是能用</span></span><br><span class="line">    <span class="keyword">int</span> counts = heap-&gt;size;</span><br><span class="line">    <span class="keyword">int</span> result[counts];</span><br><span class="line">    locate = counts - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= counts; ++i) &#123;</span><br><span class="line">        <span class="comment">//从后往前收集从堆中删除的数据，就是堆排序的结果</span></span><br><span class="line">        result[locate] = heap-&gt;elements[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; heap-&gt;size; ++j) &#123;</span><br><span class="line">            <span class="comment">//理论上后一个应该是0，会把原本的末尾覆盖掉，其实不覆盖也无妨</span></span><br><span class="line">            heap-&gt;elements[j] = heap-&gt;elements[j + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//所以--放在这</span></span><br><span class="line">        heap-&gt;size--;</span><br><span class="line">        locate--;</span><br><span class="line">        heap-&gt;<span class="built_in">init</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出堆排序结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; counts - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; result[i] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; result[counts - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    //创建二叉搜索树</span></span><br><span class="line">    BStreeNode *root = <span class="keyword">new</span> <span class="built_in">BStreeNode</span>();</span><br><span class="line">    root-&gt;data = inputData[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; allCount; ++i) &#123;</span><br><span class="line">        BStreeNode *node = <span class="keyword">new</span> <span class="built_in">BStreeNode</span>();</span><br><span class="line">        node-&gt;data = inputData[i];</span><br><span class="line">        <span class="built_in">find</span>(root, node);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">preOrder</span>(root);</span><br><span class="line">    counter = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">inOrder</span>(root);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;End&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验六：二叉树源码</title>
      <link href="/2021/11/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E5%85%AD%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E6%BA%90%E7%A0%81/"/>
      <url>/2021/11/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E5%85%AD%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>1、 输入一个完全二叉树的层次遍历字符串，创建这个二叉树，输出这个二叉树的前序遍历字符串、中序遍历字符串、后序遍历字符串、结点数目、二叉树高度(上述每一个结果独立一行显示)。</p><p>2、 输入二叉树前序序列和中序序列(各元素各不相同)，创建这个二叉树，输出该二叉树的后序序列、层次遍历。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> allCount,counter=<span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BtreeNode</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line"></span><br><span class="line">    BtreeNode *leftChild,*rightChild;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="built_in">BtreeNode</span>()&#123;leftChild=rightChild=<span class="literal">nullptr</span>;size=<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="built_in">BtreeNode</span>(<span class="keyword">char</span>&amp; theData,BtreeNode* left=<span class="literal">nullptr</span>,BtreeNode*right=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        data=theData;</span><br><span class="line">        leftChild=left;</span><br><span class="line">        rightChild=right;</span><br><span class="line">        size=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(BtreeNode *node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> hl=<span class="built_in">height</span>(node-&gt;leftChild);</span><br><span class="line">    <span class="keyword">int</span> hr=<span class="built_in">height</span>(node-&gt;rightChild);</span><br><span class="line">    <span class="keyword">if</span>(hl&gt;hr) &#123;</span><br><span class="line">        <span class="keyword">return</span>++hl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ++hr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(BtreeNode* node)</span></span>&#123;<span class="comment">//前序遍历输出</span></span><br><span class="line">    <span class="keyword">if</span>(node != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(counter != allCount - <span class="number">1</span>) cout &lt;&lt; node-&gt;data &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; node-&gt;data &lt;&lt; endl;</span><br><span class="line">        counter++;</span><br><span class="line">        <span class="built_in">preOrder</span>(node-&gt;leftChild);</span><br><span class="line">        <span class="built_in">preOrder</span>(node-&gt;rightChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(BtreeNode* node)</span></span>&#123;<span class="comment">//中序遍历输出</span></span><br><span class="line">    <span class="keyword">if</span>(node != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="built_in">inOrder</span>(node-&gt;leftChild);</span><br><span class="line">        <span class="keyword">if</span>(counter != allCount - <span class="number">1</span>) cout &lt;&lt; node-&gt;data &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; node-&gt;data &lt;&lt; endl;</span><br><span class="line">        counter++;</span><br><span class="line">        <span class="built_in">inOrder</span>(node-&gt;rightChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(BtreeNode* node)</span></span>&#123;<span class="comment">//后序遍历输出</span></span><br><span class="line">    <span class="keyword">if</span>(node != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="built_in">postOrder</span>(node-&gt;leftChild);</span><br><span class="line">        <span class="built_in">postOrder</span>(node-&gt;rightChild);</span><br><span class="line">        <span class="keyword">if</span>(counter != allCount - <span class="number">1</span>) cout &lt;&lt; node-&gt;data &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; node-&gt;data &lt;&lt; endl;</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">(BtreeNode* node)</span></span>&#123;<span class="comment">//层序遍历输出</span></span><br><span class="line">    queue&lt;BtreeNode*&gt; queue;</span><br><span class="line">    <span class="keyword">while</span>(node != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(counter != allCount - <span class="number">1</span>) cout &lt;&lt; node-&gt;data &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; node-&gt;data &lt;&lt; endl;</span><br><span class="line">        counter++;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;leftChild != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            queue.<span class="built_in">push</span>(node-&gt;leftChild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;rightChild != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            queue.<span class="built_in">push</span>(node-&gt;rightChild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(queue.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node=queue.<span class="built_in">front</span>();</span><br><span class="line">        queue.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按层次遍历顺序创建二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(BtreeNode *current, <span class="keyword">int</span> i, string s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((<span class="number">2</span>*i+<span class="number">1</span>)&lt;=s.<span class="built_in">length</span>())&#123;<span class="comment">//如果当前节点既有左子节点，又有右子节点</span></span><br><span class="line">        current-&gt;leftChild=<span class="keyword">new</span> <span class="built_in">BtreeNode</span>(s[<span class="number">2</span> * i - <span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">set</span>(current-&gt;leftChild, <span class="number">2</span> * i, s);</span><br><span class="line">        current-&gt;rightChild=<span class="keyword">new</span> <span class="built_in">BtreeNode</span>(s[<span class="number">2</span> * i]);</span><br><span class="line">        <span class="built_in">set</span>(current-&gt;rightChild, <span class="number">2</span> * i + <span class="number">1</span>, s);</span><br><span class="line">        current-&gt;size+=(current-&gt;leftChild-&gt;size + current-&gt;rightChild-&gt;size);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">2</span>*i==s.<span class="built_in">length</span>())&#123;<span class="comment">//如果当前节点只有左子节点</span></span><br><span class="line">        current-&gt;leftChild=<span class="keyword">new</span> <span class="built_in">BtreeNode</span>(s[<span class="number">2</span> * i - <span class="number">1</span>]);</span><br><span class="line">        current-&gt;size+=current-&gt;leftChild-&gt;size;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">2</span>*i&gt;s.<span class="built_in">length</span>()) <span class="keyword">return</span>;<span class="comment">//如果当前节点没有子节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BtreeNode* <span class="title">rebuild</span><span class="params">(<span class="keyword">char</span> preOrder[],<span class="keyword">char</span> inOrder[],<span class="keyword">int</span> pStart,<span class="keyword">int</span> pEnd,<span class="keyword">int</span> iStart,<span class="keyword">int</span> iEnd)</span></span>&#123;</span><br><span class="line">    BtreeNode* tree=<span class="keyword">new</span> <span class="built_in">BtreeNode</span>(preOrder[pStart]);</span><br><span class="line">    <span class="keyword">if</span>(pStart==pEnd&amp;&amp;iStart==iEnd)&#123;</span><br><span class="line">        <span class="keyword">return</span> tree;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> root=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//找中序遍历中的根节点</span></span><br><span class="line">    <span class="keyword">for</span>(root=iStart;root&lt;=iEnd;root++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(preOrder[pStart]==inOrder[root]) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//&lt;=根节点在末尾 没有右子树的情况</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//划分左右子树</span></span><br><span class="line">    <span class="keyword">int</span> leftLength=root-iStart;<span class="comment">//左子树</span></span><br><span class="line">    <span class="keyword">int</span> rightLength=iEnd-root;<span class="comment">//右子树</span></span><br><span class="line">    <span class="comment">//遍历左子树</span></span><br><span class="line">    <span class="keyword">if</span>(leftLength&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        tree-&gt;leftChild=<span class="built_in">rebuild</span>(preOrder,inOrder,pStart+<span class="number">1</span>,pStart+leftLength,iStart,root<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历右子树</span></span><br><span class="line">    <span class="keyword">if</span>(rightLength&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        tree-&gt;rightChild=<span class="built_in">rebuild</span>(preOrder,inOrder,pStart+leftLength+<span class="number">1</span>,pEnd,root+<span class="number">1</span>,iEnd);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Input1&quot;</span>&lt;&lt;endl;</span><br><span class="line">    string s1,s2,s3,ss;</span><br><span class="line">    cin&gt;&gt;s1;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Output1&quot;</span>&lt;&lt;endl;</span><br><span class="line">    BtreeNode *r1=<span class="keyword">new</span> <span class="built_in">BtreeNode</span>(s1[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">set</span>(r1,<span class="number">1</span>,s1);</span><br><span class="line">    allCount=s1.<span class="built_in">length</span>();</span><br><span class="line">    <span class="comment">//为实现输出最后一个节点元素时换行，利用全局变量count，每输出一个元素+1，输出结束后清零，以便下一次输出</span></span><br><span class="line">    <span class="built_in">preOrder</span>(r1);counter=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">inOrder</span>(r1);counter=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">postOrder</span>(r1);counter=<span class="number">0</span>;</span><br><span class="line">    cout&lt;&lt;r1-&gt;size&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">height</span>(r1)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Input2&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;s2&gt;&gt;s3;</span><br><span class="line">    <span class="comment">//用字符串读入二叉树前序序列和中序序列，并转化成字符数组对二叉树进行重建</span></span><br><span class="line">    <span class="keyword">char</span> char1[s2.<span class="built_in">length</span>()]; s2.<span class="built_in">copy</span>(char1, s2.<span class="built_in">length</span>(), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">char</span> char2[s3.<span class="built_in">length</span>()]; s3.<span class="built_in">copy</span>(char2, s3.<span class="built_in">length</span>(), <span class="number">0</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Output2&quot;</span>&lt;&lt;endl;</span><br><span class="line">    BtreeNode *r2=<span class="built_in">rebuild</span>(char1, char2, <span class="number">0</span>, s2.<span class="built_in">length</span>() - <span class="number">1</span>, <span class="number">0</span>, s3.<span class="built_in">length</span>() - <span class="number">1</span>);</span><br><span class="line">    allCount=s2.<span class="built_in">length</span>();</span><br><span class="line">    <span class="built_in">postOrder</span>(r2);counter=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">levelOrder</span>(r2);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;End&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学线移动第一次例会</title>
      <link href="/2021/11/17/%E5%AD%A6%E7%BA%BF%E7%A7%BB%E5%8A%A8%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BE%8B%E4%BC%9A/"/>
      <url>/2021/11/17/%E5%AD%A6%E7%BA%BF%E7%A7%BB%E5%8A%A8%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BE%8B%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<h1>学线移动第一次培训</h1><h2 id="1-作业点评">1.作业点评</h2><p>略</p><h2 id="2-细说MVC架构与项目分包">2.细说MVC架构与项目分包</h2><p>参考：</p><p><a href="https://zh.wikipedia.org/wiki/MVC">https://zh.wikipedia.org/wiki/MVC</a></p><p><a href="https://draveness.me/mvx/">https://draveness.me/mvx/</a></p><p><a href="https://blog.csdn.net/qq_39218605/article/details/80779349?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.no_search_link&amp;spm=1001.2101.3001.4242.1">https://blog.csdn.net/qq_39218605/article/details/80779349?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.no_search_link&amp;spm=1001.2101.3001.4242.1</a></p><p>参考文献http://www.dgp.toronto.edu/~dwigdor/teaching/csc2524/2012_F/papers/mvc.pdf</p><h3 id="基本概念">基本概念</h3><p>我们将应用程序划分为三种组件，模型 - 视图 - 控制器（MVC）设计定义它们之间的相互作用。</p><p><img src="0.jpg" alt=""></p><p>在上面那篇论文中是这样描述这三部分的：</p><blockquote><p>In the MVC paradigm the user input, the modeling of the external world, and the visual feedback to the user are explicitly separated and handled by three types of object, each specialized for its task.</p><p>The <strong>view</strong> manages the graphical and/or textual output to the portion of the bitmapped display that is allocated to its application.</p><p>The <strong>controller</strong> interprets the mouse and keyboard inputs from the user, commanding the model and/or the view to change as appropriate.</p><p>Finally, the <strong>model</strong> manages the behavior and data of the application domain, responds to requests for information about its state (usually from the view), and responds to instructions to change state (usually from the controller).</p></blockquote><ul><li><strong>模型 (Model)</strong> <strong>用于封装与应用程序的业务逻辑相关的数据以及对数据的逻辑。“ Model ”有对数据直接访问的权力，例如对数据库的访问。“Model”不依赖“View”和“Controller”，也就是说， <strong>Model 不关心它会被如何显示或是如何被操作</strong>。但是 Model 中数据的变化一般会通过一种刷新机制被公布。为了实现这种机制，那些用于监视此 Model 的 View 必须事先在此 Model 上注册，从而，View 可以了解在数据 Model 上发生的改变。（比如：<a href="https://zh.wikipedia.org/wiki/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F">观察者模式</a>）(比如实体类)</strong></li><li>**视图 (View)**能够实现数据有目的的显示（理论上，这不是必需的）。在 View 中一般没有程序上的逻辑。为了实现 View 上的刷新功能，<strong>View 需要访问它监视的数据模型（Model），因此应该事先在被它监视的数据那里注册。（<code>findViewbyId</code>方法）</strong></li><li>**控制器 (Controller)**起到不同层面间的组织作用，<strong>用于控制应用程序的流程。它处理事件并作出响应</strong>。“事件”包括用户的行为和数据 Model 上的改变。</li></ul><h3 id="依赖关系">依赖关系</h3><p>虽然我们对 MVC 中的各个模块的交互不是特别了解，但是三者之间的依赖关系却是非常明确的；<strong>在 MVC 中，模型层可以单独工作，而视图层和控制器层都依赖与模型层中的数据。</strong></p><p><img src="1.jpg" alt=""></p><blockquote><p>虽然如上图所示，视图和控制器之间没有相互依赖，不过因为视图和控制器之间的依赖并不常用，所以图中将视图和控制器之间的依赖省略了。</p></blockquote><h3 id="优点">优点</h3><p>首先，多个 View 能共享一个 Model 。如今，同一个Web应用程序会提供多种用户界面，例如用户希望既能够通过浏览器来收发<a href="https://zh.wikipedia.org/wiki/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6">电子邮件</a>，还希望通过手机来访问<a href="https://zh.wikipedia.org/wiki/%E7%94%B5%E5%AD%90%E9%82%AE%E7%AE%B1">电子邮箱</a>，这就要求Web网站同时能提供<a href="https://zh.wikipedia.org/wiki/Internet">Internet</a>界面和<a href="https://zh.wikipedia.org/wiki/WAP">WAP</a>界面。在MVC设计模式中， <strong>Model 响应用户请求并返回响应数据，View 负责格式化数据并把它们呈现给用户，业务逻辑和表示层分离，同一个 Model 可以被不同的 View 重用，所以大大提高了代码的可重用性。</strong></p><p>其次，<strong>Controller 是自包含（self-contained,指高独立内聚）的对象，与 Model 和 View 保持相对独立，所以可以方便的改变应用程序的数据层和业务规则</strong>。例如，把数据库从<a href="https://zh.wikipedia.org/wiki/MySQL">MySQL</a>移植到<a href="https://zh.wikipedia.org/wiki/Oracle">Oracle</a>，或者把<a href="https://zh.wikipedia.org/wiki/RDBMS">RDBMS</a>数据源改变成<a href="https://zh.wikipedia.org/wiki/LDAP">LDAP</a>数据源，只需改变 Controller 即可。一旦正确地实现了控制器，不管数据来自数据库还是<a href="https://zh.wikipedia.org/wiki/LDAP">LDAP</a>服务器，View 都会正确地显示它们。由于MVC模式的三个模块相互独立，改变其中一个不会影响其他两个，所以依据这种设计思想能构造良好的少互扰性的构件。</p><p>此外，Controller 提高了应用程序的灵活性和可配置性。<strong>Controller 可以用来连接不同的 Model 和 View 去完成用户的需求</strong>，也可以构造应用程序提供强有力的手段。给定一些可重用的 Model 、 View 和Controller 可以根据用户的需求选择适当的 Model 进行处理，然后选择适当的的 View 将处理结果显示给用户。</p><h3 id="评价、误解及适用范围">评价、误解及适用范围</h3><p>MVC模式在概念上强调 Model, View, Controller 的分离，各个模块也遵循着由 Controller 来处理消息，Model 掌管数据源，View 负责资料显示的职责分离原则，因此在实现上，MVC 模式的 Framework 通常会将 MVC 三个部分分离实现：</p><ul><li><strong>Model 负责资料访问</strong>，较现代的 Framework 都会建议使用独立的资料对象 (DTO, POCO, POJO 等) 来替代弱类型的集合对象。资料访问的代码会使用 Data Access 的代码或是 ORM-based Framework，也可以进一步使用 Repository Pattern 与 Unit of Works Pattern 来切割数据源的相依性。</li><li><strong>Controller 负责处理消息</strong>，较高端的 Framework 会有一个默认的实现来作为 Controller 的基础，例如 Spring 的 DispatcherServlet 或是 <a href="http://ASP.NET">ASP.NET</a> MVC 的 Controller 等，在职责分离原则的基础上，每个 Controller 负责的部分不同，因此会将各个 Controller 切割成不同的文件以利维护。</li><li><strong>View 负责显示资料</strong>，这个部分多为前端应用，而 Controller 会有一个机制将处理的结果 (可能是 Model, 集合或是状态等) 交给 View，然后由 View 来决定怎么显示。例如 Spring Framework 使用 JSP 或相应技术，<a href="http://ASP.NET">ASP.NET</a> MVC 则使用 Razor 处理资料的显示。</li></ul><p>也因为 MVC 模式强调职责分离，所以在发展 MVC 应用时会产生很多文件，在 IDE (集成开发环境) 不够成熟时它会是个问题，但在现代主流 IDE 都能使用类别对象的信息来组织代码编辑的情况下，多文件早已不是问题，而且 <strong>MVC 模式会要求开发者进一步思考应用程序的架构 (Application Architecture)，而非用大杂烩的方式开发应用程序，对于应用程序的生命周期以及后续的可扩展与可维护性而言有相当正面的帮助</strong>。另外，MVC 职责分离也带来了一个现代软件工程要求的重要特性：可测试性 (Testability)，<strong>MVC-based 的应用程序在良好的职责分离的设计下，各个部分可独立行使<a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95">单元测试</a>，有利于与企业内的自动化测试、<a href="https://zh.wikipedia.org/wiki/%E6%8C%81%E7%BA%8C%E6%95%B4%E5%90%88">持续集成</a> (Continuous Integration) 与<a href="https://zh.wikipedia.org/wiki/%E6%8C%81%E7%BA%8C%E4%BA%A4%E4%BB%98">持续交付</a> (Continuous Delivery) 流程集成，减少应用程序改版部署所需的时间。</strong></p><p>MVC 模式的应用程序的目的就是希望打破以往应用程序使用的大杂烩程序撰写方式，并间接诱使开发人员以更高的架构导向思维来思考应用程序的设计，因此对于一个刚入门的初学者来说，架构导向的思考会有一定的门槛，需要较多的实现与练习才能具备相应的能力，大多数的初学者还是较习惯于大杂烩式的程序撰写，所以可能会对 MVC 模式抱持着排斥或厌恶的心态，然而 MVC（或是其他的<a href="https://zh.wikipedia.org/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_(%E8%AE%A1%E7%AE%97%E6%9C%BA)">设计模式</a>）都是有助于应用程序长远的发展，虽然大杂烩式的程序也可以用来发展长生命周期的应用程序，但是相较于 MVC，大杂烩式的程序在可扩展性和可维护性 (尤其是可测试性) 上会远比 MVC 复杂很多，相反的，<strong>MVC 模式的应用程序是在初始开发时期必须先思考并使用软件架构，使得开发时期会需要花较多心力，但是一旦应用程序完成后，可扩展性、可维护性和可测试性反而会因为 MVC 的特性而变得容易。</strong></p><p>因此，MVC 模式在已有众多优秀 Framework 的现代，早就已经没有不适合小型应用的问题，小型的应用还是可以由 MVC Framework 的应用来获取 MVC 的优点，同时它也能作为未来小型应用扩展到大型应用时的基础与入门砖。若一开始就想要做大型应用，那么 MVC 模式的职责分离以及要求开发的架构思考会更适合大型应用的开发。</p><h3 id="MVC的不足">MVC的不足</h3><p>（1）<strong>增加了系统结构和实现的复杂性</strong>。对于简单的界面，严格遵循MVC，使模型、视图与控制器分离，会增加结构的复杂性，并可能产生过多的更新操作，降低运行效率。</p><p>（2） 目前，一般高级的界面工具或构造器不支持MVC架构。改造这些工具以适应MVC需要和建立分离的部件的代价是很高的，从而造成使用MVC的困难。</p><p>(3)    降低了系统的性能。如果不采用分层式结构，很多业务可以直接造访数据库，以此获取相应的数据，如今却必须通过中间层来完成。</p><p>(4)    增加了代码量，增加了工作量。</p><h3 id="实际情况">实际情况</h3><p>在实际情况下，单独的 iOS、Android 和 Web 应用往往不能单独工作，这些客户端应用需要与服务端一起工作；当前端/客户端与后端一同工作时，其实分别『部署』了两个不同的应用，这两个应用都遵循 MVC 架构模式：</p><p><img src="2.jpg" alt=""></p><p>客户端和服务器通过网络进行连接，并组成了一个更大的 MVC 架构；从这个角度来看，服务端的模型层才存储了真正的数据，而客户端的模型层只不过是一个存储在客户端设备中的本地缓存和临时数据的集合；同理，服务端的视图层也不是整个应用的视图层，用于为用户展示数据的视图层位于客户端，也就是整个架构的最顶部；中间的五个部分，也就是从低端的模型层到最上面的视图共同组成了整个应用的控制器，将模型中的数据以合理的方式传递给最上层的视图层用于展示。</p><h2 id="3-代码规范">3.代码规范</h2><p>转载（有改动）：<a href="https://zhuanlan.zhihu.com/p/104253155">https://zhuanlan.zhihu.com/p/104253155</a>   在此致敬原作者</p><p>开始正文前，咱们还需要明确编码规范的两个原则：</p><ol><li><strong>封装和多态</strong>：Java是面向对象的编程语言，语言特征是：封装、继承和多态。但笔者认为继承有时候会破坏封装性，请谨慎使用，面向对象封装和多态是核心；</li><li><strong>可维护性优先于性能</strong>：编码规范围绕中心是代码的可维护性，在需要对代码可维护性和性能做出权衡时，优先考虑代码可维护性，笔者认为，好的代码结构可以保证好的性能，性能在设计时就应该纳入思考；</li></ol><p><strong>PS.个人认为第二点更重要</strong></p><h3 id="命名">命名</h3><p>业界有一句话也许大部分程序员都认同：“代码就是最好的注释”，而好的命名有利于增强代码的可读性。为了增强代码的可读性，笔者认为命名应遵从三个原则：</p><ol><li><strong>共识</strong>：共识是指不同人的横向比较，共识按范围分包含组内共识（业务相关的专有名词）、企业内部公司和业界共识；</li><li><strong>统一</strong>：统一是指单个人的垂直比较，<strong>单个人在不同时间点编写的变量、方法、类的命名要统一</strong>，不能出现同一个概念一会儿这样命名，一会儿又那样命名；命名不同意也会加大代码阅读难度；</li><li><strong>得体</strong>：<strong>得体是指用词合理，做到词能达意</strong>，命名能够很好地表达用意（类命名一般是名词短语，方法命名一般是动词短语）；</li></ol><p>《开发手册》提出了一系列强制和推荐的编程规约，其目的也是达成共识，做到见名知意。如有以下命名规约：</p><blockquote><p>代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。</p><p>代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。</p><p>类名使用 <code>UpperCamelCase</code> 风格，必须遵从驼峰形式，但以下情形例外：DO / BO /DTO / VO / AO</p><p>方法名、参数名、成员变量、局部变量都统一使用 <code>lowerCamelCase</code> 风格，必须遵从驼峰形式。</p><p>常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长（尽量短）。</p><p>中括号是数组类型的一部分，数组定义如下：<code>String[] args</code>;</p><p>POJO 类中布尔类型的变量，都不要加 is，否则部分框架解析会引起序列化错误。（没遇见过）</p><p>包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。</p><p>杜绝完全不规范的缩写，避免望文不知义。</p></blockquote><p>注：《开发手册》目的是在企业内部达成共识，所以才会加上阿里巴巴关键词限定，业界可用来作为参考，但各个企业还是需要根据实际情况制定自己的规范，比如上面的第3点，笔者认为为了统一，后面的特殊情况也不应该出现，还是应该<code>Do/Bo/Dto/Vo</code>这样命名，做到统一。此外一些推荐的规则，比如</p><blockquote><p>如果模块、接口、类、方法使用了设计模式，在命名时体现出具体模式。</p></blockquote><p>其实笔者认为应该作为强制规则发布，这样命名可以很好的告知设计模式，读者可以很快在脑海中绘制设计模式对应的代码结构并立刻知道代码功能（常见设计模式在程序员界已形成共识，如果对应设计模式还不了解，说明功底不够还需要修炼）。</p><p>统一讲的是个人在编码过程中做到命名前后一致，如果做不到统一，会给他人阅读就带来了难度。《开发手册》这类文献可以起到一定作用，但很大一部分还是个人的自我约束。举两个反例：</p><ul><li>同义词命名不统一：比如“指标“”这个词，一会儿用<code>Index</code>，一会儿用<code>indicator</code>；</li><li>拼写和英文命名不统一：比如“代理商”这个词，一会儿用<code>Agent</code>，一会儿用<code>DaiLiShang</code>；</li></ul><h4 id="变量命名">变量命名</h4><p><strong>变量名应该简短且有意义，并能够顾名思义</strong>。简单并不意味着越短越好，比如一个字符的变量名是不允许的，很影响代码的可读性。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;  <span class="comment">// 不允许 </span></span><br><span class="line"><span class="keyword">char</span> c;  <span class="comment">//  不允许</span></span><br></pre></td></tr></table></figure><p>对于局部变量，为了保证代码简洁，<strong>局部变量命名只要能够在代码中区分，应避免名称过长</strong>，影响阅读。</p><p>拿Spring MVC中<code>DispatcherServlet</code>类中的代码片段来举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class); </span><br><span class="line"><span class="comment">// 而非HandlerMapping handleMapping = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class)</span></span><br><span class="line">HandlerAdapter ha = context.getBean(HANDLER_ADAPTER_BEAN_NAME, HandlerAdapter.class);  </span><br><span class="line"><span class="comment">// 而非HandlerAdapter handlerAdapter = context.getBean(HANDLER_ADAPTER_BEAN_NAME, HandlerAdapter.class); 变量命名可改成HandlerAdapter adapter = XXX;</span></span><br><span class="line">HandlerExceptionResolver her = context.getBean(HANDLER_EXCEPTION_RESOLVER_BEAN_NAME, HandlerExceptionResolver.class);</span><br><span class="line">ViewResolver vr = context.getBean(VIEW_RESOLVER_BEAN_NAME, ViewResolver.class);</span><br><span class="line">WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request); </span><br><span class="line"><span class="comment">// 而非WebAsyncManager webAsyncManager = WebAsyncUtils.getAsyncManager(request);</span></span><br><span class="line">MultipartHttpServletRequest req = WebUtils.getNativeRequest(servletRequest, MultipartHttpServletRequest.class);</span><br><span class="line">HandlerExecutionChain handler = hm.getHandler(request);</span><br></pre></td></tr></table></figure><p>对于类中的私有域（field）名称，则不应该缩写，域名称需要很好的反映到底是哪个类的实例以免影响阅读。</p><p>反例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private WordStudyStatisticManager statisticManager; // 改成全名 private WordStudyStatisticManager wordStudyStatisticManager;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public CommonResult&lt;WordStudyStatistic&gt; addWordStudyStatistic(WordStudyStatistic wordStudyStatistic) &#123;</span><br><span class="line">   CommonResult&lt;WordStudyStatistic&gt; result = new CommonResult&lt;WordStudyStatistic&gt;();</span><br><span class="line">   try &#123;</span><br><span class="line">        Date current = new Date();</span><br><span class="line">        wordStudyStatistic.setCreated(current);</span><br><span class="line">        wordStudyStatistic.setModified(current);</span><br><span class="line">        result.addDefaultModel(studyStatisticManager.addWordStudyStatistic(wordStudyStatistic));</span><br><span class="line">        // 通过缩写减少字母个数没必要反而会影响阅读</span><br><span class="line">        result.setSuccess(true);</span><br><span class="line">   &#125; catch (Exception e) &#123;</span><br><span class="line">        logger.error(&quot;添加单词学习统计失败&quot;, e);</span><br><span class="line">        result.setSuccess(false);</span><br><span class="line">   &#125;</span><br><span class="line">   return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常量命名">常量命名</h4><p>常量使用<strong>大写字母</strong> + 数字进行命名 。</p><p>正例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static final int DEFAULT_CAPACITY = 10;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">private static final int DefaultCapacity = 10;   </span><br><span class="line">private static final int Default_Capacity = 10;</span><br></pre></td></tr></table></figure><h4 id="方法命名">方法命名</h4><p>方法名称应该是一个动词短语（为了共识），不论public方法还是private方法，<strong>方法名称需要很好地反映方法功能本身。</strong></p><p>正例：</p><p>还是<code>DispatcherServlet</code>，私有方法较多，但通过名称可以很清楚地反映方法功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">initStragies(ApplicationContext); // Stragies说明该方法作用是初始化一系列策略</span><br><span class="line">initMultipartResolver(ApplicationContext);</span><br><span class="line">initLocaleResolver(ApplicationContext);</span><br><span class="line">initThemeResolver(ApplicationContext);</span><br><span class="line">initHandlerMappings(ApplicationContext);</span><br><span class="line">initHandlerAdapters(ApplicatonContext);</span><br><span class="line">initHandlerExceptionResolers(ApplicationContext);  </span><br><span class="line">initRequestToViewNameTranslator(ApplicatonContext); </span><br><span class="line">// 只要名称能合理的反映功能，不要担心方法过长</span><br><span class="line">...</span><br><span class="line">getDefaultStrategy(ApplicationContext, Class&lt;T&gt;);</span><br><span class="line">getDefaultStrategies(ApplicationContext, Class&lt;T&gt;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这样的方法命名让读者就很舒服。</p><p>反例：方法职责不清晰造成方法名过长</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 接口定义</span><br><span class="line">public Map&lt;String, Obeject&gt; getUserInfoLoginInfoPasswordMap(Context context) &#123;</span><br><span class="line">  Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();  </span><br><span class="line">  ...</span><br><span class="line">  UserInfo user = xxx;</span><br><span class="line">  map.put(&quot;user&quot;, user);</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">  LoginInfo login = xxx;</span><br><span class="line">  map.put(&quot;login&quot;, login);</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">  String password = xxx;</span><br><span class="line">  map.put(&quot;password&quot;, password);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 客户端代码</span><br><span class="line">Map&lt;String, Obeject&gt; map = getUserInfoLoginInfoPasswordMap(context);</span><br><span class="line">map.get(&quot;user&quot;);</span><br><span class="line">map.get(&quot;login&quot;);</span><br><span class="line">map.get(&quot;login&quot;);</span><br></pre></td></tr></table></figure><p>只要命名合理，不要担心方法名称太长，但方法名称过长常常又意味着该方法干的事太多了，则需要思考是否可以拆分方法，上面这个例子不够典型，但也反映了一个设计原则，保证方法的职责单一，可以拆分成3个方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public UserInfo getUserInfo(Context context); </span><br><span class="line">public LoginInfo getLoginInfo(Context context); </span><br><span class="line">public String getPassword(Context context);</span><br></pre></td></tr></table></figure><p>如果方法实现会产生副作用（side effect），该副作用需要体现在方法名称。</p><p>反例：副作用未体现在方法名中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private void checkPermission(User user) throws NoPermissionException&#123;</span><br><span class="line">   List&lt;Integer&gt; orgIds = orgService.getOrgIdsByUserId(user.getId());</span><br><span class="line">   if(CollectionUtils.isEmpty(orgIds) &#123;</span><br><span class="line">      throw new NoPermissionException(&quot;无权访问！&quot;);</span><br><span class="line">   &#125;;</span><br><span class="line">   </span><br><span class="line">   if(orgIds.contains(1)) &#123;</span><br><span class="line">      user.setOrgIds(orgIds);  // 包含副作用setOrgIds</span><br><span class="line">      return;</span><br><span class="line">   &#125;</span><br><span class="line">   throw new NoPermissionException(&quot;无权访问！&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了体现方法名称可改成 fillOrgIdsAndCheckPermission。</p><p>反例：超长的方法名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Integer&gt; getByYearQuargerAndXXXXXXXXIdAndXXXXXConditionAndCityLevelList(YearQuarter yearQuarter, Integer XXXXXXXXId, XXXXXCondition condition, List&lt;Integer&gt; cityLevelList);</span><br></pre></td></tr></table></figure><p>方法名反映了入参却忽略了返回值。如果不存在方法重载，那么方法名无需通过入参进行区分但必须反映返回值，这样做的目的是：通过方法名称区分一个类的所有方法，因此，这个反例方法名可改成getXXXList（此外若入参超过4个，最好定义一个类对入参进行包装）。</p><h4 id="类命名">类命名</h4><p><strong>类名应该是名词，尽量保证类名简单且具有描述性，避免缩略语</strong>，如果使用到设计模式需要在类名中体现，目的是形成共识，帮助读者理解代码。</p><p>正例：List的实现类命名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ArrayList  // 数组形式的List实现类</span><br><span class="line">LinkedList  // 链表形式的List实现类</span><br><span class="line">Stack  // 栈实现类，见名知意，说明是先进后出，后进先出的数据结构</span><br><span class="line">CopyOnWriteArrayList  // 说明是采用COW写时复制防并发策略的ArrayList</span><br><span class="line">FixedSizeList  // 固定了大小的的List</span><br><span class="line">SynchronizedList  // 使用Synchronized关键字控制的List,线程安全</span><br></pre></td></tr></table></figure><p>注：以上例子来自jdk、apache开源代码。</p><p>正例：使用了设计模式的类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.factory.BeanFactory // 简单工厂模式 </span><br><span class="line">org.eclipse.jetty.websocket.common.UpgradeRequestAdapter // 使用了适配器模式 </span><br><span class="line">org.apache.catalina.core.ThreadLocalLeakPreventionListener // 观察者模式 </span><br><span class="line">org.apache.naming.factory.webservices.ServiceProxy // 代理模式</span><br></pre></td></tr></table></figure><p>注：以上类来自Spring、jetty、tomcat。</p><h3 id="注释">注释</h3><p>注释有利于帮助理解代码，如果使用不当，反而会影响代码的简洁性，不利于理解代码。注释在使用上笔者认为需要坚持三个原则：</p><ol><li><strong>保持代码干净，消除不必要的注释</strong>：好的代码本身就是最好的注释，只在必要时通过注释协助理解代码，目的是保持代码的简洁性，增强代码的可读性；</li><li><strong>区分注释和<code>JavaDoc</code></strong>：类、域、方法使用<code>JavaDoc</code>，方法内部使用注释；</li><li>注释及时更新：注释也是代码的一部分，如果代码发生变更，注释也要跟着改；</li></ol><p>注释正例可通过《开发手册》作为参考，笔者更愿意通过一些反例告知读者哪些是错误的注释！</p><p>反例：加入过多的注释影响代码阅读</p><p>在系统开发中，笔者发现，代码有大片大片的注释，格式乱七八糟，笔者想强调一点：请把代码当成产品来看待，注意提交的代码一定要干净！可能有同学会反驳，注释掉的是代码，将来可能还需要还原，如果确实是这种情况，那么完全可以通过版本控制工具（git or svn）还原。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public String recommendGift(double budget) &#123;</span><br><span class="line">       // get gifts from helper</span><br><span class="line">       String[] gifts = giftHelper.getGifts();</span><br><span class="line">       String gift = null;</span><br><span class="line"></span><br><span class="line">       for (int i = 0; i &lt; gifts.length; i++) &#123;</span><br><span class="line">           gift = gifts[i];</span><br><span class="line"></span><br><span class="line">           // find out if gift already given</span><br><span class="line">           boolean isAlreadyGiven = false;</span><br><span class="line">           for (String given : giftsGiven) &#123;</span><br><span class="line">               if (gift.equals(given)) &#123;</span><br><span class="line">                   isAlreadyGiven = true;</span><br><span class="line">                   break;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           // calculate rating and budget</span><br><span class="line">           int x = rating * 200;</span><br><span class="line">           boolean ok = budget &lt; x;</span><br><span class="line"></span><br><span class="line">           // if both conditions satisfy, give it.</span><br><span class="line">           if (!isAlreadyGiven) &#123;</span><br><span class="line">               giftsGiven.add(gift);</span><br><span class="line">               // increment maintenance cost of the girlfriend</span><br><span class="line">               maintenanceCost += budget;</span><br><span class="line">               return gift;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       return gift;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>如果代码需要通过注释才能理解，这时可能就需要反思，是否是代码本身编写的问题，比如方法过长，试着重构（比如抽取方法、方法重命名等）。</p><p>修改后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public String recommendGift(double budget) &#123;</span><br><span class="line">    String recommendedGift = null;</span><br><span class="line">    for (String gift : giftHelper.getGifts()) &#123;</span><br><span class="line">        recommendedGift = gift;</span><br><span class="line">        if (isGiftNotAlreadyGiven(recommendedGift) &amp;&amp; isUnderBudget(budget)) &#123;</span><br><span class="line">            updateMaintenanceCostAndGiftsGiven(budget, recommendedGift);</span><br><span class="line">            return recommendedGift;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return recommendedGift;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void updateMaintenanceCostAndGiftsGiven(double budget, String gift) &#123;</span><br><span class="line">    giftsGiven.add(gift);</span><br><span class="line">    maintenanceCost += budget;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private boolean isUnderBudget(double budget) &#123;</span><br><span class="line">    int x = rating * 200;</span><br><span class="line">    boolean ok = budget &lt; x;</span><br><span class="line">    return ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private boolean isGiftNotAlreadyGiven(String gift) &#123;</span><br><span class="line">    boolean isAlreadyGiven = true;</span><br><span class="line">    for (String given : giftsGiven) &#123;</span><br><span class="line">        if (gift.equals(given)) &#123;</span><br><span class="line">            isAlreadyGiven = false;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return isAlreadyGiven;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反例：<code>JavaDoc</code>和注释不分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// User:xxxxx</span><br><span class="line">public class User &#123;</span><br><span class="line">// 名字</span><br><span class="line">  private String name = &quot;George&quot;;</span><br><span class="line"></span><br><span class="line">  // 获取全名</span><br><span class="line">  public String getFullName() &#123;</span><br><span class="line">     /** 家庭名字 **/</span><br><span class="line">     String familyName = &quot;Bush&quot;;</span><br><span class="line">     ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是<code>JavaDoc</code>，可参考《开发手册》注释章节部分强制规约：</p><blockquote><p>类、类属性、类方法的注释必须使用 Javadoc 规范，使用/*<em>内容</em>/格式，不得使用// xxx 方式；<br>所有的抽象方法（包括接口中的方法）必须要用 Javadoc 注释、除了返回值、参数；<br>所有的类都必须添加创建者和创建日期；</p></blockquote><p>如果是注释，需要区分注释和解释：注释用于帮助理解业务流程，解释是说明这里为什么要这么做；注释用在方法内部单行注释，在被注释语句上方另起一行，解释紧跟代码之后，举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private User getLeader(Query query) &#123;</span><br><span class="line">   // 参数校验</span><br><span class="line">  checkParam(query);</span><br><span class="line">  </span><br><span class="line">   // 查询</span><br><span class="line">   List&lt;User&gt; users = xxManager.getUser(query);</span><br><span class="line">   if(CollectionUtils.isEmpty(users)) &#123;</span><br><span class="line">      return null;</span><br><span class="line">   &#125;</span><br><span class="line">   return users.get(0); // 第一个就是Leader </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释用在比较特殊的业务上，替代方案是在领域内部单独提供一个方法，这样就不用解释了。</p><p>反例：代码发生变更，但注释没变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 返回小于10的正整数</span><br><span class="line"> */</span><br><span class="line">public List&lt;Integer&gt; gePositiveIntegerGraterOrEqualsTen() &#123;</span><br><span class="line">   return Arrays.asList(1,2,3,4,5,6,7,8,9,10);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法第一版是返回小于10的正整数，后由于需求变更改成小于等于10的正整数，可是注释还是小于10，注释和方法实现不同步这让人感到很困惑。</p><h4 id="代码自解释">代码自解释</h4><p>注释是为了帮助理解代码，如果代码是自解释的（本身就具有很好的可读性），那么就无需添加注释了，这是最高境界，一般有三种做法：</p><ol><li><strong>合适的命名</strong>：包含变量、方法命名（前文已提）；</li><li>代码合理分段；</li><li><strong>代码是同一层面的抽象</strong>：一个方法的内部代码除了合理分段外，每一段都是同一业务层面的抽象，有助于读者理解代码；<strong>(MVC)</strong></li></ol><p>正例：将代码按照单一执行任务合理分段有利于增强可读性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if(result.getStatus() != Status.OK)</span><br><span class="line">&#123; </span><br><span class="line">    throw new BusinessException();</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">Context ctx = result.getContext(); </span><br><span class="line">ctx.beginTransaction();</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>以上是代码示例，<code>SpringMVC</code>包的<code>DispatcherServlet</code>中<code>doDispatch</code>方法可以很好地说明一个复杂处理逻辑分段的重要性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">HttpServletRequest processedRequest = request;</span><br><span class="line">HandlerExecutionChain mappedHandler = null;</span><br><span class="line">boolean multipartRequestParsed = false;</span><br><span class="line"></span><br><span class="line">WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">ModelAndView mv = null;</span><br><span class="line">Exception dispatchException = null;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">processedRequest = checkMultipart(request);</span><br><span class="line">multipartRequestParsed = processedRequest != request;</span><br><span class="line"></span><br><span class="line">// Determine handler for the current request.</span><br><span class="line">mappedHandler = getHandler(processedRequest, false);</span><br><span class="line">if (mappedHandler == null || mappedHandler.getHandler() == null) &#123;</span><br><span class="line">noHandlerFound(processedRequest, response);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Determine handler adapter for the current request.</span><br><span class="line">HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">// Process last-modified header, if supported by the handler.</span><br><span class="line">String method = request.getMethod();</span><br><span class="line">boolean isGet = &quot;GET&quot;.equals(method);</span><br><span class="line">if (isGet || &quot;HEAD&quot;.equals(method)) &#123;</span><br><span class="line">long lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">if (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(&quot;Last-Modified value for [&quot; + getRequestUri(request) + &quot;] is: &quot; + lastModified);</span><br><span class="line">&#125;</span><br><span class="line">if (new ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">// Actually invoke the handler.</span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">&#125;</span><br><span class="line">finally &#123;</span><br><span class="line">if (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">applyDefaultViewName(request, mv);</span><br><span class="line">mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">&#125;</span><br><span class="line">catch (Exception ex) &#123;</span><br><span class="line">dispatchException = ex;</span><br><span class="line">&#125;</span><br><span class="line">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">&#125;</span><br><span class="line">catch (Exception ex) &#123;</span><br><span class="line">triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">&#125;</span><br><span class="line">catch (Error err) &#123;</span><br><span class="line">triggerAfterCompletionWithError(processedRequest, response, mappedHandler, err);</span><br><span class="line">&#125;</span><br><span class="line">finally &#123;</span><br><span class="line">if (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">// Instead of postHandle and afterCompletion</span><br><span class="line">mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">// Clean up any resources used by a multipart request.</span><br><span class="line">if (multipartRequestParsed) &#123;</span><br><span class="line">cleanupMultipart(processedRequest);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：代码是同一层面的抽象</p><p>以<code>SpringMVC</code>包的<code>DispatcherServlet</code>中<code>initStrategies</code>方法举例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">      /**</span><br><span class="line"> * Initialize the strategy objects that this servlet uses.</span><br><span class="line"> * &lt;p&gt;May be overridden in subclasses in order to initialize further strategy objects.</span><br><span class="line"> */</span><br><span class="line">protected void initStrategies(ApplicationContext context) &#123;</span><br><span class="line">initMultipartResolver(context);</span><br><span class="line">initLocaleResolver(context);</span><br><span class="line">initThemeResolver(context);</span><br><span class="line">initHandlerMappings(context);</span><br><span class="line">initHandlerAdapters(context);</span><br><span class="line">initHandlerExceptionResolvers(context);</span><br><span class="line">initRequestToViewNameTranslator(context);</span><br><span class="line">initViewResolvers(context);</span><br><span class="line">initFlashMapManager(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>initStrategies方法是DispatcherServlet这个类初始化策略的主流程，内部调用的是同一抽象层面的方法，且各个方法做到见名知意，这种清晰的代码结构我想就无需再注释了吧。</p><h4 id="无用注释">无用注释</h4><p>在日常代码中有一些滑稽的没有意义的注释。</p><p>反例：没有必要的注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 最大大小</span><br><span class="line"> */</span><br><span class="line">private static final int MAX_SIZE = 10;</span><br><span class="line"></span><br><span class="line">if(a == 5) &#123;  // 如果a等于5</span><br><span class="line">   counter = 0;  // 把counter设置成0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请不要侮辱阅读者的智商，这种注释请问到底有什么用！</p><p>反例：没有礼貌的注释</p><p>还记得前两年某视频网站在js代码注释中注释了“屌丝VIP”字样在网上被喷的事件，尊重别人才能赢得别人的尊重，应避免没有礼貌的侮辱性的注释。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 屌丝VIP</span><br><span class="line">if( user.getVipType() = xxx)</span><br><span class="line">...</span><br><span class="line">  </span><br><span class="line">// 要注意一些愚蠢的用户会输入一个负数</span><br><span class="line">...</span><br><span class="line">  </span><br><span class="line">// 修正由菜鸟工程师写的愚蠢得可怜的代码而导致的副作用</span><br><span class="line">...  </span><br></pre></td></tr></table></figure><p>这样的注释对于代码的写注释的人来说并没有任何好处，同时你永远都不会知道将来这些注释会被谁来阅读，你的老板、一个客户或者是刚才被你数落的愚蠢得可怜的工程师。</p><p>反例：过期的代码注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Program</span><br><span class="line">&#123;</span><br><span class="line">   public static void main(String[] args) </span><br><span class="line">  &#123;</span><br><span class="line">     /* This block of code is no longer needed</span><br><span class="line">      * because we found out that Y2K was a hoax</span><br><span class="line">      * and our systems did not roll over to 1/1/1900 </span><br><span class="line">      */</span><br><span class="line">      //DateTime today = DateTime.Today;</span><br><span class="line">      //if (today == new DateTime(1900, 1, 1))</span><br><span class="line">      //&#123;</span><br><span class="line">      // today = today.AddYears(100);</span><br><span class="line">      // String message = &quot;The date has been fixed for Y2K.&quot;;</span><br><span class="line">      // System.out.println(message);</span><br><span class="line">      //&#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>“万一我们下次还要用到它呢“，每听到这样的解释我真心无语。无效代码注释本章节开头已说明，请删除无效的代码注释！需还原请通过版本控制工具还原！</strong></p><p>反例：故事性（代码不相关）注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 张三叫我这么做，如果有不懂的，你可以去问他。</span><br></pre></td></tr></table></figure><p>如果是一个局外人或一个新人，这种注释没有任何用，除了他俩知道外（业务过了一段时间他俩也忘了为什么这么做），对其他人提供不了任何有价值的信息。如果你不得不在你的代码注释中提及需求，那也不应该提及人名。在上面的示例中，好像程序想要告诉其它程序员，这根本没有必要在注释中提到一些和代码不相干的事。可能有人会狡辩，我还是必须这样写注释，原因有二：</p><ol><li>有时候，那些所谓的“高手”逼着我这么干，所以，我要把他的名字放在这里让所有人看看他有多SB。</li><li>有时候，我对需求并不了解，我们应该放一个联系人在在这里，以便你可以去询问之。</li></ol><p>对于第一点，正确的做法沟通解决问题，说明清楚为什么不能这么去做；如果非得这么干，那么好请发邮件告知或在文档中备注。不要在代码中写这样的注释；对于第二点，应该将联系人写在需求文档中。</p><p>反例：没有意义的注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// Sorry,这段代码写得不好，请多见谅</span><br></pre></td></tr></table></figure><p>很明显，程序员已经意识到代码的问题，这样的注释除了为自己的懒惰开脱外，不知道还有什么用！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 勿动这块代码！！！ 如果需要改动，请不要影响到张三和李四的代码</span><br></pre></td></tr></table></figure><p>这种也是很无语的注释，当需要这样注释时，代码到底有多不可维护呀！</p><p>此外还有多年的TODO注释也是需要消灭的。</p><p>注释章节就写到这，希望对你有帮助。</p><h3 id="常量">常量</h3><p>常量是用final修饰符修饰的不可变数值基础类型（或数值类型），本节可讨论话题不多，笔者想强调4点：</p><ol><li><strong>在工程中不要使用一个常量类维护所有常量。</strong></li><li><strong>常量类请加修饰符final以表示他是不可继承的。</strong></li><li><strong>合理地放置常量类，即区分是类内部常量，还是包内常量，还是是整个工程常量。</strong></li><li><strong>几个具有相关性的常量（比如type，state）请使用枚举。</strong></li></ol><p>下面针对第一点，第三点说明：</p><p>反例：在工程中使用一个常量类维护所有常量</p><p>笔者曾见过很多老工程使用一个<code>SystemConsts</code>包含系统内定义的所有常量，在不断迭代后，多数类似<code>SystemConsts</code>这种类定义的常量常常是100+（注释至少都是300行+），面对几百行的常量，维护会特别麻烦：即使是老手，有时你还是不清楚到底有没有定义过该常量，如果定义过，那么很可能你需要花点时间去找是哪个常量，如果关键字搜索不对，那么很可能这个时间成本还不低；如果不凑巧关键字没找到，那么你得重新定义一个，但很可能出现常量重复定义，当需求发生变更时，<code>diamante</code>改动特别容易出现遗漏，引发bug。</p><p>正确的做法是：</p><ul><li>按功能分类，比如：缓存相关常量放在<code>CacheConsts</code>下，系统配置类常量放在<code>ConfigConsts</code>下；</li><li>按业务划分，如果是在指定范围取值的常量，需要替换成枚举；</li></ul><p>反例：不合适地放置常量类</p><p>易懂变量也要统一定义成应用内共享常量，两位程序员在两个类中分别定义了表示 “是”的变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类 A</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String YES = <span class="string">&quot;yes&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类 B</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String YES = <span class="string">&quot;y&quot;</span>;</span><br><span class="line"></span><br><span class="line">A.YES.equals(B.YES)，</span><br></pre></td></tr></table></figure><p>预期是 true，但实际返回为 false，导致线上问题。</p><p>合理地放置常量类，正确的做法是：</p><ul><li>跨应用共享常量，放在准备提供给外部jar包所在module的<code>consts</code>目录；</li><li>工程内共享常量，放在工程common module下<code>consts</code>目录；</li><li>子模块内部共享，在相应子模块<code>consts</code>目录；</li><li>类内共享，放在类内部，注意加private进行限定；</li></ul><p>常量章节就写到这。</p><h3 id="异常处理"><strong>异常处理</strong></h3><p>在介绍异常处理规范之前，实在有必要了解Java的异常体系，什么时候使用受检异常，什么时候使用非受检异常。</p><ul><li><strong>Java异常体系：</strong><br>在 Java 中，所有的异常都有一个共同的祖先 Throwable（可抛出）。**Throwable 指定代码中可用异常传播机制通过 Java 应用程序传输的任何问题的共性。**Throwable 有两个重要的子类：Exception（异常）和 Error（错误），二者都是 Java 异常处理的重要子类，各自都包含大量子类。<strong>Exception（异常）是应用程序中可能的可预测、可恢复问题。一般大多数异常表示中度到轻度的问题。<strong>异常一般是在特定环境下产生的，通常出现在代码的特定方法和操作中。在<code> EchoInput</code> 类中，当试图调用 <code>readLine </code>方法时，可能出现 <code>IOException </code>异常。<br><strong>Error（错误）表示运行应用程序中较严重问题</strong>。<strong>大多数错误与代码编写者执行的操作无直接关系，而表示代码运行时 JVM（Java 虚拟机）出现的问题</strong>。例如，当 JVM 不再有继续执行操作所需的内存资源时，将出现 <code>OutOfMemoryError</code>。<br>Exception 类有一个重要的子类 <code>RuntimeException</code>。</strong><code>RuntimeException </code>类及其子类表示“JVM 常用操作”引发的错误</strong>。例如，若试图使用空值对象引用、除数为零或数组越界，则分别引发运行时异常（<code>NullPointerException</code>、<code>ArithmeticException</code>）和 <code>ArrayIndexOutOfBoundException</code>。</li><li><strong>受检异常：</strong><br>**可检测异常经编译器验证，对于声明抛出异常的任何方法，编译器将强制执行处理(解决这个异常)或声明规则，**例如：<code>sqlExecption</code> 这个异常就是一个检测异常。你连接 JDBC 时，不捕捉这个异常，编译器就通不过，不允许编译。<strong>受检异常可预知可能出问题，必须处理</strong>。</li><li><strong>非检测异常：</strong><br><strong>非检测异常不遵循处理或声明规则。在产生此类异常时，不一定非要采取任何适当操作</strong>，编译器不会检查是否已解决了这样一个异常。例如：一个数组为 3 个长度，=E5__你使用下标为３时，就会产生数组下标越界异常。这个异常 JVM 不会进行检测，要靠程序员来判断。有两个主要类定义非检测异常：<code>RuntimeException </code>和 Error。<br>Error 子类属于非检测异常，因为无法预知它们的产生时间。若 Java 应用程序内存不足，则随时可能出现 <code>OutOfMemoryError</code>；起因一般不是应用程序的特殊调用，而是 JVM 自身的问题。另外，Error 一般表示应用程序无法解决的严重问题。Error子类是非受检异常另一个原因是应用程序根本无法处理。<br><code>RuntimeException</code> 类也属于非检测异常，因为普通 JVM 操作引发的运行时异常随时可能发生，此类异常一般是由特定操作引发。但这些操作在 Java 应用程序中会频繁出现。因此，它们不受编译器检查与处理或声明规则的限制。</li><li><strong>封装一个API的时候什么情况下抛出异常</strong><br>如果调用方可以从异常中采取措施进行恢复的，就使用checked exception，如果客户什么也做不了，就用unchecked exception。这里的措施指的是，不仅仅是记录异常，还要采取措施来恢复。</li></ul><p>Java异常机制是为了在异常情况设计的，在日常开发中不合理使用异常、乱用异常的情况还是很常见，我们有必要重新梳理异常的使用，做到正确使用。</p><p><strong>异常处理不能作为正常控制流(能不用异常就不要用）</strong></p><p>反例：将异常处理应用于普通控制流</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line"> int i = 0;</span><br><span class="line"> while(true)&#123;</span><br><span class="line">    range[i++].climb(); </span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br><span class="line">catch(ArrayIndexOutOfBoundsException e)&#123;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上面程序通过异常捕获结束循环进而完成数据的遍历，殊不知异常模式比标准模式要慢很多（很可能2倍以上），且正常的逻辑通过这种异常方式让人费解，代码的可读性较差。</strong></p><p>以上代码完全可以采用正常的控制逻辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(Mountain m : range) &#123;</span><br><span class="line"> m.climb();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又比如：状态测试相关的的类应该提前进行状态测试，不应该通过异常机制作为控制流</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Foo&gt; it = collection.iterator();</span><br><span class="line">while(it.hasNext())&#123;</span><br><span class="line"> Foo foo = it.next();</span><br><span class="line">      ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而非：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line"> Iterator&lt;Foo&gt; it = collection.iterator();</span><br><span class="line"> while(true)&#123;</span><br><span class="line"> Foo foo = it.next();</span><br><span class="line">      ...</span><br><span class="line">   &#125;</span><br><span class="line">&#125; </span><br><span class="line">catch(NoSuchElementException e)&#123;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总之，异常应该只用于异常的情况下，他们永远不应该用于正常的控制流，良好的API也不应该强迫他们的客户端为了正常的控制流而使用异常。对于可以规避的RuntimeException类异常，应该提前做检查。</p><p><strong>优先使用标准异常</strong></p><p>技术专家和普通程序员的区别在于：技术专家追求并且也能够实现高度的代码重用。对于异常也不例外，jdk提供了一组未受检异常（RuntimeException）,他们已经能够满足绝大部分API的异常抛出需要，完全没必要自己再写一个异常实现。</p><p>常见可重用异常如下：</p><ul><li>NullPointException空指针，在禁止使用null的情况下使- null</li><li>IllegalArgumentException 参数非法，非null的参数值不正确</li><li>IllegalStateException 状态非法，对象状态不合适</li><li>IndexOfBoundException 下标参数值越界</li><li>ConcurrentModificationException 在禁止并发修改情况下，检测到对象的并发修改</li><li>UnsupportedOperationException对象不支持该方法调用</li></ul><p>重用现有异常有如下好处：</p><ol><li>它能使你的API更易于学习和使用，因为大家都知道这些异常意味着啥；</li><li>客户端处理异常的代码可读性也能变强；</li></ol><p><strong>非受检异常和受检异常</strong>(这个比较重要)</p><p>非受检异常：即<code>RuntimeException</code>，应用于未按照API约定错误调用导致的异常，或程序实现自身错误导致的异常，如<code>IndexOutOfBoundExcetion</code>、<code>IllegalArgumentException</code>等；<strong>非受检异常本质上希望终止线程</strong>。</p><p>受检异常：应用于程序正确，但由于操作系统原因、网络原因导致的异常，如<code>IOException</code>、<code>ConnectExption</code>、<code>FileNotFountException</code>等，这类异常是可恢复的，必须在编译时明确告知客户端必须处理该类异常，大大增强了系统的可靠性。</p>]]></content>
      
      
      <categories>
          
          <category> 学线培训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学线培训 </tag>
            
            <tag> 移动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web踩坑汇总</title>
      <link href="/2021/11/06/web%E8%B8%A9%E5%9D%91%E6%B1%87%E6%80%BB/"/>
      <url>/2021/11/06/web%E8%B8%A9%E5%9D%91%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1>前言：</h1><p>web课设遇到了一些阻力，以前常常听人说“大前端”，我常常嗤之以鼻，从前我觉得现在的技术栈，前端也好，后端也罢，乃至移动开发、嵌入式、人工智能等等等等，没有一个领域不配称之为“大”，然而现在才觉得，前端确实很大。从html到css、js等等等等，乃至后来的一些elementUI再到Vue，这仅仅是我接触到的冰山一角。有很多规范与等着我去了解、学习、使用，有很多库可以被调用但我对他们一无所知，有很多标签、属性等着我去了解、熟悉，凡此种种，令人头疼。</p><p>另一方面，从前的开发经验带给了我束缚。对于移动开发者来说，标签的嵌套规则已经熟悉的不能再熟悉，所需要熟悉的不过是标签名与属性。但一方面，传统的MVC架构思路带给了我太大的束缚，让我一时很难接受MVVM这种从未见过的架构模式。</p><p>MVC与MVVM：</p><p><img src="0.png" alt=""></p><p><img src="1.png" alt=""></p><p>但还是逐渐熟悉了MVVM，感谢这篇博客给我的启发：<a href="https://draveness.me/mvx/">浅谈 MVC、MVP 和 MVVM 架构模式</a></p><p>不过，另一方面，移动开发与web一个特别大的差异就在于，web没有任何的布局规范，而移动开发几乎全部的UI绘制都遵循特定的规范。这就导致很长一段时间以来我的``</template>`标签内一直混乱不堪。web给了开发这对于UI的更高自由度，这是受产品需求影响的，移动开发对界面几乎没有任何缩放需求，而一个web界面就要适应人们对窗口的缩放与界面上更多、更复杂的元素的位置的控制。</p><h1>1.computed和methods的区别</h1><p><code>&lt;script&gt;</code>中，compute与method都代表着方法的集合。不过，区别还是不小：</p><h2 id="computed">computed</h2><blockquote><p>computed属性是Vue的计算属性，是数据层到视图层的数据转化反映;</p><p>计算属性是基于他们的依赖进行缓存的，只有在相关依赖发生改变时，他们才会重新求值，也就是说，只要他的依赖没有发生变化，那么每次访问的时候计算属性都会立即返回之前的计算结果，不再执行函数；</p></blockquote><h2 id="区别">区别</h2><blockquote><p>1.computed是响应式的，methods并非响应式。</p><p>2.<strong>computed是带缓存的，只有依赖数据发生改变，才会重新进行计算</strong>，而methods里的函数在每次调用时都要执行。</p><p>3.<strong>computed中的成员可以只定义一个函数作为只读属性，也可以定义get/set变成可读属性</strong>，这点是methods的成员做不到的。</p><p>4.<strong>computed不支持异步</strong>，当computed内有异步操作时无效，无法监听数据的变化</p><p>5.computed是<strong>属性访问</strong>，而methods是<strong>函数调用</strong></p><p>6.在<code>HTML</code>的插值里</p><ol><li><strong>computed定义的方法我们是以属性的形式访问的</strong>，和<code>data</code>里的属性访问形式一样，<code>&#123;&#123;computedTest&#125;&#125;</code></li><li>但是methods定义的方法，我们必须要加上<code>()</code>来调用，如<code>&#123;&#123;methodTest()&#125;&#125;</code></li></ol></blockquote><h2 id="注意">注意</h2><blockquote><p>如果声明的计算属性计算量非常大的时候，而且访问量次数非常多，改变的时机却很小，那就需要用到computed；缓存会让我们减少很多计算量。</p></blockquote><p>作者：hualayou，有删改<br>链接：<a href="https://www.jianshu.com/p/d69a875b769e">https://www.jianshu.com/p/d69a875b769e</a></p><h1>2.跨域</h1><h2 id="一、什么是跨域HTTP请求">一、什么是跨域HTTP请求</h2><p>现代浏览器出于安全的考虑，使用 XMLHttpRequest对象发起 HTTP请求时必须遵守同源策略，否则就是跨域的HTTP请求，默认情况下是被禁止的。<strong>跨域HTTP请求是指A域上资源请求了B域上的资源</strong>，举例而言，部署在A机器上Nginx上的js代码通过ajax请求了部署在B机器Tomcat上的RESTful接口。</p><p>IP（域名）不同、或者端口不同，都会造成跨域问题。为了解决跨域的问题，曾经出现过jsonp、代理文件等方案，应用场景受限，维护成本高，直到HTML5带来了CORS协议。</p><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing），允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。它通过服务器增加一个特殊Header[Access-Control-Allow-Origin]来告诉客户端跨域的限制，如果浏览器支持CORS、并且判断Origin通过的话，就会允许XMLHttpRequest发起跨域请求。</p><h2 id="二、CROS常见header">二、CROS常见header</h2><p>Access-Control-Allow-Origin: <code>http://****.com</code>表示允许<code>http://****.com</code>发起跨域请求。<br>Access-Control-Max-Age:86400 表示在86400秒内不需要再发送预校验请求。<br>Access-Control-Allow-Methods: GET,POST,PUT,DELETE 表示允许跨域请求的方法。<br>Access-Control-Allow-Headers: content-type 表示允许跨域请求包含content-type</p><h2 id="三、CORS实现跨域访问">三、CORS实现跨域访问</h2><p>授权方式<br>方式1：返回新的<code>CorsFilter</code><br>方式2：重写<code>WebMvcConfigurer</code><br>方式3：使用注解（<code>@CrossOrigin</code>）<br>方式4：手工设置响应头（<code>HttpServletResponse</code> ）</p><blockquote><p>注：方式1和方式2属于全局CORS配置，方式3和方式4属于局部CORS配置。如果使用了局部跨域是会覆盖全局跨域的规则，所以可以通过<code>@CrossOrigin</code>注解来进行细粒度更高的跨域资源控制。</p></blockquote><h3 id="1-返回新的CorsFilter-全局跨域">1.返回新的<code>CorsFilter</code>(全局跨域)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalCorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.添加CORS配置信息</span></span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">          <span class="comment">//放行哪些原始域</span></span><br><span class="line">          config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">          <span class="comment">//是否发送Cookie信息</span></span><br><span class="line">          config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">          <span class="comment">//放行哪些原始域(请求方式)</span></span><br><span class="line">          config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">          <span class="comment">//放行哪些原始域(头部信息)</span></span><br><span class="line">          config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">          <span class="comment">//暴露哪些头部信息（因为跨域访问默认不能获取全部头部信息）</span></span><br><span class="line">          config.addExposedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加映射路径</span></span><br><span class="line">        UrlBasedCorsConfigurationSource configSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.返回新的CorsFilter.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(configSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-创建一个-filter-解决跨域">2.创建一个 filter 解决跨域</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">@WebFilter(urlPatterns = &#123; &quot;/*&quot; &#125;, filterName = &quot;headerFilter&quot;)</span><br><span class="line">public class HeaderFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest request, ServletResponse resp, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) resp;</span><br><span class="line">        //解决跨域访问报错</span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;POST, PUT, GET, OPTIONS, DELETE&quot;);</span><br><span class="line">        //设置过期时间</span><br><span class="line">        response.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;3600&quot;);</span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Origin, X-Requested-With, Content-Type, Accept, client_id, uuid, Authorization&quot;);</span><br><span class="line">        // 支持HTTP 1.1.</span><br><span class="line">        response.setHeader(&quot;Cache-Control&quot;, &quot;no-cache, no-store, must-revalidate&quot;);</span><br><span class="line">        // 支持HTTP 1.0. response.setHeader(&quot;Expires&quot;, &quot;0&quot;);</span><br><span class="line">        response.setHeader(&quot;Pragma&quot;, &quot;no-cache&quot;);</span><br><span class="line">        // 编码</span><br><span class="line">        response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">        chain.doFilter(request, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) &#123;</span><br><span class="line">        log.info(&quot;跨域过滤器启动&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        log.info(&quot;跨域过滤器销毁&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-重写WebMvcConfigurer（全局跨域）">3. 重写<code>WebMvcConfigurer</code>（全局跨域）</h3><p>任意配置类，返回一个新的<code>WebMvcConfigurer Bean</code>，并重写其提供的跨域请求处理的接口，目的是添加映射路径和具体的CORS配置信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalCorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">corsConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">//重写父类提供的跨域请求处理的接口</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//添加映射路径</span></span><br><span class="line">                registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                        <span class="comment">//放行哪些原始域</span></span><br><span class="line">                        .allowedOrigins(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                        <span class="comment">//是否发送Cookie信息</span></span><br><span class="line">                        .allowCredentials(<span class="keyword">true</span>)</span><br><span class="line">                        <span class="comment">//放行哪些原始域(请求方式)</span></span><br><span class="line">                        .allowedMethods(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>)</span><br><span class="line">                        <span class="comment">//放行哪些原始域(头部信息)</span></span><br><span class="line">                        .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                        <span class="comment">//暴露哪些头部信息（因为跨域访问默认不能获取全部头部信息）</span></span><br><span class="line">                        .exposedHeaders(<span class="string">&quot;Header1&quot;</span>, <span class="string">&quot;Header2&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-使用注解（局部跨域）">4. 使用注解（局部跨域）</h3><p>在方法上（<code>@RequestMapping</code>）使用注解 <code>@CrossOrigin</code> ：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">&quot;/hello&quot;</span>)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@CrossOrigin(<span class="meta-string">&quot;http://localhost:8080&quot;</span>)</span> </span><br><span class="line"><span class="keyword">public</span> String index( )&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者在控制器（@Controller）上使用注解 <code>@CrossOrigin</code> ：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@CrossOrigin(origins = <span class="meta-string">&quot;http://xx-domain.com&quot;</span>, maxAge = 3600)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">&quot;/hello&quot;</span>)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String index( )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-手工设置响应头（局部跨域-）">5.手工设置响应头（局部跨域 ）</h3><p>使用<code>HttpServletResponse</code>对象添加响应头（Access-Control-Allow-Origin）来授权原始域，这里Origin的值也可以设置为&quot;*&quot; ，表示全部放行。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">&quot;/hello&quot;</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">index</span>(<span class="params">HttpServletResponse response</span>)</span>&#123;</span><br><span class="line">    response.addHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;http://localhost:8080&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>3.判断合法</h1><h2 id="数字">数字</h2><p>小问题，普适的方法：正则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/^[0-9]+.?[0-9]*/</span>;</span><br><span class="line">            <span class="keyword">if</span> (!re.test(<span class="built_in">this</span>.form_add.credit)) &#123;</span><br><span class="line">                alert(<span class="string">&quot;学分请输入数字&quot;</span>);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h2 id="邮箱">邮箱</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pat = <span class="string">&#x27;[a-zA-Z0-9]+@[a-zA-Z0-9]+\.[a-zA-Z0-9]+&#x27;</span></span><br></pre></td></tr></table></figure><h1>4.我为什么不用外键</h1><p>在关系型数据库中，外键也被称为关系键，它是关系型数据库中提供关系表之间连接的多个列，这一组数据列是当前关系表中的外键，也必须是另一个关系表中的候选键（Candidate Key），我们可以通过候选键在当前表中找到唯一的元素。在通常情况下，我们都会使用关系表中的主键作为其他表中的外键，这样才可以满足关系型数据库对外键的约束。</p><p><img src="2.jpg" alt=""></p><p>外键不仅仅是数据库表中的一个整数，<strong>它还提供了额外的一致性保证</strong>。因为数据库往往是整个系统的真理之源（Source of Truth），所以保证数据的<strong>一致性和正确性</strong>非常重要，关系型数据库虽然提供了外键、触发器等特性保证一致性，而且虽然此次实验里面也提到了外键，但是在今天的生产环境中却很少被使用，并且我也不准备使用。</p><p>引用完整性（Referential Integrity）是数据的属性，如果数据拥有该属性，那么数据中所有的引用都是合法的，在关系型数据库的上下文中，这就意味着<strong>关系型数据库中引用另一个表中的值必须存在</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> posts</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="keyword">FOREIGN</span> KEY (author_id)</span><br><span class="line"><span class="keyword">REFERENCES</span> authors(id);</span><br></pre></td></tr></table></figure><p>上述 SQL 语句可以向关系表中增加外键约束，该 SQL 语句的执行前提是 <code>posts</code> 表中存在 <code>author_id</code> 字段。从 SQL 语句中的 <code>CONSTRAINT</code> 关键字我们也能推测出外键不是一种数据类型，<strong>它是不同关系表之间的约束</strong>。</p><p><strong>不使用外键的原因其实很简单，MySQL、PostgreSQL 等关系型数据库很难水平扩容，但是无状态的服务往往都可以很容易地扩容。由于外键等特性需要数据库执行额外的工作，而这些操作会占用数据库的计算资源，所以我们可以将大部分的需求都迁移到无状态的服务中完成以降低数据库的工作负载。</strong></p><p>根据更新和删除时的行为不同，我们可以将外键分成 <code>RESTRICT</code>、<code>CASCADE</code> 和 <code>SET NULL</code> 等几种，当我们为关系表中的字段增加外键约束时，需要指定外键的类型，最常见的也就是 <code>RESTRICT</code> 和 <code>CASCADE</code> 两种，其中 <code>RESTRICT</code> 为外键的默认类型，<strong>不同类型的外键会带来不同的额外开销，而这些额外开销就是我们不使用外键的理由：</strong></p><ul><li>使用 <code>RESTRICT</code> 会在更新或者删除记录时对外键对应的记录是否存在进行一致性检查；</li><li>使用 <code>CASCADE</code> 会在更新或者删除记录时触发级联更新或者删除操作；</li></ul><blockquote><p>注意：MySQL 中的 <code>NO ACTION</code> 和 <code>RESTRICT</code> 具有相同的语义</p></blockquote><p>而在<a href="https://dba.stackexchange.com/questions/77906/what-is-the-cost-of-adding-a-foreign-key-in-mysql">这个回答</a>中，作者对是否使用外键给了一些理由：</p><blockquote><p>In MySQL, a foreign key requires an index. If an index already exists, the foreign key will use that index (even using the prefix of an existing multi-column index). If no index exists, defining the foreign key will build the index.</p><p>So the size increase and time to create a foreign key is about the same as to create an index on the same column(s).</p><p>The performance of a SELECT is not impacted significantly by the presence of a foreign key. Only a slight additional work for the optimizer, to consider the new indexes.</p><p>The performance of updating is more, because for each foreign key, an INSERT/UPDATE/DELETE has to check to see if the constraint is satisfied. That means a primary key lookup to the referenced tables. This impact is measurable, and it is greater if the referenced tables are not in the buffer pool.</p><p>Another impact is the locking. If I update a row in a child row that has a foreign key, InnoDB places a shared-lock on the referenced rows in the parent tables. That means no one can update those parent rows until I commit. If you have lots of threads updating child rows, then the parent rows may be locked most of the time, and this can make it hard to do concurrent work in the parent tables. Not so much a performance problem, but a concurrency problem.</p><p>As with all “how does that perform” questions, the answer really depends on your workload. If you don’t have concurrent updates, for example, that issue may not effect you for all practical purposes. Testing it yourself with load testing is the only way to be sure. It’s not something anyone on StackOverflow can answer precisely for you.</p></blockquote><p>总结一下，一方面就是select受性能外键影响不大，但是INSERT/UPDATE/DELETE的性能会受到较大影响，因为检查参数是否满足条件需要额外的性能支出，如果数据表不在缓冲池会导致更高的性能亏损。另一方面就是外键的加锁策略导致在并发量较高的情况下程序等待锁被释放而引发的性能亏损，与单表索引不同的是，它会引用一张或多张父表，这样当对子表进行写入操作(UPDATE/INSERT)的时候，父表就会被加上“共享锁”，这样在对子表高并发进行写入操作的情况下，对父表的写入操作就会由于“共享锁”的存在，而会长时间不能得到更新。</p><p>（个人觉得不能及时更新会对事务一致性产生一定影响）（这句话不一定对）</p><p>其次，外键并不是不可替代的，只要后端逻辑处理得当完全可以避免外键的使用，而且在逻辑上也是很简单的，所以我更倾向于使用这种方法。</p><p>部分参考：<a href="https://draveness.me/whys-the-design-database-foreign-key/%EF%BC%8Cta%E8%AE%B2%E7%9A%84%E7%9C%9F%E5%A5%BD">https://draveness.me/whys-the-design-database-foreign-key/，ta讲的真好</a></p><h1>5.#与$：SQL的细微知识</h1><h2 id="问题发现：">问题发现：</h2><p>在调用SQL语句进行update的时候一直出现实体类与数据库字段不匹配问题，<code>java.sql.SQLSyntaxErrorException: Unknown column 'xxx' in 'field list'</code>,但这其实是一个非常常见的错误，最诡异的是报错是这样的：</p><p><img src="3.png" alt=""></p><p>SQL语句：</p><p><img src="4.png" alt=""></p><p>按道理讲，SQL语句应该是毫无问题的，我的select等等其他方法也是用类似的格式写的，但这个update偏偏不行，而且最诡异的是一个数据被识别为了数据表的列名，这就让人十分迷惑。</p><p>最后，我将引用数据的方法${}改成了#{}，解决了这个问题。</p><h2 id="分析：">分析：</h2><h3 id="二者区别：">二者区别：</h3><p>首先，在MyBatis 的映射配置文件中，动态传递参数有两种方式：</p><ul><li><p>#{} 占位符</p></li><li><p>${} 拼接符</p></li></ul><p>其次：</p><ul><li><p>#{} 为参数占位符 ?，即sql 预编译，${} 为字符串替换，即 sql 拼接</p></li><li><p>#{}：动态解析 -&gt; 预编译 -&gt; 执行，${}：动态解析 -&gt; 编译 -&gt; 执行</p></li><li><p>#{} 的变量替换是在DBMS 中，${} 的变量替换是在 DBMS 外</p></li></ul><blockquote><p>DBMS: Database Management System，数据库管理系统</p></blockquote><ul><li><p>变量替换后，#{} 对应的变量自动加上单引号 ‘’，变量替换后，${} 对应的变量不会加上单引号 ‘’</p></li><li><p>#{} 能防止sql 注入，${} 不能防止sql 注入</p></li></ul><h3 id="样例：">样例：</h3><p>#{} 和 ${} 的实例：假设传入参数为 1</p><ul><li>开始</li></ul><p>1）<code>#&#123;&#125;：select * from t_user where uid=#&#123;uid&#125;</code></p><p>2）<code>$&#123;&#125;：select * from t_user where uid= '$&#123;uid&#125;'</code></p><ul><li>然后</li></ul><p>1）<code>#&#123;&#125;：select * from t_user where uid= ?</code></p><p>2）<code>$&#123;&#125;：select * from t_user where uid= 1</code></p><ul><li>最后</li></ul><p>1）<code>#&#123;&#125;：select * from t_user where uid= '1'</code></p><p>2）<code>$&#123;&#125;：select * from t_user where uid= 1</code></p><h3 id="注意事项：">注意事项：</h3><ul><li>能用<code>#&#123;&#125;</code>的地方就用<code> #&#123;&#125;</code>，不用或少用 <code>$&#123;&#125;</code>。因为使用<code>$&#123; &#125;</code>会导致sql注入，不利于系统的安全性！</li></ul><blockquote><p>SQL注入：就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。常见的有匿名登录（在登录框输入恶意的字符串）、借助异常获取数据库信息等</p></blockquote><ul><li>表名作参数时，必须用 <code>$&#123;&#125;。如：select * from $&#123;tableName&#125;</code></li><li>order by 时，必须用 <code>$&#123;&#125;。如：select * from t_user order by $&#123;columnName&#125;</code></li><li>使用 <code>$&#123;&#125; </code>时，要注意何时加或不加单引号，即<code> $&#123;&#125;</code> 和 <code>'$&#123;&#125;'</code></li></ul><h2 id="11-24又踩了一坑：">11.24又踩了一坑：</h2><p><img src="7.png" alt=""></p><p>完整的第一行如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nested exception is org.apache.ibatis.type.TypeException: Could not set parameters <span class="keyword">for</span> mapping: ParameterMapping&#123;property=<span class="string">&#x27;sid&#x27;</span>, mode=IN, javaType=<span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span>, <span class="title">jdbcType</span></span>=<span class="keyword">null</span>, numericScale=<span class="keyword">null</span>, resultMapId=<span class="string">&#x27;null&#x27;</span>, jdbcTypeName=<span class="string">&#x27;null&#x27;</span>, expression=<span class="string">&#x27;null&#x27;</span>&#125;. Cause: org.apache.ibatis.type.TypeException: Error setting non <span class="keyword">null</span> <span class="keyword">for</span> parameter #<span class="number">2</span> with JdbcType <span class="keyword">null</span> . Try setting a different JdbcType <span class="keyword">for</span> <span class="keyword">this</span> parameter or a different configuration property. Cause: org.apache.ibatis.type.TypeException: Error setting non <span class="keyword">null</span> <span class="keyword">for</span> parameter #<span class="number">2</span> with JdbcType <span class="keyword">null</span> . Try setting a different JdbcType <span class="keyword">for</span> <span class="keyword">this</span> parameter or a different configuration property. Cause: java.sql.SQLException: <span class="function">Parameter index out of <span class="title">range</span> <span class="params">(<span class="number">2</span> &gt; number of parameters, which is <span class="number">1</span>)</span></span></span><br></pre></td></tr></table></figure><p>发现在字段映射过程中多了一些奇奇怪怪的字段，换成<code>$&#123;&#125;</code>就恢复正常了。现在猜测<code>$&#123;&#125;</code>与<code>#&#123;&#125;</code>之间的区别可能没那么简单。但是看报错类型是<code>MyBatisSystemException</code>，也可能是<code>MyBatis</code>在封装过程中产生的问题。</p><p>但是，其实<code>#&#123;&#125;</code>外面不需要加’'。删掉就好了</p><h1>6.PBE加密：</h1><h2 id="1-概述">1.概述</h2><p>PBE(Password Based Encryption，基于口令加密)是一种基于口令的加密算法，其特点是使用口令代替了密钥，而口令由用户自己掌管，采用随机数(这里称之为 盐)杂凑多重加密等方法保证数据的安全性。</p><p>PBE 算法并没有 真正构建新的加密/解密算法，而是对已知的对称加密算法(eg:DES算法)做了包装；使用PBE算法对数据做加密/解密操作时，其实是使用了 DES 或者 AES 等其他对称加密算法做了相应的操作。</p><p>既然，PBE算法是使用了较为常用的对称加密算法，那就无法回避密钥的问题；**口令并不能替代密钥，密钥是经过加密算法计算得出的，但口令本身不可能很长，单纯的口令很容易通过穷举攻击方式破译，这就引入了 “盐”。盐能够阻止字典攻击或预先计算的攻击，本身是一个随机的信息，相同的随机信息极不可能使用2次。**将盐附加在 口令上，通过消息摘要算法经过迭代计算获取得到 构建密钥/初始化向量的基本材料，使得破译加密信息的难度加大。</p><h2 id="2-模型图（UML）">2.模型图（UML）</h2><p><img src="5.png" alt=""></p><h2 id="3-实现">3.实现</h2><p><code>import org.bouncycastle.jce.provider.BouncyCastleProvider;</code>在idea中可以Maven搜索找到，<code>pom.xml</code>可以通过如下引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--口令加密--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bouncycastle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bcprov-jdk16<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以下代码参考<a href="https://blog.csdn.net/Leon_Jinhai_Sun/article/details/89919308">Leon_Jinhai_Sun的代码</a>，有删改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"><span class="keyword">import</span> java.security.Security;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKeyFactory;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.PBEKeySpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.PBEParameterSpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.jce.provider.BouncyCastleProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PBECipher</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首先我们要Castle的jar包引入到项目中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ALGORITHM = <span class="string">&quot;PBEWITHMD5andDES&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String CIPHER_NAME = <span class="string">&quot;PBEwithSHA1and128bitAES-CBC-BC&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ITERATION_COUNT = <span class="number">1000</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encrypt(String password, <span class="keyword">byte</span>[] salt, <span class="keyword">byte</span>[] input) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 我们在加密的时候需要创建一个PBEKeySpec</span></span><br><span class="line"><span class="comment">         * 还有传入的用户输入的password</span></span><br><span class="line"><span class="comment">         * 得到一个PBEKeySpec对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        PBEKeySpec keySpec = <span class="keyword">new</span> PBEKeySpec(password.toCharArray());</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 然后我们通过SecretKeyFactory</span></span><br><span class="line"><span class="comment">         * 通过getInstance方法</span></span><br><span class="line"><span class="comment">         * 得到一个SecretKeyFactory对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SecretKeyFactory sKeyFactory = SecretKeyFactory</span><br><span class="line">                .getInstance(CIPHER_NAME);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 然后通过generateSecret传入keySpec</span></span><br><span class="line"><span class="comment">         * 就可以得到一个SecretKey</span></span><br><span class="line"><span class="comment">         * 这个SecretKey就是我们将来要加密的密钥</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SecretKey skey = sKeyFactory.generateSecret(keySpec);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 紧接着我们要通过salt生成一个PBEParameterSpec</span></span><br><span class="line"><span class="comment">         * 我们传入1000</span></span><br><span class="line"><span class="comment">         * 表示用户的口令和salt会走1000次的循环</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        PBEParameterSpec pbeps = <span class="keyword">new</span> PBEParameterSpec(salt, ITERATION_COUNT);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 然后我们通过Cipher.getInstance得到一个Cipher对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Cipher cipher = Cipher.getInstance(CIPHER_NAME);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * init方法会传入ENCRYPT_MODE,SecretKey,</span></span><br><span class="line"><span class="comment">         * 以及PBEParameterSpec这三个对象然后就可以加密</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, skey, pbeps);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 得到密文</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(input);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 在解密的时候我们需要传入用户需要的password,salt,以及密文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decrypt(String password, <span class="keyword">byte</span>[] salt, <span class="keyword">byte</span>[] input) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        PBEKeySpec keySpec = <span class="keyword">new</span> PBEKeySpec(password.toCharArray());</span><br><span class="line">        SecretKeyFactory sKeyFactory = SecretKeyFactory</span><br><span class="line">                .getInstance(CIPHER_NAME);</span><br><span class="line">        SecretKey skey = sKeyFactory.generateSecret(keySpec);</span><br><span class="line">        PBEParameterSpec pbeps = <span class="keyword">new</span> PBEParameterSpec(salt, ITERATION_COUNT);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(CIPHER_NAME);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 然后我们把模式设置为DECRYPT_MODE</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, skey, pbeps);</span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(input);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 我们运行这个代码</span></span><br><span class="line"><span class="comment">     * 由于我们每次运行的salt是不同的</span></span><br><span class="line"><span class="comment">     * 所以每次我们得到密文也是不同的</span></span><br><span class="line"><span class="comment">     * 通过用户口令和随机数</span></span><br><span class="line"><span class="comment">     * 我们就保证了加密的强度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 把BouncyCastle作为Provider添加到java.security：</span></span><br><span class="line">        Security.addProvider(<span class="keyword">new</span> BouncyCastleProvider());</span><br><span class="line">        <span class="comment">// 原文：</span></span><br><span class="line">        String message = <span class="string">&quot;Hello, world! encrypted using PBE!&quot;</span>;</span><br><span class="line">        <span class="comment">// 加密口令</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 我们设置一个加密口令password hello123456</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String password = <span class="string">&quot;hello12345&quot;</span>;</span><br><span class="line">        <span class="comment">// 16 bytes随机Salt：</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 我们通过SecureRandom.getInstanceStrong().generateSeed生成一个随机salt</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">byte</span>[] salt = SecureRandom.getInstanceStrong().generateSeed(<span class="number">16</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 我们打印这个salt</span></span><br><span class="line"><span class="comment">         * salt: d4356ec3e5621a8f1f6a7be953b0c31e</span></span><br><span class="line"><span class="comment">         * 我们生成的随机的salt</span></span><br><span class="line"><span class="comment">         * 1个16字节的数组</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;salt: %032x\n&quot;</span>, <span class="keyword">new</span> BigInteger(<span class="number">1</span>, salt));</span><br><span class="line">        <span class="comment">// 加密：</span></span><br><span class="line">        <span class="keyword">byte</span>[] data = message.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 然后调用encrypt方法进行加密</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">byte</span>[] encrypted = encrypt(password, salt, data);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 加密以后的密文是用Base64表示的</span></span><br><span class="line"><span class="comment">         * encrypted: 2MnA9wd1IL4n0W3d3nS5dqZ6dj1fcxZI2GJtKKIDYchw1EkodmJeOLIQpUBendR+</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;encrypted: &quot;</span> + Base64.getEncoder().encodeToString(encrypted));</span><br><span class="line">        <span class="comment">// 解密：</span></span><br><span class="line">        <span class="keyword">byte</span>[] decrypted = decrypt(password, salt, encrypted);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 解密以后得到与原文相同的信息</span></span><br><span class="line"><span class="comment">         * Hello, world! encrypted using PBE!</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(decrypted, StandardCharsets.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-踩坑：">4.踩坑：</h2><p>任何对<code>byte[]</code>的类型转换都会导致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javax.crypto.BadPaddingException: pad block corrupted</span><br></pre></td></tr></table></figure><p>但是直接将byte[]存进数据库是不可能的，所以暂时没有解决方案。</p><p><img src="6.png" alt=""></p><h1>7.BCrypt加密</h1><h2 id="一、概述">一、概述</h2><p>我们常常通过一些不可逆的算法来保存用户的密码。比如：MD5, SHA1, SHA256, SHA512, SHA-3,等Hash算法。这些算法都是不可逆的。系统在验证用户的口令时，需要把Hash加密过后的口令与后面存放口令的数据库中的口令做比较，如果一致才算验证通过。但你觉得这些算法好吗？我说的是：MD5, SHA1, SHA256, SHA512, SHA-3。如果你使用的是MD5算法来加密你的口令，如果你的口令长度只有小写字母再加上数字，假设口令的长度是6位，那么在目前一台比较新一点的PC机上，穷举所有的口令只需要40秒钟。而据我们了解，几乎有90%以上的用户只用小写字母和数字来组织其口令。对于6位长度的密码只需要最多40秒就可以破解了，这可能会吓到你。如果你愿意花2000美金和一周的时间来构建一个CUDA，那么，你可以在你组建的这个集群中使用进行密码穷举运算，其速度是，1秒钟可以计算7亿个口令。对于目前实际当中使用的比较复杂的口令，其破解率也可以高达每秒一个。当然，这里说的算法是MD5，SHA之类的算法。</p><p>​    那么，对于这样的一种情况来说，我们怎么办？我们还是有办法的。我们知道MD5，SHA的算法速度太快了。所以，我们需要一个“慢一点”的加密算法。<code>BCrypt</code>是这样的一个算法，因为它很慢，对于计算机来说，其慢得有点BT了，但却慢得刚刚好！对于验证用户口令来说是不慢的，对于穷举用户口令来说，其会让那些计算机变得如同蜗牛一样。因为<code>BCrypt</code>采用了一系列各种不同的Blowfish加密算法，并引入了一个work factor，这个工作因子可以让你决定这个算法的代价有多大。因为这些，这个算法不会因为计算机CPU处理速度变快了，而导致算法的时间会缩短了。因为，你可以增加work factor来把其性能降下来。那么，<code>BCrypt</code>到底有多慢？如果和MD5一起来比较的话，如果使用值为12的work factor的话，如果加密“cool”的话，<code>BCrypt</code>需要0.3秒，而MD5只需要一微秒（百万分之一秒）。也就是说，前面我们说的那个只需要40秒就可以穷举完所有的可能的MD5编码的口令的算法，在使用<code>BCrypt</code>下，需要12年。这就是<code>BCrypt</code>给你带来的选择，你可以一个安全的口令和一个快速的加密算法，或是一个不怎么安全的口令和一个性能不好的加密算法。</p><p>​    总而言之，<code>BCrypt</code>是一个哈希算法，一个明文映射多个密文，但是相同密文不同密文校验值<code>BCrypt.checkpw</code>一致；相比于MD5，更安全，速度慢。</p><h2 id="二、JAVA实现">二、JAVA实现</h2><p>转自： <a href="https://yq.aliyun.com/articles/48942">https://yq.aliyun.com/articles/48942</a></p><p>1.官网下载源码：<a href="http://www.mindrot.org/projects/jBCrypt/">http://www.mindrot.org/projects/jBCrypt/</a></p><p>2.将BCrypt.java拷贝到项目下，使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> EncryptAndDecrypt;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* BCrypt Java实现</span></span><br><span class="line"><span class="comment">* BCrypt也是一种哈希算法，相比MD5更安全，速度慢</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UseBCrypt</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Scanner scanner=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">        String password=scanner.nextLine();<span class="comment">//明文</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入待验证密码：&quot;</span>);</span><br><span class="line">        String candidate=scanner.nextLine();</span><br><span class="line">        <span class="comment">// 第一次哈希一个password</span></span><br><span class="line">        String hashed = BCrypt.hashpw(password, BCrypt.gensalt());<span class="comment">//密文</span></span><br><span class="line">        <span class="comment">// gensalt&#x27;s log_rounds parameter determines the complexity</span></span><br><span class="line">        <span class="comment">// the work factor is 2**log_rounds, and the default is 10</span></span><br><span class="line">        String hashed2 = BCrypt.hashpw(password, BCrypt.gensalt(<span class="number">12</span>));</span><br><span class="line">        System.out.println(hashed);</span><br><span class="line">        System.out.println(hashed2);</span><br><span class="line">        <span class="comment">//密码密文匹配检测</span></span><br><span class="line">        <span class="keyword">if</span> (BCrypt.checkpw(candidate, hashed))</span><br><span class="line">            System.out.println(<span class="string">&quot;It matches&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;It does not match&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">请输入密码：</span><br><span class="line"><span class="number">123456</span></span><br><span class="line">请输入待验证密码：</span><br><span class="line"><span class="number">234563</span></span><br><span class="line">$2a$<span class="number">10</span>$RbX30iBRU0/rZtY9itIYF.F7PlqZAkHuYQFDDSE9ESOU9z.i.1gZu</span><br><span class="line">$2a$<span class="number">12</span>$waisaCtTw8EvT/ddNEz1kOFPdIAHHIfPQk0QhOLGSAcgDPjCv5s0K</span><br><span class="line">It does not match</span><br></pre></td></tr></table></figure><h1>8.密码重置的策略：</h1><p>首先要确定学号与邮箱是否正确，确认正确后向邮箱发送确认邮件。</p><p>一般来说，确认邮件中包含一个连接，用户点击链接进行确认，这就意味着，该链接只能是单次有效的，并且不同用户应该会获取到不同链接。使用的策略如下：</p><p>首先，请求方式使用get请求，因为设计的URL中不会包含任何敏感信息。其次URL的参数中必然包含学号用以确定身份，然后要解决URL的<strong>唯一性与单次有效性</strong>问题，我采取的策略是使用一个&quot;token&quot;。</p><p>其次，数据库中用于存放加密后的密码的<code>column</code>叫<code>passwordData</code>，我如果想要生成一个随机的、单次有效的token，只靠随机数肯定不行，（众所周知java的随机数是伪随机），受到上面PBE与现实中真正随机数的产生策略的启发，我的解决方案如下：</p><ul><li><strong>首先获取当前时间与用户学号拼接形成一个字符串</strong>（加学号是防止并发量过大的情况下同一时间生成字符串相同，其实也大可不必担心因为下文会使用随机盐值进行加密，生成相同序列的几率微乎其微）</li><li><strong>获取一个随机的16位salt（byte[])，使用PBE调用SHA1进行加密</strong>，由于SHA1是取哈希的非对称加密，且速度非常快，可以认为对并发量不会有太大影响。（但也正因如此现实中应该加一个冷却期才对）。<strong>生成的Base64序列转为字符串即是我要的&quot;token&quot;。</strong></li><li><strong>将生成的的&quot;token&quot;更新到表的<code>passwordData</code>下</strong>，这意味着这期间用户将不能登陆。并将重置密码的URL发送到用户邮箱，<strong>点击URL后比对URL中的token与该学号下的<code>passwordData</code>的内容，若一致，将<code>passwordData</code>的内容替换为123456的加密序列即可</strong>。若不一致，可能token错误或者重新进行了重置密码的申请。</li><li>以上解决了唯一性与单次有效性，因为token在验证完成后就会被抹去，就算用户再次点击重置的链接也只会显示&quot;token已过期&quot;。</li></ul><h1>9.发送邮件的问题：</h1><p>上面提到了发送邮件，方法如下：</p><p>pom.xml引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring:  </span><br><span class="line">  mail:</span><br><span class="line">    host: smtp地址</span><br><span class="line">    username: 邮箱地址即可</span><br><span class="line">    password: 密码或授权码</span><br><span class="line">    properties:</span><br><span class="line">      from: 邮箱地址</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSenderImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailSender</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">public</span> JavaMailSenderImpl mailSender;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">sendMimeMail</span><span class="params">(String mail)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MimeMessageHelper messageHelper = <span class="keyword">new</span> MimeMessageHelper(mailSender.createMimeMessage(), <span class="keyword">true</span>);</span><br><span class="line"> messageHelper.setFrom(mailSender.getJavaMailProperties().getProperty(<span class="string">&quot;from&quot;</span>));</span><br><span class="line">                messageHelper.setTo(mail);</span><br><span class="line">                messageHelper.setText(<span class="string">&quot;text&quot;</span>);</span><br><span class="line">                mailSender.send(messageHelper.getMimeMessage());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用该方法的时候：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">MailSender mailSender;</span><br></pre></td></tr></table></figure><p>然后调用方法即可。</p><p><a href="https://cloud.tencent.com/developer/article/1598632">该文章</a>有参考，但有坑。</p><h1>10.动态SQL强大之处</h1><h2 id="前言">前言</h2><p>这次后端开发中并没有像往常一样使用实体类与数据库表进行映射，一方面，这次数据库表耦合度比较高，我选择了将所有信息耦合在一起的方法减少多表联查并且直接取代了外键，虽然在实际应用中这是非常不可取的（频繁地对同一张表进行读写不仅导致服务器压力大而且在并发量较大时难以保证事务一致性）而且还会存在大量的数据冗余导致空间利用率其实是偏低的，但是好处也十分明显，在处理后端时可以大大减少开发的工作量，但也仅限于这个小项目而已。</p><p>另一方面，我需要能从一张数据表中组装出多个实体对象，这就意味着我不可能使用上述的映射关系。其实这种抉择也是当下形式的一个缩影，近年来很多人吹捧“低代码”这一概念，声称用几行代码就可以构建一个服务，但其实这种便捷性也会使得调用者付出巨大的代价，就是不可避免的“可定制性”或者说“自由度&quot;的降低，与代码的封装其实是一个道理，如何取舍其实还是要看开发需求。</p><h2 id="个人感受">个人感受</h2><p>不是特别想讲动态SQL，这方面个人感觉官网讲的已经非常明白了（<a href="https://mybatis.org/mybatis-3/zh/dynamic-sql.html">传送门</a>），这里说一些个人使用体验。</p><p>以下纯属个见解。</p><h3 id="1-条件性select">1.条件性select</h3><p>首先，动态SQL是<code>myBatis</code>整个架构中特别重要的一环，它的出现即继承了SpringBoot自动装配简化工作量的优势，也解决了SQL查询的一些拓展性或者说灵活性的问题。MySQL的关键字固然有很多，但是其实很大一部分在初级甚至中级开发中很少用得到。但与之对应的我们在查询时往往有多个条件一起用于查询或者只是想从多个条件中选择一个使用，传统的SQL对此束手无策（好像），以至于这个问题一直臭名昭著，但是利用动态SQL的<code>if</code>,<code>when</code>等就可以很好地解决这一问题，大大减少查询的工作量与复杂度。</p><h4 id="一个问题">一个问题</h4><p>但其实这也会带来一个问题，官网也有提到，并给出了一个解决方案：</p><blockquote><p>对于下面的SQL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;findActiveBlogLike&quot;</span><br><span class="line">     resultType=&quot;Blog&quot;&gt;</span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE</span><br><span class="line">  &lt;if test=&quot;state != null&quot;&gt;</span><br><span class="line">    state = #&#123;state&#125;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">  &lt;if test=&quot;title != null&quot;&gt;</span><br><span class="line">    AND title like #&#123;title&#125;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">  &lt;if test=&quot;author != null and author.name != null&quot;&gt;</span><br><span class="line">    AND author_name like #&#123;author.name&#125;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>如果没有匹配的条件会怎么样？最终这条 SQL 会变成这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM BLOG</span><br><span class="line">WHERE</span><br></pre></td></tr></table></figure><p>这会导致查询失败。如果匹配的只是第二个条件又会怎样？这条 SQL 会是这样:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM BLOG</span><br><span class="line">WHERE</span><br><span class="line">AND title like ‘someTitle’</span><br></pre></td></tr></table></figure><p>这个查询也会失败。这个问题不能简单地用条件元素来解决。这个问题是如此的难以解决，以至于解决过的人不会再想碰到这种问题。</p><p>MyBatis 有一个简单且适合大多数场景的解决办法。而在其他场景中，可以对其进行自定义以符合需求。而这，只需要一处简单的改动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;findActiveBlogLike&quot;</span><br><span class="line">     resultType=&quot;Blog&quot;&gt;</span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  &lt;where&gt;</span><br><span class="line">    &lt;if test=&quot;state != null&quot;&gt;</span><br><span class="line">         state = #&#123;state&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;title != null&quot;&gt;</span><br><span class="line">        AND title like #&#123;title&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;author != null and author.name != null&quot;&gt;</span><br><span class="line">        AND author_name like #&#123;author.name&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">  &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除。</p><p><strong>如果 <em>where</em> 元素与你期望的不太一样，你也可以通过自定义 trim 元素来定制 <em>where</em> 元素的功能</strong>。比如，和 <em>where</em> 元素等价的自定义 trim 元素为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;trim prefix=&quot;WHERE&quot; prefixOverrides=&quot;AND |OR &quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/trim&gt;</span><br></pre></td></tr></table></figure><p><em>prefixOverrides</em> 属性会忽略通过管道符分隔的文本序列（注意此例中的空格是必要的）。上述例子会移除所有 <em>prefixOverrides</em> 属性中指定的内容，并且插入 <em>prefix</em> 属性中指定的内容。</p><p>用于动态更新语句的类似解决方案叫做 <em>set</em>。<em>set</em> 元素可以用于动态包含需要更新的列，忽略其它不更新的列。比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=&quot;updateAuthorIfNecessary&quot;&gt;</span><br><span class="line">  update Author</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">      &lt;if test=&quot;username != null&quot;&gt;username=#&#123;username&#125;,&lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;password != null&quot;&gt;password=#&#123;password&#125;,&lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;email != null&quot;&gt;email=#&#123;email&#125;,&lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;bio != null&quot;&gt;bio=#&#123;bio&#125;&lt;/if&gt;</span><br><span class="line">    &lt;/set&gt;</span><br><span class="line">  where id=#&#123;id&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure><p>这个例子中，<em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）。</p></blockquote><blockquote><p>来看看与 <em>set</em> 元素等价的自定义 <em>trim</em> 元素吧：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;trim prefix=&quot;SET&quot; suffixOverrides=&quot;,&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/trim&gt;</span><br></pre></td></tr></table></figure><p>注意，我们覆盖了后缀值设置，并且自定义了前缀值。</p></blockquote><h3 id="2-foreach遍历">2.foreach遍历</h3><p><code>foreach</code>对于java来说非常常见的但对于SQL来说却并不，按照官网的说法：</p><blockquote><p><em>foreach</em> 元素的功能非常强大，它允许你指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量。它也允许你指定开头与结尾的字符串以及集合项迭代之间的分隔符。这个元素也不会错误地添加多余的分隔符</p></blockquote><p>而尤其在IN语句中是非常实用的，不过这次并没怎么用到就不说太多了。</p><h1>11.druid与Redis</h1>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络的异步与okhttp</title>
      <link href="/2021/10/27/%E7%BD%91%E7%BB%9C%E7%9A%84%E5%BC%82%E6%AD%A5/"/>
      <url>/2021/10/27/%E7%BD%91%E7%BB%9C%E7%9A%84%E5%BC%82%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<p>对于网络请求，按照平常我们的逻辑去写的时候，往往会出现这样的问题</p><p><img src="0.png" alt=""></p><p>为啥会是null呢？有很多同学来问过，我也跟他们解释过，无论是哪种程序，网络请求的执行，一定是特别耗时的操作（相较于我们执行其他平常的程序语句）毕竟打游戏都还有延迟呢，所以很容易出现这种情况，而如果你的程序下一步恰好开始直接对获取的JSONObject进行解析等操作，那么你的APP一般会直接崩溃。</p><p>所以怎么解决呢？其实也很简单，一方面，我们满可以让程序在进行网络请求的时候停下等网络请求执行完获取到返回的数据，也就是同步请求，但是谁要是敢这么干，立即打死。另一方面，可以等数据返回后再重新刷新界面，相当于在网络线程中进行请求，也就是我们okhttp用的<code>.enqueue(callback)</code>方法。</p><h2 id="PS">PS</h2><p>但是首先我觉得有必要说明白<code>OkHttp</code>的异步机制，我讲过，<code>OkHttp</code>会自动帮我们开新线程，指的就是我们在异步执行一个请求的时候开启的新线程。<strong>所以请求传入的<code>callback</code>回调中的代码其实都是在这个新线程里执行的</strong>。而这个线程会最终拿到网络请求的返回数据，所以我们要做的就是在拿到返回数据的<code>callback</code>里更新UI。</p><h1>机制解析</h1><p>我上次告诉大家了可以使用runOnUiThread，AsyncTask、Handler，这次给大家汇总解释一下。</p><h2 id="Handler">Handler</h2><p>众所周知，Android程序运行会开启一个UI线程，也就是主线程，用于处理UI事件。只有在UI线程中才能进行对UI的各种操作，如果在非UI线程中直接对界面元素进行操作，会报错。这是对与获取网络请求并更新UI页面这样的需求来说只能将代码写到UI线程中，这样才能更新UI线程。但是对于这种网络请求或者是耗时的工作，由于执行时间的不可确定性，可能会在执行代码时阻塞。要是将这样的代码写到UI主线程中，就会造成ANR（application not responding，如果UI线程阻塞超过几秒（现在一般是5秒），用户就会看到应用无响应的Dialog）异常，也就是程序无响应，影响客户体验。所以自Android 4.0之后，Android就不允许在主线程中访问网络，否则会报<code>NetworkOnMainThreadException</code>异常。这时另一个方法是新开一个子线程，用于网络访问，并将获取的数据发送给主线程。而子线程和UI线程之间进行通信的机制就是Handler。</p><p>说起Handler，就不得不提<code>Message</code>、<code>MessageQueue</code>以及<code>Looper</code>。<br><img src="1.png" alt=""></p><p><code>Handler</code>:异步回调机制。作用就是在子线程中发送数据，通过<code>sendMessage（）</code>发送数据；在UI线程中接收数据，通过重写<code>handlerMessage</code>方法。如果希望Handler正常工作,在当前线程中要有一个Looper对象<br><code>Looper</code>:每个线程只能够有一个Looper,管理<code>MessageQueue</code>,不断地从中取出Message分发给对应的Handler处理！<br><code>MessageQueue</code>:消息队列,先进先出管理Message,在初始化Looper对象时会创建一个与之关联的<code>MessageQueue</code>;<br><code>Message</code>:<code>Handler</code>接收与处理的消息对象</p><p>通俗一点讲：<strong>当我们的子线程想修改Activity中的UI组件时,我们可以新建一个<code>Handler</code>对象,通过这个对象向主线程发送信息;而我们发送的信息会先到主线程的<code>MessageQueue</code>进行等待,由<code>Looper</code>按先入先出顺序取出,再根据message对象的what属性分发给对应的方法或者函数进行处理！</strong></p><p>更多关于这四者直接关系，如何调用的可以看<a href="https://blog.csdn.net/luoyingxing/article/details/86500542?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-1.no_search_link">这篇博客</a></p><p>反正想要进行网络连接，必须在主线程中使用Handler机制，获取到子线程发来的数据。我们在Android定义一个按钮点击事件，当点击时，向服务器发送请求，并用handler更新UI。代码如下：</p><pre><code>  //主类主线程代码，这个Handler要作为类变量，他获取了主线程的Looper  Handler mHandler = new Handler(Looper.getMainLooper()) &#123;        @Override        public void handleMessage(Message msg) &#123;            super.handleMessage(msg);            switch (msg.what) &#123;                case 1:                    result = JSON.parseObject(msg.getData().getString(&quot;responseData&quot;));                    //继续处理UI，比如：                    getPassword.setText(result.toString());                    break;                default:                    break;            &#125;        &#125;    &#125;;        //callback中的代码：        //获取一个message对象        message = Message.obtain();        //创建传递信息用的bundle        Bundle messageBundle = new Bundle();        //存入信息        messageBundle.putString(&quot;responseData&quot;,responseData);        //确定message的编号        message.what = 1;        //将bundle注入message        message.setData(messageBundle);        //发送信息        mHandler.sendMessage(message);                //完整代码会放在最后</code></pre><p>其中重写了<code>handleMessage（Message msg）</code>方法，其中的msg就是写完子线程后在子线程中handler的<code>sendMessage（Message msg）</code>所传过来的msg信息，<code>handleMessage</code>方法中就可以对UI线程进行操作了。</p><p>创建 Handler 有两种方法：</p><ul><li><p>1、在构造函数中指定 Looper：<br><code>Handler handler = new Handler(Looper looper);</code></p><p>现在 handler指向了我们提供的Looper（实际上是 Looper 的消息队列）</p></li><li><p>2、使用空的构造函数：<br><code>Handler handler = new Handler();</code></p><p>当我们使用空构造函数的时候，Handler 会自动指向和当前线程绑定的 Looper。真方便！</p><p>Handler 提供了很方便的方法用于创建消息并自动将它们添加到 Looper 消息队列。</p></li></ul><h2 id="runOnUiThread">runOnUiThread</h2><p>这是最简单的一种方法了，可以无脑使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">result = JSON.parseObject(responseData);</span><br><span class="line">GetInfo.<span class="keyword">this</span>.runOnUiThread(()-&gt;&#123;</span><br><span class="line">    <span class="comment">//在这里更新UI，比如：</span></span><br><span class="line">     getPassword.setText(result.toString());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="破解魔法">破解魔法</h3><p>我们一起来看看 Activity 源码中的相关部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Handler mHandler = <span class="keyword">new</span> Handler();</span><br><span class="line"><span class="keyword">private</span> Thread mUiThread;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runOnUiThread</span><span class="params">(Runnable action)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Thread.currentThread() != mUiThread) &#123;</span><br><span class="line">        mHandler.post(action);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         action.run();</span><br><span class="line">     &#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来非常简单，首先我们检查当前运行的线程是否是主线线程。</p><p>如果是主线程–很棒！只需要调用 Runnable 的 <code>run（）</code> 方法。</p><p>但是如果不是主线程呢？</p><p>在这种情况下，我们会调用 <code>mHandler.post()</code> 并将我们的 Runnable 传递过去。然后在主线程中执行。</p><h3 id="一切都从-Looper-开始">一切都从 Looper 开始</h3><p>当我们创建一个新的 Java 线程时，我们重写它的 <code>run()</code> 方法。一个简单的线程实现看起来应该是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Do stuff...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好好的看一下 <code>run()</code> 方法，当线程执行完该方法中所有的语句后，线程就完成了。结束了。没用了。</p><p>如我我们想重复使用一个线程（一个很好的理由就是避免新线程创建以及减少内存消耗）我们必须让它保持存活状态并且等待接收新的指令。一个常用的方式就是在线程的 <code>run()</code> 方法里创建一个循环：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> running;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (running) &#123;</span><br><span class="line">            <span class="comment">// Do stuff...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要 while 循环还在执行（即 <code>run()</code> 方法还没有执行完毕）–这个线程就保持存活状态。</p><p><strong>这就是 Looper 所做的事情：</strong></p><p><strong>Looper。就是 LOOPING，并保持它的线程处于存活状态</strong></p><p>关于 Looper 以下几点值得注意：</p><ul><li><strong>非主线程默认没有 Looper</strong></li><li>你可创建一个 Looper 并将它绑定到一个线程</li><li><strong>每一个线程只能绑定一个 Looper</strong></li></ul><p>所以，我们将线程中的 while 循环用 Looper 实现来替换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Looper.prepare(); </span><br><span class="line">        Looper.loop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真的很简单：</p><p>调用 <code>Lopper.prepare()</code> 是检查当前线程是否还没有绑定 Lopper（记住，每一个线程只能绑定一个 Looper），如果没有就创建一个 Looper 并和当前线程绑定。</p><p>调用 <code>Looper.loop()</code> 触发我们的 Looper 开始循环。</p><p>所以，现在 Looper 开始循环并保持线程处于存活状态，但是如果不能传递指令、任务或者其他事情让线程执行实际的任务，那么保持线程存活没有任何意义。</p><p>幸好，Looper 不仅仅是循环。<strong>当我们创建 Looper 的时候，会一并创建一个工作队列</strong>（讲Handler的时候提到过）。这个队列称为消息队列因为它持有消息（<strong>Message</strong>）对象。Looper配合<code>viewRootImpl</code>视图树的handler将所有的消息追加到主线程消息队列后面，一一执行。</p><p>例如，<code>post()</code> 方法就创建一条消息并将它添加到 Looper 队列的尾部。</p><p>如果我们希望消息持有一个任务（一个 Runnable），我们简单的将 Runnable 对象传递给 <code>post()</code> 方法就可以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">handler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// Do stuff...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>所以如果上面的handler用post方法其实本质上跟runOnUiThread是差不多的。</p><h3 id="再来看看-Activity-的源码">再来看看 Activity 的源码</h3><p>现在我们再仔细的看一看<code>runOnUiThread():</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Handler mHandler = <span class="keyword">new</span> Handler();</span><br><span class="line"><span class="keyword">private</span> Thread mUiThread;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runOnUiThread</span><span class="params">(Runnable  action)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Thread.currentThread() != mUiThread) &#123;</span><br><span class="line">        mHandler.post(action);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         action.run();</span><br><span class="line">     &#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**记住：**这段代码是在主线程中执行，这意味着 <code>mHandler</code> 指向主线程的 Looper。</p><p>是的，<strong>应用主线程是唯一一个默认绑定了 Looper 线程</strong>。</p><p>所以。。。当这一行代码执行的时候：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mHandler.post(action);</span><br></pre></td></tr></table></figure><p>Handler 会创建一条持有我们传入的 Runnable 的消息，这条消息随后被添加到主线程的消息队列，然后等待 Handler 在它的Looper线程（<strong>主线程</strong>）中执行。</p><h2 id="AsyncTask">AsyncTask</h2><p><strong>不太想写了，以下AsyncTask转载自[<a href="https://blog.csdn.net/lidew521/article/details/118072359">credreamer的转载</a></strong></p><p>通过AsyncTask可以实现</p><ol><li>实现多线程<br>在工作线程中执行任务，如 耗时任务</li><li>异步通信、消息传递<br><strong>实现工作线程 &amp; 主线程（<code>UI</code>线程）之间的通信</strong>，即：将工作线程的执行结果传递给主线程，从而在主线程中执行相关的<code>UI</code>操作,从而保证线程安全</li><li>可以看看这个AsyncTask类</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AsyncTask</span>&lt;<span class="title">Params</span>, <span class="title">Progress</span>, <span class="title">Result</span>&gt; &#123; </span><br><span class="line"> ... </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类中参数为3种泛型类型</span></span><br><span class="line"><span class="comment">// 整体作用：控制AsyncTask子类执行线程任务时各个阶段的返回类型</span></span><br><span class="line"><span class="comment">// 具体说明：</span></span><br><span class="line"><span class="comment">// a. Params：开始异步任务执行时传入的参数类型，对应excute（）中传递的参数</span></span><br><span class="line"><span class="comment">// b. Progress：异步任务执行过程中，返回下载进度值的类型</span></span><br><span class="line"><span class="comment">// c. Result：异步任务执行完成后，返回的结果类型，与doInBackground()的返回值类型保持一致</span></span><br><span class="line"><span class="comment">// 注：</span></span><br><span class="line"><span class="comment">// a. 使用时并不是所有类型都被使用</span></span><br><span class="line"><span class="comment">// b. 若无被使用，可用java.lang.Void类型代替</span></span><br><span class="line"><span class="comment">// c. 若有不同业务，需额外再写1个AsyncTask的子类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.他有以下的方法</p><p><img src="2.png" alt=""></p><p>5.然后调用顺序是这样的:</p><p><img src="3.png" alt=""></p><p>然后我们去写一个例子看看</p><p>1.创建 <code>AsyncTask</code> 子类 &amp; 根据需求实现核心方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 步骤1：创建AsyncTask子类</span></span><br><span class="line"><span class="comment">  * 注： </span></span><br><span class="line"><span class="comment">  *   a. 继承AsyncTask类</span></span><br><span class="line"><span class="comment">  *   b. 为3个泛型参数指定类型；若不使用，可用java.lang.Void类型代替</span></span><br><span class="line"><span class="comment">  *   c. 根据需求，在AsyncTask子类内实现核心方法</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Params</span>, <span class="title">Progress</span>, <span class="title">Result</span>&gt; </span>&#123;</span><br><span class="line">        ....</span><br><span class="line">      <span class="comment">// 方法1：onPreExecute（）</span></span><br><span class="line">      <span class="comment">// 作用：执行 线程任务前的操作</span></span><br><span class="line">      <span class="comment">// 注：根据需求复写</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">onPreExecute</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">           ...</span><br><span class="line">        &#125;</span><br><span class="line">           </span><br><span class="line">      <span class="comment">// 方法2：doInBackground（）</span></span><br><span class="line">      <span class="comment">// 作用：接收输入参数、执行任务中的耗时操作、返回 线程任务执行的结果</span></span><br><span class="line">      <span class="comment">// 注：必须复写，从而自定义线程任务</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">protected</span> <span class="built_in">String</span> <span class="function"><span class="title">doInBackground</span>(<span class="params"><span class="built_in">String</span>... params</span>)</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="comment">// 自定义的线程任务</span></span><br><span class="line">            <span class="comment">// 可调用publishProgress（）显示进度, 之后将执行onProgressUpdate（）</span></span><br><span class="line">             publishProgress(count);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 方法3：onProgressUpdate（）</span></span><br><span class="line">      <span class="comment">// 作用：在主线程 显示线程任务执行的进度</span></span><br><span class="line">      <span class="comment">// 注：根据需求复写</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">onProgressUpdate</span>(<span class="params">Integer... progresses</span>)</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 方法4：onPostExecute（）</span></span><br><span class="line">      <span class="comment">// 作用：接收线程任务执行结果、将执行结果显示到UI组件</span></span><br><span class="line">      <span class="comment">// 注：必须复写，从而自定义UI操作</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">onPostExecute</span>(<span class="params"><span class="built_in">String</span> result</span>)</span> &#123;</span><br><span class="line">         ...</span><br><span class="line">         <span class="comment">// UI操作</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 方法5：onCancelled()</span></span><br><span class="line">      <span class="comment">// 作用：将异步任务设置为：取消状态</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">onCancelled</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 步骤2：创建AsyncTask子类的实例对象（即 任务实例）</span></span><br><span class="line"><span class="comment">  * 注：AsyncTask子类的实例必须在UI线程中创建</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">          </span><br><span class="line">  MyTask mTask = <span class="keyword">new</span> MyTask();</span><br><span class="line">          </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 步骤3：手动调用execute(Params... params) 从而执行异步线程任务</span></span><br><span class="line"><span class="comment">  * 注：</span></span><br><span class="line"><span class="comment">  *    a. 必须在UI线程中调用</span></span><br><span class="line"><span class="comment">  *    b. 同一个AsyncTask实例对象只能执行1次，若执行第2次将会抛出异常</span></span><br><span class="line"><span class="comment">  *    c. 执行任务中，系统会自动调用AsyncTask的一系列方法：onPreExecute() 、doInBackground()、onProgressUpdate() 、onPostExecute() </span></span><br><span class="line"><span class="comment">  *    d. 不能手动调用上述方法</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  mTask.execute()；</span><br></pre></td></tr></table></figure><ol><li>创建 <code>AsyncTask</code>子类的实例对象（即 任务实例）</li><li>手动调用<code>execute(（）</code>从而执行异步线程任务</li></ol><p>3.上面是介绍,然后我们再去写个例子去看看:</p><h3 id="6-实例讲解">6. 实例讲解</h3><p>下面，我将用1个实例讲解 具体如何使用 <code>AsyncTask</code></p><h4 id="6-1-实例说明">6.1 实例说明</h4><ol><li>点击按钮 则 开启线程执行线程任务</li><li>显示后台加载进度</li><li>加载完毕后更新UI组件</li><li>期间若点击取消按钮，则取消加载</li></ol><p>如下图</p><p><img src="4.gif" alt="img"></p><h4 id="6-2-具体实现">6.2 具体实现</h4><blockquote><p>建议先下载源码再看：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FCarson-Ho%2FMultiThread_learning">Carson_Ho的Github地址：AsyncTask</a></p></blockquote><ul><li>主布局文件：<em>activity_main.xml</em></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;com.example.carson_ho.handler_learning.MainActivity&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;点我加载&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;还没开始加载!&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">ProgressBar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">&quot;@+id/text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/progress_bar&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;fill_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:progress</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:max</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;?android:attr/progressBarStyleHorizontal&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">&quot;@+id/progress_bar&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/cancel&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;cancel&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>主逻辑代码文件：<em>MainActivity.java</em></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 线程变量</span></span><br><span class="line">    MyTask mTask;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 主布局中的UI组件</span></span><br><span class="line">    Button button,cancel; <span class="comment">// 加载、取消按钮</span></span><br><span class="line">    TextView text; <span class="comment">// 更新的UI组件</span></span><br><span class="line">    ProgressBar progressBar; <span class="comment">// 进度条</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 步骤1：创建AsyncTask子类</span></span><br><span class="line"><span class="comment">     * 注：</span></span><br><span class="line"><span class="comment">     *   a. 继承AsyncTask类</span></span><br><span class="line"><span class="comment">     *   b. 为3个泛型参数指定类型；若不使用，可用java.lang.Void类型代替</span></span><br><span class="line"><span class="comment">     *      此处指定为：输入参数 = String类型、执行进度 = Integer类型、执行结果 = String类型</span></span><br><span class="line"><span class="comment">     *   c. 根据需求，在AsyncTask子类内实现核心方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 方法1：onPreExecute（）</span></span><br><span class="line">        <span class="comment">// 作用：执行 线程任务前的操作</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">onPreExecute</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            text.setText(<span class="string">&quot;加载中&quot;</span>);</span><br><span class="line">            <span class="comment">// 执行前显示提示</span></span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 方法2：doInBackground（）</span></span><br><span class="line">        <span class="comment">// 作用：接收输入参数、执行任务中的耗时操作、返回 线程任务执行的结果</span></span><br><span class="line">        <span class="comment">// 此处通过计算从而模拟“加载进度”的情况</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">String</span> <span class="function"><span class="title">doInBackground</span>(<span class="params"><span class="built_in">String</span>... params</span>)</span> &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                int count = <span class="number">0</span>;</span><br><span class="line">                int length = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (count&lt;<span class="number">99</span>) &#123;</span><br><span class="line"> </span><br><span class="line">                    count += length;</span><br><span class="line">                    <span class="comment">// 可调用publishProgress（）显示进度, 之后将执行onProgressUpdate（）</span></span><br><span class="line">                    publishProgress(count);</span><br><span class="line">                    <span class="comment">// 模拟耗时任务</span></span><br><span class="line">                    Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 方法3：onProgressUpdate（）</span></span><br><span class="line">        <span class="comment">// 作用：在主线程 显示线程任务执行的进度</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">onProgressUpdate</span>(<span class="params">Integer... progresses</span>)</span> &#123;</span><br><span class="line"> </span><br><span class="line">            progressBar.setProgress(progresses[<span class="number">0</span>]);</span><br><span class="line">            text.setText(<span class="string">&quot;loading...&quot;</span> + progresses[<span class="number">0</span>] + <span class="string">&quot;%&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 方法4：onPostExecute（）</span></span><br><span class="line">        <span class="comment">// 作用：接收线程任务执行结果、将执行结果显示到UI组件</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">onPostExecute</span>(<span class="params"><span class="built_in">String</span> result</span>)</span> &#123;</span><br><span class="line">            <span class="comment">// 执行完毕后，则更新UI</span></span><br><span class="line">            text.setText(<span class="string">&quot;加载完毕&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 方法5：onCancelled()</span></span><br><span class="line">        <span class="comment">// 作用：将异步任务设置为：取消状态</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">onCancelled</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"> </span><br><span class="line">            text.setText(<span class="string">&quot;已取消&quot;</span>);</span><br><span class="line">            progressBar.setProgress(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">void</span> <span class="function"><span class="title">onCreate</span>(<span class="params">Bundle savedInstanceState</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 绑定UI组件</span></span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"> </span><br><span class="line">        button = (Button) findViewById(R.id.button);</span><br><span class="line">        cancel = (Button) findViewById(R.id.cancel);</span><br><span class="line">        text = (TextView) findViewById(R.id.text);</span><br><span class="line">        progressBar = (ProgressBar) findViewById(R.id.progress_bar);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 步骤2：创建AsyncTask子类的实例对象（即 任务实例）</span></span><br><span class="line"><span class="comment">         * 注：AsyncTask子类的实例必须在UI线程中创建</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        mTask = <span class="keyword">new</span> MyTask();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 加载按钮按按下时，则启动AsyncTask</span></span><br><span class="line">        <span class="comment">// 任务完成后更新TextView的文本</span></span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">onClick</span>(<span class="params">View v</span>)</span> &#123;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 步骤3：手动调用execute(Params... params) 从而执行异步线程任务</span></span><br><span class="line"><span class="comment">                 * 注：</span></span><br><span class="line"><span class="comment">                 *    a. 必须在UI线程中调用</span></span><br><span class="line"><span class="comment">                 *    b. 同一个AsyncTask实例对象只能执行1次，若执行第2次将会抛出异常</span></span><br><span class="line"><span class="comment">                 *    c. 执行任务中，系统会自动调用AsyncTask的一系列方法：onPreExecute() 、doInBackground()、onProgressUpdate() 、onPostExecute()</span></span><br><span class="line"><span class="comment">                 *    d. 不能手动调用上述方法</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                mTask.execute();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">        cancel = (Button) findViewById(R.id.cancel);</span><br><span class="line">        cancel.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">onClick</span>(<span class="params">View v</span>)</span> &#123;</span><br><span class="line">                <span class="comment">// 取消一个正在执行的任务,onCancelled方法将会被调用</span></span><br><span class="line">                mTask.cancel(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>代码</h1><h2 id="我的httpUtil">我的<code>httpUtil</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> JSONObject object;</span><br><span class="line">    Callback callback = <span class="keyword">new</span> Callback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="comment">//获取返回数据并以String格式保存</span></span><br><span class="line">            String responseData = response.body().string();</span><br><span class="line">            <span class="comment">//将String格式转换为json格式</span></span><br><span class="line">            object = JSON.parseObject(responseData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//打印异常栈</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendGet</span><span class="params">(String address, okhttp3.Callback callback)</span> </span>&#123;</span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(address)</span><br><span class="line">                .get()</span><br><span class="line">                .build();</span><br><span class="line">        client.newCall(request).enqueue(callback);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendPost</span><span class="params">(String address, okhttp3.Callback callback,RequestBody body)</span> </span>&#123;</span><br><span class="line">                OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(address)</span><br><span class="line">                .post(body)</span><br><span class="line">                .build();</span><br><span class="line">        client.newCall(request).enqueue(callback);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">OKHttpWithCallBack</span><span class="params">(<span class="keyword">boolean</span> isGet,String address,Callback callback,RequestBody body)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isGet)&#123;</span><br><span class="line">            sendGet(address,callback);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            sendPost(address,callback,body);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  JSONObject <span class="title">OKHttpWithoutCallBack</span><span class="params">(<span class="keyword">boolean</span> isGet,String address, RequestBody body)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isGet)&#123;</span><br><span class="line">            sendGet(address,callback);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            sendPost(address,callback,body);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>body的写法：</p><p><a href="https://www.jianshu.com/p/ca8a982a116b">https://www.jianshu.com/p/ca8a982a116b</a></p><h2 id="Handler代码：">Handler代码：</h2><p>java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetInfo</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span>  </span>&#123;</span><br><span class="line">    HttpUtil httpUtil = <span class="keyword">new</span> HttpUtil();</span><br><span class="line">    TextView getAccount;</span><br><span class="line">    TextView getPassword;</span><br><span class="line">    EditText textUsername;</span><br><span class="line">    Button buttonGetInfo;</span><br><span class="line">    Button buttonIntent;</span><br><span class="line">    JSONObject result;</span><br><span class="line">    Message message;</span><br><span class="line"></span><br><span class="line">    Handler mHandler = <span class="keyword">new</span> Handler(Looper.getMainLooper()) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="comment">//更新 TextView UI</span></span><br><span class="line">                    result = JSON.parseObject(msg.getData().getString(<span class="string">&quot;responseData&quot;</span>));</span><br><span class="line">                    <span class="comment">//继续处理UI</span></span><br><span class="line">                    System.out.println();</span><br><span class="line">                    getPassword.setText(result.toString());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_get_info);</span><br><span class="line">        getAccount = findViewById(R.id.account_text);</span><br><span class="line">        getPassword = findViewById(R.id.password_text);</span><br><span class="line">        textUsername = findViewById(R.id.text_username);</span><br><span class="line">        buttonGetInfo = findViewById(R.id.button_get_info);</span><br><span class="line">        buttonIntent = findViewById(R.id.button_intent2);</span><br><span class="line"></span><br><span class="line">        buttonGetInfo.setOnClickListener(view -&gt; &#123;</span><br><span class="line">            getInfo();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">     httpUtil.OKHttpWithCallBack(</span><br><span class="line">             <span class="keyword">true</span>,</span><br><span class="line">             <span class="string">&quot;http://82.156.169.66:8181/user/login?account=1234&amp;password=1234&quot;</span>,</span><br><span class="line">             callback,</span><br><span class="line">             <span class="keyword">null</span></span><br><span class="line">             );</span><br><span class="line">    &#125;</span><br><span class="line">    Callback callback = <span class="keyword">new</span> Callback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="comment">//获取返回数据并以String格式保存</span></span><br><span class="line">            String responseData = response.body().string();</span><br><span class="line">            <span class="comment">//将String格式转换为json格式</span></span><br><span class="line">            <span class="keyword">if</span> (responseData != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">              message = Message.obtain();</span><br><span class="line">              Bundle messageBundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">              messageBundle.putString(<span class="string">&quot;responseData&quot;</span>,responseData);</span><br><span class="line">              message.what = <span class="number">1</span>;</span><br><span class="line">              message.setData(messageBundle);</span><br><span class="line">              mHandler.sendMessage(message);</span><br><span class="line"></span><br><span class="line">             Log.i(<span class="string">&quot;success&quot;</span>, responseData.toString());</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                Log.e(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;onResponse: &quot;</span> );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//打印异常栈</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.GetInfo&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/get_account_text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;@string/get_info_title&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;90dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;54dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;24sp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/text_username&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;256dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;90dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;12dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/edittext_selector&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">&quot;用户名&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;8dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;16sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/account_text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;16dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;90dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;44dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/password_text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;90dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;14dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/button_get_info&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;获取&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:padding</span>=<span class="string">&quot;8dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;90dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;64dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@color/blue&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/button_intent2&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;跳转&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:padding</span>=<span class="string">&quot;8dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;64dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@color/blue&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="runOnUiThread代码：">runOnUiThread代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetInfo</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span>  </span>&#123;</span><br><span class="line">    HttpUtil httpUtil = <span class="keyword">new</span> HttpUtil();</span><br><span class="line">    TextView getAccount;</span><br><span class="line">    TextView getPassword;</span><br><span class="line">    EditText textUsername;</span><br><span class="line">    Button buttonGetInfo;</span><br><span class="line">    Button buttonIntent;</span><br><span class="line">    JSONObject result;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_get_info);</span><br><span class="line">        getAccount = findViewById(R.id.account_text);</span><br><span class="line">        getPassword = findViewById(R.id.password_text);</span><br><span class="line">        textUsername = findViewById(R.id.text_username);</span><br><span class="line">        buttonGetInfo = findViewById(R.id.button_get_info);</span><br><span class="line">        buttonIntent = findViewById(R.id.button_intent2);</span><br><span class="line"></span><br><span class="line">        buttonGetInfo.setOnClickListener(view -&gt; &#123;</span><br><span class="line">            getInfo();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">     httpUtil.OKHttpWithCallBack(</span><br><span class="line">             <span class="keyword">true</span>,</span><br><span class="line">             <span class="string">&quot;http://82.156.169.66:8181/user/login?account=1234&amp;password=1234&quot;</span>,</span><br><span class="line">             callback,</span><br><span class="line">             <span class="keyword">null</span></span><br><span class="line">             );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Callback callback = <span class="keyword">new</span> Callback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="comment">//获取返回数据并以String格式保存</span></span><br><span class="line">            String responseData = response.body().string();</span><br><span class="line">            <span class="comment">//将String格式转换为json格式</span></span><br><span class="line">            <span class="keyword">if</span> (responseData != <span class="keyword">null</span>)&#123;</span><br><span class="line">                </span><br><span class="line">                result = JSON.parseObject(responseData);</span><br><span class="line">                GetInfo.<span class="keyword">this</span>.runOnUiThread(()-&gt;&#123;</span><br><span class="line">                    getPassword.setText(result.toString());</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">             Log.i(<span class="string">&quot;success&quot;</span>, responseData.toString());</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                Log.e(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;onResponse: &quot;</span> );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//打印异常栈</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安卓原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学线培训 </tag>
            
            <tag> 安卓原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的2021华为开发者大会</title>
      <link href="/2021/10/24/%E6%88%91%E7%9A%842021%E5%8D%8E%E4%B8%BA%E5%BC%80%E5%8F%91%E8%80%85%E5%A4%A7%E4%BC%9A/"/>
      <url>/2021/10/24/%E6%88%91%E7%9A%842021%E5%8D%8E%E4%B8%BA%E5%BC%80%E5%8F%91%E8%80%85%E5%A4%A7%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>有一说一真的没有想到今年能有机会参加这次盛会，真的是惊喜。</p><p><img src="0.jpg" alt=""></p><p>作为一名开发者，一名安卓开发者，一名资深（大概）花粉的安卓开发者，能够来到华为在东莞的小镇真的是万分荣幸。</p><p>来之前也想过好多，对未来的规划也好，对知识的期许也罢，其实都是满满的期待罢了。</p><h1>历程</h1><h2 id="The-first-day">The first day</h2><p>飞机加入住手续，虽然有些繁琐，但是疫情之下还是要保护好自己。</p><img src="1.jpg" style="zoom:50%;" /><p>在酒店里体验了一把智能家居，真的感受到了万物互联的一些魅力与便捷。</p><h2 id="The-second-day">The second day</h2><p>一大早起床来到三丫坡签到，虽然有些迷糊但还是很激动。</p><img src="2.jpg" style="zoom:15%;" /><p>进入活动会场（好大）</p><img src="5.jpg" style="zoom:50%;" /><img src="4.jpeg" style="zoom:33%;" /><p>然后就跟大佬们一起去做codelabs，上手体验华为各种开放能力的开发。其实感觉codelab还是蛮简单的，不过第一天不太熟悉，像个没头苍蝇一样乱撞，体验到了一些自己感兴趣的能力，尤其是一些我比较熟悉的HMS相关服务，不过也挑战了特别多几乎没有接触过的知识，比如3D建模能力，sense渲染能力，HIAI开放能力，甚至现学华为推出的eTS（extended TypeScript）语言然后现卖（指修bug），了解了一些前端的最新的开发规范，甚至受现场的一位老师邀请当了一波特邀观众，听了他对鸿蒙开发的演进过程的分析以及现阶段鸿蒙的优势，其中的思想真的值得我思考。</p><p>eTS确实用更少的代码，更低的门槛，解决了传统安卓命令式代码的许多问题，而且耦合度也没有太大区别。安卓原生开发的命令式代码与视图跟逻辑分离的思想固然是好，但同时造成了大量代码冗余和更复杂的代码结构，而eTS的声明式编程则在很大程度上解决了这一问题。</p><img src="3.jpg" style="zoom:33%;" /><p>codelab：</p><img src="9.jpeg" style="zoom:40%;" /><p>做的是HMS的账号服务，我一说这个我做过结果引来了三位老师来指导讲解（雾）</p><p><img src="10.jpeg" alt=""></p><p>然后还领到了证书，哎嘿嘿，感觉这张照片照的挺好的，就放上吧。</p><p>中午跟大家一起吃了饭，下午大家听了公司HR等大佬的一些讲座，还很荣幸地在现场领到了布道师证书和奖杯，并且接受了采访，2333。</p><p><img src="7.jpg" alt=""></p><p>星光不负赶路人，愿携手前行。</p><p><img src="8.jpg" alt=""></p><p><img src="6.jpg" alt=""></p><p>晚上大家一起聚餐，聊得特别开心，（小助手疯狂输出），不过没有留照片，就不放了，2333。</p><h2 id="The-Third-day">The Third day</h2><p>第三天大家一起拍了很多照片（当然第二天也拍了很多）我就一起放几张吧</p><p><img src="11.jpeg" alt=""></p><p><img src="12.jpeg" alt=""></p><p><img src="13.jpeg" alt=""></p><p>拍了照去做了一会儿codelab，顺利了很多，体验了很多想体验的服务，虽然只做了一个小时就去听鸿蒙公开课了，不过在做codelab的时候也跟大佬们聊了很多技术问题，收获了 许多知识和思想。</p><p>鸿蒙公开课让我收获颇丰，我在这里发现了更加优质的资源，但令我感触最深的还是讲到的学习鸿蒙的正确姿势，一种技术，如果我们按照从语言到实操的路程去学习，真的很容易从入门到放弃，但如果先从demo入手，边看边学，就能实时地获取到自己的学习反馈，学习历程也会更轻松更自信。</p><p>两天下来发现两个背包都装满了（雾）。</p><p><img src="16.jpg" alt=""></p><h1>写在最后</h1><p>我总觉得，在某些方面，学校所能提供的还是太少了，这并不是学校不认真负责，而是说本就囿于象牙塔的束缚，学校能尽力为我们提供的是知识，但却很难让我们看清行业实时动向与现状，尤其是在疫情当下，与外界交流减少，更加加剧了这一局面。我们真的需要走出去，去看一看，学一学，了解一些对我们未来发展有指导性的思想与知识，了解一些行业的痛点与现状，了解一些尖端的技术与能力，其重要性并不亚于对课程知识的学习。</p><p>这一年，我从安卓走向了跨平台（cross-platform），又从跨平台开始了解跨终端，历史的发展总是这样，我们希望我们身边的设备，不是一个个孤立的设备，更不应该是每个设备都有自己一套体系而且互相难以兼容的孤立设备，我们所追求的，是让我们使用身边的每一个设备的时候都能像使用自己的双手一样自如。</p><p>诚然，平台与平台之间的隔膜还很难被打破，但设备与设备间的互联却很容易完成，但我们亦不能止步于“联”，更应考虑“智”，如何让设备之间看上去像是一个整体，如何能让用户在设备之间无缝切换，如何能让设备去学习推测主人的意志从而自动地完成服务，如何能让用户去更快地习惯并接受这种生态，各种技术要处于怎样的地位、发挥怎样的能力，究竟哪些技术会被逐渐抛弃、哪些技术会渐渐兴起，这都是我们要考虑的问题，也是行业要考虑的问题。</p><p>此外，从万物互联到万物自联、智联，华为的努力和成果有目共睹，但我们并不会止步于此。星辰之光虽然微弱，但亿万星辰亦可汇成银河，未来，我们在路上。</p><p><img src="15.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 值得纪念的事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 华为 </tag>
            
            <tag> HSD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器配置mysql与java踩坑</title>
      <link href="/2021/10/17/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEmysql%E8%B8%A9%E5%9D%91/"/>
      <url>/2021/10/17/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEmysql%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1>安装MySQL与远程登录</h1><h3 id="首先">首先</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></table></figure><h3 id="初始化配置信息">初始化配置信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure><ul><li>VALIDATE PASSWORD COMPONENT…（使用密码强度校验组件） 输入： n</li><li>New Password:（设置新密码,并重复一遍)</li><li>Remove anonymous users (删除匿名用户) n</li><li>Disallow root login remotely(拒绝远程root账号登录） n</li><li>Remove test database and access to it(移除test数据库） n</li><li>Reload privilege tables now (现在就重新载入权限表） y</li></ul><h3 id="登录">登录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -urppt -p</span><br></pre></td></tr></table></figure><h3 id="修改认证方式">修改认证方式</h3><p>将身份验证方法从<code>auth_socket</code>更改为<code>mysql_native_password</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;你的密码&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="允许远程访问">允许远程访问</h3><p><strong>先打开3306端口</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user set Host=&#x27;%&#x27; where User=&#x27;root&#x27;;</span><br></pre></td></tr></table></figure><h4 id="踩坑：">踩坑：</h4><ol><li>在8.0以前，我们习惯使用以下命令授权远程连接操作：</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges <span class="keyword">on</span> *.* to <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><ol><li>但在8.0以后，使用以上命令会报错：</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR <span class="number">1410</span> (<span class="number">42000</span>): You are not allowed to create a user <span class="keyword">with</span> GRANT</span><br></pre></td></tr></table></figure><h5 id="分析原因：">分析原因：</h5><p>因为在8.0以后，这个特性已被移除，官方文档如下：</p><blockquote><p>原文：Using GRANT to modify account properties other than privilege assignments. This includes<br>authentication, SSL, and resource-limit properties. Instead, establish such properties at account-creation<br>time with CREATE USER or modify them afterward with ALTER USER.<br>译文：使用grant修改账户权限分配以外的账户属性。包括认证，SSL，和资源限制配置等。取而代之的是创建用户create user或者创建后修改alter user的方式。</p></blockquote><h3 id="刷新cache中配置">刷新cache中配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="修改配置">修改配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><p>找到bind-address属性，后面的ip地址改成0.0.0.0保存并退出，然后重启mysql服务(也可以注释掉bind-address)</p><p><img src="0.png" alt=""></p><h3 id="重启mysql">重启mysql</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysql</span><br></pre></td></tr></table></figure><h3 id="MySQL8-卸载">MySQL8 卸载</h3><ol><li>查看MySQL依赖 ： <code>dpkg --list|grep mysql</code></li><li>卸载： <code>sudo apt-get remove mysql-common</code></li><li>卸载： <code>sudo apt-get autoremove --purge mysql-server-8.0</code>(这里版本对应即可)</li><li>清除残留数据: <code>dpkg -l|grep ^rc|awk '&#123;print$2&#125;'|sudo xargs dpkg -P</code></li><li>再次查看MySQL的剩余依赖项: <code>dpkg --list|grep mysql</code>(这里一般就没有输出了，如果有执行下一步)</li><li>继续删除剩余依赖项，如：<code>sudo apt-get autoremove --purge mysql-apt-config</code></li></ol><h1>安装jdk</h1><h3 id="解压jdk">解压jdk</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u121-linux-x64.tar.gz(文件名)</span><br></pre></td></tr></table></figure><h3 id="编辑环境变量">编辑环境变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure><p>末尾添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#JDK</span><br><span class="line">export JAVA_HOME=/usr/local/bin/jdk1<span class="number">.8</span><span class="number">.0_271</span>(真实路径)</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散：3.欧拉图与哈密顿图</title>
      <link href="/2021/10/17/%E7%A6%BB%E6%95%A3%EF%BC%9A3-%E6%AC%A7%E6%8B%89%E5%9B%BE%E4%B8%8E%E5%93%88%E5%AF%86%E9%A1%BF%E5%9B%BE/"/>
      <url>/2021/10/17/%E7%A6%BB%E6%95%A3%EF%BC%9A3-%E6%AC%A7%E6%8B%89%E5%9B%BE%E4%B8%8E%E5%93%88%E5%AF%86%E9%A1%BF%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="定义1">定义1</h3><p>设G是一个图，G中包含所有边的通路/迹(即<strong>每条边恰好出现一次的路径</strong>)称为Euler通路/迹，闭的Euler迹称为Euler闭迹或Euler回路；</p><p>具有<strong>Euler回路的图称为Euler图</strong>，开的Euler迹称为Euler开迹，具有Euler开迹的图称为半Euler图。</p><h3 id="Terminologies">Terminologies:</h3><ul><li><p>Euler Circuit(欧拉回路)：An Euler circuit in a graph G is a simple circuit containing every edge of G.</p><ul><li>欧拉回路，是<strong>包含着G的每一条边的简单回路</strong></li><li>（回路，即闭迹）</li><li>设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub><msub><mi>e</mi><mn>1</mn></msub><msub><mi>v</mi><mn>1</mn></msub><msub><mi>e</mi><mn>2</mn></msub><msub><mi>v</mi><mn>2</mn></msub><mo>…</mo><msub><mi>e</mi><mi>k</mi></msub><msub><mi>v</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">v_0e_1v_1e_2v_2…e_kv_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为图<em>G</em>中的一条路径，若<strong>边</strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>e</mi><mn>1</mn></msub><mtext>，</mtext><msub><mi>e</mi><mn>2</mn></msub><mtext>，</mtext><mo>…</mo><mtext>，</mtext><msub><mi>e</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">e_1，e_2，…，e_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 互不相同，则称该路径为<strong>迹</strong>；若<strong>点</strong>序列<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub><mtext>，</mtext><msub><mi>v</mi><mn>1</mn></msub><mtext>，</mtext><mo>…</mo><mtext>，</mtext><msub><mi>v</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">v_0，v_1，…，v_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>互不相同，则称该路径为<strong>路</strong>。</li></ul></li><li><p>Euler Path(欧拉通路)：An Euler path in G is a simple path containing every edge of G.</p><ul><li>欧拉通路，是<strong>包含着G的每一条边的简单通路</strong></li></ul></li><li><p>Euler Graph(欧拉图)：A graph contains an Euler circuit.</p><ul><li>包含欧拉回路的图称为欧拉图。</li></ul></li><li><p>Simple Path/Circuit（简单路径/回路）：A path or circuit is called simple if it does not contain the same edge more than once.</p><ul><li>不包含重复边的路径或回路称为简单路径/回路</li></ul></li></ul><h3 id="欧拉回路和欧拉通路的充要条件"><strong>欧拉回路和欧拉通路的充要条件</strong></h3><ul><li><p>连通多重图具有<strong>欧拉回路</strong>当且仅当<strong>它的每个顶点都有偶数度</strong></p></li><li><p>连通多重图<strong>具有欧拉通路而无欧拉回路</strong>，当且仅当<strong>它恰有两个奇数度顶点</strong></p></li></ul><h3 id="有向图中的欧拉回路与欧拉通路"><strong>有向图中的欧拉回路与欧拉通路</strong></h3><p>A directed multigraph having no isolated vertices has an Euler circuit if and only if</p><h4 id="一个没有孤立顶点的有向多重图含有欧拉回路的充要条件是：">一个没有孤立顶点的有向多重图含有欧拉回路的充要条件是：</h4><ul><li><p>the graph is weakly connected   弱连通的</p></li><li><p>the in-degree and out-degree of each vertex are equal 每个顶点的出度和入度相等</p></li></ul><p>A directed multigraph having no isolated vertices has an Euler path but not an Euler circuit if and only if</p><h4 id="一个没有孤立顶点的有向多重图含有欧拉通路但不含欧拉回路的充要条件是：">一个没有孤立顶点的有向多重图含有欧拉通路但不含欧拉回路的充要条件是：</h4><ul><li><p>the graph is weakly connected</p><ul><li>弱连通的</li></ul></li><li><p>the in-degree and out-degree of each vertex are equal for all but two vertices, one that has in-degree 1 larger than its out-degree and the other that has out-degree 1 larger than its in-degree.</p><ul><li>除去两个顶点外每个顶点的出度和入度相等，其中一个顶点的出度比入度大1，另一个顶点的入度比出度大1.</li></ul></li></ul><h3 id="哈密顿通路和回路"><strong>哈密顿通路和回路</strong></h3><ul><li><p>A Hamilton path in a graph G is a path which visits ever vertex in G exactly once.</p><ul><li><strong>哈密顿通路是一个访问图G中每个顶点次数有且仅有一次的通路</strong></li></ul></li><li><p>AHamilton circuit (or Hamilton cycle) is a cycle which visits every vertex exactly once, except for the first vertex, which is also visited at the end of the cycle.</p><ul><li><strong>哈密顿回路，仅访问每个顶点一次，但除去始点，这个始点同样也是终点。</strong></li></ul></li><li><p>If a connected graph G has a Hamilton circuit, then G is called aHamilton graph.</p><ul><li><strong>如果一个连通图G含有哈密顿回路，那么G是哈密顿图</strong></li></ul><p><strong>Note: 定义适用与所有类型的有向图和无向图.</strong></p></li></ul><h3 id="哈密顿图的必要条件">哈密顿图的必要条件</h3><p>定理1</p><p><strong>设G是Hamilton图，则对于顶点集V的任一非空真子集S，均有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi><mo stretchy="false">(</mo><mi>G</mi><mtext>－</mtext><mi>S</mi><mo stretchy="false">)</mo><mo>≤</mo><mi mathvariant="normal">∣</mi><mi>S</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">ω(G－S)≤|S|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mord cjk_fallback">－</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord">∣</span></span></span></span>。</strong></p><p>这里G-S表示从图G中删去S中的所有顶点以及所关联的边</p><p>证明： 设C是G中任意哈密顿回路，</p><p>当S中的顶点在C中不相邻时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi><mo stretchy="false">(</mo><mi>G</mi><mtext>－</mtext><mi>S</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">∣</mi><mi>S</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">ω(G－S)=|S|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mord cjk_fallback">－</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord">∣</span></span></span></span>，这时子图中产生的分支数最多。</p><p>否则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi><mo stretchy="false">(</mo><mi>G</mi><mtext>－</mtext><mi>S</mi><mo stretchy="false">)</mo><mo>&lt;</mo><mi mathvariant="normal">∣</mi><mi>S</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">ω(G－S)&lt;|S|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mord cjk_fallback">－</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord">∣</span></span></span></span>。</p><p>所以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi><mo stretchy="false">(</mo><mi>G</mi><mtext>－</mtext><mi>S</mi><mo stretchy="false">)</mo><mo>≤</mo><mi mathvariant="normal">∣</mi><mi>S</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">ω(G－S)≤|S|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mord cjk_fallback">－</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord">∣</span></span></span></span>。</p><p><img src="0.png" alt=""></p><p>因为图G是哈密顿图，所以必存在哈密顿回路C。</p><p>我们来考察两种情况</p><p>（i）S中的顶点在C中均彼此相邻，则从C中删除S所有顶点击关联边不增加连通分支，即w(C-S)=1&lt;=|S|</p><p>（ii）S中的顶点在C中不相邻，不妨设有r个顶点不相邻，r&gt;=2,r&lt;=|S|。则w(C-S)=r&lt;=|S|</p><p>一般情况下，S中的顶点在C中既有相邻的也有不相邻的。所以w(C-S）&lt;=|S|。</p><p>而G-S中边包含C-S的边，因此w(G-S) &lt;=w(C-S)&lt;=|S|.</p><p><img src="1.png" alt=""></p><p><img src="2.png" alt=""></p><h4 id="图G的闭包">图<em>G</em>的闭包</h4><p>设<em>G</em>是一个图，反复连接满足<em>d</em>(<em>u</em>)＋<em>d</em>(<em>v</em>)≥n的不相邻顶点<em>u</em>，<em>v</em>，直到没有这样的顶点对为止，这样得到的图称作图<em>G</em>的闭包，记为<em>C</em>(<em>G</em>)。</p><h4 id="定理３">定理３</h4><ul><li>简单图<em>G</em>是Hamilton图当且仅当<em>C</em>(<em>G</em>)是Hamilton图。</li></ul><h4 id="推论1">推论1</h4><ul><li>若<em>C</em>(<em>G</em>)是完全图，则<em>G</em>是Hamilton图。</li></ul><h4 id="推论２">推论２</h4><ul><li>若<em>G</em>中任意不相邻顶点<em>u</em>，<em>v</em>均满足<em>d</em>(<em>u</em>)＋<em>d</em>(<em>v</em>)≥<em>n</em>，则G是Hamilton图。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散：0.图的概念和术语</title>
      <link href="/2021/10/12/%E7%A6%BB%E6%95%A3%EF%BC%9A0-%E5%9B%BE%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E6%9C%AF%E8%AF%AD/"/>
      <url>/2021/10/12/%E7%A6%BB%E6%95%A3%EF%BC%9A0-%E5%9B%BE%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E6%9C%AF%E8%AF%AD/</url>
      
        <content type="html"><![CDATA[<h1>图的概念：</h1><h3 id="1、图的定义：">1、图的定义：</h3><p>一个图G=(V,E)由顶点的非空集V和边的集合E构成，每条边有一个或两个顶点与它相连，这样的顶点称为边的端点。边连接它的端点。</p><h3 id="2、图的分类">2、图的分类</h3><ul><li>无向图<ul><li>简单图<ul><li>简单图G=(V,E)是由非空顶点集V（有穷集）和边集E所组成的，V的不同元素的无序对称为边。简单图不存在环，且两个顶点间最多只有一条边</li></ul></li><li>多重图<ul><li>在简单图的基础上，多重图允许顶点对之间有多重边</li></ul></li><li>伪图<ul><li>伪图也是多重图，它可以存在环</li></ul></li></ul></li></ul><p><img src="0.png" alt=""></p><ul><li><p>有向图</p><ul><li>有向图(V,E)是由非空顶点集V、边集E所组成的，边V中元素的有序对。允许有环(即相同元素的有序对)，但不允许在两个顶点之间有同向的多重边。</li></ul></li><li><p>有向图</p><ul><li>简单有向图</li><li>有向多重图<ul><li>有向多重图G=(V,E)是由非空顶点集V、边集E组成的,其中可以存在多重边</li></ul></li><li>混合图</li></ul></li></ul><p><img src="1.png" alt=""></p><h1>图的术语：</h1><h3 id="degree-of-a-vertex-（顶点的度）">degree of a vertex （顶点的度）</h3><p>在<strong>无向图里顶点的度是与该顶点关联的边的数目</strong>，例外的情形是，顶点上的环为顶点的度做出双倍贡献</p><ul><li><p>顶点v的度记做deg(v)</p></li><li><p>If deg(v) = 0,v is called isolated 孤立的</p></li><li><p>If deg(v) = 1, v is called pendant 悬挂的</p></li></ul><h4 id="定理一：握手理论">定理一：握手理论</h4><p><img src="2.png" alt=""></p><h4 id="定理二">定理二</h4><p><strong>An undirected graph has an even number of</strong> <strong>vertices of odd degree.</strong> 无向图有偶数个奇数度顶点</p><h3 id="有向图中的度">有向图中的度</h3><p>The in degree 入度 of a vertex v, denoted <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>e</mi><msup><mi>g</mi><mo>−</mo></msup><mo stretchy="false">(</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">deg^-(v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.021331em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>is the number of edges which terminate at v</p><p>顶点v的入度是以v作为终点的边数。</p><p>Similarly, the out degree 出度 of v, denoted <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>e</mi><msup><mi>g</mi><mo>+</mo></msup><mo stretchy="false">(</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">deg^+(v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.021331em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>, is the number of edges which initiate at v</p><p>顶点v的出度是以v作为起点的边数</p><p>定理三</p><p><strong>Let</strong> <strong>G = (V, E)</strong> <strong>be a graph with direct edges.</strong> <strong>Then</strong></p><p><img src="3.png" alt=""></p><p><strong>在带有向边的图里，所有顶点的入度之和等于出度之和。这两个和都等于图的边数</strong>。</p><h3 id="一些特殊的简单图">一些特殊的简单图</h3><ul><li><p><strong>完全图</strong></p><ul><li><strong>n个顶点的完全图是在每对不同顶点之间都恰有一条边的简单图</strong>。通常用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">K_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示</li></ul></li><li><p>圈图<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">C_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> (n&gt;2)</p><ul><li>指n个顶点围成一圈的图</li></ul></li><li><p>轮图<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>W</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">W_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>(n&gt;2)</p><ul><li>当给圈图添加另一个顶点，而且把这个顶点与圈图里n个顶点逐个连接时，就得出轮图。</li></ul></li><li><p><strong>偶图（二分图）</strong></p><ul><li>若把简单图G的顶点集分成两个不相交的非空集合<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">V_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">V_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，使得图里的每一条边都连接着<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">V_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>里的一个顶点与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">V_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>里的一个顶点，则G称为偶图。</li></ul></li></ul><h3 id="子图：">子图：</h3><p><img src="4.png" alt=""></p><p>设G是一个图，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub><mo>⊆</mo><mi>E</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">E_1\subseteq E(G)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mclose">)</span></span></span></span>，以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">E_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为边集，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">E_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>中边的端点全体为顶点集构成的子图，称为由<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">E_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>导出的<em>G</em>的子图(边导出子图)，记为G(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">E_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)。</p><p>又设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>1</mn></msub><mo>⊆</mo><mi>V</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">V_1\subseteq V(G)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mclose">)</span></span></span></span>，以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">V_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为顶点集，端点均在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">V_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>中的边的全体为边集，构成的子图，称为由<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">V_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>导出的G的子图(点导出子图)，记为G(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">V_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三次培训：网络部分</title>
      <link href="/2021/10/11/%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%9F%B9%E8%AE%AD%EF%BC%9A%E7%BD%91%E7%BB%9C%E9%83%A8%E5%88%86/"/>
      <url>/2021/10/11/%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%9F%B9%E8%AE%AD%EF%BC%9A%E7%BD%91%E7%BB%9C%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1>补充：项目分包的问题</h1><p>项目分包，其实跟电脑分文件夹归类是一个道理。如果大家类比较少，不分包也就算了，但如果像这样：</p><p><img src="3.png" alt=""></p><p>不分包你半天都找不到你想找的那个类。</p><p>所以还是有必要介绍一下项目分包（架构）的问题，对大家大一下课设也有很大帮助。</p><h2 id="MVC：">MVC：</h2><p>就给大家介绍一下最简单的MVC：</p><p><strong>MVC模式</strong>（Model–view–controller）是<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B">软件工程</a>中的一种<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84">软件架构</a>模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。</p><p>MVC模式最早由<a href="https://zh.wikipedia.org/w/index.php?title=Trygve_Reenskaug&amp;action=edit&amp;redlink=1">Trygve Reenskaug</a>在1978年提出，是<a href="https://zh.wikipedia.org/wiki/%E5%B8%95%E7%BE%85%E5%A5%A7%E5%A4%9A%E7%A0%94%E7%A9%B6%E4%B8%AD%E5%BF%83">施乐帕罗奥多研究中心</a>（Xerox PARC）在20世纪80年代为程序语言<a href="https://zh.wikipedia.org/wiki/Smalltalk">Smalltalk</a>发明的一种软件架构。<strong>MVC模式</strong>的<strong>目的是实现一种动态的程序设计</strong>，<strong>使后续对程序的修改和扩展简化，并且使程序某一部分的重复利用成为可能</strong>。除此之外，此模式透过对复杂度的简化，使程序结构更加直观。软件系统透过对自身基本部分分离的同时也赋予了各个基本部分应有的功能。专业人员可以依据自身的专长分组：</p><ul><li>模型（Model） - 程序员编写程序应有的功能（实现算法等等）、数据库专家进行数据管理和数据库设计(可以实现具体的功能)。</li><li>视图（View） - 界面设计人员进行图形界面设计。</li><li>控制器（Controller）- 负责转发请求，对请求进行处理。</li></ul><p>以上引自维基百科。</p><p>所以对应到我们的安卓项目中要怎么分包呢？就现在而言，其实很简单：</p><ul><li><strong>Model</strong>（entity）：对应到bean</li><li><strong>View</strong>：其实就是我们写的xml文件，如果有同学用java定义组件就单独分离出来</li><li><strong>Controller</strong>：其实就是我们的activity的类文件</li><li><strong>Dao</strong>：对应到封装的对数据库的操作</li><li><strong>Util</strong>：工具类（比如recyclerview的adapter）</li></ul><p>如上等等，你可能觉得好像项目并没有什么变化，那是因为，一方面，安卓原生对界面和逻辑的解耦比较彻底，另一方面，现在项目还太小，甚至不足以称之为项目。但这个思想必须要有，越早越好。（<s>踩坑经历</s>）</p><h1>javaBean:类与对象</h1><p>我们常常讲<strong>抽象类</strong>与<strong>实例化对象</strong>，其实也正是这种思想.</p><ul><li><p>类是对一类事物的描述，是<strong>抽象的</strong></p></li><li><p>对象是一类事物的实例，是<strong>具体的</strong></p></li><li><p><strong>类是对象的模板，对象是类的实体</strong></p><hr></li></ul><h2 id="java中的类：">java中的类：</h2><ul><li><p>现实中，描述一类事物：</p><ul><li><strong>属性：就是该事物的状态信息。</strong></li><li><strong>行为：就是该事物能够做什么。</strong></li></ul></li><li><p>举例：猫。<br>属性：名字、年龄、颜色。<br>行为：走、跑、吃</p></li><li><p>用代码来讲：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;walk&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="java中的对象：">java中的对象：</h2><p>如果将类看做模板，那么类可以看做模板加工出的实体。这个实体要有模板的所有属性，也能执行模板的所有行为。</p><p>以上面的猫为例，进行对象的实例化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cat whc = <span class="keyword">new</span> Cat();</span><br></pre></td></tr></table></figure><p>可能会问，都说了实体要有模板的所有属性，也没看见你写你这猫的属性啊？</p><p>那是因为每个类都有约定对象该如何进行实例化的<strong>构造方法</strong>，如果类里面没写，默认会添加一个没有参数的构造方法。我们也可以自己定义，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;walk&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name, <span class="keyword">int</span> age, String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这时候你再像上面那样定义<code>whc</code>这个<code>cat</code>，就会报错。这是因为，我们的构造方法约定了在构造猫这个对象时要传入猫的所有属性，而且我们自定义了构造方法，java便不再添加默认的构造方法。<strong>但是，一个类可以有多个构造方法。</strong></p><p>正解如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cat eric = <span class="keyword">new</span> Cat(<span class="string">&quot;whc&quot;</span>,<span class="number">6</span>,<span class="string">&quot;yellow&quot;</span>);</span><br></pre></td></tr></table></figure><p>并且，我们还能让<code>whc</code>执行命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">whc.eat();</span><br><span class="line">whc.run();</span><br><span class="line">whc.walk();</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;walk&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name, <span class="keyword">int</span> age, String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cat whc = <span class="keyword">new</span> Cat(<span class="string">&quot;whc&quot;</span>,<span class="number">6</span>,<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">        whc.eat();</span><br><span class="line">        whc.run();</span><br><span class="line">        whc.walk();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PS">PS.</h2><p>getter与setter可以自行查阅，比较好理解</p><h1>json:网络通信的轻量级的数据交换格式</h1><h2 id="引入：">引入：</h2><p>我们应当注意，在网络传输过程中很少传递对象。一方面，网络传输采用的是流的方式，本身就涉及一定的编码问题，这就导致一个对象传递过来还需要一定的操作才能进行还原，另一方面，传递对象的成本比较高，而且对象的方法是无法编码传递的。（并不是完全无法传输，只是不推荐）</p><p>那么一个对象是如何通过网络传输呢？这就用到json了。</p><p><img src="0.png" alt=""></p><p>对象在网络中的传递涉及序列化与反序列化，<strong>序列化是将对象状态转换为可保持或传输的格式的过程。与序列化相对的是反序列化，它将流转换为对象</strong>。这两个过程结合起来，可以轻松地存储和传输数据。</p><p>比如，javaBean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> String[] friends;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个名叫<code>whc</code>的<code>cat</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cat whc = <span class="keyword">new</span> Cat(<span class="string">&quot;whc&quot;</span>,<span class="number">6</span>,<span class="string">&quot;yellow&quot;</span>, <span class="keyword">new</span> String[]&#123;<span class="string">&quot;lzw&quot;</span>, <span class="string">&quot;kmh&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p>对应的json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;whc&quot;</span></span><br><span class="line">    <span class="string">&quot;age&quot;</span>:<span class="number">6</span>,</span><br><span class="line">    <span class="attr">&quot;color&quot;</span>:<span class="string">&quot;yellow&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;friends&quot;</span>:[<span class="string">&quot;lzw&quot;</span>,<span class="string">&quot;kmh&quot;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用的方法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(JSON.toJSONString(whc));</span><br></pre></td></tr></table></figure><h2 id="JSON-语法规则">JSON 语法规则</h2><ul><li>数据为 键/值 对。</li><li>数据由逗号分隔。</li><li>大括号保存对象</li><li>方括号保存数组</li></ul><h2 id="JSONObject：">JSONObject：</h2><ul><li><p>使用大括号环绕</p></li><li><p>内容为<strong>键值对</strong>，键值使用半角冒号分开</p></li><li><p>键的类型为字符串</p></li><li><p>值的类型可以为数字、字符串、布尔值、<code>JsonObject</code>、<code>JsonArray</code></p></li><li><p>获取值时通过键来获取</p></li><li><p>与Java的Map对应</p></li></ul><p>比如，我可以将序列化的满足json格式的String反序列化为JSONObject：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cat whc = <span class="keyword">new</span> Cat(<span class="string">&quot;whc&quot;</span>,<span class="number">6</span>,<span class="string">&quot;yellow&quot;</span>, <span class="keyword">new</span> String[]&#123;<span class="string">&quot;lzw&quot;</span>, <span class="string">&quot;kmh&quot;</span>&#125;);</span><br><span class="line">String whcString = JSON.toJSONString(whc);</span><br><span class="line">-----------------</span><br><span class="line">JSONObject whcObject = JSON.parseObject(whcString);</span><br></pre></td></tr></table></figure><p>但能不能将JSONObject转换成Cat呢？答案当然是可以的，但并不能直接进行强制类型转换，大家可以自己封装一个方法。</p><h2 id="JSONArray：">JSONArray：</h2><ul><li><p>使用方括号环绕</p></li><li><p>内容可以是数字、字符串、布尔值、<code>JsonObject</code>、<code>JsonArray</code></p></li><li><p>根据数组下标获取每一项</p></li><li><p>与Java的List对应</p></li></ul><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Cat whc = <span class="keyword">new</span> Cat(<span class="string">&quot;whc&quot;</span>,<span class="number">6</span>,<span class="string">&quot;yellow&quot;</span>, <span class="keyword">new</span> String[]&#123;<span class="string">&quot;lzw&quot;</span>, <span class="string">&quot;kmh&quot;</span>&#125;);</span><br><span class="line">String whcString = JSON.toJSONString(whc);</span><br><span class="line">-----------------</span><br><span class="line">JSONObject whcObject = JSON.parseObject(whcString);</span><br><span class="line">JSONArray whcArray = whcObject.getJSONArray(<span class="string">&quot;friends&quot;</span>);</span><br><span class="line">System.out.println(whcArray);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出：[&quot;lzw&quot;,&quot;kmh&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="库：">库：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.alibaba:fastjson:1.2.62&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;com.google.code.gson:gson:2.8.6&#x27;</span></span><br></pre></td></tr></table></figure><h1>HTTP请求:</h1><p><a href="https://www.runoob.com/http/http-tutorial.html">菜鸟教程HTTP详解</a></p><table><thead><tr><th>请求类型</th><th>描述</th></tr></thead><tbody><tr><td>get</td><td><strong>请求</strong>指定的页面信息，并返回实体主体。  (提交数据放在URL之后)</td></tr><tr><td>post</td><td>向指定资源<strong>提交数据</strong>，进行处理请求（例如提交表单或者上传文件）。<strong>数据被包含在请求体中</strong>。POST 请求可能会导致新的资源的建立和/或已有资源的修改。(请求数据放在body中)</td></tr></tbody></table><h2 id="java中使用HTTP——HttpURLConnection"><strong>java中使用HTTP——HttpURLConnection</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//样例,仅供参考  </span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//开启线程，发送请求</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                HttpURLConnection connection = <span class="keyword">null</span>;</span><br><span class="line">                BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://wthrcdn.etouch.cn/weather_mini?city=北京&quot;</span>);</span><br><span class="line">                    connection = (HttpURLConnection) url.openConnection();</span><br><span class="line">                    <span class="comment">//设置请求方法</span></span><br><span class="line">                    connection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">                    <span class="comment">//设置连接超时时间（毫秒）</span></span><br><span class="line">                    connection.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">                    <span class="comment">//设置读取超时时间（毫秒）</span></span><br><span class="line">                    connection.setReadTimeout(<span class="number">5000</span>);</span><br><span class="line">                    <span class="comment">//返回输入流</span></span><br><span class="line">                    InputStream in = connection.getInputStream();</span><br><span class="line">                    <span class="comment">//读取输入流</span></span><br><span class="line">                    reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">                    StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                    String line;</span><br><span class="line">                    <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        result.append(line);</span><br><span class="line">                    &#125;</span><br><span class="line">              <span class="comment">//将String数据转换成json</span></span><br><span class="line">                    JSONObject jsonObject= JSON.parseObject(result.toString());</span><br><span class="line">                    <span class="comment">//通过get()获取数据</span></span><br><span class="line">                    String msg = jsonObject.get(<span class="string">&quot;status&quot;</span>);</span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ProtocolException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            reader.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;<span class="comment">//关闭连接</span></span><br><span class="line">                        connection.disconnect();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="OkHttp3"><strong>OkHttp3</strong></h2><p>一个比较好用的第三方库，支持多种Http请求，异步处理结果等等，建议使用</p><h4 id="大致结构：">大致结构：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//样例，仅供参考，OKHTTP其他用法自行百度，可以直接copy，但是自己先学会如何使用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendOkhttpRequest</span><span class="params">(String address, okhttp3.Callback callback)</span> </span>&#123;</span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(address)</span><br><span class="line">                .get()</span><br><span class="line">                .build();</span><br><span class="line">        client.newCall(request).enqueue(callback);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OKHttp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        sendOkhttpRequest(<span class="string">&quot;http://wthrcdn.etouch.cn/weather_mini?city=北京&quot;</span>, <span class="keyword">new</span> okhttp3.Callback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//获取返回数据并以String格式保存</span></span><br><span class="line">                String responseData = response.body().string();</span><br><span class="line">                <span class="comment">//将String格式转换为json格式</span></span><br><span class="line">                JSONObject obj = JSON.parseObject(responseData);</span><br><span class="line">                <span class="comment">//获取JSONArray</span></span><br><span class="line">                JSONObject data = JSon.getJSONObject(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">   JSONArray array=data.getJSONArray(<span class="string">&quot;forecast&quot;</span>);</span><br><span class="line">                <span class="comment">//将JSONArray中每个位置分到JSONobject数组里</span></span><br><span class="line">                JSONObject[] objects = <span class="keyword">new</span> JSONObject[array.size()];</span><br><span class="line">                <span class="comment">//不会吧，不会吧，不会真有人提示到这种程度了还不会做吧（狗头）</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//打印异常栈</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="get与post请求的区别：">get与post请求的区别：</h4><p>最直观的区别是，get的参数写在URL里，用？（占位符）与ip或者域名隔开，参数之间用&amp;隔开。而post放在body里。</p><p>另外，get一般用于请求资源，RESTful API中get一定是用来请求资源的。post用于向服务器发送资源/数据。</p><p>对于okhttp中执行post请求，代码大致如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendPost</span><span class="params">(String address, okhttp3.Callback callback,RequestBody body)</span> </span>&#123;</span><br><span class="line">            OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">    Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">            .url(address)</span><br><span class="line">            .post(body)      <span class="comment">//注意这里</span></span><br><span class="line">            .build();</span><br><span class="line">    client.newCall(request).enqueue(callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中requestBody大致如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MultipartBody.Builder builder = <span class="keyword">new</span> MultipartBody.Builder()</span><br><span class="line">                     .setType(MultipartBody.FORM)</span><br><span class="line">                     .addFormDataPart(<span class="string">&quot;account&quot;</span>, <span class="string">&quot;1111&quot;</span>);</span><br><span class="line"></span><br><span class="line">RequestBody requestBody = builder.build();</span><br></pre></td></tr></table></figure><h4 id="注意：">注意：</h4><p>Android中发起http请求需要新开一个线程进行操作，不能在UI主线程中进行网络访问，不然容易导致主线程阻塞，app崩溃（崩溃理由不会的自行百度）。<strong>OKhttp会自动给你开一个新的线程。</strong></p><p>UI的更新只能在主线程进行，不然app也会崩溃（原因不会的自行百度），解决方法自行百度。</p><p>如果你想更新UI，提示可以使用runOnUiThread，AsyncTask、Handler等，用法自行学习。</p><p>21级使用runOnUiThread，AsyncTask、Handler等可以加分，20级强制使用（如果需要用）。</p><h2 id="Android中的网络访问限制">Android中的网络访问限制</h2><ul><li><p>Manifest中需要申请INTERNET权限</p></li><li><p>Android P及以上的系统有强制使用https限制，需手动编写配置文件绕过</p><p>这个具体使用虽然我写了，但我不放，自行百度，很简单。（我再写的话你们作业就直接全copy完了），大家不要怕踩坑，只有踩坑才会积累经验。</p></li></ul><h1>接口文档</h1><table><thead><tr><th>修订版本号</th><th>修订日期</th><th>修改人</th><th>修改内容</th></tr></thead><tbody><tr><td>1.0</td><td>2021.8.27</td><td>赵炜宁</td><td>Init</td></tr><tr><td>1.1</td><td>8.28</td><td>赵炜宁</td><td>对发动态的身份认证做了优化</td></tr><tr><td>2.0</td><td>10.16</td><td>赵炜宁</td><td>更改端口；增加上传头像</td></tr><tr><td>2.1</td><td>10.20</td><td>赵炜宁</td><td>检修，迁移；增加获取用户名</td></tr></tbody></table><h2 id="项目基本说明">项目基本说明</h2><ul><li><p>项目接口根目录为http://82.156.169.66:8181，下方以URL代替</p></li><li><p><strong>统一的错误码</strong></p></li></ul><table><thead><tr><th>错误码</th><th>信息</th></tr></thead><tbody><tr><td>-1</td><td>输入的信息不完整（缺少）或不合法（为空）</td></tr><tr><td>-2</td><td>用户不存在或已被注册</td></tr><tr><td>-3</td><td>密码错误</td></tr></tbody></table><p><strong>返回值是由code，message，data构成的json，下文的传出参数指的是data部分</strong></p><h2 id="1、用户操作-URL：-user">1、用户操作   URL：/user</h2><h3 id="1-1-登录">1.1 登录</h3><table><thead><tr><th>URL</th><th>method</th></tr></thead><tbody><tr><td>/login</td><td>GET</td></tr></tbody></table><table><thead><tr><th>传入参数</th><th>类型</th><th>是否可为空</th><th>说明</th></tr></thead><tbody><tr><td>account</td><td>String</td><td>否</td><td>账号</td></tr><tr><td>password</td><td>String</td><td>否</td><td>密码</td></tr></tbody></table><p>也就是说登录的完整URL为http://82.156.169.66:8181/user/login</p><p>成功之后没有返回的数据，样例：</p><img src="2.png"  style="zoom:80%;" /><h3 id="1-2-注册">1.2 注册</h3><table><thead><tr><th>URL</th><th>method</th></tr></thead><tbody><tr><td>/register</td><td>GET</td></tr></tbody></table><table><thead><tr><th>传入参数</th><th>类型</th><th>是否可为空</th><th>说明</th></tr></thead><tbody><tr><td>account</td><td>String</td><td>否</td><td>账号</td></tr><tr><td>password</td><td>String</td><td>否</td><td>密码</td></tr><tr><td>username</td><td>String</td><td>否</td><td>用户名</td></tr></tbody></table><h3 id="1-3-修改密码">1.3 修改密码</h3><table><thead><tr><th>URL</th><th>method</th></tr></thead><tbody><tr><td>/changePassword</td><td>GET</td></tr></tbody></table><table><thead><tr><th>传入参数</th><th>类型</th><th>是否可为空</th><th>说明</th></tr></thead><tbody><tr><td>account</td><td>String</td><td>否</td><td>账号</td></tr><tr><td>oldPwd</td><td>String</td><td>否</td><td>旧密码</td></tr><tr><td>newPwd</td><td>String</td><td>否</td><td>新密码</td></tr></tbody></table><h3 id="1-4-获取用户名">1.4 获取用户名</h3><table><thead><tr><th>URL</th><th>method</th></tr></thead><tbody><tr><td>/username</td><td>GET</td></tr></tbody></table><table><thead><tr><th>传入参数</th><th>类型</th><th>是否可为空</th><th>说明</th></tr></thead><tbody><tr><td>account</td><td>String</td><td>否</td><td>账号</td></tr></tbody></table><table><thead><tr><th>传出参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>username</td><td>String</td><td>用户名</td></tr></tbody></table><h2 id="2、动态-URL：-message">2、动态  URL：/message</h2><h3 id="2-1-发布动态">2.1 发布动态</h3><table><thead><tr><th>URL</th><th>method</th></tr></thead><tbody><tr><td>/send</td><td>POST</td></tr></tbody></table><table><thead><tr><th>传入参数</th><th>类型</th><th>是否可为空</th><th>说明</th></tr></thead><tbody><tr><td>senderName</td><td>String</td><td>否</td><td>发动态的用户名</td></tr><tr><td>account</td><td>String</td><td>否</td><td>账号</td></tr><tr><td>messageText</td><td>String</td><td>否</td><td>动态内容</td></tr></tbody></table><h3 id="2-2获取动态">2.2获取动态</h3><table><thead><tr><th>URL</th><th>method</th></tr></thead><tbody><tr><td>/get</td><td>GET</td></tr></tbody></table><p>传出参数data为JSONArray</p><table><thead><tr><th>单个传出参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>id（序号）</td></tr><tr><td>time</td><td>String</td><td>发布时间</td></tr><tr><td>senderName</td><td>String</td><td>发动态的用户名</td></tr><tr><td>messageText</td><td>String</td><td>动态内容</td></tr><tr><td>account</td><td>String</td><td>账号</td></tr></tbody></table><p>样例：</p><img src="1.png"  style="zoom:60%;" /><h2 id="3、-发布头像与获取头像-RESTful-API">3、 发布头像与获取头像(RESTful API)</h2><h3 id="3-1-发布头像">3.1 发布头像</h3><table><thead><tr><th>URL</th><th>method</th></tr></thead><tbody><tr><td>/headImage</td><td>POST</td></tr></tbody></table><table><thead><tr><th>传入参数</th><th>类型</th><th>是否可为空</th><th>说明</th></tr></thead><tbody><tr><td>account</td><td>String</td><td>否</td><td>账号</td></tr><tr><td>file</td><td>file</td><td>否</td><td>图片文件</td></tr></tbody></table><h3 id="3-2-获取头像">3.2 获取头像</h3><table><thead><tr><th>URL</th><th>method</th></tr></thead><tbody><tr><td>/headImage</td><td>GET</td></tr></tbody></table><table><thead><tr><th>传入参数</th><th>类型</th><th>是否可为空</th><th>说明</th></tr></thead><tbody><tr><td>account</td><td>String</td><td>否</td><td>账号</td></tr></tbody></table><table><thead><tr><th>单个传出参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>String</td><td>图片保存的地址</td></tr></tbody></table><img src="4.png"  style="zoom:60%;" /><h1>作业：</h1><p>通过三次次培训，完成一个“树洞”或者“表白墙”</p><h3 id="基本要求：">基本要求：</h3><p>在第二次作业的基础上使用网络</p><p>使用网络进行登录，注册，发布动态，获取动态。</p><h3 id="进阶任务：">进阶任务：</h3><p>1、完成修改密码功能。</p><p>2、更加完善及美观的界面（类似于校圈圈那种，而不是可怜巴巴的三个界面）。</p><p>3、实现头像功能。</p><p><strong>三个进阶任务完成后都有相应加分</strong></p><p>提交方式：将src文件夹打包后发送到邮箱  <a href="mailto:2134356214@qq.com">2134356214@qq.com</a></p><p>第二次作业依旧要交，发送至邮箱 <a href="mailto:718102754@qq.com">718102754@qq.com</a></p><p>DDL：10月25日（周一）中午12:00</p>]]></content>
      
      
      <categories>
          
          <category> 安卓原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学线培训 </tag>
            
            <tag> 安卓原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计原则与MaterialDesign基础原则</title>
      <link href="/2021/10/07/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8EMaterialDesign%E5%9F%BA%E7%A1%80%E5%8E%9F%E5%88%99/"/>
      <url>/2021/10/07/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8EMaterialDesign%E5%9F%BA%E7%A1%80%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1>基础设计原则：</h1><blockquote><p>一旦你能够说出什么东西的名字，就会很容易注意到它。你就会掌握它，拥有它，使它在你的控制之中。当我们没用听说过一些设计的概念，我们就很难会注意到一个设计作品上的问题、缺漏，更不可能做出良好的设计。</p></blockquote><h2 id="对比（Contrast）"><strong>对比（Contrast）</strong></h2><blockquote><p>Robin对比原则指出：页面上的不同元素之间要有对比效果，达到吸引读者的对比效果。</p></blockquote><h3 id="原理：">原理：</h3><p><strong>页面上的不同元素会存在关联性和差异性，对比原则倡导通过视觉元素的对比来表现这种差异性</strong>。对比原则要解决的问题是如何更好的吸引用户的眼球，以及如何更好的为用户展现不同信息的重要程度。如果元素（字体、颜色、大小、线宽、形状、空间等）不相同，那就干脆让它们截然不同。对比能够让讯息更准确的传达，内容更容易的被找到、被记住。</p><p>对比不仅可以用来吸引眼球，还可以用来组织信息、清晰层级、在界面上指引读者，并且制造焦点。</p><h3 id="样例：">样例：</h3><p>比如：</p><p><img src="0.webp" alt=""></p><p>又比如：</p><img src="1.jpg" style="zoom:30%;" /><p>为什么暂停、上下曲目按键是白色实心button而其他button不仅小而且还是灰色的？QQ音乐使用这种对比突出button层级与重要性。而曲名与其余信息也有明显对比。</p><p>反面教材：</p><img src="5.jpg" style="zoom:27%;" /><p>背景图片导致的hint文字看不清，两者对比度过低</p><h3 id="总结：">总结：</h3><p>要增加有意思的对比，最容易的方法就是实现字体对比）。不过不要忘记，还可以利用线、颜色、元素之间的间隔、材质等形成对比。如果你想让对比效果更明显，就一定要大胆，不要让两种颜色看起来好像差不错又不一样。当然也不要在同一个页面使用太多种字体。</p><h2 id="重复（Repetition）"><strong>重复（Repetition）</strong></h2><blockquote><p>Robin重复原则指出：设计的某些方面需要在整个作品中重复。</p></blockquote><h3 id="原理：-2">原理：</h3><p><strong>重复的目的就是“一致性”</strong>，让设计中的视觉要素在整个作品中重复出现。可以重复颜色、形状、材质、空间关系、线宽、材质、空间等。这样一来既能增加条理性，又能增加统一性，增强视觉效果。</p><p>不过呢，重复也不能泛滥，如果一个页面上全是一模一样的内容或者风格，那就违背了上面的对比原则。所以更推荐跳跃性重复。</p><h4 id="应用技巧：">应用技巧：</h4><ul><li><p>把已有的重复元素取出，让这些元素效果更强、更生动。通过把重复表现得更明显，这样不仅页面看上去更有趣，还能在视觉上增强其条理性和一致性。</p></li><li><p>即使在一个只有一页的文档中，重复元素也可以建立一种连续性，将文档“整个捆在一起” 。如果在创建一个多页的、作为一个精美包装一部分的文档，充分使用重复就很关键。</p></li><li><p>有时重复的项并不一定完全相同，而只是存在明确关联的紧密相关的对象。为了实现重复，完全可以为此增加一些全新的东西。或者，也可以选择一个简单的元素，然后以多种不同的方式加以使用，比如说指定不同的大小、颜色或角度。</p></li><li><p>通常还可以增加实际上与页面主题没有任何关系的重复元素。只要确保，作品看起来是有意为之，而不是乱七八糟就行了。</p></li><li><p>使用重复原则时，有时可以把一个元素从现在的设计中抽取出来，并根据这个元素创建一个新设计。</p></li><li><p><strong>重复性元素并不必须是图形或者剪贴画。可以是空白、线、字体、对齐，或者任何你有意重复的东西。</strong></p></li><li><p>有时，尽管只有重复元素的一点儿暗示，但这可能与使用整个元素有同样的效果。对于一个大家都熟悉的元素，可以尝试只包含其中的一部分，或者采用不同的方式加以使用。</p></li><li><p><strong>要避免太多地重复一个元素，重复太多会让人讨厌</strong>。</p><p>技巧选自：<a href="https://blog.csdn.net/u010111837/article/details/118085567">https://blog.csdn.net/u010111837/article/details/118085567</a></p></li></ul><h3 id="样例：-2">样例：</h3><p><img src="4.png" alt=""></p><p>其实这个名片也用到了对比，其实是对比与重复的结合。</p><p>再回到上面的QQ音乐，</p><img src="1.jpg" style="zoom:30%;" /><p>所有灰色button的设计风格都是重复的，这使得整个界面很协调。</p><h2 id="对齐（Alignment）"><strong>对齐（Alignment）</strong></h2><blockquote><p>Robin对齐原则是指：任何元素都不能在页面上随意安放。每一项都应当与页面上的某个内容存在某种视觉联系。</p></blockquote><h3 id="原理：-3">原理：</h3><p>页面上的不同元素之间会因为关联性不同而会有不同的物理距离，<strong>对齐原则倡导的是将这些不同元素建立视觉上的某种联系，而不是被随意的摆放，建立这种联系的方式就是为元素寻找某种对齐。</strong></p><p>这样能够建立一种清晰、精巧而清爽的外观，提升可读性。避免一个页面上混用多种对其模式，也就是不要有一些置左，有一些置右。<strong>尽量避免使用居中对齐，除非是比较正式、稳重的设计</strong>（别动不动就让什么都居中，有些时候居中是一种很土的对齐方式）。</p><p><strong>对齐性原则解决的问题是如何将要呈现的信息有秩序的展现在用户面前。</strong></p><h3 id="样例：-3">样例：</h3><img src="6.png" style="zoom:100%;" /><h4 id="不建议初学者轻易使用居中对齐">不建议初学者轻易使用居中对齐</h4><p><strong>如果文本为左对齐或右对齐，让文本联系在一起的那条看不见的线会更明确</strong>，因为现在有一条“硬”的竖边。这就使左对齐和右对齐的文本看起来外观更清晰、效果更分明。</p><p><img src="7.webp" alt=""></p><p>居中对齐会创建一种更正式、更稳重的外观，这种外观显得更为中规中矩，但通常也很乏味。请注意你喜欢的那些设计。我敢保证，大多数看来精巧的设计都没有采用居中对齐。我知道，作为一个初学者，要完全摒弃居中对齐会很难，但你必须从一开始就强制自己避开它。</p><p><strong><u>在得到更多培训之前，一定要坚持一个原则：只使用一种对齐方式</u></strong>。页面上只使用一种文本对齐，所有文本都左对齐，或右对齐，或者全部居中。</p><img src="8.webp" style="zoom:67%;" /><p><strong>明显而有意为之的居中对齐效果最好</strong>。当对齐经过精心策划而又明确时，你就可以对其他元素充分发挥创造力，作品看起来仍然显得匠心独具，而这些元素也不会像是莫名其妙地散落在页面上一样。</p><h4 id="页面上每一个项都应该与其他项存在某种对齐">页面上每一个项都应该与其他项存在某种对齐</h4><p>在页面上放其他项时，一定要确保每一项都与页面上的其他项存在某种对齐。如果文本行水平摆放，则按其基线对齐。如果有多个单独的文本块，则对齐其左边界或右边界。如果有图片元素，将其边界与页面的其他边界对齐。</p><img src="9.png" style="zoom: 80%;" /><p>还是这张QQ音乐：</p><img src="10.png" style="zoom:30%;" /><p>明显的对齐使得界面看起来非常规整。</p><h3 id="总结：-2">总结：</h3><p><strong>倾听你的眼睛</strong></p><p>眼睛看向哪里，路线是什么，这是最佳路径吗？重要的信息是否都归入了逻辑亲密性中？对齐是否对清晰的表达有帮助？</p><h2 id="亲密性（Proximity）"><strong>亲密性（Proximity）</strong></h2><blockquote><p>Robin亲密性原则是指：将相关的项组织在一起，移动这些项，使它们的物理位置相互靠近，这样一来，相关的项将被看作凝聚为一体的一个组，而不再是一堆彼此无关的片段。</p></blockquote><h3 id="原理：-4">原理：</h3><p>如果多个项相互之间存在很近的亲密性，它们就会成为一个<strong>视觉单元</strong>，而不是多个孤立的元素。这有助于组织信息，减少混乱，为读者提供清晰的结构。<strong>亲密性原则倡导通过物理距离来管理同一个页面上不同元素之间的关联性，相关性高的元素应该紧挨在一起，相关性低的元素之间应该保持一定的距离</strong>。亲密性（即紧密性）意味着存在关联。逻辑上关联紧密的项目在布局上也应该紧密，关联性不强的元素之间可以适当增加区隔。位置是否靠近可以体现出元素之间是否存在关系。</p><h4 id="亲密性原则实现方法">亲密性原则实现方法</h4><ul><li>在设计时，应该厘清哪些信息在逻辑上存在关联，那些信息应当强调，而哪些信息不用强调，然后可以通过分组形象地表现这种信息。利用亲密性原则合理的组织信息的效果可以从下面的对比中看出来，将需要表现的信息进行分组，从排版上就体现这种信息之间的关系。</li></ul><h4 id="亲密性原则要避免的问题">亲密性原则要避免的问题</h4><ul><li><p>避免一个页面上有太多孤立的元素。</p></li><li><p><strong>不要在元素之间留出同样大小的空白</strong>，除非各组同属于一个子集。</p></li><li><p>标题、子标题、图表标题、图片能否归入其相关材料？在这个问题上一定要非常清楚（哪怕只有一点含糊都要尽量避免）。</p></li><li><p>在有很近亲密性的元素之间建立关系。<strong>不同属一组的元素之间不要建立关系</strong>！如果元素彼此无关，要把它们分开。不要仅仅因为有空白就把元素放在角落或中央。</p></li></ul><h3 id="样例：-4">样例：</h3><img src="11.png" style="zoom:100%;" /><p>这个样例太过经典，不想多说。</p><p>还是说说QQ音乐，大致给界面元素分个组：</p><img src="12.png" style="zoom:30%;" /><p>又及，亲密性的经典界面：</p><img src="13.jpg" style="zoom:33%;" /><p>为什么要留白？直接大杂烩不好吗？显然不好。许多设置是相似的，放在一起并加以分组，能让界面更加条例清晰，用户感受更好。</p><h3 id="总结：-3">总结：</h3><p><strong>亲密性的根本目的是实现组织性，避免一个页面上出现太多孤立的元素。</strong> 尤其在我们排版时要注意一点，就是小标题和其对应内容之间的距离要小于小标题和上文的距离，这样就能将他们之间的关系迅速绑定在一起。</p><h2 id="PS">PS.</h2><p>色彩暂时不讲，可以看看这个[(23条消息) 颜色运用-CSDN博客</p><p><a href="https://blog.csdn.net/PigBiBiX/article/details/56674737"></a></p><h1>一些APP设计原则：</h1><h3 id="充分考虑用户的使用习惯">充分考虑用户的使用习惯</h3><p>比如大多数人拿手机的时候是双手握还是单手握，单手握的时候是右手操作还是左手操作，操作的时候用哪个手指就能进行操作。考虑到用户的使用习惯有助于在设计时避开手指的触碰盲区。比如，button不要太靠近屏幕左边，对单手操作极其不友好。</p><h3 id="尽量减少产品层级以及深度">尽量减少产品层级以及深度</h3><p>在移动设备上，过多的层级会使用户失去耐心而放弃对产品的使用。如果产品层级确实过深，考虑用一下几种方法扁平化你的层级结构：使用选项卡（tabs）结合分类和内容的展示；允许穿越层级操作，比如允许用户在第一层级对第二层级的内容进行直接操作。</p><h3 id="设计要主次分明">设计要主次分明</h3><p>将主流用户最常用的 20% 功能进行显现，其他进行适度的隐藏，越不常用的功能，隐藏的层级越深。例如：微信的扫本机二维码。要避免新浪微博广场的堆积式设计。确保主页看起来像主页（使主页有别于其它二三级页面）。</p><h3 id="APP的导航尽量采用底部导航的方式，3-5个为最佳">APP的导航尽量采用底部导航的方式，3-5个为最佳</h3><h3 id="自然过渡"><strong>自然过渡</strong></h3><p>界面的交互都是环环相扣的，所以设计时，要深思熟虑地考虑到交互的下一步。考虑到下一步的交互是怎样的，并且通过设计将其实现。这就好比我们的日常谈话，要为深入交谈提供话由。当用户已经完成该做的步骤，不要让他们不知所措，给他们自然而然继续下去的方法，以达成目标。</p><p>比如删除前的警告dialog，加载时的进度条，都是必要的。</p><h3 id="色彩决定APP风格和用户使用感受"><strong>色彩决定APP风格和用户使用感受</strong></h3><p>红色让人感到激情、活泼，而灰色等暗色调则让人感到压抑。合理选用色彩，让用户有更好的体验。</p><h1>一些组件使用原则：</h1><ul><li><p>凡是涉及操作的组件都要做出视觉上的响应。</p><ul><li>比如button按下变色或者一些其他特效，输入框获取\获得焦点时边框或者背景变色等等</li></ul></li><li><p>适当的圆角有利于界面美化</p><ul><li>尤其是在button和头像、cardview方面</li></ul></li><li><p>过度绚丽的背景并不利于信息呈现</p><ul><li>相反，更推荐纯色、相近色或者渐变色</li></ul></li><li><p>巧妙的边距能事半功倍</p></li><li><p>风格一致性问题。</p><ul><li>账号密码两个输入框背景颜色为什么要不一样？</li><li>登录注册两个button为什么要一大一小？</li><li>为什么从一个暗色调界面能一下子跳转到亮色调界面？</li></ul></li><li><p>设计要人性化</p><ul><li>为什么输入框那么短？</li><li>为什么button那么小？</li><li>为什么图片占据那么大的空间？</li><li>字号的大小要有区分，但不要标题太大而正文太小</li></ul></li></ul><h1>MaterialDesign基础原则</h1><p>实体感就是(通过设计方式来表达)隐喻</p><p>通过构建系统化的动效和空间合理化利用，并将两个理念合二为一，构成了实体隐喻。与众不同的触感是实体的基础，这一灵感来自我们对纸墨的研究，但是我们相信，随着科技的进步，应用前景将不可估量。</p><p><strong>实体的表面和边缘提供基于真实效果的视觉体验，熟悉的触感让用户可以快速地理解和认知。实体的多样性可以让我们呈现出更多反映真实世界的设计效果，但同时又绝不会脱离客观的物理规律。</strong></p><p><strong>光效、表面质感、运动感</strong>这三点是解释物体<strong>运动规律、交互方式、空间关系</strong>的关键。真实的光效可以解释物体之间的交合关系、空间关系，以及单个物体的运动。</p><p>新的视觉语言，在基本元素的处理上，借鉴了传统的印刷设计——排版、网格、空间、比例、配色、图像使用——这些基础的平面设计规范。在这些设计基础上下功夫，不但可以愉悦用户，而且能够构建出视觉层级、视觉意义以及视觉聚焦。精心选择色彩、图像、选择合乎比例的字体、留白，力求构建出鲜明、形象的用户界面，让用户沉浸其中。</p><p><strong>Material Design 设计语言强调根据用户行为凸显核心功能，进而为用户提供操作指引。</strong></p><h1>环境</h1><h3 id="三维世界（3D-world）">三维世界（3D world）</h3><p>Material 环境是一个三维的空间，这意味着每个对象都有 x ， y ， z 三维坐标属性，z 轴垂直于显示平面，并延伸向用户视角,每个 material 元素在 z 轴上占据一定的位置并且有一个 1dp 厚度的标准。 在网页上，z 轴被用来分层而不是为了视角。3D 空间通过操纵 y 轴进行仿真。</p><img src="14.png" style="zoom:80%;" /><h3 id="光影关系（Light-and-shadow）">光影关系（Light and shadow）</h3><p>在 material 环境中，<strong>虚拟的光线照射使场景中的对象投射出阴影，主光源投射出一个定向的阴影，而环境光从各个角度投射出连贯又柔和的阴影。</strong></p><p>material 环境中的所有阴影都是由这两种光投射产生的，阴影是光线照射不到的地方，因为各个元素在z轴上占据了不同大小的位置遮挡住了这些光线。</p><img src="15.png" style="zoom:80%;" /><p>以上摘自极客学院翻译的MaterialDesign中文文档。</p><h3 id="下面讲一点最基础的阴影：">下面讲一点最基础的阴影：</h3><p>三维世界中，z轴决定的是组件的高度，那么高度该如何让用户清晰地感知到呢？靠阴影。某一对象的“高度”决定了其具体“阴影”的表现形式。阴影并不是一成不变的，根据用户的行为，阴影应当有相应的响应。</p>]]></content>
      
      
      <categories>
          
          <category> 设计理念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学线培训 </tag>
            
            <tag> 设计理念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora插入数学符号与公式</title>
      <link href="/2021/10/05/typora%E6%8F%92%E5%85%A5%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7%E4%B8%8E%E5%85%AC%E5%BC%8F/"/>
      <url>/2021/10/05/typora%E6%8F%92%E5%85%A5%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7%E4%B8%8E%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="公式块与行内公式的添加">公式块与行内公式的添加</h2><p>先在偏好设置里面打开公式输入，然后重启Typora</p><p>这个齐：<a href="https://www.cnblogs.com/dingdangsunny/p/12312966.html">https://www.cnblogs.com/dingdangsunny/p/12312966.html</a></p><hr><h3 id="常用公式代码">常用公式代码</h3><p><strong>用{}包裹的表达式会被看做一个整体</strong></p><p><u><strong>（下面LaTeX代码在Typora中使用时要用$包裹起来</strong>）</u></p><ul><li>上下标，正负无穷</li><li>加减乘，分式，根号，省略号</li><li>三角函数</li><li>矢量，累加累乘，极限</li><li>希腊字母</li><li>数学符号</li></ul><h4 id="上下标，正负无穷"><strong>上下标，正负无穷</strong></h4><p><img src="0.png" alt=""></p><p>式子作为下标：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mrow><mi>x</mi><mo>+</mo><mi>y</mi></mrow></msub></mrow><annotation encoding="application/x-tex">a_{x+y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.25833100000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> –  $a_{x+y}</p><h4 id="加减乘，分式，根号，省略号"><strong>加减乘，分式，根号，省略号</strong></h4><p><img src="1.png" alt=""></p><p>点乘：a \cdot b</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>⋅</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a \cdot b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span></p><p>叉乘：a \times b</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>×</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a \times b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span></p><h4 id="上下取整">上下取整</h4><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌈</mo><mi>x</mi><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">\lceil x \rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mord mathnormal">x</span><span class="mclose">⌉</span></span></span></span> ： \lceil x \rceil</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌊</mo><mi>x</mi><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">\lfloor x \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord mathnormal">x</span><span class="mclose">⌋</span></span></span></span> ：\lfloor x \rfloor</p><h4 id="三角函数"><strong>三角函数</strong></h4><p><img src="2.png" alt=""></p><h4 id="矢量，累加累乘，极限"><strong>矢量，累加累乘，极限</strong></h4><p><img src="3.png" alt=""></p><h4 id="希腊字母"><strong>希腊字母</strong></h4><p><img src="4.png" alt=""></p><table><thead><tr><th>希腊字母</th><th>latex</th></tr></thead><tbody><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span></td><td>\alpha</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span></td><td>\beta</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi></mrow><annotation encoding="application/x-tex">\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span></span>   <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Γ</mi></mrow><annotation encoding="application/x-tex">\Gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Γ</span></span></span></span></td><td>\gamma \Gamma</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>δ</mi></mrow><annotation encoding="application/x-tex">\delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span>    <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Δ</mi></mrow><annotation encoding="application/x-tex">\Delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Δ</span></span></span></span></td><td>\delta \ Delta</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi><mo separator="true">,</mo><mi>ε</mi><mo separator="true">,</mo><mi>E</mi></mrow><annotation encoding="application/x-tex">\epsilon, \varepsilon, E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">ϵ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">ε</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span></td><td>\epsilon \varepsilon E</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ζ</mi><mo separator="true">,</mo><mi>Z</mi></mrow><annotation encoding="application/x-tex">\zeta ,Z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.07378em;">ζ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span></span></td><td>\zeta Z</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>η</mi><mo separator="true">,</mo><mi>H</mi></mrow><annotation encoding="application/x-tex">\eta ,H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">η</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span></span></span></td><td>\eta H</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mo separator="true">,</mo><mi>ϑ</mi><mo separator="true">,</mo><mi mathvariant="normal">Θ</mi></mrow><annotation encoding="application/x-tex">\theta ,\vartheta ,\Theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">ϑ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Θ</span></span></span></span></td><td>\theta \vartheta \Theta</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ι</mi><mo separator="true">,</mo><mi>I</mi></mrow><annotation encoding="application/x-tex">\iota ,I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">ι</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></td><td>\iota I</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>κ</mi><mo separator="true">,</mo><mi>K</mi></mrow><annotation encoding="application/x-tex">\kappa ,K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">κ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span></td><td>\kappa K</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi><mo separator="true">,</mo><mi mathvariant="normal">Λ</mi></mrow><annotation encoding="application/x-tex">\lambda ,\Lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">λ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Λ</span></span></span></span></td><td>\lambda \Lambda</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>μ</mi><mo separator="true">,</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">\mu ,M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">μ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span></td><td>\mu M</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>μ</mi><mo separator="true">,</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">\mu ,N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">μ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span></td><td>\mu N</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ξ</mi><mo separator="true">,</mo><mi mathvariant="normal">Ξ</mi></mrow><annotation encoding="application/x-tex">\xi ,\Xi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.04601em;">ξ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Ξ</span></span></span></span></td><td>\xi \Xi</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>o</mi><mo separator="true">,</mo><mi>O</mi></mrow><annotation encoding="application/x-tex">o ,O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">o</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span></span></td><td>o O</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi><mo separator="true">,</mo><mi mathvariant="normal">Π</mi></mrow><annotation encoding="application/x-tex">\pi ,\Pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Π</span></span></span></span></td><td>\pi \Pi</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ρ</mi><mo separator="true">,</mo><mi>ϱ</mi><mo separator="true">,</mo><mi>P</mi></mrow><annotation encoding="application/x-tex">\rho ,\varrho ,P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">ρ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">ϱ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span></td><td>\rho \varrho P</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi><mo separator="true">,</mo><mi mathvariant="normal">Σ</mi></mrow><annotation encoding="application/x-tex">\sigma ,\Sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Σ</span></span></span></span></td><td>\sigma \Sigma</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>τ</mi><mo separator="true">,</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">\tau ,T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.1132em;">τ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span></td><td>\tau T</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>υ</mi><mo separator="true">,</mo><mi mathvariant="normal">Υ</mi></mrow><annotation encoding="application/x-tex">\upsilon ,\Upsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">υ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Υ</span></span></span></span></td><td>\upsilon \Upsilon</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo separator="true">,</mo><mi>φ</mi><mo separator="true">,</mo><mi mathvariant="normal">Φ</mi></mrow><annotation encoding="application/x-tex">\phi ,\varphi ,\Phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">ϕ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">φ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Φ</span></span></span></span></td><td>\phi \varphi \Phi</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>χ</mi><mo separator="true">,</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">\chi, X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">χ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span></td><td>\chi X</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ψ</mi><mo separator="true">,</mo><mi mathvariant="normal">Ψ</mi></mrow><annotation encoding="application/x-tex">\psi ,\Psi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ψ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Ψ</span></span></span></span></td><td>\psi \Psi</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi><mo separator="true">,</mo><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\omega ,\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Ω</span></span></span></span></td><td>\omega \Omega</td></tr></tbody></table><h4 id="关系运算符"><strong>关系运算符</strong></h4><p><img src="5.png" alt=""></p><hr><p>大写形式只要将字母开头大写即可</p><p>以上 <a href="https://blog.csdn.net/mingzhuo_126/article/details/82722455">https://blog.csdn.net/mingzhuo_126/article/details/82722455</a></p><h4 id="数学符号"><strong>数学符号</strong></h4><table><thead><tr><th style="text-align:center">数学表达式</th><th style="text-align:center">代码</th></tr></thead><tbody><tr><td style="text-align:center">⟺</td><td style="text-align:center">\iff</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo mathvariant="normal">≠</mo></mrow><annotation encoding="application/x-tex">\neq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span></span></span></span></td><td style="text-align:center">\neq</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≡</mo></mrow><annotation encoding="application/x-tex">\equiv</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mrel">≡</span></span></span></span></td><td style="text-align:center">\equiv</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span></td><td style="text-align:center">\rightarrow</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇒</span></span></span></span></td><td style="text-align:center">\Rightarrow</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>y</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span></td><td style="text-align:center">\hat{y}</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi></mrow><annotation encoding="application/x-tex">\forall</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">∀</span></span></span></span></td><td style="text-align:center">\forall</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∃</mi></mrow><annotation encoding="application/x-tex">\exists</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">∃</span></span></span></span></td><td style="text-align:center">\exists</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∈</mo></mrow><annotation encoding="application/x-tex">\in</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">∈</span></span></span></span></td><td style="text-align:center">\in</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊄</mo></mrow><annotation encoding="application/x-tex">\not\subset</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">⊂</span></span></span></span></td><td style="text-align:center">\not\subset</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">\emptyset</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">∅</span></span></span></span></td><td style="text-align:center">\emptyset</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊂</mo></mrow><annotation encoding="application/x-tex">\subset</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">⊂</span></span></span></span></td><td style="text-align:center">\subset</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊆</mo></mrow><annotation encoding="application/x-tex">\subseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">⊆</span></span></span></span></td><td style="text-align:center">\subseteq</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∵</mo></mrow><annotation encoding="application/x-tex">\because</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∵</span></span></span></span></td><td style="text-align:center">\because</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∴</mo></mrow><annotation encoding="application/x-tex">\therefore</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span></span></span></span></td><td style="text-align:center">\therefore</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∵</mo></mrow><annotation encoding="application/x-tex">\because</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∵</span></span></span></span></td><td style="text-align:center">\because</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∠</mi></mrow><annotation encoding="application/x-tex">\angle</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mord">∠</span></span></span></span></td><td style="text-align:center">\angle</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span></td><td style="text-align:center">\infty</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo mathvariant="normal">∉</mo></mrow><annotation encoding="application/x-tex">\notin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mrel"><span class="mord"><span class="mrel">∈</span></span><span class="mord vbox"><span class="thinbox"><span class="llap"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="inner"><span class="mord"><span class="mord">/</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span></span></span><span class="fix"></span></span></span></span></span></span></span></span></td><td style="text-align:center">\notin</td></tr></tbody></table><p>补充的一些：</p><table><thead><tr><th style="text-align:center">数学表达式</th><th style="text-align:center">代码</th></tr></thead><tbody><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>x</mi><mo>⋅</mo><mi>y</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{x\cdot y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388899999999999em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.64445em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.56445em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span></td><td style="text-align:center">\overline{x\cdot y}</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>d</mi><mi>y</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{dy}{dx}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td><td style="text-align:center">\dfrac{dy}{dx}</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∫</mo><mn>0</mn><mn>4</mn></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">\int_{0}^{4} f(x) dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3648280000000002em;vertical-align:-0.35582em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0090080000000001em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.2579000000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span></td><td style="text-align:center">\int_{0}^{4} f(x) dx</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>9</mn><msup><mn>0</mn><mo>∘</mo></msup></mrow><annotation encoding="application/x-tex">90 ^\circ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.674115em;vertical-align:0em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.674115em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∘</span></span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">90 ^\circ</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∬</mo></mrow><annotation encoding="application/x-tex">\iint</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.111em;vertical-align:-0.306em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0004999999999999727em;">∬</span></span></span></span></td><td style="text-align:center">\iint</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∭</mo></mrow><annotation encoding="application/x-tex">\iiint</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.111em;vertical-align:-0.306em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0004999999999999727em;">∭</span></span></span></span></td><td style="text-align:center">\iiint</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∬</mo><mn>0</mn><mn>4</mn></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">\iint_{0}^{4} f(x) dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3647080000000003em;vertical-align:-0.3557em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0004999999999999727em;">∬</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0090080000000001em;"><span style="top:-2.3443em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.2579000000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3557em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span></td><td style="text-align:center">\iint_{0}^{4} f(x) dx</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∪</mo><mi>y</mi><mo>∩</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x \cup y \cap z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.75em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span></td><td style="text-align:center">x \cup y \cap z</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mroot><mn>345</mn><mi>n</mi></mroot></mrow><annotation encoding="application/x-tex">\sqrt[n]{345}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.13278em;"></span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.679944em;"><span style="top:-2.964664em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">345</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span></span></span></span></td><td style="text-align:center">\sqrt[n]{345}</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">a_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">a_{ij}</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo separator="true">,</mo><msup><mi>y</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup></mrow><annotation encoding="application/x-tex">y&#x27;,y&#x27;&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′′</span></span></span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">y’,y’’</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∨</mo><mi>y</mi><mo>∧</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x \lor y \land z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.75em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span></td><td style="text-align:center">x \lor y \land z</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∮</mo></mrow><annotation encoding="application/x-tex">\oint</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.11112em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∮</span></span></span></span></td><td style="text-align:center">\oint</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">x</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi><mover><mo><munder><mo><mo>⋈</mo></mo><mi>n</mi></munder></mo><mi>i</mi></mover></mi></mrow><annotation encoding="application/x-tex">\overset i {\mathop{\bowtie } \limits_{n} }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.971664em;vertical-align:-0.705em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.266664em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.505em;"><span style="top:-2.395em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">⋈</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.705em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.705em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.705em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">\overset i {\mathop{\bowtie } \limits_{n} }</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi><mover><mo><mi>A</mi><mi>B</mi></mo><mstyle mathsize="1.728em"><mo lspace="0em" rspace="0em">⌢</mo></mstyle></mover></mi></mrow><annotation encoding="application/x-tex">\overset{\LARGE{\frown}}{AB}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.6013319200000002em;vertical-align:0em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.6013319200000002em;"><span style="top:-3.7279999999999998em;"><span class="pstrut" style="height:3.7279999999999998em;"></span><span><span class="mop"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span><span style="top:-4.61133em;margin-left:0em;"><span class="pstrut" style="height:3.7279999999999998em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sizing reset-size3 size9"><span class="mrel">⌢</span></span></span></span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">\overset{\LARGE{\frown}}{AB}</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munder><mo><mi>R</mi><mo>⋈</mo><mi>S</mi></mo><mrow><mi>A</mi><mi>θ</mi><mi>B</mi></mrow></munder></mrow><annotation encoding="application/x-tex">\mathop{R \bowtie S} \limits_{A \theta B}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4404379999999999em;vertical-align:-0.7571079999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.68333em;"><span style="top:-2.342892em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="mord mathnormal mtight" style="margin-right:0.05017em;">θB</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⋈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7571079999999999em;"><span></span></span></span></span></span></span></span></span></td><td style="text-align:center">\mathop{R \bowtie S} \limits_{A \theta B}</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo><mover><mo><mo>→</mo></mo><mi>F</mi></mover></mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X \overset F \rightarrow Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1452010000000001em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mop op-limits"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.1452010000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">→</span></span></span><span style="top:-3.5668699999999998em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span></td><td style="text-align:center">X \overset F \rightarrow Y</td></tr></tbody></table><p><strong>1. 使用\ 表示空格</strong></p><p>以及调整空格的大小</p><table><thead><tr><th>quad空格</th><th>a\ \qquad b</th><th><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mspace width="2em"/><mi>b</mi></mrow><annotation encoding="application/x-tex">a \qquad b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:2em;"></span><span class="mord mathnormal">b</span></span></span></span></th><th>两个<em>m</em>的宽度</th></tr></thead><tbody><tr><td>quad空格</td><td>a\ \quad b</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mspace width="1em"/><mi>b</mi></mrow><annotation encoding="application/x-tex">a \quad b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal">b</span></span></span></span></td><td>一个<em>m</em>的宽度</td></tr><tr><td>大空格</td><td>a\ b</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mtext> </mtext><mi>b</mi></mrow><annotation encoding="application/x-tex">a\ b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace"> </span><span class="mord mathnormal">b</span></span></span></span></td><td>1/3<em>m</em>宽度</td></tr><tr><td>中等空格</td><td>a\;b</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mtext>  </mtext><mi>b</mi></mrow><annotation encoding="application/x-tex">a\;b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">b</span></span></span></span></td><td>2/7<em>m</em>宽度</td></tr><tr><td>小空格</td><td>a\,b</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mtext> </mtext><mi>b</mi></mrow><annotation encoding="application/x-tex">a\,b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span></span></span></span></td><td>1/6<em>m</em>宽度</td></tr><tr><td>没有空格</td><td>ab</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">ab</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">ab</span></span></span></span></td><td></td></tr><tr><td>紧贴</td><td>a!b</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mtext> ⁣</mtext><mi>b</mi></mrow><annotation encoding="application/x-tex">a\!b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:-0.16666666666666666em;"></span><span class="mord mathnormal">b</span></span></span></span></td><td>缩进1/6<em>m</em>宽度</td></tr></tbody></table><p><strong>2. 使用\ \表示换行</strong></p><h2 id="矩阵"><strong>矩阵</strong></h2><p><strong>简单矩阵</strong></p><p>使用<code>\begin&#123;matrix&#125;…\end&#123;matrix&#125;</code>生成， 每一行以<code>\\</code>结尾表示换行，元素间以<code>&amp;</code>间隔，式子的表示序号<code>\tag&#123;1&#125;</code>（右边的序号）。</p><p><img src="6.svg" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> $$</span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line"> 1 &amp; 2 &amp; 3 \\</span><br><span class="line"> 4 &amp; 5 &amp; 6 \\</span><br><span class="line"> 7 &amp; 8 &amp; 9 </span><br><span class="line">\end&#123;matrix&#125; \tag&#123;1&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p><strong>带左右括号的矩阵(大中小括号)</strong></p><p><strong>方法一</strong>：在<code>\begin&#123;&#125;</code>之前和<code>\end&#123;&#125;</code>之后添加左右括号的代码。</p><p>大括号：</p><p><img src="7.svg" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"> \left\&#123;</span><br><span class="line"> \begin&#123;matrix&#125;</span><br><span class="line">   1 &amp; 2 &amp; 3 \\</span><br><span class="line">   4 &amp; 5 &amp; 6 \\</span><br><span class="line">   7 &amp; 8 &amp; 9</span><br><span class="line">  \end&#123;matrix&#125;</span><br><span class="line">  \right\&#125; \tag&#123;2&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>中括号：</p><p><img src="8.svg" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"> \left[</span><br><span class="line"> \begin&#123;matrix&#125;</span><br><span class="line">   1 &amp; 2 &amp; 3 \\</span><br><span class="line">   4 &amp; 5 &amp; 6 \\</span><br><span class="line">   7 &amp; 8 &amp; 9</span><br><span class="line">  \end&#123;matrix&#125;</span><br><span class="line">  \right] \tag&#123;3&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>小括号：</p><p><img src="9.svg" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"> \left(</span><br><span class="line"> \begin&#123;matrix&#125;</span><br><span class="line">   1 &amp; 2 &amp; 3 \\</span><br><span class="line">   4 &amp; 5 &amp; 6 \\</span><br><span class="line">   7 &amp; 8 &amp; 9</span><br><span class="line">  \end&#123;matrix&#125;</span><br><span class="line">  \right) \tag&#123;4&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p><strong>方法二</strong>：改变<code>\begin&#123;matrix&#125;</code>和<code>\end&#123;matrix&#125;</code>中<code>&#123;matrix&#125;</code></p><p>大括号：</p><p><img src="10.svg" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"> \begin&#123;Bmatrix&#125;</span><br><span class="line">   1 &amp; 2 &amp; 3 \\</span><br><span class="line">   4 &amp; 5 &amp; 6 \\</span><br><span class="line">   7 &amp; 8 &amp; 9</span><br><span class="line">  \end&#123;Bmatrix&#125; \tag&#123;6&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>中括号：</p><p><img src="11.svg" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"> \begin&#123;bmatrix&#125;</span><br><span class="line">   1 &amp; 2 &amp; 3 \\</span><br><span class="line">   4 &amp; 5 &amp; 6 \\</span><br><span class="line">   7 &amp; 8 &amp; 9</span><br><span class="line">  \end&#123;bmatrix&#125; \tag&#123;6&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p><strong>包含希腊字母与省略号</strong></p><p>行省略号<code>\cdots</code>，列省略号<code>\vdots</code>，斜向省略号（左上至右下）<code>\ddots</code>。</p><p><img src="12.svg" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"> \left\&#123;</span><br><span class="line"> \begin&#123;matrix&#125;</span><br><span class="line"> 1      &amp; 2        &amp; \cdots &amp; 5        \\</span><br><span class="line"> 6      &amp; 7        &amp; \cdots &amp; 10       \\</span><br><span class="line"> \vdots &amp; \vdots   &amp; \ddots &amp; \vdots   \\</span><br><span class="line"> \alpha &amp; \alpha+1 &amp; \cdots &amp; \alpha+4 </span><br><span class="line"> \end&#123;matrix&#125;</span><br><span class="line"> \right\&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><hr><h2 id="表格">表格</h2><p><strong>简易表格</strong></p><p><img src="13.svg" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;array&#125;&#123;|c|c|c|&#125;</span><br><span class="line">\hline 2&amp;9&amp;4\\</span><br><span class="line">\hline 7&amp;5&amp;3\\</span><br><span class="line">\hline 6&amp;1&amp;8\\</span><br><span class="line">\hline</span><br><span class="line">\end&#123;array&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p><strong>开头结尾</strong>： <code>\begin&#123;array&#125;</code> ， <code>\end&#123;array&#125;</code></p><p><strong>定义式</strong>：例：<code>&#123;|c|c|c|&#125;</code>，其中<code>c</code> <code>l</code> <code>r</code> 分别代表居中、左对齐及右对齐。</p><p><strong>分割线</strong>：①<strong>竖直分割线</strong>：在定义式中插入 <code>|</code>， （<code>||</code>表示两条竖直分割线）。</p><p>②<strong>水平分割线</strong>：在下一行输入前插入 <code>\hline</code>，以下图真值表为例。</p><p>其他：每行元素间均须要插入 <code>&amp;</code> ，每行元素以 <code>\\</code> 结尾。</p><p><strong>真值表</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.1600em" columnalign="center center center" columnlines="none solid" columnspacing="1em" rowlines="solid none none none"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>A</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>B</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>F</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{cc|c}       A&amp;B&amp;F\\\hline 0&amp;0&amp;0\\       0&amp;1&amp;1\\       1&amp;0&amp;1\\       1&amp;1&amp;1\\\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.000000000000001em;vertical-align:-2.7500000000000004em;"></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.25em;"><span class="pstrut" style="height:5.25em;"></span><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-0.6099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.6099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="vertical-separator" style="height:6.000000000000001em;border-right-width:0.04em;border-right-style:solid;margin:0 -0.02em;vertical-align:-2.7500000000000004em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-0.6099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span style="top:-7.300000000000001em;"><span class="pstrut" style="height:5.25em;"></span><span class="hline" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span></span></span></span></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;array&#125;&#123;cc|c&#125;</span><br><span class="line">       A&amp;B&amp;F\\</span><br><span class="line">\hline 0&amp;0&amp;0\\</span><br><span class="line">       0&amp;1&amp;1\\</span><br><span class="line">       1&amp;0&amp;1\\</span><br><span class="line">       1&amp;1&amp;1\\</span><br><span class="line">\end&#123;array&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><hr><h2 id="多行等式对齐"><strong>多行等式对齐</strong></h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.2500em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>b</mi><mo>+</mo><mi>c</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>d</mi><mo>+</mo><mi>e</mi><mo>+</mo><mi>f</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}a &amp;= b + c \\  &amp;= d + e + f\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000000000000004em;vertical-align:-1.2500000000000002em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">c</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;aligned&#125;</span><br><span class="line">a &amp;= b + c \\</span><br><span class="line">  &amp;= d + e + f</span><br><span class="line">\end&#123;aligned&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><h2 id="方程组、条件表达式"><strong>方程组、条件表达式</strong></h2><p>方程组：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3600em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>3</mn><mi>x</mi><mo>+</mo><mn>5</mn><mi>y</mi><mo>+</mo><mi>z</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>7</mn><mi>x</mi><mo>−</mo><mn>2</mn><mi>y</mi><mo>+</mo><mn>4</mn><mi>z</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>6</mn><mi>x</mi><mo>+</mo><mn>3</mn><mi>y</mi><mo>+</mo><mn>2</mn><mi>z</mi></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}3x + 5y +  z \\7x - 2y + 4z \\-6x + 3y + 2z\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.9099999999999997em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.3500199999999998em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19199em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.31599999999999984em;width:0.889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.889em' height='0.31599999999999984em' style='width:0.889em' viewBox='0 0 889 316' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V316 H384z M384 0 H504 V316 H384z'/></svg></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.31599999999999984em;width:0.889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.889em' height='0.31599999999999984em' style='width:0.889em' viewBox='0 0 889 316' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V316 H384z M384 0 H504 V316 H384z'/></svg></span></span><span style="top:-4.600019999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">3</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">5</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">7</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">−</span><span class="mord">6</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;cases&#125;</span><br><span class="line">3x + 5y +  z \\</span><br><span class="line">7x - 2y + 4z \\</span><br><span class="line">-6x + 3y + 2z</span><br><span class="line">\end&#123;cases&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>同理，条件表达式：</p><p><img src="16.svg" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">f(n) =</span><br><span class="line">\begin&#123;cases&#125; </span><br><span class="line">n/2,  &amp; \text&#123;if &#125;n\text&#123; is even&#125; \\</span><br><span class="line">3n+1, &amp; \text&#123;if &#125;n\text&#123; is odd&#125;</span><br><span class="line">\end&#123;cases&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><hr><h2 id="间隔-大小空格、紧贴"><strong>间隔 (大小空格、紧贴)</strong></h2><p><strong>紧贴 + 无空格 + 小空格 + 中空格 + 大空格 + 真空格 + 双真空格</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">a\!b + ab + a\,b + a\;b + a\ b + a\quad b + a\qquad b</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>紧贴<code>\!</code></p><p>无空格 小空格<code>\,</code> 中空格<code>\;</code> 大空格<code>\</code></p><p>真空格<code>\quad</code> 双真空格<code>\qquad</code></p>]]></content>
      
      
      <categories>
          
          <category> 实用知识(杂谈) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载与汇总 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散：1.图的表示和同构及连通性</title>
      <link href="/2021/10/05/%E7%A6%BB%E6%95%A3%EF%BC%9A1.%E5%9B%BE%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%90%8C%E6%9E%84/"/>
      <url>/2021/10/05/%E7%A6%BB%E6%95%A3%EF%BC%9A1.%E5%9B%BE%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%90%8C%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h3 id="图的表示：">图的表示：</h3><ul><li><p>邻接表</p><p><img src="1.png" alt=""></p></li><li><p>邻接矩阵(<strong>无向图的邻接矩阵总是对称的</strong>)</p><ol><li><p>图的邻接矩阵依赖于所选择的顶点的顺序。因此带n个顶点的图有n!个不同的邻接矩阵，因为n个顶点有n!个不同的顺序。</p></li><li><p>当图里的边相对少时，邻接矩阵是稀疏矩阵，即只有很少的非0项的矩阵。可以用特殊的方法来表示和计算这样的矩阵。</p></li><li><p>邻接矩阵也可以表示带环和多重边的无向图,把顶点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>上的环表示成邻接矩阵（i,i）位置上的1。当出现多重边时候，邻接矩阵不再是0－1矩阵，这是因为邻接矩阵的第( i,j)项等于与{<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">a_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>}关联的边数。包括多重图与伪图在内的所有无向图都具有对称的邻接矩阵</p></li></ol><p><img src="0.png" alt=""></p><p><strong>对无向图来说，邻接矩阵每一行各个位置上数字之和代表什么？</strong></p><p>等于顶点i的度减去在顶点i上的环数</p><p>对于有向图而言，邻接矩阵每一行各个位置上数字之和代表什么？代表该顶点的出度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>e</mi><msup><mi>g</mi><mo>+</mo></msup><mo stretchy="false">(</mo><msub><mi>v</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">deg^+(v_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.021331em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>,每一列各个位置上数字之和代表什么？代表该顶点的入度</p></li><li><p>关联矩阵</p><p><img src="2.png" alt=""></p><p><img src="3.png" alt=""></p></li></ul><h3 id="图的同构">图的同构</h3><p><img src="4.png" alt=""></p><h4 id="怎么判断两个简单图是否同构"><strong>怎么判断两个简单图是否同构</strong>?</h4><h5 id="相同不变量：">相同不变量：</h5><ul><li><p>相同的顶点数</p></li><li><p>有相同的边数</p></li><li><p><strong>连通分支的数目及其大小</strong></p></li><li><p><strong>两图同构只有当他们具有相同长度的简单回路。</strong></p></li><li><p>应用两图中相应顶点具有相同的度来判断两图的同构情况</p></li></ul><h3 id="连通性">连通性</h3><h4 id="定义1-路径">定义1:路径</h4><p>图<em>G</em>的一个非空点、边交替序列<em>W</em>＝<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub><msub><mi>e</mi><mn>1</mn></msub><msub><mi>v</mi><mn>1</mn></msub><msub><mi>e</mi><mn>2</mn></msub><msub><mi>v</mi><mn>2</mn></msub><mo>…</mo><msub><mi>e</mi><mi>k</mi></msub><msub><mi>v</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">v_0e_1v_1e_2v_2…e_kv_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 称为一条<strong>从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">v_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">v_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的路径</strong>或(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">v_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">v_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)路径，</p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">v_{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>e</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">e_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的<strong>端点</strong>(1≤i≤k)。 称<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">v_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为W的<strong>起点</strong>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">v_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为W的<strong>终点</strong>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>(1≤i≤k－1)为W的内点，k为W的<strong>路长</strong>。</p><p><img src="5.png" alt=""></p><h4 id="定义２-迹与路">定义２:迹与路</h4><p>设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub><msub><mi>e</mi><mn>1</mn></msub><msub><mi>v</mi><mn>1</mn></msub><msub><mi>e</mi><mn>2</mn></msub><msub><mi>v</mi><mn>2</mn></msub><mo>…</mo><msub><mi>e</mi><mi>k</mi></msub><msub><mi>v</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">v_0e_1v_1e_2v_2…e_kv_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为图<em>G</em>中的一条路径，若边<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>e</mi><mn>1</mn></msub><mi>e</mi><msub><mo separator="true">,</mo><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>e</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">e_1e,_2,...e_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">e</span><span class="mpunct"><span class="mpunct">,</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 互不相同，则称该路径为<strong>迹</strong>；若点序列<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>v</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">v_0,v_1,…,v_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>互不相同，则称该路径为<strong>路</strong>。</p><h4 id="定义３：开闭路径与开闭迹">定义３：开闭路径与开闭迹</h4><p>设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub><msub><mi>e</mi><mn>1</mn></msub><msub><mi>v</mi><mn>1</mn></msub><msub><mi>e</mi><mn>2</mn></msub><msub><mi>v</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>e</mi><mi>k</mi></msub><msub><mi>v</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">v_0e_1v_1e_2v_2...e_k v_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是图G中的一条路径且k≥1，如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub><mtext>＝</mtext><msub><mi>v</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">v_0＝v_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">＝</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，则称该路径为<strong>闭路径</strong>，否则称为<strong>开路径</strong>。</p><p>特别地，若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub><msub><mi>e</mi><mn>1</mn></msub><msub><mi>v</mi><mn>1</mn></msub><msub><mi>e</mi><mn>2</mn></msub><msub><mi>v</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>e</mi><mi>k</mi></msub><msub><mi>v</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">v_0e_1v_1e_2v_2...e_kv_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是一条迹，k≥1，当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub><mtext>＝</mtext><msub><mi>v</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">v_0＝v_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">＝</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>时称为<strong>闭迹</strong>，否则称为<strong>开迹</strong>。 <strong>闭迹也称为回路</strong>。</p><h4 id="定义４：圈">定义４：圈</h4><p>设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub><msub><mi>e</mi><mn>1</mn></msub><msub><mi>v</mi><mn>1</mn></msub><msub><mi>e</mi><mn>2</mn></msub><msub><mi>v</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>e</mi><mi>k</mi></msub><msub><mi>v</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">v_0e_1v_1e_2v_2...e_k v_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是一条<strong>闭迹</strong>，</p><p>如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub><mtext>，</mtext><msub><mi>v</mi><mn>1</mn></msub><mtext>，</mtext><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mtext>，</mtext><msub><mi>v</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">v_0，v_1，...，v_{k-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord">...</span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>互不相同，</p><p>则称该闭迹为<strong>圈或k圈</strong>，</p><p>且当k为偶数时称为<strong>偶圈</strong>，k为奇数时称为<strong>奇圈</strong>。</p><h4 id="PS">PS.</h4><ul><li><strong>一条路必是一条迹</strong></li><li>自环和两条平行边都自成一圈</li></ul><h4 id="定理1">定理1</h4><p>若图<em>G</em>中每个顶点度数至少为２，则<em>G</em>中必含有圈。</p><h4 id="定义５：连通">定义５：连通</h4><p>设<em>G</em>是一个图，u，v∈V(G)，<br>如果存在从<em>u</em>到<em>v</em>的路，则称<em>u</em>，<em>v</em>是相连的或连通的，若<em>G</em>中任意两点都连通，则称图<em>G</em>是<strong>连通的</strong>。</p><p><strong>图G中顶点之间的连通关系是一个等价关系根据该关系可将V(G)划分成一些等价类<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>1</mn></msub><mtext>，</mtext><msub><mi>V</mi><mn>2</mn></msub><mtext>，</mtext><mo>…</mo><mtext>，</mtext><msub><mi>V</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">V_1，V_2，…，V_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，每个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">V_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>导出的子图G(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">V_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)称为G的一个连通分支。</strong></p><p>图G的连通分支是图G的连通子图，且该子图不是图G的另一个连通子图的真子图。</p><p><strong>G的连通分支数通常用ω(G)表示</strong><br><strong>G是连通的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\iff</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟺</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>ω(G)＝1</strong></p><h4 id="有向图的连通性与连通图">有向图的连通性与连通图</h4><p>存在有向(u，v)路，则称v是从u<strong>可达的</strong>或者<strong>弱连通的</strong></p><p>若u，v互相可达，则称u，v是<strong>双向连通的</strong>或者说是<strong>强连通的</strong></p><p><u>注意，u、v可以不直接相连，而是“可达”</u></p><p>若对D中任何两顶点，至少有一顶点可从另一顶点可达，即任何两定点间都是弱连通的，则称D是<strong>单向连通图</strong>或<strong>弱连通图</strong></p><p>若D中任何两顶点都是双向连通的，则称D是<strong>双向连通图或强连通图</strong></p><p>有向图G的子图是强连通图但不包含在更大的强连通子图中，可称为G的<strong>强连通分支</strong></p><p>PS.</p><ul><li>双向连通关系是<em>D</em>的顶点集<em>V</em>上的一个等价关系</li><li>双向分支<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\iff</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟺</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>强连通分支</li><li><em>Ｄ</em>强连通<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\iff</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟺</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span><em>Ｄ</em>恰有一个强连通分支。</li></ul><h4 id="定义６：距离">定义６：距离</h4><p>设<em>u</em>，<em>v</em>∈<em>V</em>(<em>G</em>)，若<em>u</em>，<em>v</em>连通，则称最短(<em>u</em>，<em>v</em>)路的长为<em>u</em>，<em>v</em>的<strong>距离</strong>，记为d(u，v)<br>当u，v不连通时，认为u，v的距离是∞</p><h4 id="定理２">定理２</h4><p>一个图<em>G</em>是二分图<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext></mrow><annotation encoding="application/x-tex">\iff</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟺</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span></span></span>G中不含奇圈</p><p><img src="6.png" alt=""></p><p><strong>当<em>G</em>有<em>n</em>个顶点<em>ω</em>个分支时，怎样让边最多？</strong><br><em>G</em>的一个连通分支是<em>n</em>－<em>ω</em>＋1个点的完全图，其余<em>ω</em>－1个连通分支均是弧立点。</p><ul><li>当<em>ω</em>＝1时，<em>ε</em>≥<em>n</em>－1。即<em>n</em>个顶点的连通图至少有<em>n</em>－1条边</li><li>具有<em>n</em>个顶点，<em>n</em>－1条边的连通图称为<strong>最小连通图</strong>。</li></ul><h4 id="定义7：割点与割边">定义7：割点与割边</h4><p>有时删除一个顶点和它所关联的边，就产生带有比原图更多的连通分支的子图。把这样的<strong>顶点</strong>称为<strong>割点</strong>（或节点）。从连通图里删除割点，就产生不连通的子图。<br>同理，把一旦删除就产生带有比原图更多的连通分支的子图的<strong>边</strong>称为<strong>割边或桥</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绘制：path基础与贝塞尔函数</title>
      <link href="/2021/10/04/%E7%BB%98%E5%88%B6%EF%BC%9Apath%E4%B8%8E%E8%B4%9D%E5%A1%9E%E5%B0%94/"/>
      <url>/2021/10/04/%E7%BB%98%E5%88%B6%EF%BC%9Apath%E4%B8%8E%E8%B4%9D%E5%A1%9E%E5%B0%94/</url>
      
        <content type="html"><![CDATA[<h1>以flutter为例的path基础讲解：</h1><h3 id="路径形成的基础方法：">路径形成的基础方法：</h3><p>图源<a href="https://juejin.cn/book/6844733827265331214">Flutter 绘制指南 - 妙笔生花</a>，下面案例同，</p><p><img src="%E7%BB%98%E5%88%B6%EF%BC%9A0.awebp" alt=""></p><ul><li><p><code>moveTo</code>：将画笔起点移动到给定坐标</p></li><li><p><code>relativeMoveTo</code>：相对当前画笔起点坐标将画笔起点进行dx与dy的平移</p></li><li><p><code>lineTo</code>：从画笔起始点画直线到给定坐标</p></li><li><p><code>relativeLineTo</code>：在起始点与相对起始点dx、dy距离的点之间画线</p></li></ul><p><strong>flutter的圆弧都是以矩形的内接椭圆截取绘制而来的，所以下面的画弧的方法会传入Rect</strong></p><ul><li><code>arcTo</code>:</li></ul><p><img src="1.awebp" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//rect: 圆弧所在矩形</span><br><span class="line">//startAngle : 开始弧度</span><br><span class="line">//sweepAngle : 需要绘制的弧度大小</span><br><span class="line">//forceMoveTo : 如果“forceMoveTo”参数为false，则添加一条直线段和一条弧段。</span><br><span class="line">//如果“forceMoveTo”参数为true，则启动一个新的子路径，其中包含一个弧段。</span><br><span class="line"></span><br><span class="line">Path path = Path();</span><br><span class="line">Paint paint = Paint()</span><br><span class="line">  ..color = Colors.purpleAccent</span><br><span class="line">  ..strokeWidth = 2</span><br><span class="line">  ..style = PaintingStyle.stroke;</span><br><span class="line"></span><br><span class="line">// 绘制左侧</span><br><span class="line">//首先绘制外接矩形</span><br><span class="line">var rect = Rect.fromCenter(center: Offset(0, 0), width: 160, height: 100);</span><br><span class="line">path.lineTo(30, 30);//画线，注意向下方向是y轴</span><br><span class="line">//forcemoveTo为true，使得绘制圆弧时起始点强制moveTo圆弧的起始点</span><br><span class="line">path..arcTo(rect, 0, pi * 1.5, true);//注意用的是级联</span><br><span class="line">canvas.drawPath(path, paint);</span><br><span class="line"></span><br><span class="line">path.reset();</span><br><span class="line">//移动画布</span><br><span class="line">canvas.translate(200, 0);</span><br><span class="line">// 绘制右侧</span><br><span class="line">path.lineTo(30, 30);</span><br><span class="line">//forcemoveTo为true，使得绘制圆弧时起始点强制lineTo圆弧的起始点</span><br><span class="line">path..arcTo(rect, 0, pi * 1.5, false);</span><br><span class="line">canvas.drawPath(path, paint);</span><br></pre></td></tr></table></figure><ul><li><p><code>arcToPoint</code>：当想要画圆弧到某个点，用 <code>arcToPoint</code> 会非常方便</p><ul><li>接受一个<code>点位入参 Offset</code>，是圆弧的终点，可指定<code>圆弧半径radius、是否使用优弧、是否顺时针</code>。</li><li>半径默认是0，即：不指定半径的话就会绘制直线，如果半径小于直径的一半则会以该半径做圆进行弧度近似（拼接）</li></ul></li><li><p><code>relativeArcToPoint</code>：与<code>arcToPoint</code>不同之处在于传入的offset代表dx、dy。</p></li><li><p><code>conicTo</code>：<code>conicTo</code> 接收五个参数用于绘制圆锥曲线，包括<code>椭圆线</code>、<code>抛物线</code>和<code>双曲线</code></p><ul><li>其中前两参是<code>控制点</code>，三四参是<code>结束点</code>，第五参是权重。(下图已画出辅助点)<ul><li>当<code>权重&lt; 1</code> 时，圆锥曲线是<code>椭圆线</code>,如下左图</li><li>当<code>权重= 1</code> 时，圆锥曲线是<code>抛物线</code>,如下中图</li><li>当<code>权重&gt; 1</code> 时，圆锥曲线是<code>双曲线</code>,如下右图</li></ul></li></ul></li></ul><p><img src="2.awebp" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">final Offset p1 = Offset(80, -100);</span><br><span class="line">final Offset p2 = Offset(160, 0);</span><br><span class="line"></span><br><span class="line">Path path = Path();</span><br><span class="line">Paint paint = Paint()</span><br><span class="line">  ..color = Colors.purpleAccent</span><br><span class="line">  ..strokeWidth = 2</span><br><span class="line">  ..style = PaintingStyle.stroke;</span><br><span class="line"></span><br><span class="line">//抛物线</span><br><span class="line">path.conicTo(p1.dx, p1.dy, p2.dx, p2.dy, 1);</span><br><span class="line">canvas.drawPath(path, paint);</span><br><span class="line"></span><br><span class="line">path.reset();</span><br><span class="line">canvas.translate(-180, 0);</span><br><span class="line">//椭圆线</span><br><span class="line">path.conicTo(p1.dx, p1.dy, p2.dx, p2.dy, 0.5);</span><br><span class="line">canvas.drawPath(path, paint);</span><br><span class="line"></span><br><span class="line">path.reset();</span><br><span class="line">canvas.translate(180+180.0, 0);</span><br><span class="line">//双曲线</span><br><span class="line">path.conicTo(p1.dx, p1.dy, p2.dx, p2.dy, 1.5);</span><br><span class="line">canvas.drawPath(path, paint);</span><br></pre></td></tr></table></figure><ul><li><code>relativeConicTo</code>:使用相对位置来加入圆锥曲线路径，参数含义与上面一致。</li></ul><p>以上大部分引自小册，有些注释是我自己加的。大佬讲的挺好（<s>绝对不是因为我平时根本不用才去cv的</s>）</p><h3 id="PS">PS.</h3><p>安卓原生也可以画弧但不能画双曲线，画弧的策略与flutter一样，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addArc</span> <span class="params">(RectF oval, <span class="keyword">float</span> startAngle, <span class="keyword">float</span> sweepAngle)</span></span></span><br></pre></td></tr></table></figure><p>float startAngle：开始的角度，X轴正方向为0度，float sweepAngel：持续的度数；而且好像只能顺时针画</p><h3 id="贝塞尔函数：">贝塞尔函数：</h3><p>感谢<a href="https://qijian.blog.csdn.net/">启舰</a>大佬的动图</p><h4 id="一阶：">一阶：</h4><p>虽然一阶贝塞尔函数没啥用，但它是认识高阶贝塞尔函数的基础。</p><p>对于一阶贝赛尔曲线，我们可以理解为在起始点和终点形成的这条直线上，匀速移动的点取值形成的轨迹，其实与这条直线没有区别。</p><h4 id="二阶：">二阶：</h4><p><img src="3.png" alt=""></p><p>有一说一不研究真的看不明白，好在发现了大佬做的动画:</p><p><img src="4" alt=""></p><p>可以发现二阶其实就是两个一阶拼成的直线中又取了一次一阶贝塞尔函数</p><p><code>quadraticBezierTo</code>：假设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">P_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是起始点，那么前两个参数代表<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，后两个参数代表<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">P_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><p><code>relativeQuadraticBezierTo</code>：同上，不过参数都代表dx、dy</p><h4 id="三阶：">三阶：</h4><p><img src="5" alt=""></p><p>其实就是贝塞尔曲线逐渐降阶的过程。</p><p><code>cubicTo</code>：三阶，两个控制点，一个结束点</p><p><code>relativeCubicTo</code>：同理</p><p>PS.安卓除了方法名外，参数并无不同。</p><h1>贝塞尔函数的使用</h1><h3 id="作用：">作用：</h3><p>一般来说最常见的应用是关于绘制时的优化（抗锯齿）以及波纹的相关动画。</p><h4 id="绘制优化：">绘制优化：</h4><p>如果按照最基础的点动成线：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (event.getAction())&#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class="line">            mPath.moveTo(event.getX(), event.getY());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            mPath.lineTo(event.getX(), event.getY());</span><br><span class="line">            postInvalidate();<span class="comment">//界面重绘</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意path只有调用<code>canvas.paint</code>的时候才会进行绘制嗷</p><p>至于效果嘛，感觉锯齿比较严重，而且特别生硬：</p><img src="6.png" style="zoom:50%;" /><p>然后，我的策略是很简单的暴力贝塞尔：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> x,y;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">switch</span> (event.getAction())&#123;</span><br><span class="line">         <span class="keyword">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class="line">             x = event.getX();</span><br><span class="line">             y = event.getY();</span><br><span class="line">             mPath.moveTo(event.getX(), event.getY());</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">             mPath.quadTo(x,y,event.getX(), event.getY());</span><br><span class="line">             x = event.getX();</span><br><span class="line">             y = event.getY();</span><br><span class="line">             postInvalidate();</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">default</span>:</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>效果嘛，emmm，怎么感觉好像没起作用？</p><p>那我来告诉你答案，就是没起作用！</p><img src="7.png" style="zoom:50%;" /><p>问题出在哪呢？可以看看启舰大佬给的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> mPreX,mPreY;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (event.getAction())&#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:&#123;</span><br><span class="line">            mPath.moveTo(event.getX(),event.getY());</span><br><span class="line">            mPreX = event.getX();</span><br><span class="line">            mPreY = event.getY();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:&#123;</span><br><span class="line">            <span class="keyword">float</span> endX = (mPreX+event.getX())/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">float</span> endY = (mPreY+event.getY())/<span class="number">2</span>;</span><br><span class="line">            mPath.quadTo(mPreX,mPreY,endX,endY);</span><br><span class="line">            mPreX = event.getX();</span><br><span class="line">            mPreY =event.getY();</span><br><span class="line">            invalidate();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br></pre></td></tr></table></figure><p>区别就在于<code>MotionEvent.ACTION_MOVE</code>上：首先将上次的坐标与这次的坐标取了中点，作为结束点，用上次坐标作为控制点进行路径添加，一个<code>quadTo</code>的终点，是下一个<code>quadTo</code>的起始点。所以这里的起始点，就是上一个线段的中间点。那么显然我给的代码起始点和控制点是一个点，那不就是一阶贝塞尔函数嘛，那摆明了就是直线相连，能有啥作用。</p><p>图示：</p><img src="9.png" style="zoom:50%;" /><p>下面是更正后的效果图，要好很多：</p><img src="8.png" style="zoom:50%;" /><h5 id="PS：">PS：</h5><p>flutter写起来相对麻烦一些，因为无法直接调用监听，所以就需要手势监听获取坐标</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">GestureDetector(</span><br><span class="line">                onPanDown: (details) &#123;</span><br><span class="line">                    <span class="comment">//准备当前图层的画笔颜色和粗细</span></span><br><span class="line">                    imageDrawLogic.isClear = <span class="keyword">false</span>;</span><br><span class="line">                    imageDrawLogic.points[imageDrawLogic.curFrame].color</span><br><span class="line">                    = imageDrawLogic.selectedColor;</span><br><span class="line">                    imageDrawLogic.points[imageDrawLogic.curFrame].strokeWidth</span><br><span class="line">                    = imageDrawLogic.strokeWidth;</span><br><span class="line">                &#125;,</span><br><span class="line">                onPanUpdate: (details) &#123;</span><br><span class="line">                    <span class="comment">//收集点坐标</span></span><br><span class="line">                    <span class="comment">//因为是放在StatefulBuilder(builder: (context, state) &#123;&#125;</span></span><br><span class="line">                    <span class="comment">//内使用的，所以用state刷新状态</span></span><br><span class="line">                    RenderBox referenceBox = context.findRenderObject() <span class="keyword">as</span> RenderBox;</span><br><span class="line">                    Offset localPosition =</span><br><span class="line">                    referenceBox.globalToLocal(details.globalPosition);</span><br><span class="line">                    state(() &#123;                  imageDrawLogic.points[imageDrawLogic.curFrame].points.add(localPosition);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;,</span><br><span class="line">                onPanEnd: (details) &#123;</span><br><span class="line">                  <span class="comment">//准备下次绘制</span></span><br><span class="line">                    imageDrawLogic.points.add(</span><br><span class="line">                        Point(</span><br><span class="line">                            imageDrawLogic.selectedColor,</span><br><span class="line">                            imageDrawLogic.strokeWidth,</span><br><span class="line">                            []</span><br><span class="line">                        ));</span><br><span class="line">                    imageDrawLogic.curFrame++;</span><br><span class="line">                &#125;,</span><br><span class="line">              )</span><br></pre></td></tr></table></figure><p>然后在绘制时，</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">  <span class="keyword">final</span> Path linePath = <span class="keyword">new</span> Path() ;</span><br><span class="line">  <span class="keyword">final</span> rect = Rect.fromLTRB(<span class="number">0.0</span>, <span class="number">0.0</span>, size.width, size.height);</span><br><span class="line">  canvas.clipRect(rect);<span class="comment">//裁剪画布</span></span><br><span class="line">  <span class="keyword">if</span> (isClear || points.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; points.length; i++) &#123;</span><br><span class="line">      </span><br><span class="line">    _linePaint..color = points[i].color;</span><br><span class="line">    _linePaint..strokeWidth = points[i].strokeWidth;</span><br><span class="line">    <span class="built_in">List</span>&lt;Offset&gt; curPoints = points[i].points;</span><br><span class="line">    <span class="keyword">if</span> (curPoints.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="built_in">double</span> x = curPoints[<span class="number">0</span>].dx<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">double</span> y = curPoints[<span class="number">0</span>].dy<span class="number">-1</span>;</span><br><span class="line">    linePath.moveTo(x, y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; curPoints.length; i++) &#123;</span><br><span class="line">      <span class="built_in">double</span> endX = (x + curPoints[i].dx)/<span class="number">2</span>;</span><br><span class="line">      <span class="built_in">double</span> endY = (y + curPoints[i].dy)/<span class="number">2</span>;</span><br><span class="line">      linePath.quadraticBezierTo(x,y,endX,endY);</span><br><span class="line">       x = curPoints[i].dx;</span><br><span class="line">       y = curPoints[i].dy;</span><br><span class="line">    &#125;</span><br><span class="line">    canvas.drawPath(linePath, _linePaint);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="水波纹效果">水波纹效果</h4><p>（坑）</p>]]></content>
      
      
      <categories>
          
          <category> 绘制原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> 绘制 </tag>
            
            <tag> 安卓原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绘制：安卓原生（二、Region）</title>
      <link href="/2021/10/03/%E7%BB%98%E5%88%B6%EF%BC%9A%E5%AE%89%E5%8D%93%E5%8E%9F%E7%94%9FRegion/"/>
      <url>/2021/10/03/%E7%BB%98%E5%88%B6%EF%BC%9A%E5%AE%89%E5%8D%93%E5%8E%9F%E7%94%9FRegion/</url>
      
        <content type="html"><![CDATA[<h1>安卓原生Region：</h1><p>今天没有讲flutter，貌似，flutter并没有与之对应的内容。</p><p>Region，中文意思即区域的意思，它表示的是canvas图层上的某一块封闭的区域。</p><p>你可能会问，既然已经有canvas，为什么还要有region？</p><p>这是因为，安卓原生的组件无法像flutter那样，通过使用GestureDetector或者GestureRecognizer对组件进行包裹从而非常方便的实现控件的手势控制，而是要进行实例化与调用，那么在自绘组件的时候如何实现手势控制呢？这其实就是region的功能之一了。</p><h2 id="首先放上基本上所有的API：">首先放上基本上所有的API：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**构造方法*/</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Region</span><span class="params">()</span>  <span class="comment">//创建一个空的区域</span></span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="title">Region</span><span class="params">(Region region)</span> <span class="comment">//拷贝一个region的范围</span></span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="title">Region</span><span class="params">(Rect r)</span>  <span class="comment">//创建一个矩形的区域</span></span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="title">Region</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> <span class="comment">//创建一个矩形的区域</span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"><span class="comment">/**一系列set方法，这些set方法，和上面构造方法形式差不多*/</span></span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(Region region)</span> </span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(Rect r)</span> </span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span></span><br><span class="line"><span class="function"> <span class="comment">/*往一个Region中添加一个Path只有这种方法，参数clip代表这个整个Region的区域，在在里面裁剪出path范围的区域*/</span></span></span><br><span class="line"><span class="function"> <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setPath</span><span class="params">(Path path, Region clip)</span> <span class="comment">//用指定的Path和裁剪范围构建一个区域</span></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"><span class="comment">/**几个判断方法*/</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;<span class="comment">//判断该区域是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">isRect</span><span class="params">()</span></span>; <span class="comment">//是否是一个矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">isComplex</span><span class="params">()</span></span>;<span class="comment">//是否是多个矩阵组合</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**一系列的getBound方法，返回一个Region的边界*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Rect <span class="title">getBounds</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getBounds</span><span class="params">(Rect r)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Path <span class="title">getBoundaryPath</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getBoundaryPath</span><span class="params">(Path path)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**一系列的判断是否包含某点 和是否相交*/</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;<span class="comment">//是否包含某点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">quickContains</span><span class="params">(Rect r)</span><span class="comment">//是否包含某矩阵</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">quickContains</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right,<span class="keyword">int</span> bottom)</span><span class="comment">//是否包含某矩阵</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">quickReject</span><span class="params">(Rect r)</span> <span class="comment">//是否没和该矩阵相交</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">quickReject</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span></span>; <span class="comment">//是否没和该矩阵相交</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">quickReject</span><span class="params">(Region rgn)</span></span>;  <span class="comment">//是否没和该矩阵相交</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**几个平移变换的方法*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">translate</span><span class="params">(<span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">translate</span><span class="params">(<span class="keyword">int</span> dx, <span class="keyword">int</span> dy, Region dst)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scale</span><span class="params">(<span class="keyword">float</span> scale)</span> <span class="comment">//hide</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">scale</span><span class="params">(<span class="keyword">float</span> scale, Region dst)</span></span>;<span class="comment">//hide</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**一系列组合的方法*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">union</span><span class="params">(Rect r)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">op</span><span class="params">(Rect r, Op op)</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">op</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom, Op op)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">op</span><span class="params">(Region region, Op op)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">op</span><span class="params">(Rect rect, Region region, Op op)</span> </span></span><br></pre></td></tr></table></figure><p>说明一下最后的一组关于Region组合的方式。组合即当前的Region和另外的一个Region组合，可以用不同的Op方式来进行组合,Op是一个枚举，定义在Region类中:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Op</span> </span>&#123;</span><br><span class="line">        DIFFERENCE(<span class="number">0</span>), <span class="comment">//最终区域为region1 与 region2不同的区域</span></span><br><span class="line">        INTERSECT(<span class="number">1</span>), <span class="comment">// 最终区域为region1 与 region2相交的区域</span></span><br><span class="line">        UNION(<span class="number">2</span>),      <span class="comment">//最终区域为region1 与 region2组合一起的区域</span></span><br><span class="line">        XOR(<span class="number">3</span>),        <span class="comment">//最终区域为region1 与 region2相交之外的区域</span></span><br><span class="line">        REVERSE_DIFFERENCE(<span class="number">4</span>), <span class="comment">//最终区域为region2 与 region1不同的区域</span></span><br><span class="line">        REPLACE(<span class="number">5</span>); <span class="comment">//最终区域为为region2的区域</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>另外还有矩形集枚举区域——RegionIterator类</p><p>对于特定的区域，我们都可以使用多个矩形来表示其大致形状。事实上，如果矩形足够小，一定数量的矩形就能够精确表示区域的形状，<strong>也就是说，一定数量的矩形所合成的形状，也可以代表区域的形状</strong>。RegionIterator类，实现了获取组成区域的矩形集的功能，其实RegionIterator类非常简单，总共就两个函数，一个构造函数和一个获取下一个矩形的函数；<br>RegionIterator(Region region) //根据区域构建对应的矩形集<br>boolean next(Rect r) //获取下一个矩形，结果保存在参数Rect r 中</p><p>由于在Canvas中没有直接绘制Region的函数，我们想要绘制一个区域，就只能通过利用RegionIterator构造矩形集来逼近的显示区域。用法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawRegion</span><span class="params">(Canvas canvas,Region rgn,Paint paint)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">RegionIterator iter = <span class="keyword">new</span> RegionIterator(rgn);</span><br><span class="line">Rect r = <span class="keyword">new</span> Rect();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (iter.next(r)) &#123;</span><br><span class="line">  canvas.drawRect(r, paint);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各个API具体使用在<a href="https://blog.csdn.net/coderinchina">zhoushenxian</a>的这篇<a href="https://blog.csdn.net/coderinchina/article/details/74975180">博客</a>里有详细案例，但我感觉有点太过啰嗦。</p><h2 id="下面讲几个我认为比较重要的方法：">下面讲几个我认为比较重要的方法：</h2><h3 id="使用SetPath（）构造不规则区域">使用SetPath（）构造不规则区域</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">setPath</span> <span class="params">(Path path, Region clip)</span></span></span><br></pre></td></tr></table></figure><p>参数说明：<br>Path path：用来构造的区域的路径<br>Region clip：与前面的path所构成的路径取交集，并将两交集设置为最终的区域</p><p>由于路径有很多种构造方法，而且可以轻意构造出非矩形的路径，这就摆脱了前面的构造函数只能构造矩形区域的限制。但这里有个问题是要指定另一个区域来取共同的交集，当然如果想显示路径构造的区域，Region clip参数可以传一个比Path范围大的多的区域，取完交集之后，当然是Path参数所对应的区域喽。机智的孩子。</p><p>下面，先构造一个椭圆路径，然后在SetPath时，传进去一个比Path小的矩形区域，让它们两个取交集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRegionView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyRegionView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(context);</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"><span class="comment">//初始化Paint</span></span><br><span class="line">Paint paint = <span class="keyword">new</span> Paint();</span><br><span class="line">paint.setColor(Color.RED);</span><br><span class="line">paint.setStyle(Style.FILL);</span><br><span class="line">paint.setStrokeWidth(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//构造一个椭圆路径</span></span><br><span class="line">Path ovalPath = <span class="keyword">new</span> Path();</span><br><span class="line">RectF rect =  <span class="keyword">new</span> RectF(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">500</span>);  </span><br><span class="line">ovalPath.addOval(rect, Direction.CCW);</span><br><span class="line"><span class="comment">//SetPath时,传入一个比椭圆区域小的矩形区域,让其取交集</span></span><br><span class="line">Region rgn = <span class="keyword">new</span> Region();</span><br><span class="line">rgn.setPath(ovalPath,<span class="keyword">new</span>  Region(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">200</span>));</span><br><span class="line"><span class="comment">//画出路径</span></span><br><span class="line">drawRegion(canvas, rgn, paint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawRegion</span><span class="params">(Canvas canvas,Region rgn,Paint paint)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">RegionIterator iter = <span class="keyword">new</span> RegionIterator(rgn);</span><br><span class="line">Rect r = <span class="keyword">new</span> Rect();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (iter.next(r)) &#123;</span><br><span class="line">  canvas.drawRect(r, paint);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="0.png" alt=""></p><p>上面的例子其实可以看出region的一个重要作用是对图形的截取，因为有些时候我们并不能通过绘制的方法完美地绘制出我们想要的图形。但其实也有一定的局限性，就是一次只能有一个路径与region取交集。多个路径的话，先把路径合并不就完了嘛。</p><h3 id="区域的合并、交叉等操作">区域的合并、交叉等操作</h3><p>无论是区域还是矩形，都会涉及到与另一个区域的一些操作，比如取交集、取并集等，涉及到的函数有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">union</span><span class="params">(Rect r)</span>   </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">op</span><span class="params">(Rect r, Op op)</span> </span>&#123;  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">op</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom, Op op)</span>   </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">op</span><span class="params">(Region region, Op op)</span>   </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">op</span><span class="params">(Rect rect, Region region, Op op)</span>   </span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Rect;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Region;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint.Style;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Region.Op;</span><br><span class="line"><span class="keyword">import</span> android.graphics.RegionIterator;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRegionView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyRegionView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造两个矩形</span></span><br><span class="line">Rect rect1 = <span class="keyword">new</span> Rect(<span class="number">100</span>,<span class="number">100</span>,<span class="number">400</span>,<span class="number">200</span>);</span><br><span class="line">Rect rect2 = <span class="keyword">new</span> Rect(<span class="number">200</span>,<span class="number">0</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造一个画笔，画出矩形轮廓</span></span><br><span class="line">Paint paint = <span class="keyword">new</span> Paint();</span><br><span class="line">paint.setColor(Color.RED);</span><br><span class="line">paint.setStyle(Style.STROKE);</span><br><span class="line">paint.setStrokeWidth(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">canvas.drawRect(rect1, paint);</span><br><span class="line">canvas.drawRect(rect2, paint);</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造两个Region</span></span><br><span class="line">Region region = <span class="keyword">new</span> Region(rect1);</span><br><span class="line">Region region2= <span class="keyword">new</span> Region(rect2);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//取两个区域的交集</span></span><br><span class="line">region.op(region2, Op.INTERSECT);</span><br><span class="line"></span><br><span class="line"><span class="comment">//再构造一个画笔,填充Region操作结果</span></span><br><span class="line">Paint paint_fill = <span class="keyword">new</span> Paint();</span><br><span class="line">paint_fill.setColor(Color.GREEN);</span><br><span class="line">paint_fill.setStyle(Style.FILL);</span><br><span class="line">drawRegion(canvas, region, paint_fill);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawRegion</span><span class="params">(Canvas canvas,Region rgn,Paint paint)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">RegionIterator iter = <span class="keyword">new</span> RegionIterator(rgn);</span><br><span class="line">Rect r = <span class="keyword">new</span> Rect();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (iter.next(r)) &#123;</span><br><span class="line">  canvas.drawRect(r, paint);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是取了交集，其余情况如图：</p><p><img src="1.png" alt=""></p><h3 id="判断包含与相交：">判断包含与相交：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**一系列的判断是否包含某点 和是否相交*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;<span class="comment">//是否包含某点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">quickContains</span><span class="params">(Rect r)</span><span class="comment">//是否包含某矩阵</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">quickContains</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right,<span class="keyword">int</span> bottom)</span><span class="comment">//是否包含某矩阵</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">quickReject</span><span class="params">(Rect r)</span> <span class="comment">//是否和该矩阵不相交</span></span></span><br><span class="line"><span class="function"><span class="comment">//官方注释：</span></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="function"> * Return true if the region is empty, or if the specified rectangle does</span></span></span><br><span class="line"><span class="comment"><span class="function"> * not intersect the region. Returning false is not a guarantee that they</span></span></span><br><span class="line"><span class="comment"><span class="function"> * intersect, but returning true is a guarantee that they do not.</span></span></span><br><span class="line"><span class="comment"><span class="function"> */</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">quickReject</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span></span>; <span class="comment">//是否和该矩阵不相交</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">quickReject</span><span class="params">(Region rgn)</span></span>;  <span class="comment">//是否和该矩阵不相交</span></span><br></pre></td></tr></table></figure><p>判断触点是否在某region内：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> downX = (<span class="keyword">int</span>)event.getX();</span><br><span class="line">    <span class="keyword">int</span> downY = (<span class="keyword">int</span>)event.getY();</span><br><span class="line">    <span class="keyword">boolean</span> isContain =  region.contains(downX,downY);</span><br><span class="line">    <span class="keyword">if</span>(isContain)&#123;</span><br><span class="line">        Toast.makeText(getContext(),<span class="string">&quot;这个点在这个区域内&quot;</span>,Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        Toast.makeText(getContext(),<span class="string">&quot;这个点不在这个区域内&quot;</span>,Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="个人的一些理解：">个人的一些理解：</h2><p>region的使用，给了开发者更高的灵活性，毕竟canvas只有一个，将组件的各个部分利用region解耦，能够在开发中与开发后带来更大的便利。这里类似于将flutter的组件组合与绘制融合起来的一种策略，细细想来也确实是显得更加便利，毕竟region既拥有类似于canvas的“绘制”能力，也拥有类似于GestureDetector的点击监听，虽然没有其他手势监听，确实显得有些遗憾，但region的任务更偏向于绘制，也显得更加内聚了。</p><p>参考文章：<a href="https://blog.csdn.net/harvic880925/article/details/39056701">自定义控件之绘图篇（三）：区域（Range）</a></p>]]></content>
      
      
      <categories>
          
          <category> 绘制原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 绘制 </tag>
            
            <tag> 安卓原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JetBrains系列常用快捷键汇总</title>
      <link href="/2021/10/02/JetBrains%E7%B3%BB%E5%88%97%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%B1%87%E6%80%BB/"/>
      <url>/2021/10/02/JetBrains%E7%B3%BB%E5%88%97%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1>引言：</h1><p>作为一名资深咸鱼，美观强大的编译器一直是我的追求，所谓工欲善其事必先利其器，当然了，也要学会高效地使用编译器，才能讲编译器的优点最大化。磨刀不误砍柴工，下面汇总一些JetBrains家IDE的常用快捷键与设置。</p><h1>快捷键汇总：</h1><p>首先，在网上看到有人推荐Key Promoter X 这款插件，当你使用鼠标和菜单项时，这个插件会提示相应的快捷键。我刚安装，先试试水。</p><p><img src="0.png" alt=""></p><h2 id="导航类快捷键">导航类快捷键</h2><h3 id="Ctrl-Tab（-Tab）-——-切换标签页（特别好用）"><code>Ctrl + Tab</code>（<code>^ Tab</code>） —— 切换标签页（特别好用）</h3><p>快速切换打开的文件。按住 Ctrl 键不释放时可以在打开文件列表中逐个移动，释放时会切换到相应文件。</p><h3 id="Ctrl-B-（⌘-B）-——-跳转到声明-实现"><code>Ctrl + B</code> （<code>⌘ B</code>） —— 跳转到声明/实现</h3><p>在某一方法处按此快捷键，会跳转到该方法的声明处，例如，对应的接口。相反，按下 <code>Ctrl + Alt + B</code>（<code>⌘ ⌥ B</code>）不会跳转到接口，而是跳转到接口的实现，很多时候这能节省不少时间。</p><h3 id="按两下-Shift（⇧⇧）-——-搜索任意内容">按两下 <code>Shift</code>（<code>⇧⇧</code>） —— 搜索任意内容</h3><p>快速点按两下 shift，快速搜索项目中的任意内容，包括文件、行动、类在内的任意内容。</p><h3 id="Ctrl-N-（⌘-O）-——-查找类"><code>Ctrl + N</code> （<code>⌘ O</code>） —— 查找类</h3><p>如果已知需要查找的是类，那么就不必使用上面的搜索任意内容的快捷键。按下此快捷键后，开始输入类名。不必输入完整的类名，只需输入前面的部分，或者仅输入类名中的大写字母，还可以输入星号（<code>*</code>）表示通配符。</p><h3 id="Ctrl-Shift-N-（⌘-⇧-O）-——-查找文件"><code>Ctrl + Shift + N</code> （<code>⌘ ⇧ O</code>） —— 查找文件</h3><p>需要查找文本文件或配置文件时，这个快捷键很方便。</p><h3 id="Ctrl-Shift-T-（⇧-⌘-T）-——-跳转至测试"><code>Ctrl + Shift + T</code> （<code>⇧ ⌘ T</code>） —— 跳转至测试</h3><p>如果你对测试轻度上瘾，那么这个快捷键可以让你在测试和实现间快速跳转。当在测试处按此快捷键，会跳转至相应实现。反之，在实现处按此快捷键，则会跳转至相应测试。如果测试不存在，会根据你选择的测试框架，自动创建相应的测试类。</p><h3 id="Ctrl-Alt-F7-（⌘-⌥-F7）-——-显示用例"><code>Ctrl + Alt + F7</code> （<code>⌘ ⌥ F7</code>） —— 显示用例</h3><p>在弹出对话框中显示当前方法、类、变量的所有用例，让你可以迅速跳转。</p><h3 id="Ctrl-F12-（⌘-F12）-——-结构视图"><code>Ctrl + F12</code> （<code>⌘ F12</code>） —— 结构视图</h3><p>显示属性、方法列表，方便快捷地大致了解当前类的用途。</p><h3 id="Ctrl-G-（⌘-L）-——-跳转至行"><code>Ctrl + G</code> （<code>⌘ L</code>） —— 跳转至行</h3><p>有同事问你第 45 行的代码是做什么的时，这个方便的快捷键让你可以迅速跳转至相应代码。</p><h3 id="F2-（F2）-——-跳转至报错-警告"><code>F2</code> （<code>F2</code>） —— 跳转至报错/警告</h3><p>IntelliJ 有报错或警告时（编辑区域右上角会显示一个小的状态图标），按下 F2 会跳转至下一处错误/警告。这个快捷键有助于你保持状态图标常绿。</p><h2 id="编辑类快捷键">编辑类快捷键</h2><p>除了导航，我们也希望能在编写代码时提速。以下快捷键有助于我们达成这一点。</p><h3 id="Ctrl-W-（⌥-Up）-——-扩展选择区域（特别好用）"><code>Ctrl + W</code> （<code>⌥ Up</code>） —— 扩展选择区域（特别好用）</h3><p>这是我个人最常用的快捷键。不需要用鼠标选择文本了，只需跳转至代码中的某个元素，然后按下此快捷键。它会智能地扩展选择区域，从单词到语句，从语句到代码块，从代码块到方法，以此类推。在你想要提取方法时尤为便捷。<code>Ctrl + Shift + W</code> （<code>⌥ Down</code>）则会缩小选择区域。</p><h3 id="Alt-Enter-（⌥-Enter）-——-显示意图（特别好用）"><code>Alt + Enter</code> （<code>⌥ Enter</code>） —— 显示意图（特别好用）</h3><p>修正引入，运行测试，优化引入，等等。如果你的代码有问题，让这个快捷键来修复。如果你的代码没问题，这个快捷键能让你的代码变得更好。</p><h3 id="Ctrl-Shift-Enter-（⌘-⇧-Enter）-——-补全语句"><code>Ctrl + Shift + Enter</code> （<code>⌘ ⇧ Enter</code>） —— 补全语句</h3><p>就我的经验而言，这是一个被严重低估的快捷键。少个括号？少了行尾的分号？不管光标是不是在行尾，按下此快捷键便可补全必要的字符。</p><h3 id="Ctrl-D-（⌘-D）-——-复制当前行（特别好用）"><code>Ctrl + D</code> （<code>⌘ D</code>） —— 复制当前行（特别好用）</h3><p>根据我的经验，还是有许多人使用鼠标选中当前行，复制，然后粘贴。相比之下，<code>Ctrl + D</code> （<code>⌘ D</code>）可以节约很多时间：按下之后就可以新增一行，内容和当前行一样。如果当前选中了多行，这个快捷键会重复整个代码块。</p><h3 id="Ctrl-Y-（⌘-⌫）-——-删除当前行"><code>Ctrl + Y</code> （<code>⌘ ⌫</code>） —— 删除当前行</h3><p>类似 <code>Ctrl + D</code> （<code>⌘ D</code>），这个快捷键可以删除代码行。</p><h3 id="Ctrl-（⌘-）-——-注释当前行"><code>Ctrl + /</code> （<code>⌘ /</code>） —— 注释当前行</h3><p>不管光标在当前行的什么位置，只需按下这个快捷键就可以注释掉当前行。我个人从不用这个快捷键注释代码，不过有时候我会用这个快捷键切换某段代码是否运行。不过，记得永远不要提交注释掉的代码。</p><h3 id="Ctrl-Shift-——块注释"><code>Ctrl + Shift + /</code>  ——块注释 (/**/)</h3><h3 id="Ctrl-Alt-L-——格式化代码（特别好用）"><code>Ctrl + Alt + L</code> ——格式化代码（特别好用）</h3><p>一般来说，写的代码格式不整齐统一，这个很有用</p><h3 id="Ctrl-z-Ctrl-x-Ctrl-c-Ctrl-v-Ctrl-F-老生常谈，不提了">Ctrl + z , Ctrl + x ,Ctrl + c ,Ctrl + v ,Ctrl + F 老生常谈，不提了</h3><h2 id="重构快捷键">重构快捷键</h2><p>IntelliJ 的最大强项之一就是充裕到过剩的重构机会。尽管重构代码的机会很多，实践中 90% 的情况下，用到的重构快捷键是我下面列出的。</p><h3 id="Ctrl-Alt-M-（⌘-⌥-M）-——-提取方法"><code>Ctrl + Alt + M</code> （<code>⌘ ⌥ M</code>） —— 提取方法</h3><p>选中一段代码（比如使用之前提到的 <code>Ctrl + W</code> / <code>⌥ Up</code> 快捷键），接着按下 <code>Ctrl + Alt + M</code> （<code>⌘ ⌥ M</code>），便可将选中的代码提取为新方法或匿名函数表达式。</p><h3 id="Shift-F6-（⇧-F6）-——-重命名（特别好用）"><code>Shift + F6</code> （<code>⇧ F6</code>） —— 重命名（特别好用）</h3><p>不管是方法、变量，还是类，按下 <code>Shift + F6</code> （⇧ F6）便可将当前选中元素在所有代码中的用例一次性替换。不过要小心点，IntelliJ 的默认配置有点激进，同时也会替换文本中的用例，这常常不合你意。按下两次 <code>Shift + F6</code> （⇧ F6）将提供重命名选项，让你可以定制设定。我建议只替换代码，关闭文本替换选项。</p><h3 id="Ctrl-Alt-V-（⌘-⌥-V）-——-提取变量"><code>Ctrl + Alt + V</code> （<code>⌘ ⌥ V</code>） —— 提取变量</h3><p>同样，使用 <code>Ctrl + W</code> / <code>⌥ Up</code> 选中一段代码，接着按下 <code>Ctrl + Alt + V</code> （<code>⌘ ⌥ V</code>），便可创建一个新变量，变量的类型常常是正确的，命名常常是合理的。将表达式传入方法或类时，赋值给一个变量常常可以增强可读性，此时这个快捷键很方便。</p><h2 id="调试类快捷键（用的不是太多）">调试类快捷键（用的不是太多）</h2><table><thead><tr><th>按键</th><th>作用</th></tr></thead><tbody><tr><td>F8</td><td>跳过</td></tr><tr><td>F7</td><td>步进</td></tr><tr><td>Shift + F8</td><td>跳出</td></tr><tr><td>Alt + F8</td><td>表达式求值</td></tr><tr><td>F9</td><td>恢复程序</td></tr><tr><td>Ctrl + F8</td><td>切断断点</td></tr><tr><td>Ctrl+Shift+F8</td><td>查看断点</td></tr></tbody></table><h2 id="以上选自Erik-Pragt的原创以及kumfo">以上选自<a href="https://nextfe.com/jetbrains-ide-shortcuts/">Erik Pragt的原创</a>以及<a href="https://segmentfault.com/a/1190000007206543">kumfo</a></h2><h1>IDE设置汇总：</h1><h2 id="导包设置：">导包设置：</h2><ul><li>Add unambiguous imports on the fly：快速添加明确的导入。</li><li>Optimize imports on the fly：快速优化导入，优化的意思即自动帮助删除无用的导入。</li></ul><p><img src="1.png" alt=""></p><h2 id="配置Log颜色：">配置Log颜色：</h2><p><img src="2.png" alt=""></p><p>看个人喜好即可</p><h2 id="缩写设置：（活动模板）">缩写设置：（活动模板）</h2><p>Android Studio 中默认提供了很多非常方便的活动模板(Live Templates)，例如，我们输入 sout 后按 enter 键， Android Studio 会自动帮我们写入 System.out.println();</p><p><img src="3.png" alt=""></p><p>可以看到IDE已经帮我们定义好了很多，想添加自定义的模板直接点击右上角加号就可以了。</p><h3 id="常用的比如：">常用的比如：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//psvm:</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sout</span></span><br><span class="line">System.out.println();</span><br><span class="line"><span class="comment">//souf</span></span><br><span class="line">System.out.printf(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fori</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ; i++) &#123;&#125;</span><br><span class="line"><span class="comment">//itar</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Array.length; i++) &#123; <span class="keyword">int</span> i1 = Array[i];&#125;<span class="comment">//遍历数组</span></span><br><span class="line"><span class="comment">//foreach</span></span><br><span class="line"><span class="keyword">for</span> (:) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//psf</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  </span><br><span class="line"><span class="comment">//psfi</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>  </span><br><span class="line"><span class="comment">//psfs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String  </span><br></pre></td></tr></table></figure><p>等等等等</p><h1>虚拟机等大文件迁出：</h1><p>android studio产生的.gradle .android .androidStudio缓存默认存在C盘，时间长了之后会占用大量空间，建议提前进行迁移。</p><p>由于我已经迁出过了，就不再演示了</p><p>放链接：</p><p><a href="https://blog.csdn.net/SmallWalnutBG/article/details/107463138?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EOPENSEARCH%7Edefault-7.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EOPENSEARCH%7Edefault-7.no_search_link">https://blog.csdn.net/SmallWalnutBG/article/details/107463138?utm_medium=distribute.pc_relevant.none-task-blog-2~default~OPENSEARCH~default-7.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~OPENSEARCH~default-7.no_search_link</a></p><h1>PS. 如果C盘满了又不敢乱删怎么办：</h1><h2 id="1-删除一些东西：">1.删除一些东西：</h2><p>这个删除当然不是乱删，建议下载spaceSniffer对C盘空间进行分析删掉一些安装包或者临时文件什么的。</p><p><img src="4.png" alt=""></p><h2 id="2-扩容C盘：">2.扩容C盘：</h2><p>常规方法是无法扩容C盘的，但可以借助一些软件</p><p>我使用的DiskGenius，免费而且功能强大，我就用它给我的C盘扩容过</p><p><img src="5.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 实用知识(杂谈) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载与汇总 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绘制：安卓原生与flutter(一、引言与绘图)</title>
      <link href="/2021/10/01/%E7%BB%98%E5%88%B6%EF%BC%9A%E5%AE%89%E5%8D%93%E5%8E%9F%E7%94%9F%E4%B8%8Eflutter/"/>
      <url>/2021/10/01/%E7%BB%98%E5%88%B6%EF%BC%9A%E5%AE%89%E5%8D%93%E5%8E%9F%E7%94%9F%E4%B8%8Eflutter/</url>
      
        <content type="html"><![CDATA[<h1>先放上 <a href="https://blog.csdn.net/harvic880925/article/details/50995268">安卓大佬</a> 和<a href="https://juejin.cn/book/6844733827265331214/section/6844733827214999565">flutter大佬</a>镇楼</h1><h1>引言：我为什么要学绘制</h1><p>​       其实对于flutter来说，自绘的需求并不是很大，尤其是组件的自绘，一方面，flutter的组件就是依据MaterialDesign风格绘制的，本来就很好看，另一方面，一些复杂的组件也完全可以通过组件组装的方式进行构建，比自绘要省事。但这并不意味着flutter没有自绘组件的需求，一些高度自定义的组件（比如QQ编辑图片的时候能在图片上贴表情或者加文字时显示的文字框以及文字输入框的拖动缩放旋转等等等等）还是需要我们去自绘组件的。</p><p>​       不过对于安卓原生嘛，嘿嘿，就开始离谱了。原生组件UI也不算。。特别丑，但是相较于flutter来说，高下立判。一方面，原生组件最好还是不要直接拿来用，还是建议进行封装。另一方面，原生的动画效果做的并不比flutter好，而且组件也比较单一，都留给了自绘很大的发展空间（<s>给开发者增加了工作量</s>）。</p><p><img src="1.jpg" alt=""></p><p>以下内容选自<a href="https://juejin.cn/user/149189281194766">张风捷特烈</a>的小册<a href="https://juejin.cn/book/6844733827265331214/section">Flutter 绘制指南 - 妙笔生花</a>，我觉得说的挺好：</p><h5 id="为什么要学绘制">为什么要学绘制</h5><p>打开你的<code>手机</code>、<code>电脑</code>、<code>平板</code>，你可视的所有的一切在本质上都是<code>依靠绘制实现</code>的。每个平台都会有自身的绘制体系，平台自身的控件很多时候可能<code>并不能满足</code>设计的需求，也有很多控件是和项目<code>特点高度契合</code>的，所以平台会<code>暴露出绘制的接口</code>给开发者，让开发者对界面元素拥有 <code>高度的可定制性</code>。</p><p>但凡<code>可定制性</code>的东西，都意味着一定的<code>门槛</code>，这可能会让很多人<code>望而却步</code>，所以绘制这个技能总是被开发者所冷漠，毕竟抱着<code>又不是不能用</code>心态的人不在少数，而且伟大的先驱者们也为我们留下来<code>丰富的资源</code>，这些轮子，装上就能跑，岂不美哉，干嘛费心费力地自己画？</p><p>但不要忘记: 用别人的东西，是<code>被约束</code>的一方，用起来束手束脚。而且别人的代码不一定能百分百符合你的需求，很多时候还是需要自己改改，如果你不会绘制的知识，那将非常痛苦。如果<code>找不到</code>能用的轮子，自己的绘制技能又这么蹩脚，那就只能去问，或花钱找别人实现。为什么要让自己混这么惨呢，<code>何不食肉糜？</code></p><p>有轮子和自己会绘制并不冲突，就像<code>有钱花</code>和<code>拥有挣钱的能力</code>一样，两者可以很好地<code>相辅相成</code>，一旦你懂了，就能更好的去用，甚至去修改轮子来满足自身的设计需求，或发现轮子中的缺点加以改正，<code>使用者和创造者</code>的身份并不冲突。</p><p><strong>总而言之，没有剑，和有剑不用，是两码事</strong>。</p><h1>绘图基础介绍与对比</h1><h2 id="原生：Paint-Canvas-即画笔与画布">原生：Paint&amp;Canvas,即画笔与画布</h2><h3 id="代码结构与调用：如何让IDE知道你是在进行绘制呢？绘制完如何使用呢？">代码结构与调用：如何让IDE知道你是在进行绘制呢？绘制完如何使用呢？</h3><p>其实方法很简单，让你的类继承view类并重写OnDraw（）函数，OnDraw（）函数中进行画笔画板配置并调用画板对象即可完成绘制。结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">Context m_context;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(context);</span><br><span class="line">m_context=context;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重写OnDraw（）函数，在每次重绘时自主实现绘图</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"><span class="comment">//设置画笔</span></span><br><span class="line">Paint paint=<span class="keyword">new</span> Paint();</span><br><span class="line">        </span><br><span class="line">paint.set....</span><br><span class="line">        <span class="comment">//画</span></span><br><span class="line">        canvas.draw....</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用：大佬在他的博客里使用的是通过类文件进行添加，个人不是很喜欢，但还是放上：</p><p>默认的XML改成FrameLayout布局，布局代码如下：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/root&quot;</span>//注意这里，在类文件中会用到</span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;com.example.try_paint_blog.MainActivity&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>类文件如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        </span><br><span class="line">      setContentView(R.layout.activity_main);</span><br><span class="line">      FrameLayout root=(FrameLayout)findViewById(R.id.root);<span class="comment">//对应xml中的framelayout</span></span><br><span class="line">      root.addView(<span class="keyword">new</span> MyView(MainActivity.<span class="keyword">this</span>));<span class="comment">//添加</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        我为什么不喜欢这么用呢？个人认为，除非必要（指需要动态添加或者删除的组件），静态组件就应该在xml文件中进行声明，避免因视图层与逻辑层耦合过高而导致后期维护困难。举个例子，当你重写一个界面，却发现总有个xml中没定义过的组件出现在UI里，那八成是在逻辑层里动态添加的。但如果万一你动态添加的这个组件是透明的，那你就会发现自己的UI排布非常奇怪又找不出原因。</p><p>bb了半天，写一下我推荐的xml中的写法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;com.example.try_paint_blog.MainActivity&quot;</span> &gt;</span> </span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;<span class="name">com.zwn.view.MyView</span>       //用路径去进行定义</span></span><br><span class="line"><span class="tag">         <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span>             </span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Paint的基本设置函数：">Paint的基本设置函数：</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">paint.setAntiAlias(<span class="keyword">true</span>);<span class="comment">//抗锯齿功能</span></span><br><span class="line">paint.setColor(Color.RED);  <span class="comment">//设置画笔颜色    </span></span><br><span class="line">paint.setStyle(Style.FILL);<span class="comment">//设置填充样式</span></span><br><span class="line">paint.setStrokeWidth(<span class="number">30</span>);<span class="comment">//设置画笔宽度</span></span><br><span class="line">paint.setShadowLayer(<span class="number">10</span>, <span class="number">15</span>, <span class="number">15</span>, Color.GREEN);<span class="comment">//设置阴影</span></span><br></pre></td></tr></table></figure><p>另外，对于填充样式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setStyle</span> <span class="params">(Paint.Style style)</span>     <span class="comment">//设置填充样式</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Paint.Style.FILL             <span class="comment">//：填充内部</span></span></span><br><span class="line"><span class="function">Paint.Style.FILL_AND_STROKE  <span class="comment">//：填充内部和描边</span></span></span><br><span class="line"><span class="function">Paint.Style.STROKE           <span class="comment">//：仅描边</span></span></span><br></pre></td></tr></table></figure><p>FILL与FILL_AND_STROKE在<strong>画笔比较细时</strong>没什么区别，描边一般搭配画笔宽度使用</p><p>对于阴影：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setShadowLayer</span> <span class="params">(<span class="keyword">float</span> radius, <span class="keyword">float</span> dx, <span class="keyword">float</span> dy, <span class="keyword">int</span> color)</span>    <span class="comment">//添加阴影</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//参数：</span></span></span><br><span class="line"><span class="function"><span class="comment">//radius:阴影的倾斜度</span></span></span><br><span class="line"><span class="function"><span class="comment">//dx:水平位移</span></span></span><br><span class="line"><span class="function"><span class="comment">//dy:垂直位移</span></span></span><br></pre></td></tr></table></figure><h3 id="然后是Canvas的设置：">然后是Canvas的设置：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">canvas.drawColor(Color.BLUE);</span><br><span class="line">canvas.drawRGB(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>);  <span class="comment">//这两个功能一样，都是用来设置背景颜色的。</span></span><br><span class="line">canvas.drawRect();</span><br><span class="line">canvas.drawRoundRect();</span><br><span class="line">canvas.drawCircle();</span><br><span class="line">canvas.drawPath();</span><br><span class="line">canvas.drawLine();</span><br><span class="line">canvas.drawArc();</span><br><span class="line">canvas.drawOval();</span><br><span class="line">canvas.drawPoint();</span><br><span class="line">canvas.drawPoints();</span><br><span class="line">canvas.drawText();</span><br><span class="line">canvas.drawTextOnPath();</span><br><span class="line">canvas.drawBitmap();</span><br></pre></td></tr></table></figure><p><a href="https://juejin.cn/post/7011904646348275725#heading-0">canvas的各个绘制函数</a><br><a href="https://juejin.cn/post/7012646921470738469">canvas的变换</a></p><h3 id="基本几何图形：">基本几何图形：</h3><h4 id="啊不想写了，这部分太基础了，一般用到的情况也不太多，直接看大佬写的吧。">啊不想写了，这部分太基础了，一般用到的情况也不太多，直接看大佬写的吧。</h4><p><a href="https://blog.csdn.net/harvic880925/article/details/38875149">概述及基本几何图形绘制</a><br><a href="https://blog.csdn.net/harvic880925/article/details/38926877">路径及文字</a></p><p>感觉最基本的还是个人抽象思维与逻辑思维。</p><p><img src="2.jpg" alt=""></p><h2 id="flutter-：Paint-Canvas-Path-即画笔、画布与路径，">flutter ：Paint&amp;Canvas&amp;Path,即画笔、画布与路径，</h2><h3 id="同样地，代码结构：">同样地，代码结构：</h3><p>与原生不同的是，flutter在开发过程中并不存在动态添加的问题。想要调用自定义的组件，只需要调用一个CustomPaint（），在其painter类中对绘制的逻辑进行设置即可。样例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Paper</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      color: Colors.white,</span><br><span class="line">      child: CustomPaint( <span class="comment">// 使用CustomPaint</span></span><br><span class="line">        painter: PaperPainter(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaperPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">    <span class="comment">// 创建画笔</span></span><br><span class="line">    <span class="keyword">final</span> Paint paint = Paint();</span><br><span class="line">    <span class="comment">// 绘制圆</span></span><br><span class="line">    canvas.drawCircle(Offset(<span class="number">100</span>, <span class="number">100</span>), <span class="number">10</span>, paint);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(CustomPainter oldDelegate) =&gt; <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中painter类继承了CustomPainter，并重写paint方法用于绘制，其实与原生一样的逻辑。最终painter参数传给CustomPaint进行绘制。</p><h3 id="Canvas-方法一览">Canvas 方法一览 :</h3><blockquote><p>Canvas 的方法非常多，但大多数顾名思义。其中画布<code>状态</code>、<code>变换</code>将是最难的地方。</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">----&gt;[画布状态]----</span><br><span class="line"><span class="keyword">void</span> save()</span><br><span class="line"><span class="keyword">void</span> saveLayer(Rect bounds, Paint paint)</span><br><span class="line"><span class="keyword">void</span> restore()</span><br><span class="line"><span class="built_in">int</span> getSaveCount()</span><br><span class="line"></span><br><span class="line">----&gt;[画布变换]----</span><br><span class="line"><span class="keyword">void</span> skew(<span class="built_in">double</span> sx, <span class="built_in">double</span> sy)</span><br><span class="line"><span class="keyword">void</span> rotate(<span class="built_in">double</span> radians)</span><br><span class="line"><span class="keyword">void</span> scale(<span class="built_in">double</span> sx, [<span class="built_in">double</span> sy])</span><br><span class="line"><span class="keyword">void</span> translate(<span class="built_in">double</span> dx, <span class="built_in">double</span> dy)</span><br><span class="line"><span class="keyword">void</span> transform(Float64List matrix4)</span><br><span class="line"></span><br><span class="line">----&gt;[画布裁剪]----</span><br><span class="line"><span class="keyword">void</span> clipRect(Rect rect, &#123; ClipOp clipOp = ClipOp.intersect, <span class="built_in">bool</span> doAntiAlias = <span class="keyword">true</span> &#125;)</span><br><span class="line"><span class="keyword">void</span> clipRRect(RRect rrect, &#123;<span class="built_in">bool</span> doAntiAlias = <span class="keyword">true</span>&#125;) </span><br><span class="line"><span class="keyword">void</span> clipPath(Path path, &#123;<span class="built_in">bool</span> doAntiAlias = <span class="keyword">true</span>&#125;)</span><br><span class="line"></span><br><span class="line">----&gt;[画布绘制--点相关]----</span><br><span class="line"><span class="keyword">void</span> drawPoints(PointMode pointMode, <span class="built_in">List</span>&lt;Offset&gt; points, Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawRawPoints(PointMode pointMode, Float32List points, Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawLine(Offset p1, Offset p2, Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawVertices(Vertices vertices, BlendMode blendMode, Paint paint)</span><br><span class="line"></span><br><span class="line">----&gt;[画布绘制--矩形相关]----</span><br><span class="line"><span class="keyword">void</span> drawRect(Rect rect, Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawRRect(RRect rrect, Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawDRRect(RRect outer, RRect inner, Paint paint)</span><br><span class="line">  </span><br><span class="line">----&gt;[画布绘制--类圆相关]----</span><br><span class="line"><span class="keyword">void</span> drawOval(Rect rect, Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawCircle(Offset c, <span class="built_in">double</span> radius, Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawArc(Rect rect, <span class="built_in">double</span> startAngle, <span class="built_in">double</span> sweepAngle, <span class="built_in">bool</span> useCenter, Paint paint)</span><br><span class="line"></span><br><span class="line">----&gt;[画布绘制--图片相关]----</span><br><span class="line"><span class="keyword">void</span> drawImage(Image image, Offset p, Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawImageRect(Image image, Rect src, Rect dst, Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawImageNine(Image image, Rect center, Rect dst, Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawAtlas(Image atlas,<span class="built_in">List</span>&lt;RSTransform&gt; transforms,<span class="built_in">List</span>&lt;Rect&gt; rects,<span class="built_in">List</span>&lt;Color&gt; colors,BlendMode blendMode,Rect cullRect,Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawRawAtlas(Image atlas,Float32List rstTransforms,Float32List rects,Int32List colors,BlendMode blendMode,Rect cullRect,Paint paint)</span><br><span class="line">  </span><br><span class="line">----&gt;[画布绘制--文字]----</span><br><span class="line"><span class="keyword">void</span> drawParagraph(Paragraph paragraph, Offset offset)</span><br><span class="line">  </span><br><span class="line">----&gt;[画布绘制--其他]----</span><br><span class="line"><span class="keyword">void</span> drawColor(Color color, BlendMode blendMode)</span><br><span class="line"><span class="keyword">void</span> drawPath(Path path, Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawPaint(Paint paint)</span><br><span class="line"><span class="keyword">void</span> drawShadow(Path path, Color color, <span class="built_in">double</span> elevation, <span class="built_in">bool</span> transparentOccluder)</span><br><span class="line">    <span class="comment">//第一个参数时绘制一个图形 Path，第二个是设置阴影颜色，第三个为阴影范围，最后一个阴影范围是否填充满</span></span><br><span class="line"><span class="keyword">void</span> drawPicture(Image image)</span><br></pre></td></tr></table></figure><hr><h3 id="Paint-属性一览">Paint 属性一览 :</h3><blockquote><p>粗略数了一下大概有 14 个属性: 这些都是之后需要详细介绍的<br>下面代码是简单使用 Paint 和 Canvas 绘制的斜线：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">isAntiAlias(抗锯齿) color(颜色)          blendMode(混合模式)     style(画笔样式)</span><br><span class="line">strokeWidth(线宽)   strokeCap(线帽类型)  strokeJoin(线接类型)    strokeMiterLimit(斜接限制)  </span><br><span class="line">maskFilter(遮罩滤镜) shader(着色器)      colorFilter(颜色滤镜)    imageFilter(图片滤镜)</span><br><span class="line">invertColors(是否反色)                  filterQuality(滤镜质量)</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">  <span class="keyword">final</span> Paint paint = Paint(); <span class="comment">// 创建画笔</span></span><br><span class="line">  paint</span><br><span class="line">    ..color = Colors.blue <span class="comment">//颜色</span></span><br><span class="line">    ..strokeWidth = <span class="number">4</span> <span class="comment">//线宽</span></span><br><span class="line">    ..style = PaintingStyle.stroke; <span class="comment">//模式--线型</span></span><br><span class="line">  canvas.drawLine(Offset(<span class="number">0</span>, <span class="number">0</span>), Offset(<span class="number">100</span>, <span class="number">100</span>), paint);  <span class="comment">//绘制线</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Path-方法一览">Path 方法一览 :</h3><blockquote><p>可以说 <code>Canvas</code> 的一个 <code>drawPath</code> 方法，为绘制打开了一扇通往无限可能的大门。<br>通过 Path 可以完成非常多的效果，Path 的这些方法将在 <code>[Path篇]</code> 进行详细阐述。</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">----&gt;[路径绝对移动]----</span><br><span class="line"><span class="keyword">void</span> moveTo(<span class="built_in">double</span> x, <span class="built_in">double</span> y)</span><br><span class="line"><span class="keyword">void</span> lineTo(<span class="built_in">double</span> x, <span class="built_in">double</span> y)</span><br><span class="line"><span class="keyword">void</span> quadraticBezierTo(<span class="built_in">double</span> x1, <span class="built_in">double</span> y1, <span class="built_in">double</span> x2, <span class="built_in">double</span> y2)</span><br><span class="line"><span class="keyword">void</span> cubicTo(<span class="built_in">double</span> x1, <span class="built_in">double</span> y1, <span class="built_in">double</span> x2, <span class="built_in">double</span> y2, <span class="built_in">double</span> x3, <span class="built_in">double</span> y3)</span><br><span class="line"><span class="keyword">void</span> conicTo(<span class="built_in">double</span> x1, <span class="built_in">double</span> y1, <span class="built_in">double</span> x2, <span class="built_in">double</span> y2, <span class="built_in">double</span> w)</span><br><span class="line"><span class="keyword">void</span> arcTo(Rect rect, <span class="built_in">double</span> startAngle, <span class="built_in">double</span> sweepAngle, <span class="built_in">bool</span> forceMoveTo)</span><br><span class="line"><span class="keyword">void</span> arcToPoint(Offset arcEnd, &#123;Radius radius = Radius.zero, <span class="built_in">double</span> rotation = <span class="number">0.0</span>, <span class="built_in">bool</span> largeArc = <span class="keyword">false</span>, <span class="built_in">bool</span> clockwise = <span class="keyword">true</span>,&#125;)</span><br><span class="line"></span><br><span class="line">----&gt;[路径相对移动]----</span><br><span class="line"><span class="keyword">void</span> relativeMoveTo(<span class="built_in">double</span> dx, <span class="built_in">double</span> dy)</span><br><span class="line"><span class="keyword">void</span> relativeLineTo(<span class="built_in">double</span> dx, <span class="built_in">double</span> dy)</span><br><span class="line"><span class="keyword">void</span> relativeQuadraticBezierTo(<span class="built_in">double</span> x1, <span class="built_in">double</span> y1, <span class="built_in">double</span> x2, <span class="built_in">double</span> y2)</span><br><span class="line"><span class="keyword">void</span> relativeCubicTo(<span class="built_in">double</span> x1, <span class="built_in">double</span> y1, <span class="built_in">double</span> x2, <span class="built_in">double</span> y2, <span class="built_in">double</span> x3, <span class="built_in">double</span> y3)</span><br><span class="line"><span class="keyword">void</span> relativeConicTo(<span class="built_in">double</span> x1, <span class="built_in">double</span> y1, <span class="built_in">double</span> x2, <span class="built_in">double</span> y2, <span class="built_in">double</span> w)</span><br><span class="line"><span class="keyword">void</span> relativeArcToPoint(Offset arcEndDelta, &#123; Radius radius = Radius.zero, <span class="built_in">double</span> rotation = <span class="number">0.0</span>, <span class="built_in">bool</span> largeArc = <span class="keyword">false</span>, <span class="built_in">bool</span> clockwise = <span class="keyword">true</span>, &#125;)</span><br><span class="line"></span><br><span class="line">----&gt;[路径添加]----</span><br><span class="line"><span class="keyword">void</span> addRect(Rect rect)</span><br><span class="line"><span class="keyword">void</span> addRRect(RRect rrect)</span><br><span class="line"><span class="keyword">void</span> addOval(Rect oval)</span><br><span class="line"><span class="keyword">void</span> addArc(Rect oval, <span class="built_in">double</span> startAngle, <span class="built_in">double</span> sweepAngle)</span><br><span class="line"><span class="keyword">void</span> addPolygon(<span class="built_in">List</span>&lt;Offset&gt; points, <span class="built_in">bool</span> close)</span><br><span class="line"><span class="keyword">void</span> addPath(Path path, Offset offset, &#123;Float64List matrix4&#125;)</span><br><span class="line"><span class="keyword">void</span> extendWithPath(Path path, Offset offset, &#123;Float64List matrix4&#125;)</span><br><span class="line"></span><br><span class="line">----&gt;[路径操作]----</span><br><span class="line"><span class="keyword">void</span> close()</span><br><span class="line"><span class="keyword">void</span> reset()</span><br><span class="line"><span class="built_in">bool</span> contains(Offset point)</span><br><span class="line">Path shift(Offset offset)</span><br><span class="line">Path transform(Float64List matrix4)</span><br><span class="line">Rect getBounds()   </span><br><span class="line"><span class="keyword">set</span> fillType(PathFillType value)</span><br><span class="line"><span class="keyword">static</span> Path combine(PathOperation operation, Path path1, Path path2)</span><br><span class="line">PathMetrics computeMetrics(&#123;<span class="built_in">bool</span> forceClosed = <span class="keyword">false</span>&#125;)</span><br></pre></td></tr></table></figure><p><strong>以上dart代码均引自https://juejin.cn/book/6844733827265331214/section/6844733827214999565</strong></p><p>​        粗略对比，其实flutter的绘制逻辑跟原生基本是一模一样，flutter在paint的属性上要多一点，不过一般来说其实用到的也就是跟原生一样的那几个。不过flutter的滤镜不出意外是一层封装，因为安卓原生也能通过矩阵变换实现滤镜效果，就是有点费头发（雾）。</p><p>​        不过呢，flutter的canvas的drawShadow方法还是很有趣的，这大概也从侧面说明了flutter组件中广泛存在的阴影的最基本绘制方法。而原生canvas.drawBitmap()与flutter的canvas.drawPicture(Picture picture)是相对应的，但原生的bitmap速度理论上是比较快的，而flutter使用的是image作为参数而不是file或者Uint8List，其性能尚未可知。</p><p>​        另外，flutter显然对Path类更加上心，相对于原生，flutter考虑到了绘制的灵活性，为绘制添加了通过相对位置添加路径的方法，使得在组合类组件中，使用flutter开发更加简单，不过还是因需求而异。</p><p>​       <s>而且有级联语法糖</s></p><p>​      又，canvas的变换是要经常用到的，主要是为了避免绘制出界以及画布方向的问题。但是呢，matrix4或者说矩阵变换相关的问题，显然是非人类简单能理解的，并不建议使用。</p>]]></content>
      
      
      <categories>
          
          <category> 绘制原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> 绘制 </tag>
            
            <tag> 安卓原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学线oj思路讲解</title>
      <link href="/2021/09/30/%E5%AD%A6%E7%BA%BFoj%E6%80%9D%E8%B7%AF%E8%AE%B2%E8%A7%A3/"/>
      <url>/2021/09/30/%E5%AD%A6%E7%BA%BFoj%E6%80%9D%E8%B7%AF%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<img src="0.jpg"  /><h3 id="学线，集合！-by-zwn">学线，集合！(by zwn)</h3><h4 id="难度：简单-tag：数组，计算，送分题">难度：简单  tag：数组，计算，送分题</h4><p>又到了一年一度的迎新季，由于学线福利待遇好，又有新办公室，导致今年迎新展台异常火爆。孔站火速召集学线同学前来帮忙。现在把前来帮忙的同学的位置标记在数轴上，每个同学的位置也存在数组 locate 当中。</p><p>孔站可以对 任何同学 执行下面两种操作之一（不限操作次数，0 次也可以）：</p><p>将任意一个同学向左或者右移动 2 个单位，代价为 0。<br>将任意一个同学向左或者右移动 1 个单位，代价为 1。</p><p>输入数组locate，返回将所有同学移动到同一位置（任意位置）上所需要的最小代价。</p><p><strong>最开始的时候，同一位置上也可能有两个或者更多的同学哦。</strong></p><p>输入样例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>输出样例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解释：第二个筹码移动到位置三的代价是 1，第一个筹码移动到位置三的代价是 0，总代价为 1。</span><br></pre></td></tr></table></figure><h4 id="思路：最基础的贪心思想">思路：最基础的贪心思想</h4><h5 id="贪心算法："><strong>贪心算法</strong>：</h5><p>（英语：greedy algorithm），又称<strong>贪婪算法</strong>，是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的<a href="https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95">算法</a>。比如在<a href="https://zh.wikipedia.org/wiki/%E6%97%85%E8%A1%8C%E6%8E%A8%E9%94%80%E5%91%98%E9%97%AE%E9%A2%98">旅行推销员问题</a>中，如果旅行员每次都选择最近的城市，那这就是一种贪心算法。</p><p><strong>贪心算法在有最优子结构的问题中尤为有效。最优子结构的意思是局部最优解能决定全局最优解。简单地说，问题能够分解成子问题来解决，子问题的最优解能递推到最终问题的最优解。</strong></p><p>贪心算法与<a href="https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92">动态规划</a>的不同在于它对每个子问题的解决方案都做出选择，不能回退。动态规划则会保存以前的运算结果，并根据以前的结果对当前进行选择，有回退功能。</p><p>贪心法可以解决一些<a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E4%BC%98%E5%8C%96">最优化</a>问题，如：求<a href="https://zh.wikipedia.org/wiki/%E5%9B%BE">图</a>中的<a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91">最小生成树</a>、求<a href="https://zh.wikipedia.org/wiki/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81">哈夫曼编码</a>……对于其他问题，**贪心法一般不能得到我们所要求的答案。一旦一个问题可以通过贪心法来解决，那么贪心法一般是解决这个问题的最好办法。**由于贪心法的高效性以及其所求得的答案比较接近最优结果，贪心法也可以用作辅助算法或者直接解决一些要求结果不特别精确的问题。在不同情况，选择最优的解，可能会导致辛普森悖论（Simpson’s Paradox），不一定出现最优的解。</p><h5 id="基本步骤："><strong>基本步骤：</strong></h5><p>步骤1：从某个初始解出发；<br>步骤2：采用迭代的过程，当可以向目标前进一步时，就根据局部最优策略，得到一部分解，缩小问题规模；<br>步骤3：将所有解综合起来。</p><h5 id="栗子："><strong>栗子</strong>：</h5><p><strong>找零钱问题</strong></p><p>假设你开了间小店，不能电子支付，钱柜里的货币只有 <strong>25 分、10 分、5 分和 1 分</strong>四种硬币，如果你是售货员且要找给客户 <strong>41 分钱的硬币</strong>，如何安排才能找给客人的钱既<strong>正确</strong>且硬币的个数又<strong>最少</strong>？</p><p>这里需要明确的几个点：<br>1.货币只有 25 分、10 分、5 分和 1 分四种硬币；<br>2.找给客户 41 分钱的硬币；<br>3.硬币最少化</p><p>（回顾一下上文贪婪法的基本步骤，1，2，3）</p><p>1.找给顾客sum_money=41分钱，可选择的是25 分、10 分、5 分和 1 分四种硬币。能找25分的，不找10分的原则，初次先找给顾客25分；<br>2.还差顾客sum_money=41-25=16。然后从25 分、10 分、5 分和 1 分四种硬币选取局部最优的给顾客，也就是选10分的，此时sum_money=16-10=6。重复迭代过程，还需要sum_money=6-5=1,sum_money=1-1=0。至此，顾客收到零钱，交易结束；<br>3.此时41分，分成了1个25，1个10，1个5，1个1，共四枚硬币。</p><p><strong>但是，我们再回顾一下第一个事例问题</strong></p><p>现在问题变了，还是需要找给顾客41分钱，现在的货币只有 25 分、20分、10 分、5 分和 1 分四种硬币；该怎么办？</p><p><strong>按照贪心算法的三个步骤：</strong></p><p>1.41分，局部最优化原则，先找给顾客25分；<br>2.此时，41-25=16分，还需要找给顾客10分，然后5分，然后1分；<br>3.最终，找给顾客一个25分，一个10分，一个5分，一个1分，共四枚硬币。</p><p><strong>是不是觉得哪里不太对，如果给他2个20分，加一个1分，三枚硬币就可以了呢？^_^;</strong></p><h5 id="对于本题：">对于本题：</h5><p>既然要贪心，即保证总开销值最小，那么对于每一次的移动选择，我们如果能选择开销为0的移动方式，就绝对不选择开销为1的移动方式。因此我们尽量通过方式一先将尽量多的同学移动到一起，在剩下的同学无法再通过方式一来移动到同一位置的时候，尽量使用最少次数的方式二来移动。</p><p>那么，不妨先将处于奇数位的同学移动到1的位置，偶数位都移动到2，在此过程中，0开销，然后再将两组同学合并，哪组同学人数少就移动到另一组里去，仍然是一步贪心。</p><h5 id="总结："><strong>总结：</strong></h5><p><strong>贪心算法的优缺点</strong></p><p><strong>优点：简单，高效，省去了为了找最优解可能需要穷举操作，通常作为其它算法的辅助算法来使用；</strong></p><p><strong>缺点：不从总体上考虑其它可能情况，每次选取局部最优解，不再进行回溯处理，所以很少情况下得到最优解。</strong></p><p>（样例选自<a href="https://zhuanlan.zhihu.com/p/53334049">小白算法</a>）</p><h3 id="吃果冻-by-zwn">吃果冻(by zwn)</h3><h4 id="难度：一般-tag：-String操作-流程控制-基本数据类型">难度：一般    tag： String操作 流程控制 基本数据类型</h4><p>众~~~所周知，ycjj最喜欢吃果冻。今天ycjj兴致勃勃地去超市买果冻，但现在超市售货机出现了乱码，老板表示只要ycjj能写程序找对乱码中“果冻”出现的次数就可以让ycjj免费吃相应数量的果冻，但ycjj表示：我都转专业了你竟然还让我写代码，你礼貌吗？于是找到了你来帮她写代码，并保证会根据代码的正确性给予一定的oj分数作为回报。现在有多行乱码（字符串），老板保证每行字符串不含空格，请你输出其中“果冻”这两个字出现的次数。</p><p>输入样例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a14&amp;&amp;果冻*guhj</span><br><span class="line">b果冻%hask果冻</span><br></pre></td></tr></table></figure><p>输出样例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="思路：">思路：</h4><p>老生常谈的一类题目，对于java来说特别友好，可用的方法有很多，但基本都绕不开split方法。</p><p>一种方法是采用字符串循环截取，对于输入的每一行，只要该行仍然包含目标字符串，就将该行字符串截取为从该行最前面的目标字符串的下一个字符到字符串最后的一个子串，同时次数++，如此依次处理各行字符串即可。</p><p>另一种方法可以采用字符串直接截取，对一行字符串，如果包含目标字符串，直接调用split将其划分为字符串数组，将数组长度减一即为包含的目标字符串个数。但有一个问题，如果目标字符串在开头或结尾，split划分出来的字符串数组中不会含有空字符串，导致再使用上述方法会导致答案错误。比如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;果冻啊果冻真好&quot;</span>;</span><br><span class="line">System.out.print(Arrays.toString(str.split(<span class="string">&quot;果冻&quot;</span>)));</span><br><span class="line"><span class="comment">//[&quot;啊&quot;,&quot;真好&quot;]</span></span><br></pre></td></tr></table></figure><p>那该如何解决呢？方法有很多，我最喜欢的方法是拼接无关子串，也就是在每行字符串的两端加上不相关的字符串，然后再split就好了。</p><h3 id="wngg爬八楼-by-zwn">wngg爬八楼(by zwn)</h3><p>众所周知，wngg住在八楼，每天都要爬好多楼梯，wngg发现自己每天要爬M阶楼梯，由于wngg腿长，wngg可以一次上两级楼梯，但累了也可以一次上一级，即每次上一级楼梯或者两级楼梯都可以。wngg突发奇想让你来算算他爬楼梯爬到M级一共有多少种方法。</p><p><strong>初始时wngg在第一级台阶，并且认为爬到第一级一共有0种方法。同样地也可以知道上到第二级有1种方法。</strong></p><p>Input</p><p>输入数据首先包含一个整数N，表示测试实例的个数，然后是N行数据，每行包含一个整数M（1&lt;=M&lt;=40）,表示楼梯的级数。</p><p>Output</p><p>对于每个测试实例，请输出不同走法的数量，共N行。</p><p>Sample Input 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>Sample Output 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>Sample Input 2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">8</span><br></pre></td></tr></table></figure><p>Sample Output 2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">21</span><br></pre></td></tr></table></figure><p>Hint</p><p>这是高中常见，算法入门，几乎每本编程书都会讲的一类问题。建议逆向思考，正向编程。</p><h4 id="思路：斐波那契数列">思路：斐波那契数列</h4><p>逆向思考，正向编程，循环就能解决。逆向思考，逆向编程，递归。</p><p>这道题想明白了就很简单，除了几个小坑。</p><p>都说了要<strong>逆向思考</strong>，指的是我们不要从第一级台阶考虑如何上到第n级台阶，而是要考虑，在第n级台阶的时候，我是从哪里上来的。那么很明显，只能从第n-1级或者n-2级台阶走到第n级台阶，也就是说，走到第n级台阶的方法就是走到第n-1级和n-2级台阶的方法的求和，那么一直递推到第1级台阶就很显然是一个斐波那契数列，但是如果要从第n级台阶开始递推，显然是一个递归问题，但是既然知道了是斐波那契数列，为啥不直接从第一级台阶开始用循环进行递加呢，难度瞬间降低，这就是所谓的正向编程。</p><p><strong>那么，坑在哪？</strong></p><p>首先，读题问题。wngg初始在第一级台阶，并且认为爬到第一级一共有0种方法。我都给你加粗了你都看不见这能赖谁。</p><p>其次，一个思维惯性的小坑。很多情况时往往是一些特殊情况我们没有考虑到位而导致无法AC。这道题，第一、第二级台阶是特殊情况需要单独处理，这是一般斐波那契数列的惯性思维，但也恰恰会忽略，其实第三极台阶也需要特殊处理。</p><p>走到第一级，方法有0种。第二级，方法有1种，第三级，方法有2种，从第四级开始才是斐波那契数列。（我的样例里面都直接写了你还做不对）</p><img src="1.jpg" style="zoom:140%;"  /><img src="2.jpg"  style="zoom:33%;" />]]></content>
      
      
      <categories>
          
          <category> 学线培训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学线培训 </tag>
            
            <tag> oj </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutterweb鼠标移入时改变card的阴影</title>
      <link href="/2021/09/29/flutterweb%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%85%A5%E6%97%B6%E6%94%B9%E5%8F%98card%E7%9A%84%E9%98%B4%E5%BD%B1/"/>
      <url>/2021/09/29/flutterweb%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%85%A5%E6%97%B6%E6%94%B9%E5%8F%98card%E7%9A%84%E9%98%B4%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<p>最近做flutter web正好有这个需求，就随手找了找，最终看上了inkwell，（inkwell不只是水波纹啊喂）<br>基本思路就是调用inkwell的onhover方法对鼠标事件进行监听，状态管理用的getx，代码：</p><h3 id="view：-也算是封装了个组件）">view：(也算是封装了个组件）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:get/get.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;logic.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicCard</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> basicCardLogic = Get.put(BasicCardLogic());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> ShapeBorder? shape;</span><br><span class="line">  <span class="keyword">final</span> EdgeInsetsGeometry? margin;</span><br><span class="line">  <span class="keyword">final</span> Widget? child;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  BasicCard(&#123;</span><br><span class="line">    <span class="keyword">this</span>.shape,</span><br><span class="line">    <span class="keyword">this</span>.margin,</span><br><span class="line">    <span class="keyword">this</span>.child</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="function">Widget <span class="title">build</span><span class="params">(BuildContext context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GetBuilder&lt;BasicCardLogic&gt;(</span><br><span class="line">        builder: (logic)=&gt;</span><br><span class="line">         InkWell(</span><br><span class="line">            onTap: ()&#123;&#125;,</span><br><span class="line">            child: Card(</span><br><span class="line">              elevation: basicCardLogic.elevation.value,</span><br><span class="line">              shape: shape,</span><br><span class="line">              margin: margin,</span><br><span class="line">              child: child,</span><br><span class="line">            ),</span><br><span class="line">            onHover: (value)&#123;</span><br><span class="line">              value ? basicCardLogic.cursorMoveIn() : basicCardLogic.cursorMoveOut();</span><br><span class="line">            &#125;,</span><br><span class="line">        ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="logic-binding">logic&amp;binding</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:get/get.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicCardLogic</span> <span class="keyword">extends</span> <span class="title">GetxController</span> </span>&#123;</span><br><span class="line">  RxDouble elevation = <span class="number">1.0</span>.obs;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">cursorMoveIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">    elevation.value = <span class="number">5.0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">cursorMoveOut</span><span class="params">()</span></span>&#123;</span><br><span class="line">    elevation.value = <span class="number">1.0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicCardBinding</span> <span class="keyword">extends</span> <span class="title">Bindings</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">dependencies</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Get.lazyPut(() =&gt; BasicCardLogic());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="踩坑：">踩坑：</h3><p>inkwell如果没写onTap方法的那个匿名函数会导致onHover无效。</p><h3 id="9-28更新">9.28更新:</h3><p>干掉了inkwell的自带阴影，另外提供了另一种实现方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> GetBuilder&lt;BasicCardLogic&gt;(</span><br><span class="line">    builder: (logic) =&gt;InkWell(</span><br><span class="line">      focusColor: MyTheme.transparent,</span><br><span class="line">      hoverColor: MyTheme.transparent,</span><br><span class="line">      highlightColor: MyTheme.transparent,</span><br><span class="line">      splashColor: MyTheme.transparent,</span><br><span class="line">      onTap: ()&#123;&#125;,</span><br><span class="line">      child: Container(</span><br><span class="line">          child: Card(</span><br><span class="line">            shape: <span class="keyword">const</span> RoundedRectangleBorder(borderRadius: BorderRadius.all(Radius.circular(<span class="number">8.0</span>))), <span class="comment">//设置圆角</span></span><br><span class="line">            elevation: basicCardLogic.elevation.value,</span><br><span class="line">            margin: margin,</span><br><span class="line">            child: child,</span><br><span class="line">          ),</span><br><span class="line">          <span class="comment">// decoration: BoxDecoration(</span></span><br><span class="line">          <span class="comment">//   borderRadius: BorderRadius.all(Radius.circular(8)),</span></span><br><span class="line">          <span class="comment">//   boxShadow: [</span></span><br><span class="line">          <span class="comment">//     BoxShadow(</span></span><br><span class="line">          <span class="comment">//       color: basicCardLogic.cursorIn.value ? Colors.black45 : Colors.black12,  //底色,阴影颜色</span></span><br><span class="line">          <span class="comment">//       offset: Offset(4, 4), //阴影位置,从什么位置开始</span></span><br><span class="line">          <span class="comment">//       blurRadius: 16,  // 阴影模糊层度</span></span><br><span class="line">          <span class="comment">//       spreadRadius: 0,  //阴影模糊大小</span></span><br><span class="line">          <span class="comment">//     )],</span></span><br><span class="line">          <span class="comment">// )</span></span><br><span class="line">      ),</span><br><span class="line">      onHover: (value)&#123;</span><br><span class="line">        value ? basicCardLogic.cursorMoveIn() : basicCardLogic.cursorMoveOut();</span><br><span class="line">      &#125;,</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-16更新">12.16更新:</h3><p>getBuilder有异常导致出现UI问题</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> InkWell(</span><br><span class="line">      <span class="comment">// focusColor: Colors.transparent,</span></span><br><span class="line">      <span class="comment">// hoverColor: Colors.transparent,</span></span><br><span class="line">      <span class="comment">// highlightColor: Colors.transparent,</span></span><br><span class="line">      <span class="comment">// splashColor: Colors.transparent,</span></span><br><span class="line">      onTap: ()&#123;&#125;,</span><br><span class="line">      child: Container(</span><br><span class="line">        child:Obx(()=&gt;Card(</span><br><span class="line">          shape: <span class="keyword">const</span> RoundedRectangleBorder(borderRadius: BorderRadius.all(Radius.circular(<span class="number">8.0</span>))), <span class="comment">//设置圆角</span></span><br><span class="line">          elevation: basicCardLogic.elevation.value,</span><br><span class="line">          margin: margin,</span><br><span class="line">          child: child,</span><br><span class="line">        ),)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// decoration: BoxDecoration(</span></span><br><span class="line">        <span class="comment">//   borderRadius: BorderRadius.all(Radius.circular(8)),</span></span><br><span class="line">        <span class="comment">//   boxShadow: [</span></span><br><span class="line">        <span class="comment">//     BoxShadow(</span></span><br><span class="line">        <span class="comment">//       color: basicCardLogic.cursorIn.value ? Colors.black45 : Colors.black12,  //底色,阴影颜色</span></span><br><span class="line">        <span class="comment">//       offset: Offset(4, 4), //阴影位置,从什么位置开始</span></span><br><span class="line">        <span class="comment">//       blurRadius: 16,  // 阴影模糊层度</span></span><br><span class="line">        <span class="comment">//       spreadRadius: 0,  //阴影模糊大小</span></span><br><span class="line">        <span class="comment">//     )],</span></span><br><span class="line">        <span class="comment">// )</span></span><br><span class="line">      ),</span><br><span class="line">      onHover: (value)&#123;</span><br><span class="line">        value ? basicCardLogic.cursorMoveIn() : basicCardLogic.cursorMoveOut();</span><br><span class="line">      &#125;,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-19更新：">12.19更新：</h3><p>发现如果一个界面中有多个<code>basicCard</code>，在鼠标移入时都会变色，（我不李姐）。理论上讲多个<code>baseCard</code>是多个不同的对象，他们的<code>logic</code>应该是各自独立的才对，但其表现出来的现象却让人觉得这几个logic是一样的。后期发现确实只有一个card响应了鼠标移入事件，但是所有的卡片也确实都变色了。于是更新，直接弃用了getx，改用了<code>StatefulWidget</code>。</p><p>又：只有<code>onTap</code>方法传入的时候<code>onHover</code>才有效，原因未知。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicCard</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> ShapeBorder? shape;</span><br><span class="line">  <span class="keyword">final</span> EdgeInsetsGeometry? margin;</span><br><span class="line">  <span class="keyword">final</span> Widget child;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">Function</span>() onTap;</span><br><span class="line"></span><br><span class="line">  BasicCard(&#123;</span><br><span class="line">    <span class="keyword">this</span>.shape,</span><br><span class="line">    <span class="keyword">this</span>.margin,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.child,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.onTap</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _BasicCardState createState() =&gt;_BasicCardState();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_BasicCardState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">BasicCard</span>&gt;</span>&#123;</span><br><span class="line">  Color cardColor = Colors.white;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> InkWell(</span><br><span class="line">        focusColor: Colors.transparent,</span><br><span class="line">        hoverColor: Colors.transparent,</span><br><span class="line">        highlightColor: Colors.transparent,</span><br><span class="line">        splashColor: Colors.transparent,</span><br><span class="line">        onTap: widget.onTap,</span><br><span class="line">        child: Container(</span><br><span class="line">          child:Card(</span><br><span class="line">            color: cardColor,</span><br><span class="line">            shape:widget.shape==<span class="keyword">null</span> ? RoundedRectangleBorder(</span><br><span class="line">                borderRadius: BorderRadius.all(Radius.circular(<span class="number">6.0</span>))):widget.shape, <span class="comment">//设置圆角</span></span><br><span class="line">            <span class="comment">// elevation: basicCardLogic.elevation.value,</span></span><br><span class="line">            margin: widget.margin,</span><br><span class="line">            child: widget.child,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        onHover: (value)&#123;</span><br><span class="line">          setState(() &#123;</span><br><span class="line">            cardColor = value ? Colors.blue : Colors.white;</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
